<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>findream&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-06T14:38:03.302Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>findream</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>switch结构逆向分析</title>
    <link href="http://yoursite.com/2017/11/06/switch%E7%BB%93%E6%9E%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/11/06/switch结构逆向分析/</id>
    <published>2017-11-06T09:02:11.000Z</published>
    <updated>2017-11-06T14:38:03.302Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>暑假看了看雪的知识库，偶然间看到这篇besterChen写的switch结构分析一文，甚喜之，原封不动的抄了下来，在此表示非常感谢。这是在暑假的word版经过复核及重新测试，发现原文许多反汇编代码与原先语句有出入，可能是现在编译器更加高级了。为了保证原文的统一和完整性，在此没有对原文代码进行修改，只是在后面进行了补充，形式为图片类型。随后也会附上关于本次的测试样本，在此立下个flag。以免遗忘。</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>switch 结构的逆向难度在于不同分支的switch通过反编译器可能演变成不同的汇编语言版本，这就要求逆向工程师精确掌握反汇编switch的规律。灵活的运用调试器进行调试。</strong><br><a id="more"></a></p><h1 id="1-case-lt-3的情况："><a href="#1-case-lt-3的情况：" class="headerlink" title="1.case&lt;=3的情况："></a>1.case&lt;=3的情况：</h1><p>先看第一个程序段：</p><p><pre><code><br>    switch (nscore)<br>    {<br>    case 1:<br>        ntmpNum = 1;<br>        break;<br>    case 3:<br>        ntmpNum = 3;<br>        break;<br>    case 4:<br>        ntmpNum = 4;<br>        break;<br>    default:<br>        ntmpNum = 10;<br>    }<br>    printf(“%d”, ntmpNum); // 要调用一下ntmpNum，否则上面的switch会被优化掉<br></code></pre><br>OD载入，看一下：</p><p><pre><code><br>    00401013 &gt;|.  E8 0F010000    call    00401127     ;scanf<br>    00401018  |.  8B4424 08      mov     eax, dword ptr [esp+8]<br>    0040101C  |?  83C4 08        add     esp, 8          ; 上面scanf是C类调用<br>    0040101F  |?  48             dec     eax       ; 通过EAX的减法来判断属于哪个分支<br>    00401020  |?  74 1D          je      short 0040103F<br>    00401022  |.  83E8 02        sub     eax, 2<br>    00401025  .  74 11          je      short 00401038<br>    00401027      48             dec     eax<br>    00401028      74 07          je      short 00401031<br>    0040102A      B8 0A000000    mov     eax, 0A<br>    0040102F      EB 13          jmp     short 00401044   ;break<br>    00401031  |.  B8 04000000    mov     eax, 4<br>    00401036  |.  EB 0C          jmp     short 00401044<br>    00401038  |?  B8 03000000    mov     eax, 3<br>    0040103D  |?  EB 05         jmp     short 00401044<br>    0040103F  |?  B8 01000000    mov     eax, 1<br>    00401044  |.  50             push    eax<br>    00401045  |?  68 38904000    push    00409038       ;  ASCII “%d”<br></code></pre><br>通过上述反汇编代码，我们容易得知：在有规律的switch语句中，汇编代码显得有规律，和if语句一致。</p><h1 id="2-case项多于3项且有规律的情况："><a href="#2-case项多于3项且有规律的情况：" class="headerlink" title="2.case项多于3项且有规律的情况："></a>2.case项多于3项且有规律的情况：</h1><p>第一个程序段：</p><p><pre><code><br>    scanf(“%d”, &amp;nscore);<br>    switch (nscore)<br>    {<br>        case 3:<br>            ntmpNum = 1;<br>               break;<br>        case 1:<br>            ntmpNum = 3;<br>            break;<br>        case 5:<br>            ntmpNum = 4;<br>            break;<br>        case 9:<br>            ntmpNum = 4;<br>            break;<br>        case 7:<br>            ntmpNum = 4;<br>            break;<br>        case 11:<br>            ntmpNum = 4;<br>            break;<br>        default:<br>            ntmpNum = 10;<br>    }<br>    printf(“%d”, ntmpNum); // 要调用一下ntmpNum，否则上面的switch会被优化掉<br></code></pre><br>这段代码，我们将有规律的case打乱顺序，然后看编译器是怎么处理的。<br>OD中查看反汇编形式：</p><p><pre><code><br>    0040100E  |.  68 38904000   push    00409038            ; ASCII “%d”<br>    00401013  |.  E8 3F010000   call    00401157            ; scanf<br>    00401018  |.  8B4C24 08     mov     ecx, dword ptr [esp+8]  ;得到输入的内容<br>    0040101C  |.  83C4 08       add     esp, 8<br>    0040101F  |.  8D41 FF       lea     eax, dword ptr [ecx-1]  ;输入的内容-1; Switch (cases 1..B)<br>    00401022  |.  83F8 0A       cmp     eax, 0A<br>    00401025  |.  77 1C         ja      short 00401043<br>    00401027  |.  FF2485 641040&gt;jmp     dword ptr [eax*4+401064] ;查表，跳转到对应的CASE中<br>    0040102E  |&gt;  B8 01000000   mov     eax, 1             ;  Case 3 of switch 0040101F<br>    00401033  |.  EB 13         jmp     short 00401048<br>    00401035  |&gt;  B8 03000000   mov     eax, 3             ;  Case 1 of switch 0040101F<br>    0040103A  |.  EB 0C         jmp     short 00401048<br>    0040103C  |&gt;  B8 04000000   mov     eax, 4             ;  Cases 5,7,9,B of switch 0040101F<br>    00401041  |.  EB 05         jmp     short 00401048<br>    00401043  |&gt;  B8 0A000000   mov     eax, 0A            ;  Default case of switch 0040101F<br>    00401048  |&gt;  50            push    eax<br>    00401049  |.  68 38904000   push    00409038           ;  ASCII “%d”<br>    0040104E  |.  E8 D3000000   call    00401126           ;  printf<br></code></pre><br>跟随下这个表，我们发现，这个表就在调用它的函数后，如下：</p><p><pre><code><br>    00401064  00401035  switch.00401035<br>    00401068  00401043  switch.00401043          插入的是default分支的首地址<br>    0040106C  0040102E  switch.0040102E<br>    00401070  00401043  switch.00401043          插入的是default分支的首地址<br>    00401074  0040103C  switch.0040103C<br>    00401078  00401043  switch.00401043          插入的是default分支的首地址<br>    0040107C  0040103C  switch.0040103C<br>    00401080  00401043  switch.00401043          插入的是default分支的首地址<br>    00401084  0040103C  switch.0040103C<br>    00401088  00401043  switch.00401043          插入的是default分支的首地址<br>    0040108C  0040103C  switch.0040103C<br></code></pre></p><font color="#DC143C">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;认真对比一下这个表，发现，它先是对case后的常量排序，然后再将对应的处理代码的首地址写成一个表，通过jmp   dword ptr [eax*4+401064] 查表直接进入到对应的case中。<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于缺省的case（我们是间隔2递增的case）在表中填充的是default分支的首地址。</font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;暑假看了看雪的知识库，偶然间看到这篇besterChen写的switch结构分析一文，甚喜之，原封不动的抄了下来，在此表示非常感谢。这是在暑假的word版经过复核及重新测试，发现原文许多反汇编代码与原先语句有出入，可能是现在编译器更加高级了。为了保证原文的统一和完整性，在此没有对原文代码进行修改，只是在后面进行了补充，形式为图片类型。随后也会附上关于本次的测试样本，在此立下个flag。以免遗忘。&lt;/strong&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;switch 结构的逆向难度在于不同分支的switch通过反编译器可能演变成不同的汇编语言版本，这就要求逆向工程师精确掌握反汇编switch的规律。灵活的运用调试器进行调试。&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>浅谈数据结构之二叉树</title>
    <link href="http://yoursite.com/2017/11/05/%E6%B5%85%E8%B0%88%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://yoursite.com/2017/11/05/浅谈数据结构之二叉树/</id>
    <published>2017-11-05T10:45:11.000Z</published>
    <updated>2017-11-05T12:51:58.714Z</updated>
    
    <content type="html"><![CDATA[<h1 id="树的定义："><a href="#树的定义：" class="headerlink" title="树的定义："></a>树的定义：</h1><p>树是n（n&gt;=0）个节点的有限集合。当n==0时，称为空树，当n&gt;=0时，树满足以下条件：<br>    <strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（1）有且仅有一个称为根的特定节点，该节点没有前驱节点，有一个或者多个后继节点。</strong><br>    <strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（2） 除根节点以外的n-1个节点可以划分为m个互不相交的有限集合，该集合称之为树，即根的子树</strong><br><a id="more"></a></p><h1 id="二叉树的定义："><a href="#二叉树的定义：" class="headerlink" title="二叉树的定义："></a>二叉树的定义：</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在计算机科学中，二叉树是每个节点最多有两个子树的树结构。通常子树被称作“左子树”（left subtree）和“右子树”（right subtree）。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;二叉树的每个结点至多只有二棵子树(不存在度大于2的结点)，二叉树的子树有左右之分，次序不能颠倒。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>二叉树的第i层至多有2^{i-1}个结点；深度为k的二叉树至多有2^k-1个结点；对任何一棵二叉树T，如果其终端结点数为n_0，度为2的结点数为n_2，则n_0=n_2+1。</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>一棵深度为k，且有2^k-1个节点称之为满二叉树；深度为k，有n个节点的二叉树，当且仅当其每一个节点都与深度为k的满二叉树中，序号为1至n的节点对应时，称之为完全二叉树。</strong></p><h1 id="二叉树的存储结构："><a href="#二叉树的存储结构：" class="headerlink" title="二叉树的存储结构："></a>二叉树的存储结构：</h1><p><strong>1.顺序存储结构：</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于满二叉树和完全二叉树来说，按照满二叉树节点连续编号的次序，将各节点数据存放在一组连续的内存单元，即用一维数组作为存储结构。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;满足一下条件：<br><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1)左子树是双亲节点次序的2n倍</strong><br><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2)右子树是双亲节点次序的2n+1倍</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如图所示，将二叉树按顺序结构存储：<br>     <img src="https://i.imgur.com/N43CGuq.jpg" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将这个二叉树按顺序结构存储：<br>     <img src="https://i.imgur.com/SjnBCZt.jpg" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;二叉树的顺序存储模型的DAT描述如下：</p><pre><code>     typedef char datatype      typedef struct      {         datatype SqBiTree[MAXSIZE+1];         int nodemax;     }BiTree;</code></pre>**2.链式存储结构：**&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;二叉树的链式存储结构是指用链表来表示一棵二叉树，即用链来指示元素的逻辑关系。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;二叉树的每个结点最多有两个孩子，因此，每个结点除了存储自身的数据外，还应设置两个指针分别指向左、右孩子结点。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如图所示，将二叉树链式结构存储：    ![](https://i.imgur.com/EnR6Mhx.png)  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;二叉树的链式存储模式的DAT描述：<pre><code>     typedef char datatype     typedef struct node     {          datatype data;          struct node *Lchild;           struct node *Rchild;    }</code></pre> # 二叉树的建立：<pre><code>    void CreateBiTree(BiTree &root)     //创建二叉树    {                                   //这里加上&意思是传递的参数为指针的引用，括号里面等价于 BiTreeNode* &T        char ch;        ch = getchar();        if ('#' == ch)            root = NULL;        else        {            root = (BiTree)malloc(sizeof(BiTree));            root->data = ch;            CreateBiTree(root->Lchild);            CreateBiTree(root->Rchild);        }    }</code></pre># 二叉树的遍历：<pre><code> 1）先序递归遍历：     void PreOrder(BiTree root)     {       if (root)       {          visit(root->data);          PreOrder(root->Lchild);          PreOrder(root->Rchild);       }     }</code></pre><pre><code> 2)中序递归遍历：    void InOrder(BiTree root)    {        if(root)        {                InOrder(root->LChild);            visit(root->data);            InOrder(root->RChild);        }    }</code></pre><pre><code> 2)后序递归遍历：    void PostOrder(BiTree root)    {        if(root)        {            PostOrder(root->Lchild);            PostOrder(root->RChild);            visit(root->data);        }    }</code></pre><pre><code> 2)先序非递归遍历：    void PreOrder(BiTree root)]    {        SeqStack *s;        InitStack(s);        BiTree p=root;        while(p!=NULL||s!=NULL)        {            while(p!=NULL)            {                visit(p->data);                Push(s,p);          //保存上一步节点信息，以便下次返回使用                p=p->LChild;            }            if(IsEmpty(s))            {                Pop(s,&p);                p=p->RChild;      //进入右子树，开始下一次循环            }            }    }</code></pre><pre><code>二叉树的层次遍历    void LevelOrder(BiTree root)    {        SeqQueue *q;        BiTree p;        InitQueue(q);        EnterQueue(q,root);        //人队列        while(!IsEmpty(q))        {            DeleteQueue(q,&p);   //出队列            visit(p);            if(p->Lchild)                EnterQueue(q,p);            if(p->Rchild)                EnterQueue(q,p);        }    }</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;树的定义：&quot;&gt;&lt;a href=&quot;#树的定义：&quot; class=&quot;headerlink&quot; title=&quot;树的定义：&quot;&gt;&lt;/a&gt;树的定义：&lt;/h1&gt;&lt;p&gt;树是n（n&amp;gt;=0）个节点的有限集合。当n==0时，称为空树，当n&amp;gt;=0时，树满足以下条件：&lt;br&gt;    &lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;（1）有且仅有一个称为根的特定节点，该节点没有前驱节点，有一个或者多个后继节点。&lt;/strong&gt;&lt;br&gt;    &lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;（2） 除根节点以外的n-1个节点可以划分为m个互不相交的有限集合，该集合称之为树，即根的子树&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>六类语言的逆向思路</title>
    <link href="http://yoursite.com/2017/11/02/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E8%AF%AD%E8%A8%80%E7%9A%84%E9%80%86%E5%90%91%E6%80%9D%E8%B7%AF/"/>
    <id>http://yoursite.com/2017/11/02/六种常见语言的逆向思路/</id>
    <published>2017-11-02T12:45:11.000Z</published>
    <updated>2017-11-03T14:42:36.360Z</updated>
    
    <content type="html"><![CDATA[<h1 id="语言列表："><a href="#语言列表：" class="headerlink" title="语言列表："></a>语言列表：</h1><ul><li>VB        MASM32   </li><li>VC        BCB </li><li>易语言     Delphi<a id="more"></a></li></ul><h1 id="破解思路："><a href="#破解思路：" class="headerlink" title="破解思路："></a>破解思路：</h1><ul><li><font color="#DC143C">1.VB破解：</font><ul><li>1）VBExplorer查找按钮事件</li><li>2）有提示框则bp rtcMsgBox</li><li>3）通过：<pre><code>* bp __vbaStrCmp/__vbaStrComp/__vbaVarTstEq* bp __vbaStrCmp  （比较字符串）* bp __vbaStrComp （同上）</code></pre></li><li>4）万能断点法(816C24法)：<pre><code>* 注册验证程序可以用这个断点下断，一般离程序访问注册表很近：* bp __vbaStrToAnsi* 5F12堆栈调用</code></pre></li><li>总结：<ul><li>VB程序破解的关键跳转，一般与其它语言的不同,没有JPM XXXXXXX一般以 JE/JNE XXXXXXXXX 跳转记录一般不会很远(虽然是短距离跳转，但是关键就在这里，可以设置大量的信息) 。如果发现False/True 可能是关键点</li></ul></li></ul></li></ul><hr><ul><li><font color="#DC143C">2.易语言破解思路:</font><ul><li>1）信息框法:<ul><li>bp MessageBoxA(断对话框)</li></ul></li><li>2）字符串法<ul><li>查看易语言文本信息:bp GetProcessHeap F9运行4次，取消断点 执行ALT+F9 用户代码 F8单步走</li><li>或者在区段为”.data”/“.ecode”下断，运行</li></ul></li><li>3）窗口标题法 bp SetWindowTextA</li><li>4）F12堆栈调用<ul><li>0040C0CB=易语言.0040C0CB (ASCII “shaonanshaonvluntan”)</li></ul></li></ul></li></ul><hr><ul><li><font color="#DC143C">3.DELPHI破解:</font><ul><li>1）DEDE、PE Explorer ResScope作为强有力的辅助工具找按妞事件</li><li>2）Point-H法</li><li>3）bp GetDlgItem/GetDlgItemTextA(断输入框)</li><li>4）bp MessageBoxA(W)(断对话框)—Ctrl+N</li><li>5）字符串法—插件/搜索所有参考文本</li><li>6）如果程序界面标题有[未注册/注册/VIP版/标准版/钻石版] 之类字样的<br>　　可以通过查找FormCreate/FormShow—-DEDE，找到关键标志位!<br>　　 来判断程序怎么样的判断是否注册或者用户类型</li><li>7）窗口标题法 bp SetWindowTextA</li><li>8）F12堆栈调用</li><li>9) 注册表:</li><li>10)特殊断点：<ul><li>bpx RegCreateKeyExA 对于Delphi程序程序来说，用这个断点比较合适</li><li>bp RegCreateKeyExA 对于加了壳的程序</li></ul></li></ul></li></ul><hr><ul><li><font color="#DC143C">4.C+破解.C类</font><ul><li>1）Point-H法<br>　　bp GetDlgItem(断按下按钮)<br>　　bp MessageBoxA(断对话框)</li><li>2）字符串法</li><li>3）F12堆栈调用</li><li>4）窗口标题法 bp SetWindowTextA</li><li>5）★★C+程序专用断点★★<ul><li>bp lstrcmpA (KERNEL32.lstrcmpA) 比较用法</li><li>bp _mbscmp //比较</li></ul></li><li>6）C类程序的经典断点:<ul><li>bp GetWindowTextA(断按下按钮) //也是适用于其它语言</li><li>bp GetWindowTextLengthA(断按下按钮) //也是适用于其它语言</li><li>bp GetDlgItem(断按下按钮) //也是适用于其它语言</li><li>bp GetDlgItemTextA</li><li>ds:[004021C8]=77C01881 (msvcrt._mbscmp)</li></ul></li></ul></li></ul><hr><ul><li><font color="#DC143C">5.BC++破解</font><ul><li>1）DEDE、PE Explorer作为强有力的辅助工具找按妞事件</li><li>2）Point-H法</li><li>3）bp GetDlgItem/GetDlgItemTextA(断输入框)</li><li>4）bp MessageBoxA(W)(断对话框)—Ctrl+N</li><li>5）字符串法—插件/搜索所有参考文本</li><li>6）如果程序界面标题有[未注册/注册/VIP版/标准版/钻石版] 之类字样的可以通过查找FormCreate/FormShow—-DEDE，找到关键标志位!来判断程序怎么样的判断是否注册或者用户类型</li><li>7）窗口标题法 bp SetWindowTextA</li><li>8）F12堆栈调用</li><li>9) bpx RegCreateKeyExA 对于Delphi程序程序来说，用这个断点比较合适<br>bp RegCreateKeyExA 对于加了壳的程序</li></ul></li></ul><hr><ul><li><font color="#DC143C">6.MASM32 / TASM32破解</font><ul><li>1）Point-H法<ul><li>bp GetDlgItem(断按下按钮)</li><li>bp MessageBoxA(断对话框)</li></ul></li><li>2）字符串法</li><li>3）F12堆栈调用</li><li>4）窗口标题法 bp SetWindowTextA</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;语言列表：&quot;&gt;&lt;a href=&quot;#语言列表：&quot; class=&quot;headerlink&quot; title=&quot;语言列表：&quot;&gt;&lt;/a&gt;语言列表：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;VB        MASM32   &lt;/li&gt;
&lt;li&gt;VC        BCB &lt;/li&gt;
&lt;li&gt;易语言     Delphi
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>浅探脱壳技术</title>
    <link href="http://yoursite.com/2017/10/25/%E6%B5%85%E6%8E%A2%E8%84%B1%E5%A3%B3%E6%8A%80%E6%9C%AF/"/>
    <id>http://yoursite.com/2017/10/25/浅探脱壳技术/</id>
    <published>2017-10-25T12:45:11.000Z</published>
    <updated>2017-11-02T14:38:46.488Z</updated>
    
    <content type="html"><![CDATA[<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在一些计算机软件里有一段专门负责保护软件不被非法修改或反编译的程序。它们一般都是先于程序运行，拿到控制权，然后完成它们保护软件的任务。就像动植物的壳一般都是在身体外面一样理所当然（但后来也出现了所谓的“壳中带籽”的壳）。由于这段程序和自然界的壳在功能上有很多相同的地方，基于命名的规则，大家就把这样的程序称为“壳”。软件加壳是作者写完软件后，为了保护自己的代码或维护软件产权等利益所常用到的手段。目前有很多加壳工具，既然有盾，自然就有矛，脱壳即去掉软件所加的壳，软件脱壳 有手动脱和自动脱壳之分。</strong><br><a id="more"></a></p><ul><li><strong>方法1：单步法</strong><ul><li>1.向上的跳转不让他实现，向下的跳转让他实现。</li><li>2.经过跨段跳转后，直接跳到OEP</li></ul></li></ul><hr><ul><li><strong>方法2：堆栈平衡法</strong><ul><li>1.查看寄存器窗口，一直按f8，只要esp变化（变红），右键转到内存地址窗口。</li><li>2.对该地址下硬件断点。</li><li>3.重新运行，发现od停在断点处，取消断点。</li><li>4.单步后经过很长的跳转，直达oep。</li></ul></li></ul><hr><ul><li><strong>方法3：二次内存镜像法</strong><ul><li>1.寻找内存模块的rsrc段。</li><li>3.如果没找到，直接在00401000处下断，然后单步法</li><li>4.如果找到了，在rsrc资源模块下断。</li><li>5.运行后，在004010000（代码段入口处）处下断。运行。</li><li>6.单步法。</li></ul></li></ul><hr><ul><li><strong>方法4：一步直达法（针对UPX和ASPASK)</strong><ul><li><ol><li>od 查找-查找命令找到popad（注意不勾选整个区段），然后跳转oep（如果不是可以多次查找）</li></ol></li><li>2.注意跳转不一定是非条件跳转，也可以是条件跳转，而且不论长短<br><img src="https://i.imgur.com/Knx04Lu.png" alt=""></li><li>之后利用ollydbgdump或者loadpe进行脱壳</li><li>loadpe过程：在进程中右键修正镜像大小，然后点击完整转存。</li><li>如果脱壳失败失败，先修改IAT，然后修改转存文件</li></ul></li></ul><hr><ul><li><strong>关于ASPACK的脱壳技巧：</strong><ul><li>1.以上4种脱壳技术</li><li>2.模拟跟踪法（1）<ul><li>前提是不含sfx尾链。</li><li>输入命令tc eip&lt;xxxxxx(xxxxxx是sfx区段的地址)</li></ul></li><li>3.模拟跟踪法（2）<ul><li>依次：选项–&gt;调试设置–&gt;sfx.</li><li>选择一种方式（一般是第二种)</li><li>运行，自动到达eop</li></ul></li></ul></li></ul><hr><ul><li><strong>关于Nspack壳的脱壳技巧：</strong><ul><li>关于北斗1.3的可以使用单步法，esp平衡法，二次内存镜像法。</li><li>关于北斗3.之前的壳：<ul><li>1.在GetVersion函数处下断点，（命令行处下断点）。</li><li>2.运行，程序暂停后，单步（很近），在retn处下断后，运行。</li><li>3.单步，上拉出现oep。</li></ul></li></ul></li></ul><hr><ul><li><strong>关于fsg壳的脱壳技巧：</strong><ul><li>一般的壳为了保护代码，会利用跳转，避开关键跳转，不让其调到OEP，会把跳转地址隐藏在寄存器单元中如ebx，esp等。如图，便跳过了jmp这一个关键跳转。<br><img src="https://i.imgur.com/KDEgAJk.png" alt=""></li><li>适合于fsg的esp定律：<ul><li>单步–&gt;看esp变化了–&gt;<strong>查看堆栈窗口</strong>–&gt;<strong>找到第四个数值</strong>–&gt;跟随反汇编窗口–&gt;下硬件执行断点–&gt;运行<br><img src="https://i.imgur.com/438oLhV.png" alt=""></li></ul></li><li>修复IAT<ul><li>寻找导入函数，记录偏移，找到上面和下面的地址，并记录。在修复工具IAT信息栏输入，起始地址和大小，修复！！！</li></ul></li></ul></li></ul><hr><ul><li><strong>关于PECompack 2.x壳的脱壳技巧：</strong><ul><li>1.单步法</li><li>2.Esp定律法</li><li>3.特殊方法1：<ul><li>1.命令行输入BP VirtualFree</li><li>2.SHIFT+F9，然后取消断点</li><li>3.在ALT+F9（返回到用户界面）</li><li>4.查找命令 push 8000(特征码)</li><li>5.运行到这</li><li>6.单步跟</li></ul></li><li>4.特殊方法2：<ul><li>1.BP VirtualFree</li><li>2.两次SHIFT+F9</li><li>3.<strong>中断后取消断点</strong></li><li>4.<strong>Alt+F9返回用户界面</strong></li><li>5.单步走。</li></ul></li><li>5.特殊方法3:<ul><li>1.bp VirtualAlloc</li><li>2.SHIFT+F9运行</li><li>3.取消断点</li><li>4.ALT+F9</li><li>5.向下拉，看到JMP。运行到这（oep）</li></ul></li><li>6.特殊方法4（GetVersion合适壳是vc编写的）：<ul><li>1.在GetVersion这个函数下断点（命令行输入 at GetVersion）</li><li>2.运行，在retn处下断，运行.</li><li>3.F7，向上拉出现OEP.</li></ul></li><li>7.最后一次异常法：<ul><li>1.<strong>取消所有异常。</strong></li><li>2.Shift+F9</li><li>3.记录第x次跑飞。</li><li>4.寻找x-1次的SE句柄</li><li>5.转到SE xxxx处</li><li>6.下断，shift+F9运行，然后单步跟（//在retn后面一处下断（直接单步跟））</li></ul></li></ul></li></ul><hr><ul><li><strong>关于EZIP壳的脱壳技巧</strong><ul><li>1.用单步法和ESP法寻找OEP</li><li>2.利用loadpe（修正镜像大小—完整转存）</li><li>3.利用pe修正程序（手动修改EOP）</li><li>4.必要时可以重建PE和修改正确的IAT</li></ul></li></ul><hr><ul><li><strong>关于TElock壳的脱壳技巧</strong><ul><li>1.最后一次异常法或者二次镜像法</li><li>2.利用模拟跟踪法，在x-1次异常结束后，使用模拟跟踪法！OD直接到OEP，见第二课！</li><li>3.利用修复工具修复，发现有无效函数，利用ring3修复，卡死，我们采用修复工具打开原版，用等级3修复，然后抓取脱壳后的文件</li><li><strong>注意：之前我们需要打开源程序！！！</strong></li></ul></li></ul><hr><ul><li><strong>关于Upack壳的脱壳机巧</strong><ul><li>1.使用esp定律法，遇到大跳转（会出现-的符号）<ul><li><strong>注意：如果跳转未实现，则需要利用条件断点。</strong></li></ul></li></ul></li></ul><hr><ul><li><strong>关于Acprotect壳的脱壳技巧</strong><ul><li>1.设置异常（不忽略内存异常），隐藏OD</li><li>2.Shift+F9    在SE处下内存访问断点</li><li>3.SHIFT+F9，F2，再一次SHIFT+F9，下断，再一次SHIFT+F9</li><li>4.取消所有断点，在运行到retn处</li><li>5.内存，00401000。F2，SHIFT+F9</li><li>6.直达OEP！！</li><li>参考：<br><a href="http://http://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=429917" target="_blank" rel="external">http://http://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=429917</a></li></ul></li></ul><hr><ul><li><strong>关于Acprotect壳的脱壳技巧</strong><ul><li>1.在retn上设置条件跟随，</li><li>2.二进制赋值跟随出的EOP数据</li><li>3.在代码段设置断点，运行</li><li>4.把复制的的二进制代码，按照字节数粘贴到代码段之上</li><li>5.右键-设置此处为EOP</li><li>6.修复，如果有无效指针，利用3修复，保存</li><li>7.参考：<br><a href="http://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=429917" target="_blank" rel="external">http://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=429917</a></li></ul></li></ul><hr><ul><li><strong>总结：</strong><ul><li>1.壳的分类：压缩壳、加密壳</li><li>2.脱壳的基本方法：<ul><li>1.单步</li><li>2.ESP定律</li><li>3.内存镜像</li><li>4.模拟跟踪（2类）<pre><code>* 1）SFX跟踪* 2）tc eip&lt;XXXX</code></pre></li><li>5.最后一次异常</li><li>6.特殊</li></ul></li><li>3.常见语言特点：<ul><li>1.VB:<pre><code>push QQ个性网.00404754call <jmp.&msvbvm60.#100>add byte ptr ds:[eax],aladd byte ptr ds:[eax],aladd byte ptr ds:[eax],alxor byte ptr ds:[eax],aladd byte ptr ds:[eax],aldec eax</jmp.&msvbvm60.#100></code></pre>* 2.delphi:<pre><code>push ebpmov ebp,espadd esp,-10</code></pre>* 3.BC++:<pre><code>jmp short btengine.0040168Abound di,dword ptr ds:[edx]inc ebxsub ebp,dword ptr ds:[ebx]</code></pre>* 4.VC++:<pre><code>push ebpmov ebp,esppush -1</code></pre>* 5.汇编（ASM）<pre><code>push 0call <jmp.&kernel32.getmodulehandlea>mov dword ptr ds:[40705B],eaxpush 80push 11.0040752C</jmp.&kernel32.getmodulehandlea></code></pre></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在一些计算机软件里有一段专门负责保护软件不被非法修改或反编译的程序。它们一般都是先于程序运行，拿到控制权，然后完成它们保护软件的任务。就像动植物的壳一般都是在身体外面一样理所当然（但后来也出现了所谓的“壳中带籽”的壳）。由于这段程序和自然界的壳在功能上有很多相同的地方，基于命名的规则，大家就把这样的程序称为“壳”。软件加壳是作者写完软件后，为了保护自己的代码或维护软件产权等利益所常用到的手段。目前有很多加壳工具，既然有盾，自然就有矛，脱壳即去掉软件所加的壳，软件脱壳 有手动脱和自动脱壳之分。&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>网络科技协会纳新免试题</title>
    <link href="http://yoursite.com/2017/10/24/%E7%BD%91%E5%8D%8F%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2017/10/24/网协面试题/</id>
    <published>2017-10-24T07:45:11.000Z</published>
    <updated>2017-11-03T14:21:34.776Z</updated>
    
    <content type="html"><![CDATA[<p><strong>网络科技协会纳新面试题:</strong><br></p><ul><li>第一关：<ul><li>查看官网页面，找到神秘代码,发现这是一个校验码。经过提醒，发现这个是百度云盘的校验码。输入pan.baidu.com/s/1crqIKI.<br><img src="https://i.imgur.com/AipNeGr.png" alt=""><a id="more"></a></li></ul></li><li>第二关：<ul><li>安卓逆向题，利用jeb2，右键反汇编代码，查看伪代码如下：<br><img src="https://i.imgur.com/O083lhj.png" alt=""></li><li>很显然这是base64编码，并且后面也提示了，利用base64解码就可以得到一个网站。<br><img src="https://i.imgur.com/FNO60ns.png" alt=""></li></ul></li><li>第三关：<ul><li>输入数据发现只能输入四位。</li><li>审查元素修改length<br><img src="https://i.imgur.com/TbgumkS.png" alt=""></li><li>随便输入比他大的数字就行！<br><img src="https://i.imgur.com/OeETamD.png" alt=""></li></ul></li><li>第四关：<ul><li>到图书馆听广播，频段为88.8</li><li>到图书馆寻找线索</li><li>得到线索为uggc://cna.onvqh.pbz/f/1rESIwrd，这是一个url，但是被编码了，url的格式为http：//………，可以知道这是凯撒密码，网上搜索凯撒密码在线解密即可解除<br><img src="https://i.imgur.com/QxubIIj.png" alt=""></li><li>得到游戏入口：<br><img src="https://i.imgur.com/6l7tnlN.png" alt=""></li></ul></li><li>第五关:<ul><li>逆向破解题。打开之后是一个打飞机的游戏<br><img src="https://i.imgur.com/Q49BzED.png" alt=""><br><img src="https://i.imgur.com/bhaZTnP.png" alt=""></li><li>而且下载了不止一个文件，所以文件之间存在彼此的依赖关系。<br><img src="https://i.imgur.com/CG3z2uy.png" alt=""></li><li>假设managed第一个文件就存在这种关系。（你也可以使用一些进程分析工具，通过查找对dll装载得到这个结论）对他进行分析，发现这个是一个c#编译的.net程序。</li><li>省去其中用IDA pro 分析的艰辛历程，得到的经验是存在一个score的变量。</li><li>利用ILSPY分析，直接找到关键语句<br><img src="https://i.imgur.com/vz2MRdi.png" alt=""></li><li><font color="#DC143C">1得知，当score大于500时，程序进行加密运算，拿字符串的第二位开始，到len-2结束，不断循环对字符串与10异或</font></li><li>写出注册机如下，得到一个ftp地址。<br><img src="https://i.imgur.com/RelW4vb.png" alt=""></li><li>下载之。</li></ul></li><li>第六关（暂定):<ul><li>数据挖掘题，有一个readme和压缩包文件，里面是一个2500万行的数据。一般的Excel无法全部加载（Excel只能加载104万行数据）</li><li>你可以吧文件拆分成100万行的….</li></ul></li><li>第七关：</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;网络科技协会纳新面试题:&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一关：&lt;ul&gt;
&lt;li&gt;查看官网页面，找到神秘代码,发现这是一个校验码。经过提醒，发现这个是百度云盘的校验码。输入pan.baidu.com/s/1crqIKI.&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/AipNeGr.png&quot; alt=&quot;&quot;&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>算法练习1--八皇后问题</title>
    <link href="http://yoursite.com/2017/10/19/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A01--%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/10/19/算法练习1--八皇后问题/</id>
    <published>2017-10-19T08:45:11.000Z</published>
    <updated>2017-10-29T07:22:13.679Z</updated>
    
    <content type="html"><![CDATA[<p><strong>问题概述：</strong><br><br><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;八皇后问题，是一个古老而著名的问题，是回溯算法的典型案例。该问题是国际西洋棋棋手马克斯·贝瑟尔于1848年提出：在8×8格的国际象棋上摆放八个皇后，使其不能互相攻击，即任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法。 高斯认为有76种方案。1854年在柏林的象棋杂志上不同的作者发表了40种不同的解，后来有人用图论的方法解出92种结果。计算机发明后，有多种计算机语言可以解决此问题</strong>。<br><br><a id="more"></a><br><strong>算法思路：</strong><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为每个皇后不能在同一行，同一列，以及主副斜对角线上，所以我们首先去掉行的这一限制，即：第一次放在第一行，第二次就不放在第一行了。每递归一次（即一行）考虑8列，即每个行，皇后有八个位置可以放置。利用循环，找个每行的不和以前的皇后相互攻击每个位置。<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们利用一个一维数组表示每个皇后所在的位置，即：num[i]=j;表示皇后在第i行的第j列。因为出去了每行的因素，所以剩下的冲突的可能性是：每一列，主副对角线。同列：c[r]==c[j]; 同对角线有两种可能，即主对角线方向和副对角线方向。 主对角线方向满足:行之差等于列之差：r-j==c[r]-c[j]; 副对角线方向满足:行之差等于列之差的相反数：r-j==c[j]-c[r]。<br></p><p><pre><code><br>main.cpp<br>int n=8,count = 0,num[10];<br>void search(int n);   /<em>寻找八皇后的位置，递归算法</em>/<br>void print();     /<em>打印输出</em>/<br>int main(void)<br>{<br>    search(0);<br>    printf(“%d”, count);<br>    getchar();<br>    return 0;<br>}<br>void search(int r)<br>{<br>    int i,j;<br>    if (r == n)<br>    {<br>        print();<br>        count++;<br>        return;<br>    }<br>    for (i = 0; i &lt; 8; i++)<br>    {<br>        int ok = 1;     /<em>默认符合条件</em>/<br>        num[r] = i;     /<em>为num数组附上比较的初值</em>/<br>        for (j = 0; j &lt; r; j++)<br>        {<br>            if (num[j] == num[r] || num[r] - num[j] == r - j || num[r] - num[j] == j - r)<br>            {<br>                ok = 0;<br>                break;<br>            }<br>        }<br>        if (ok)<br>            search(r + 1);<br>    }<br>}<br>void print()<br>{<br>    int i, j;<br>    for (i = 0; i &lt; n; i++)<br>    {<br>        for (j = 0; j &lt; n; j++)<br>        {<br>            if (j == num[i])<br>                printf(“1”);<br>            else<br>                printf(“0”);<br>        }<br>        printf(“\n”);<br>    }<br>    printf(“\n”);<br>}<br></code></pre><br><img src="https://i.imgur.com/bhG4POb.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;问题概述：&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;八皇后问题，是一个古老而著名的问题，是回溯算法的典型案例。该问题是国际西洋棋棋手马克斯·贝瑟尔于1848年提出：在8×8格的国际象棋上摆放八个皇后，使其不能互相攻击，即任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法。 高斯认为有76种方案。1854年在柏林的象棋杂志上不同的作者发表了40种不同的解，后来有人用图论的方法解出92种结果。计算机发明后，有多种计算机语言可以解决此问题&lt;/strong&gt;。&lt;br&gt;&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>堆与栈的区别（内存和数据结构角度）</title>
    <link href="http://yoursite.com/2017/10/17/%E5%A0%86%E6%A0%88%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%88%E5%86%85%E5%AD%98%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%A7%92%E5%BA%A6%EF%BC%89/"/>
    <id>http://yoursite.com/2017/10/17/堆栈的区别（内存和数据结构角度）/</id>
    <published>2017-10-17T11:00:11.000Z</published>
    <updated>2017-10-24T07:35:28.622Z</updated>
    
    <content type="html"><![CDATA[<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在计算机领域，堆栈是一个不容忽视的概念，我们编写的C语言程序基本上都要用到。但对于很多的初学着来说，堆栈是一个很模糊的概念。堆栈：一种数据结构、一个在程序运行时用于存放的地方，这可能是很多初学者的认识，因为我曾经就是这么想的和汇编语言中的堆栈一词混为一谈。我身边的一些编程的朋友以及在网上看帖遇到的朋友中有好多也说不清堆栈，所以我想有必要给大家分享一下我对堆栈的看法，有说的不对的地方请朋友们不吝赐教，这对于大家学习会有很大帮助。</strong><br><br><a id="more"></a></p><p>#<strong>数据结构的栈和堆:</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DC143C">堆和栈都是一种数据项按序排列的数据结构。</font><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们先从大家比较熟悉的栈说起吧，栈就像装数据的桶或箱子,它是一种具有<strong>后进先出性质</strong>的数据结构，也就是说后存放的先取，先存放的后取。这就如同我们要取出放在箱子里面底下的东西（放入的比较早的物体），我们首先要移开压在它上面的物体（放入的比较晚的物体）。<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;堆像一棵倒过来的树。堆是一种经过排序的树形数据结构，每个结点都有一个值。通常我们所说的堆的数据结构，是指二叉堆。堆的特点是根结点的值最小（或最大），且根结点的两个子树也是一个堆。由于堆的这个特性，常用来实现优先队列，<font color="#DC143C">堆的存取是随意，这就如同我们在图书馆的书架上取书，虽然书的摆放是有顺序的，但是我们想取任意一本时不必像栈一样，先取出前面所有的书，书架这种机制不同于箱子，我们可以直接取出我们想要的书。<strong>（自由度大）</strong></font><br></p><p>#<strong>内存中的的栈和堆:</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;内存中的栈区处于相对较高的地址以地址的增长方向为上的话，栈地址是向下增长的。栈中分配局部变量空间。<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DC143C">堆区是向上增长的用于分配程序员申请的内存空间。</font>另外还有静态区是分配静态变量，全局变量空间的；只读区是分配常量和程序代码空间的；以及其他一些分区。<br><br><br><strong>来看一个网上很流行的经典例子：</strong><br></p><p><pre><code><br>main.cpp<br>int a = 0; 全局初始化区<br>char <em>p1; 全局未初始化区<br>main()<br>{<br>    int b; 栈<br>    char s[] = “abc”; 栈<br>    char </em>p2; 栈<br>    char <em>p3 = “123456”; 123456\0在常量区，p3在栈上。<br>    static int c =0； 全局（静态）初始化区<br>    p1 = (char </em>)malloc(10); 堆<br>    p2 = (char <em>)malloc(20); 堆  //自由度高<br>}<br></em></code></pre><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于栈的大小有限，所以用子函数还是有物理意义的，而不仅仅是逻辑意义。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;栈： 在函数调用时，第一个进栈的是主函数中函数调用后的下一条指令（函数调用语句的下一条可执行语句）的地址，然后是函数的各个参数，<em>*在大多数的C编译器中，参数是由右往左入栈的，然后是函数中的局部变量。注意静态变量是不入栈的。当本次函数调用结束后，局部变量先出栈，然后是参数，最后栈顶指针指向最开始存的地址，</em>也就是主函数中的下一条指令，程序由该点继续运行。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;堆：一般是在堆的头部用一个字节存放堆的大小。堆中的具体内容有程序员安排。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在计算机领域，堆栈是一个不容忽视的概念，我们编写的C语言程序基本上都要用到。但对于很多的初学着来说，堆栈是一个很模糊的概念。堆栈：一种数据结构、一个在程序运行时用于存放的地方，这可能是很多初学者的认识，因为我曾经就是这么想的和汇编语言中的堆栈一词混为一谈。我身边的一些编程的朋友以及在网上看帖遇到的朋友中有好多也说不清堆栈，所以我想有必要给大家分享一下我对堆栈的看法，有说的不对的地方请朋友们不吝赐教，这对于大家学习会有很大帮助。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>MySql基本操作</title>
    <link href="http://yoursite.com/2017/10/14/MySql%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2017/10/14/MySql基本操作/</id>
    <published>2017-10-14T12:45:11.000Z</published>
    <updated>2017-10-29T07:28:47.525Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库简介："><a href="#数据库简介：" class="headerlink" title="数据库简介："></a>数据库简介：<br></h1><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据库(Database)是按照数据结构来组织、存储和管理数据的仓库，它产生于距今六十多年前，随着信息技术和市场的发展，特别是二十世纪九十年代以后，数据管理不再仅仅是存储和管理数据，而转变成用户所需要的各种数据管理的方式。数据库有很多种类型，从最简单的存储有各种数据的表格到能够进行海量数据存储的大型数据库系统都在各个方面得到了广泛的应用……</strong><br><a id="more"></a></p><ul><li><strong>第一部分：创建数据库及其使用</strong><ul><li><font color="#DC143C">1)创建数据库：  <strong>Create database [数据库名字];</strong></font></li><li><font color="#DC143C">2)使用数据库：  <strong>Use [数据库名];</strong></font></li><li><font color="#DC143C">3)查看数据库：  <strong>Show databases;</strong></font></li><li><font color="#DC143C">4)查看正在使用的数据库：<strong>select database();</strong></font><br><br><img src="https://i.imgur.com/aPE9qWN.png" alt=""><br><br></li></ul></li></ul><hr><ul><li><strong>第二部分：数据表的创建和使用</strong><ul><li><font color="#DC143C">1)数据表的创建：<strong>create table [表名]（列名 类型名，………）;</strong></font><br><img src="https://i.imgur.com/u6VhVYW.png" alt=""><br><img src="https://i.imgur.com/WXrp6DT.png" alt=""><br><img src="https://i.imgur.com/Z2E3xvd.png" alt=""></li><li><font color="#DC143C">2)外键约束：<strong>foreign key【（属性）】 references 【字表名】【（属性名）】;</strong></font><br><img src="http://oxnvtxe03.bkt.clouddn.com/4.png" alt=""><br><img src="http://oxnvtxe03.bkt.clouddn.com/5.png" alt=""></li><li><font color="#DC143C">3)数据表的查看：<strong>show tables；</strong></font></li><li><font color="#DC143C">4)查看表中每一列的元素：  <strong>show columns from【数据表名】;</strong></font><br><img src="http://oxnvtxe03.bkt.clouddn.com/6.png" alt=""></li><li><font color="#DC143C"> 5）建立索引: <strong>create unique/cluster index [索引名] on [表名][(列名，asc、desc)；</strong></font><br><img src="http://oxnvtxe03.bkt.clouddn.com/1.png" alt=""><br><br></li></ul></li></ul><hr><ul><li><strong>第三部分：数据表的修改：</strong><ul><li><font color="#DC143C"> 1）增加列: <strong>alter tabele [表名] add [属性/列名] 数据格式 【first/after+[列名]】</strong></font><br><img src="http://oxnvtxe03.bkt.clouddn.com/2.png" alt=""></li><li><font color="#DC143C"> 2）删除列：<strong>alter table [表名] drop<br>column [列名];</strong></font><br><br><img src="https://i.imgur.com/wPEr183.png" alt=""></li><li><font color="#DC143C"> 2) 修改列的属性:   <strong>alter table [表名] alter column [列名][数据类型]</strong></font></li><li><font color="#DC143C"> 给列添加主键约束:   <strong>alter table [表名] add  primary key/ unique key([列名]);</strong></font><br><img src="http://oxnvtxe03.bkt.clouddn.com/1111.png" alt=""><br><img src="http://oxnvtxe03.bkt.clouddn.com/1111.png" alt=""> </li><li><font color="#DC143C"> 3)删除默认约束：<strong>alter table [表名] alter [列名] drop default;</strong></font><br><img src="http://oxnvtxe03.bkt.clouddn.com/7.png" alt=""></li><li><font color="#DC143C"> 4)删除主键约束：<strong>alter table [表名] drop primary key;</strong></font><br><img src="http://oxnvtxe03.bkt.clouddn.com/8.png" alt=""></li><li><font color="#DC143C">5)删除唯一约束:<strong>alter table [表名] drop index [列名];</strong></font><br><br><img src="http://oxnvtxe03.bkt.clouddn.com/10.png" alt=""></li><li><font color="#DC143C">6)删除外键约束：<strong>alter table [表名] drop foreign key [约束名称，通过show create table [表名查看];</strong></font><br><img src="http://oxnvtxe03.bkt.clouddn.com/11.png" alt=""><br><img src="http://oxnvtxe03.bkt.clouddn.com/12.png" alt=""><br><img src="http://oxnvtxe03.bkt.clouddn.com/13.png" alt=""></li><li><font color="#DC143C">7)删除表:   <strong>drop table [表名];</strong></font><br><br><img src="http://oxnvtxe03.bkt.clouddn.com/14.png" alt=""><br><br></li></ul></li></ul><hr><ul><li><strong>第四部分：对数据的修改：</strong><ul><li><font color="#DC143C"> 1)插入全部数据：<strong>insert 【数据表名】values(数据1，数据2……)；</strong></font><br><br><img src="http://oxnvtxe03.bkt.clouddn.com/15.png" alt=""></li><li><font color="#DC143C"> 2)插入部分数据：<strong>Insert [数据表名]（属性名1，属性名2……）values(数据1，数据2);</strong></font><br><img src="http://oxnvtxe03.bkt.clouddn.com/16.png" alt=""></li><li><font color="#DC143C"> 3)修改数据：<strong>Insert [数据表名] set (列名1)=（表达式1）………；</strong></font><br><img src="http://oxnvtxe03.bkt.clouddn.com/17.png" alt=""></li><li><font color="#DC143C"> 4)复制表的数据：</font><br><br><img src="http://oxnvtxe03.bkt.clouddn.com/23.png" alt=""><br><img src="https://i.imgur.com/BMfOmdw.png" alt=""></li><li><font color="#DC143C"> 5)更新数据表单的数据：<strong>update table [数据表名] set [表达式]  where [条件] (条件语句为可选语句)</strong></font><br><img src="http://oxnvtxe03.bkt.clouddn.com/19.png" alt=""><br><img src="http://oxnvtxe03.bkt.clouddn.com/18.png" alt=""></li><li><font color="#DC143C"> 6)删除元组：<strong>delete from [表名] where[条件]</strong></font><br><br><img src="http://oxnvtxe03.bkt.clouddn.com/22.png" alt=""><br><br></li></ul></li></ul><hr><ul><li><strong>第五部分：查询语句：</strong><ul><li><font color="#DC143C"> 1)查询记录： <strong> select * from 【数据表名】;</strong></font><br><br><img src="http://oxnvtxe03.bkt.clouddn.com/20.png" alt=""> </li><li><font color="#DC143C"> 2）多表查询： <strong>select [表名].[列名]….from [数据表名]；</strong></font><br><img src="http://oxnvtxe03.bkt.clouddn.com/24.png" alt=""></li><li><font color="#DC143C"> 3)定义别名：<strong>select 【列名】as [别名] from [表名]；</strong><br><img src="http://oxnvtxe03.bkt.clouddn.com/25..png" alt=""></font></li><li><font color="#DC143C"> 4) 条件查询： <strong>select 【查询内容】from 【数据表名】where 【条件表达式】;</strong></font><br><img src="http://oxnvtxe03.bkt.clouddn.com/26.png" alt=""></li><li><font color="#DC143C"> 5） 分组：<strong>select 【查询内容】from 【数据表名】group by [列名表达式]</strong><br><img src="https://i.imgur.com/BVBjrbh.png" alt=""></font></li><li><font color="#DC143C"> 6）having语句：<strong>select 【查询内容】from 【数据表名】group by [列名表达式] having 【条件】</strong><br><img src="https://i.imgur.com/U3N8EHO.png" alt=""></font></li><li><font color="#DC143C"> 6）order by语句：<strong>select 【查询内容】from 【数据表名】order by [列名表达式]</strong><br><img src="https://i.imgur.com/e48tUT2.png" alt=""></font></li><li><font color="#DC143C"> 6）having语句：<strong>select 【查询内容】from 【数据表名】limit n(,m)</strong><br><img src="https://i.imgur.com/UzudAAh.png" alt=""><br><img src="https://i.imgur.com/mchgJk2.png" alt=""><br><br></font></li></ul></li></ul><hr><ul><li><strong>第六部分：高级查询语句</strong><ul><li><font color="#DC143C">子查询：<ul><li>不相关子查询：<ul><li>1.子查询语句不能使用order by。</li><li>2.内层查询不依赖外部查询。</li><li>3.子查询并不显示结果，只是返回给外部查询</li><li>4.返回多个结果可以用any或者all来表示。</li><li>5.也可以使用聚合函数（max，min等）。</li><li>6.谓词表和谓词和聚集函数及in谓词的等价关系<br><img src="https://i.imgur.com/1QiNhwo.png" alt=""><br><img src="https://i.imgur.com/3afujFC.png" alt=""></li><li>例子1：（in或者not in）<br><img src="https://i.imgur.com/fQQL2nH.jpg" alt=""></li><li>例子2： （比较运算符）<br><img src="https://i.imgur.com/J98u6i6.jpg" alt=""></li><li>例子3：  (谓词和聚集函数)<br><img src="https://i.imgur.com/FdpTiEX.jpg" alt=""></li></ul></li><li>相关子查询：<ul><li>依赖于外层查询</li><li>执行时子查询需要不断引用父查询中的列值</li></ul></li><li>Exists：<ul><li>子查询不返回具体数值，只返回逻辑值 </li><li>select 属性列表达式用*表示，因为exists不具有实际意义<br><img src="https://i.imgur.com/80mFy02.jpg" alt=""><br><br></li></ul></li></ul></font></li></ul></li></ul><hr><ul><li><strong>第七部分</strong><ul><li>新建视图： <strong>create view [视图名]（属性列）[select 子查询] with check option</strong><br><img src="https://i.imgur.com/7LDi4uv.png" alt=""><br><img src="https://i.imgur.com/mlqY7Jc.png" alt=""></li><li>删除视图：<strong>drop view [视图名]</strong><br><img src="https://i.imgur.com/PxuAVjI.png" alt=""></li><li>查询视图信息： <strong>与表一致</strong><br><img src="https://i.imgur.com/Tk4KWkz.png" alt=""></li><li>更新数据与表一致。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数据库简介：&quot;&gt;&lt;a href=&quot;#数据库简介：&quot; class=&quot;headerlink&quot; title=&quot;数据库简介：&quot;&gt;&lt;/a&gt;数据库简介：&lt;br&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;数据库(Database)是按照数据结构来组织、存储和管理数据的仓库，它产生于距今六十多年前，随着信息技术和市场的发展，特别是二十世纪九十年代以后，数据管理不再仅仅是存储和管理数据，而转变成用户所需要的各种数据管理的方式。数据库有很多种类型，从最简单的存储有各种数据的表格到能够进行海量数据存储的大型数据库系统都在各个方面得到了广泛的应用……&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>安全杂项例题</title>
    <link href="http://yoursite.com/2017/10/14/%E5%AE%89%E5%85%A8%E6%9D%82%E9%A1%B9%E4%BE%8B%E9%A2%98/"/>
    <id>http://yoursite.com/2017/10/14/安全杂项例题/</id>
    <published>2017-10-14T09:02:11.000Z</published>
    <updated>2017-11-06T12:04:55.996Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安全杂项简介："><a href="#安全杂项简介：" class="headerlink" title="安全杂项简介："></a>安全杂项简介：<br></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>ISC即安全杂项，题目涉及流量分析、电子取证、人肉搜索、数据分析、大数据统计等等，覆盖面比较广，主要考查参赛选手的各种基础综合知识。本系列课程中你可以学到各种编码解码，社会工程学，流量分析，日志分析等知识。</strong><a id="more"></a></p><h1 id="例1：功夫"><a href="#例1：功夫" class="headerlink" title="例1：功夫"></a>例1：功夫<br></h1><p><strong>1.题目来源：<a href="http://http://www.shiyanbar.com/ctf/1887" target="_blank" rel="external">http://http://www.shiyanbar.com/ctf/1887</a></strong><br><strong>2.解题思路：</strong> </p><ul><li>步骤：<ul><li>1.得到一个kungfu.rar的包</li><li>2.在Ubuntu下跑得到一个png的图片<br> <img src="http://oxnvtxe03.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171013215859.png" alt=""></li><li>3.把文件格式改为png</li><li>4.得到这样的图片，有hexedit打开，文件末尾出现字符<font color="#DC143C">“VF95c0s5XzVyaGtfX3VGTXR9M0Vse251QEUg”</font></li><li>5.发现这是一个基于base64编码的字符</li><li>6.通过解base64编码：得到<font color="#DC143C">“T_ysK9_5rhk__uFMt}3El{nu@E”</font>字符串</li><li>7.根据经验两个括号方向相反，得知这是栅栏密码</li><li>8.解栅栏密码得<font color="#DC143C">“Th3_kEy<em>ls</em>{Kun9Fu_M@5tEr}”</font></li><li>9.坑爹得是，提交括号里面的就行！<br><br></li></ul><hr><h1 id="例2："><a href="#例2：" class="headerlink" title="例2："></a>例2：<br></h1><strong>1.题目来源:<a href="http://http://www.shiyanbar.com/ctf/1886" target="_blank" rel="external">http://http://www.shiyanbar.com/ctf/1886</a></strong><br><strong>2.解题思路:</strong></li><li>步骤：<ul><li>1.打开连接<a href="http://ctf5.shiyanbar.com/423/misc/code.txt" target="_blank" rel="external">http://ctf5.shiyanbar.com/423/misc/code.txt</a>看到一群字符，得知这是base64编码。</li><li>2.如图所示：<br><img src="https://i.imgur.com/1ddK7Np.png" alt=""></li><li>3.利用base64解码：得到如下的东西<br><img src="https://i.imgur.com/oZhypVt.png" alt=""></li><li>4.这是二维码，但是我生成不了图片，所以在网上找到一个教程，得到如下的图片<br><img src="http://oxnvtxe03.bkt.clouddn.com/156462156066504801.png" alt="">)</li><li>5.扫描二维码即可。</li><li>备注：参照wp：<br><a href="http://www.shiyanbar.com/ctf/writeup/2661" target="_blank" rel="external">http://www.shiyanbar.com/ctf/writeup/2661</a><br><br></li></ul></li></ul><hr><h1 id="例3"><a href="#例3" class="headerlink" title="例3"></a>例3</h1><p><strong>1.题目来源：<a href="http://www.shiyanbar.com/ctf/1879" target="_blank" rel="external">http://www.shiyanbar.com/ctf/1879</a></strong><br><strong>2.解题思路：</strong></p><ul><li>步骤：<ul><li>1.下载为zip文件，通过binwalk测试不存在隐写</li><li>2.打开出现密码，没办法只能跑，开始是暴力破解的方式，后来采用字典的形式跑出来结果：<br><img src="http://oxnvtxe03.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171015194747.png" alt=""></li><li>3.得到图片，查看属性，得知flag。<br><br></li></ul></li></ul><hr><h1 id="例4"><a href="#例4" class="headerlink" title="例4"></a>例4</h1><p><strong>1.题目来源：<a href="http://www.shiyanbar.com/ctf/1860" target="_blank" rel="external">http://www.shiyanbar.com/ctf/1860</a></strong><br><strong>2.解题思路：</strong></p><ul><li>步骤：<ul><li>1.下载zip，打开，出现一个txt文件，里面写的坐标，联系到题干，就容易想到这些坐标可能就是一个一个的像素点。</li><li>2.抄袭抄袭抄袭，我们猿类的事情能叫抄袭么？</li><li>3.写出一个py脚本：<br><br><img src="http://oxnvtxe03.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171016205833.png" alt=""></li><li>4.得到一个图片，扫扫就行！<br><br><img src="http://oxnvtxe03.bkt.clouddn.com/img%252FOEErd2swdmxqZW5Ha252U2d2U1JvQllHdytib3FqQVRyR3hzRzg1cE16UmpDZ1p0Yi81UndnPT0.jpg" alt=""><br><br></li></ul></li></ul><hr><h1 id="例5"><a href="#例5" class="headerlink" title="例5"></a>例5</h1><p><strong>1.题目来源：<a href="http://www.shiyanbar.com/ctf/1857" target="_blank" rel="external">http://www.shiyanbar.com/ctf/1857</a></strong><br><strong>2.解题思路</strong></p><ul><li>步骤：<ul><li>1.下载rar得到一个gif的文件，但是这个文件打不开，肯定改写了文件标志，使得软件无法读取，从网上找了一个gif的文件，修复标志头即可！<br><br><img src="https://i.imgur.com/bixIRO0.png" alt=""></li><li>2.得到gif图，本来我想用查图神器steg看看隐藏的信息！看了一遍没有发现！<br></li><li>3.脑洞来了，网上说记录小黄人走的信息，然后根据base64，得到flag！<br></li><li>4.利用Gifsplitter分解gif，然后根据如图的编号，记录编号的位置<br><br><img src="https://i.imgur.com/3p3hRgk.png" alt=""><br><br><br>记录编号：<br><br><img src="https://i.imgur.com/6giUfKi.png" alt=""><br></li><li>5.根据base64转化表得到flag<br><br><img src="https://i.imgur.com/3nNtigM.png" alt=""><br><br><img src="https://i.imgur.com/TKjmTH2.png" alt=""><br><br><img src="https://i.imgur.com/wBI07rc.png" alt=""><br><br><br></li></ul></li></ul><hr><h1 id="例6："><a href="#例6：" class="headerlink" title="例6："></a>例6：</h1><p><strong>1.题目来源：<a href="http://www.shiyanbar.com/ctf/1855" target="_blank" rel="external">http://www.shiyanbar.com/ctf/1855</a></strong><br><strong>2.解题思路：</strong></p><ul><li>步骤：<ul><li>1.得到两个txt文件，经过ubuntu的查看，发现都是32字节的文件<br><img src="https://i.imgur.com/95FLzfn.png" alt=""></li><li>2.脑洞：对他们进行异或操作。<br><br><img src="https://i.imgur.com/WmNCY1N.png" alt=""><br><br></li></ul></li></ul><hr><h1 id="例7："><a href="#例7：" class="headerlink" title="例7："></a>例7：</h1><p><strong>1.题目来源：<a href="http://www.shiyanbar.com/ctf/1851" target="_blank" rel="external">http://www.shiyanbar.com/ctf/1851</a></strong><br><strong>2.解题思路：</strong></p><ul><li>步骤:<ul><li>1.利用binwalk跑出，这是一个zip文件（错误思路：我直接用hex打开也能查到key，但是找不到下面所说的秘钥文件）</li><li>2.解压出来，得到一个公钥文件和一个秘钥文件。<br><img src="https://i.imgur.com/7hEsYjQ.png" alt=""></li><li>3.首先分析key文件。hex打开，发现这是一个base64加密的文件。解密得。<br><img src="https://i.imgur.com/GguGuNk.png" alt=""></li><li>4.根据百度答案，nicki的歌名为anaconda（蛇）</li><li>5.最难的是，没接触过加密算法不知道有一个serpent这个加密算法，百度了一下。<br><img src="https://i.imgur.com/rcc9fok.png" alt=""></li><li>6.找到一个serpent的解密网站<br><img src="https://i.imgur.com/qUjdIbS.png" alt=""><br><br></li></ul></li></ul><hr><h1 id="例8："><a href="#例8：" class="headerlink" title="例8："></a>例8：</h1><p><strong>题目来源：<a href="http://www.shiyanbar.com/ctf/1850" target="_blank" rel="external">http://www.shiyanbar.com/ctf/1850</a></strong><br><strong>解题思路：</strong></p><ul><li>步骤：<ul><li>1.放到ubuntu里面binwalk去跑。<br><img src="https://i.imgur.com/nY4BHfv.png" alt=""></li><li>2.发现这是很多个gzip压缩包构成</li><li>3.我们用binwalk的解压参数，对其进行解压缩操作<br><img src="https://i.imgur.com/m3zndVw.png" alt=""></li><li>4.查看属性是gzip属性，把文件格式换成zip继续解压，然后用hex打开</li><li>5.得到以下<br><img src="https://i.imgur.com/DZYnRa7.png" alt=""></li><li>6.由此，我们知道每个文件对应的是一个字符。</li><li>7.利用python，不断地去解压和读取十六进制字符可以得到flag。</li><li>注：binwalk的具体用法如下：<br><img src="https://i.imgur.com/s0AWbZG.png" alt=""><br><br></li></ul></li></ul><hr><h1 id="例9："><a href="#例9：" class="headerlink" title="例9："></a>例9：</h1><p><strong>题目来源：<a href="http://www.shiyanbar.com/ctf/1844" target="_blank" rel="external">http://www.shiyanbar.com/ctf/1844</a></strong><br><strong>解题思路：</strong></p><ul><li>步骤：<ul><li>1.音频文件，试听发现双音轨，且存在一条音道是摩尔斯电码。</li><li>2.上神器AU，打开发现：真的存在摩尔斯电码的脉冲形式。<br><img src="https://i.imgur.com/t0eLACH.png" alt=""></li><li>3.根据摩尔斯密码表，长的为-，短的为·，得到电码为：<br><img src="https://i.imgur.com/iqrSaGI.png" alt=""></li><li>4.flag是：MUZIKISG00D<br><br></li></ul></li></ul><hr><h1 id="例10：保险箱"><a href="#例10：保险箱" class="headerlink" title="例10：保险箱"></a>例10：保险箱</h1><p><strong> 题目来源：<a href="http://www.shiyanbar.com/ctf/1835" target="_blank" rel="external">http://www.shiyanbar.com/ctf/1835</a></strong><br><strong>解题思路：</strong></p><ul><li>步骤：<ul><li>1.利用rar破解工具破解<br><img src="https://i.imgur.com/t0oZzku.png" alt=""></li><li>2.得到txt，直接输入flag即可。<br><img src="https://i.imgur.com/7Zxcoes.png" alt=""></li><li>可能有人以为是md5。何为md5？<br><a href="http://www.shiyanbar.com/questions/1099" target="_blank" rel="external">http://www.shiyanbar.com/questions/1099</a>32位密码。<br><br></li></ul></li></ul><hr><h1 id="例11：社工岛的历练"><a href="#例11：社工岛的历练" class="headerlink" title="例11：社工岛的历练"></a>例11：社工岛的历练</h1><p><strong> 题目来源：<a href="http://www.shiyanbar.com/ctf/1816" target="_blank" rel="external">http://www.shiyanbar.com/ctf/1816</a></strong><br><strong>解题思路：</strong></p><ul><li>步骤：<ul><li>1.题干说明网易爆出的密码泄露，首先想到的是漏洞时间，首先到乌云上搜索关于该漏洞的信息。但是乌云挂了，所以找到一份乌云镜像。<a href="http://wooyun.jozxing.cc/static/bugs/wooyun-2011-03866.html" target="_blank" rel="external">http://wooyun.jozxing.cc/static/bugs/wooyun-2011-03866.html</a></li><li>2.在该镜像上有一张图片，发现有用户名是461443564@163.com的密码<br><img src="https://i.imgur.com/Jj2bexE.jpg" alt=""><br><br></li></ul></li></ul><hr><h1 id="例12：抓到你了"><a href="#例12：抓到你了" class="headerlink" title="例12：抓到你了"></a>例12：抓到你了</h1><p><strong> 题目来源：<a href="http://www.shiyanbar.com/ctf/1813" target="_blank" rel="external">http://www.shiyanbar.com/ctf/1813</a></strong><br><strong> 解题思路：</strong></p><ul><li>步骤：<ul><li>1.根据题目判断是数据包文件，直接拖到wireshark中</li><li>2.因为是ping数据包，ping使用的是icmp协议，筛选出5条报文<br><img src="https://i.imgur.com/kh6TCmS.png" alt=""></li><li>3.查看详细信息，得到date数据<br><img src="https://i.imgur.com/QT70RTL.png" alt=""></li><li><strong>备注：学习wireshark的使用和tcpip协议的基础知识</strong></li></ul></li></ul><h2 id=""><a href="#" class="headerlink" title=""></a><br></h2><h1 id="例13：Only-One-File"><a href="#例13：Only-One-File" class="headerlink" title="例13：Only One File"></a>例13：Only One File</h1><p><strong> 题目来源：<a href="http://www.shiyanbar.com/ctf/1783" target="_blank" rel="external">http://www.shiyanbar.com/ctf/1783</a></strong><br><strong> 解题思路：</strong></p><ul><li>步骤：<ul><li>1.给了一个zip文件，通过题目的提示在linux下会更加高效，所以在linux利用binwalk跑一下，发现里面存在很多zip文件。<br><img src="https://i.imgur.com/LjrY9Vk.png" alt=""></li><li>2.利用binwalk -e的命令解压文件，得到<br><img src="https://i.imgur.com/1nrfYz8.png" alt=""></li><li>3.然后进入文件夹，发现一个名为xaa无格式文件，但是linux已经显示了这个文件的属性（图片），利用file跑一遍。发现这是一个png图片，但是打不开。<br><img src="https://i.imgur.com/TiK2eiP.png" alt=""></li><li>4.根据题意只存在一个文件，说明要把得到的文件合并起来，利用cat命令合并文件<br><img src="https://i.imgur.com/20rIcJz.png" alt=""></li><li>5.但是这个和一般的图片隐写不一样，利用常规工具无法得到结果，hex打开，发现这是firework弄得图片文件。<br><img src="https://i.imgur.com/bOI8FtB.png" alt=""></li><li>6.利用firework打开发现如图的“二维码”<br><img src="https://i.imgur.com/xZubEIp.png" alt=""></li><li>7.发现其色调和一般二维码色调相反，利用滤镜—调整颜色—颜色反转得到原图，扫描。<br><img src="https://i.imgur.com/j7b8Zgh.png" alt=""><br><img src="https://i.imgur.com/1CF5QjC.png" alt=""></li><li>8.<strong>firework的介绍：</strong><a href="https://baike.baidu.com/item/fireworks/444403" target="_blank" rel="external">https://baike.baidu.com/item/fireworks/444403</a></li></ul></li></ul><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><br></h2><h1 id="例14：NSCTF-misc250"><a href="#例14：NSCTF-misc250" class="headerlink" title="例14：NSCTF misc250"></a>例14：NSCTF misc250</h1><p><strong> 题目来源：<a href="http://www.shiyanbar.com/ctf/1767" target="_blank" rel="external">http://www.shiyanbar.com/ctf/1767</a></strong><br><strong> 解题思路：</strong></p><ul><li>步骤：<ul><li>1.拖到wireshark分析，根据题意，这是室友在局域网下载文件时，所截获的数据包，所以筛选出http协会的数据出来分析。<br><img src="https://i.imgur.com/pu9bP0O.png" alt=""></li><li>2.根据wireshark给出的描述，发现第129个分组是html文件，我们尝试打开分组。<br><img src="https://i.imgur.com/kK5XPxs.png" alt=""></li><li>3.找到了关键词，把这个文件保存成html文件（右键到处分组字节流）。</li><li>4.打开第150个分组，发现这是一个rar。保存该分组<br><img src="https://i.imgur.com/7EnGJCE.png" alt=""></li><li>5.发现rar文件需要密码，打开html文件。<br><img src="https://i.imgur.com/q8UmzRY.png" alt=""></li><li>6.开始想的是用掩码爆破的方式爆破掉，但是不知道为什么会失败，看了别人的wp后，我们先构造字典，然后字典爆破。<br><img src="https://i.imgur.com/y2sEfXM.png" alt=""></li><li>7.然后跑字典得到密码，解压，得到flag<br><img src="https://i.imgur.com/RtFuMqm.png" alt=""><br><img src="https://i.imgur.com/pmLvKv1.png" alt=""></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安全杂项简介：&quot;&gt;&lt;a href=&quot;#安全杂项简介：&quot; class=&quot;headerlink&quot; title=&quot;安全杂项简介：&quot;&gt;&lt;/a&gt;安全杂项简介：&lt;br&gt;&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;ISC即安全杂项，题目涉及流量分析、电子取证、人肉搜索、数据分析、大数据统计等等，覆盖面比较广，主要考查参赛选手的各种基础综合知识。本系列课程中你可以学到各种编码解码，社会工程学，流量分析，日志分析等知识。&lt;/strong&gt;
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
</feed>
