<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>findream&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-02T06:29:24.854Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>findream</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>线程局部存储技术</title>
    <link href="http://yoursite.com/2017/12/02/%E7%BA%BF%E7%A8%8B%E5%B1%80%E9%83%A8%E5%AD%98%E5%82%A8%E6%8A%80%E6%9C%AF/"/>
    <id>http://yoursite.com/2017/12/02/线程局部存储技术/</id>
    <published>2017-12-02T05:45:11.000Z</published>
    <updated>2017-12-02T06:29:24.854Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线程局部存储技术："><a href="#线程局部存储技术：" class="headerlink" title="线程局部存储技术："></a>线程局部存储技术：</h1><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;线程局部存储技术（Thread Local Storage）很好的解决了多线程程序设计中变量的同步问题。</strong><br><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用TSL技术，可以让进程拥有同一个全局变量，但是在不同的线程却对应着不同的值，这些变量只是对应特定的线程才是有意义的。</strong><a id="more"></a></p><h1 id="两个前提知识："><a href="#两个前提知识：" class="headerlink" title="两个前提知识："></a>两个前提知识：</h1><h2 id="1-进程环境块："><a href="#1-进程环境块：" class="headerlink" title="1.进程环境块："></a>1.进程环境块：</h2><p>**&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;操作系统会为每个进程设置一个数据结构，用来记录进程的相关信息，在NT中，该结构可以从进程空间的FS:[0x30]处找到，PEB描述的信息主要有：进程的状态，进程堆，映像等信息。该结构的信息如下：<br><figure class="highlight plain"><figcaption><span>_PEB结构：</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">typedef struct _PEB </div><div class="line">&#123; </div><div class="line">/*000*/ UCHAR InheritedAddressSpace;</div><div class="line">/*001*/ UCHAR ReadImageFileExecOptions;</div><div class="line">/*002*/ UCHAR BeingDebugged;        //程序是否处于调试状态</div><div class="line">/*003*/ UCHAR SpareBool; // Allocation size</div><div class="line">/*004*/ HANDLE Mutant;</div><div class="line">/*008*/ HINSTANCE ImageBaseAddress; //进程映像基地址 </div><div class="line">/*00C*/ VOID *DllList;              //加载的其他模块信息</div><div class="line">/*010*/ PPROCESS_PARAMETERS *ProcessParameters;</div><div class="line">/*014*/ ULONG SubSystemData;</div><div class="line">/*018*/ HANDLE DefaultHeap;</div><div class="line">/*01C*/ KSPIN_LOCK FastPebLock;</div><div class="line">/*020*/ ULONG FastPebLockRoutine;</div><div class="line">/*024*/ ULONG FastPebUnlockRoutine;</div><div class="line">/*028*/ ULONG EnvironmentUpdateCount;</div><div class="line">/*02C*/ ULONG KernelCallbackTable;</div><div class="line">/*030*/ LARGE_INTEGER SystemReserved;</div><div class="line">/*038*/ ULONG FreeList;</div><div class="line">/*03C*/ ULONG TlsExpansionCounter;  //TSL索引计数</div><div class="line">/*040*/ ULONG TlsBitmap;            //TSL位图指针</div><div class="line">/*044*/ LARGE_INTEGER TlsBitmapBits;//TSL进程标志位</div><div class="line">/*04C*/ ULONG ReadOnlySharedMemoryBase;</div><div class="line">/*050*/ ULONG ReadOnlySharedMemoryHeap;</div><div class="line">/*054*/ ULONG ReadOnlyStaticServerData;</div><div class="line">/*058*/ ULONG AnsiCodePageData;</div><div class="line">/*05C*/ ULONG OemCodePageData;</div><div class="line">/*060*/ ULONG UnicodeCaseTableData;</div><div class="line">/*064*/ ULONG NumberOfProcessors;</div><div class="line">/*068*/ LARGE_INTEGER NtGlobalFlag; // Address of a local copy</div><div class="line">/*070*/ LARGE_INTEGER CriticalSectionTimeout;</div><div class="line">/*078*/ ULONG HeapSegmentReserve;</div><div class="line">/*07C*/ ULONG HeapSegmentCommit;</div><div class="line">/*080*/ ULONG HeapDeCommitTotalFreeThreshold;</div><div class="line">/*084*/ ULONG HeapDeCommitFreeBlockThreshold;</div><div class="line">/*088*/ ULONG NumberOfHeaps;</div><div class="line">/*08C*/ ULONG MaximumNumberOfHeaps;</div><div class="line">/*090*/ ULONG ProcessHeaps;</div><div class="line">/*094*/ ULONG GdiSharedHandleTable;</div><div class="line">/*098*/ ULONG ProcessStarterHelper;</div><div class="line">/*09C*/ ULONG GdiDCAttributeList;</div><div class="line">/*0A0*/ KSPIN_LOCK LoaderLock;</div><div class="line">/*0A4*/ ULONG OSMajorVersion;</div><div class="line">/*0A8*/ ULONG OSMinorVersion;</div><div class="line">/*0AC*/ USHORT OSBuildNumber;</div><div class="line">/*0AE*/ USHORT OSCSDVersion;</div><div class="line">/*0B0*/ ULONG OSPlatformId;</div><div class="line">/*0B4*/ ULONG ImageSubsystem;</div><div class="line">/*0B8*/ ULONG ImageSubsystemMajorVersion;</div><div class="line">/*0BC*/ ULONG ImageSubsystemMinorVersion;</div><div class="line">/*0C0*/ ULONG ImageProcessAffinityMask;</div><div class="line">/*0C4*/ ULONG GdiHandleBuffer[0x22];</div><div class="line">/*14C*/ ULONG PostProcessInitRoutine;</div><div class="line">/*150*/ ULONG TlsExpansionBitmap;</div><div class="line">/*154*/ UCHAR TlsExpansionBitmapBits[0x80];</div><div class="line">/*1D4*/ ULONG SessionId;</div><div class="line">&#125; PEB, *PPEB;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;线程局部存储技术：&quot;&gt;&lt;a href=&quot;#线程局部存储技术：&quot; class=&quot;headerlink&quot; title=&quot;线程局部存储技术：&quot;&gt;&lt;/a&gt;线程局部存储技术：&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;线程局部存储技术（Thread Local Storage）很好的解决了多线程程序设计中变量的同步问题。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;使用TSL技术，可以让进程拥有同一个全局变量，但是在不同的线程却对应着不同的值，这些变量只是对应特定的线程才是有意义的。&lt;/strong&gt;
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>VB程序调试练习</title>
    <link href="http://yoursite.com/2017/11/27/VB%E7%A8%8B%E5%BA%8F%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/11/27/VB程序逆向练习/</id>
    <published>2017-11-27T13:45:11.000Z</published>
    <updated>2017-11-30T09:33:47.141Z</updated>
    
    <content type="html"><![CDATA[<h1 id="例子1："><a href="#例子1：" class="headerlink" title="例子1："></a>例子1：</h1><ul><li><p>思路&amp;步骤：</p><ul><li>1）查壳</li><li>2）测试发现，这个程序错误没有提示，我们对vbaLenBstr下断，注意对这个函数下断，最好使用IDA 对这个函数进行交叉参考，不然找不到正确的函数。<a id="more"></a></li><li>3）我们找到函数后，向上看我们可以看到函数的入口点。可以断定这是一个MAIN函数。</li><li><p>4）挨个分析。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div></pre></td><td class="code"><pre><div class="line"><span class="number">00408390</span>   &gt; \<span class="number">55</span>            <span class="keyword">push</span> <span class="built_in">ebp</span></div><div class="line"><span class="number">00408391</span>   .  8BEC          <span class="keyword">mov</span> <span class="built_in">ebp</span>,<span class="built_in">esp</span></div><div class="line"><span class="number">00408393</span>   .  83EC <span class="number">14</span>       <span class="keyword">sub</span> <span class="built_in">esp</span>,<span class="number">0x14</span></div><div class="line"><span class="number">00408396</span>   .  <span class="number">68</span> <span class="number">46164000</span>   <span class="keyword">push</span> &lt;<span class="keyword">jmp</span>.&amp;MSVBVM60.__vbaExceptHandler&gt;  <span class="comment">;  SE 处理程序安装</span></div><div class="line">0040839B   .  <span class="number">64</span>:A1 <span class="number">0000000</span>&gt;<span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">fs</span>:[<span class="number">0</span>]</div><div class="line">004083A1   .  <span class="number">50</span>            <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line">004083A2   .  <span class="number">64</span>:<span class="number">8925</span> <span class="number">00000</span>&gt;<span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">fs</span>:[<span class="number">0</span>],<span class="built_in">esp</span></div><div class="line">004083A9   .  81EC E8000000 <span class="keyword">sub</span> <span class="built_in">esp</span>,<span class="number">0xE8</span></div><div class="line">004083AF   .  <span class="number">53</span>            <span class="keyword">push</span> <span class="built_in">ebx</span></div><div class="line">004083B0   .  <span class="number">56</span>            <span class="keyword">push</span> <span class="built_in">esi</span></div><div class="line">004083B1   .  <span class="number">57</span>            <span class="keyword">push</span> <span class="built_in">edi</span></div><div class="line">004083B2   .  <span class="number">8965</span> EC       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x14</span>],<span class="built_in">esp</span></div><div class="line">004083B5   .  C745 F0 <span class="number">70114</span>&gt;<span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x10</span>],VBCrack1<span class="meta">.00401170</span></div><div class="line">004083BC   .  8B75 <span class="number">08</span>       <span class="keyword">mov</span> <span class="built_in">esi</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>+<span class="number">0x8</span>]</div><div class="line">004083BF   .  8BC6          <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">esi</span></div><div class="line">004083C1   .  83E0 <span class="number">01</span>       <span class="keyword">and</span> <span class="built_in">eax</span>,<span class="number">0x1</span></div><div class="line">004083C4   .  <span class="number">8945</span> F4       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0xC</span>],<span class="built_in">eax</span></div><div class="line">004083C7   .  83E6 FE       <span class="keyword">and</span> <span class="built_in">esi</span>,<span class="number">0xFFFFFFFE</span></div><div class="line">004083CA   .  <span class="number">8975</span> <span class="number">08</span>       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>+<span class="number">0x8</span>],<span class="built_in">esi</span></div><div class="line">004083CD   .  33FF          <span class="keyword">xor</span> <span class="built_in">edi</span>,<span class="built_in">edi</span></div><div class="line">004083CF   .  <span class="number">897D</span> F8       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x8</span>],<span class="built_in">edi</span></div><div class="line">004083D2   .  8B0E          <span class="keyword">mov</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">esi</span>]</div><div class="line">004083D4   .  <span class="number">56</span>            <span class="keyword">push</span> <span class="built_in">esi</span></div><div class="line">004083D5   .  FF51 <span class="number">04</span>       <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">ecx</span>+<span class="number">0x4</span>]</div><div class="line">004083D8   .  <span class="number">897D</span> D4       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x2C</span>],<span class="built_in">edi</span></div><div class="line">004083<span class="built_in">DB</span>   .  <span class="number">897D</span> D8       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x28</span>],<span class="built_in">edi</span></div><div class="line">004083DE   .  <span class="number">897D</span> D0       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x30</span>],<span class="built_in">edi</span></div><div class="line">004083E1   .  <span class="number">897D</span> C0       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x40</span>],<span class="built_in">edi</span></div><div class="line">004083E4   .  <span class="number">897D</span> BC       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x44</span>],<span class="built_in">edi</span></div><div class="line">004083E7   .  <span class="number">897D</span> B8       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x48</span>],<span class="built_in">edi</span></div><div class="line">004083EA   .  <span class="number">897D</span> B4       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x4C</span>],<span class="built_in">edi</span></div><div class="line">004083ED   .  <span class="number">897D</span> B0       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x50</span>],<span class="built_in">edi</span></div><div class="line">004083F0   .  <span class="number">897D</span> A0       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x60</span>],<span class="built_in">edi</span></div><div class="line">004083F3   .  <span class="number">897D</span> <span class="number">90</span>       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x70</span>],<span class="built_in">edi</span></div><div class="line">004083F6   .  <span class="number">897D</span> <span class="number">80</span>       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x80</span>],<span class="built_in">edi</span></div><div class="line">004083F9   .  89BD 70FFFFFF <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x90</span>],<span class="built_in">edi</span></div><div class="line">004083FF   .  89BD 60FFFFFF <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0xA0</span>],<span class="built_in">edi</span></div><div class="line"><span class="number">00408405</span>   .  6A <span class="number">01</span>         <span class="keyword">push</span> <span class="number">0x1</span>                                       <span class="comment">; /OnErrEvent = Goto Address</span></div><div class="line"><span class="number">00408407</span>   .  FF15 5C104000 <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaOnError&gt;]   <span class="comment">; \__vbaOnError</span></div><div class="line"><span class="number">0040840D</span>   .  8B16          <span class="keyword">mov</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">esi</span>]</div><div class="line">0040840F   .  <span class="number">56</span>            <span class="keyword">push</span> <span class="built_in">esi</span></div><div class="line"><span class="number">00408410</span>   .  FF92 FC020000 <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">edx</span>+<span class="number">0x2FC</span>]</div><div class="line"><span class="number">00408416</span>   .  <span class="number">50</span>            <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line"><span class="number">00408417</span>   .  8D45 B4       <span class="keyword">lea</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x4C</span>]</div><div class="line">0040841A   .  <span class="number">50</span>            <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line">0040841B   .  8B1D <span class="number">60104000</span> <span class="keyword">mov</span> <span class="built_in">ebx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaObjSet&gt;] <span class="comment">;  MSVBVM60.__vbaObjSet</span></div><div class="line"><span class="number">00408421</span>   .  FFD3          <span class="keyword">call</span> <span class="built_in">ebx</span>                                       <span class="comment">;  &lt;&amp;MSVBVM60.__vbaObjSet&gt;</span></div><div class="line"><span class="number">00408423</span>   .  8BF8          <span class="keyword">mov</span> <span class="built_in">edi</span>,<span class="built_in">eax</span></div><div class="line"><span class="number">00408425</span>   .  8B0F          <span class="keyword">mov</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">edi</span>]</div><div class="line"><span class="number">00408427</span>   .  8D55 C0       <span class="keyword">lea</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x40</span>]</div><div class="line">0040842A   .  <span class="number">52</span>            <span class="keyword">push</span> <span class="built_in">edx</span></div><div class="line">0040842B   .  <span class="number">57</span>            <span class="keyword">push</span> <span class="built_in">edi</span></div><div class="line">0040842C   .  FF91 A0000000 <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">ecx</span>+<span class="number">0xA0</span>]</div><div class="line"><span class="number">00408432</span>   .  DBE2          <span class="keyword">fclex</span>                                          <span class="comment">;  浮点错误清除异常</span></div><div class="line"><span class="number">00408434</span>   .  85C0          <span class="keyword">test</span> <span class="built_in">eax</span>,<span class="built_in">eax</span></div><div class="line"><span class="number">00408436</span>   .  <span class="number">7D</span> <span class="number">12</span>         <span class="keyword">jge</span> XVBCrack1.0040844A</div><div class="line"><span class="number">00408438</span>   .  <span class="number">68</span> A0000000   <span class="keyword">push</span> <span class="number">0xA0</span></div><div class="line"><span class="number">0040843D</span>   .  <span class="number">68</span> D05A4000   <span class="keyword">push</span> VBCrack1.00405AD0</div><div class="line"><span class="number">00408442</span>   .  <span class="number">57</span>            <span class="keyword">push</span> <span class="built_in">edi</span></div><div class="line"><span class="number">00408443</span>   .  <span class="number">50</span>            <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line"><span class="number">00408444</span>   .  FF15 <span class="number">48104000</span> <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaHresultChec&gt;<span class="comment">;  MSVBVM60.__vbaHresultCheckObj</span></div><div class="line">0040844A   &gt;  8B45 C0       <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x40</span>]</div><div class="line"><span class="number">0040844D</span>   .  <span class="number">50</span>            <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line">0040844E   .  FF15 <span class="number">34104000</span> <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.#<span class="number">519</span>&gt;]           <span class="comment">;  MSVBVM60.rtcTrimBstr</span></div><div class="line"><span class="number">00408454</span>   .  8BD0          <span class="keyword">mov</span> <span class="built_in">edx</span>,<span class="built_in">eax</span></div><div class="line"><span class="number">00408456</span>   .  8D4D D0       <span class="keyword">lea</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x30</span>]</div><div class="line"><span class="number">00408459</span>   .  FF15 3C114000 <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaStrMove&gt;]   <span class="comment">;  MSVBVM60.__vbaStrMove</span></div><div class="line">0040845F   .  8D4D C0       <span class="keyword">lea</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x40</span>]</div><div class="line"><span class="number">00408462</span>   .  FF15 <span class="number">54114000</span> <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaFreeStr&gt;]   <span class="comment">;  MSVBVM60.__vbaFreeStr</span></div><div class="line"><span class="number">00408468</span>   .  8D4D B4       <span class="keyword">lea</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x4C</span>]</div><div class="line">0040846B   .  FF15 <span class="number">58114000</span> <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaFreeObj&gt;]   <span class="comment">;  MSVBVM60.__vbaFreeObj</span></div><div class="line"><span class="number">00408471</span>   .  8B4D D0       <span class="keyword">mov</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x30</span>]</div><div class="line"><span class="number">00408474</span>   .  <span class="number">51</span>            <span class="keyword">push</span> <span class="built_in">ecx</span>                                       <span class="comment">; /String</span></div><div class="line"><span class="number">00408475</span>   .  FF15 <span class="number">10104000</span> <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaLenBstr&gt;]   <span class="comment">; \__vbaLenBstr</span></div><div class="line">0040847B   .  8BC8          <span class="keyword">mov</span> <span class="built_in">ecx</span>,<span class="built_in">eax</span></div><div class="line"><span class="number">0040847D</span>   .  FF15 <span class="number">98104000</span> <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaI2I4&gt;]      <span class="comment">;  把4字节整数转化为2字节整数</span></div><div class="line"><span class="number">00408483</span>   .  <span class="number">8945</span> DC       <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x24</span>],<span class="built_in">eax</span></div><div class="line"><span class="number">00408486</span>   .  BF <span class="number">01000000</span>   <span class="keyword">mov</span> <span class="built_in">edi</span>,<span class="number">0x1</span></div><div class="line">0040848B   &gt;  <span class="number">66</span>:3B7D DC    <span class="keyword">cmp</span> <span class="built_in">di</span>,<span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x24</span>]</div><div class="line">0040848F   .  0F8F <span class="number">31010000</span> <span class="keyword">jg</span> VBCrack1.004085C6                           <span class="comment">;  大于则跳转</span></div><div class="line"><span class="number">00408495</span>   .  0FBFD7        <span class="keyword">movsx</span> <span class="built_in">edx</span>,<span class="built_in">di</span></div><div class="line"><span class="number">00408498</span>   .  <span class="number">8995</span> 14FFFFFF <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0xEC</span>],<span class="built_in">edx</span></div><div class="line">0040849E   .  DB85 14FFFFFF <span class="keyword">fild</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0xEC</span>]</div><div class="line">004084A4   .  DD9D 0CFFFFFF <span class="keyword">fstp</span> <span class="built_in">qword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0xF4</span>]</div><div class="line">004084AA   .  DD85 0CFFFFFF <span class="keyword">fld</span> <span class="built_in">qword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0xF4</span>]</div><div class="line">004084B0   .  DC0D <span class="number">98114000</span> <span class="keyword">fmul</span> <span class="built_in">qword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="number">0x401198</span>]                   <span class="comment">;  数据1</span></div><div class="line">004084B6   .  DD5D C8       <span class="keyword">fstp</span> <span class="built_in">qword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x38</span>]</div><div class="line">004084B9   .  DFE0          <span class="keyword">fstsw</span> <span class="built_in">ax</span></div><div class="line">004084BB   .  A8 <span class="number">0D</span>         <span class="keyword">test</span> <span class="built_in">al</span>,<span class="number">0xD</span>                                    <span class="comment">;  13</span></div><div class="line">004084BD   .  0F85 AA040000 <span class="keyword">jnz</span> VBCrack1.<span class="number">0040896D</span></div><div class="line">004084C3   .  8B06          <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">esi</span>]</div><div class="line">004084C5   .  <span class="number">56</span>            <span class="keyword">push</span> <span class="built_in">esi</span></div><div class="line">004084C6   .  FF90 FC020000 <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">eax</span>+<span class="number">0x2FC</span>]</div><div class="line">004084CC   .  <span class="number">50</span>            <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line">004084CD   .  8D4D B4       <span class="keyword">lea</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x4C</span>]</div><div class="line">004084D0   .  <span class="number">51</span>            <span class="keyword">push</span> <span class="built_in">ecx</span></div><div class="line">004084D1   .  FFD3          <span class="keyword">call</span> <span class="built_in">ebx</span></div><div class="line">004084D3   .  8BD8          <span class="keyword">mov</span> <span class="built_in">ebx</span>,<span class="built_in">eax</span></div><div class="line">004084D5   .  8B13          <span class="keyword">mov</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">ebx</span>]</div><div class="line">004084D7   .  8D45 C0       <span class="keyword">lea</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x40</span>]</div><div class="line">004084DA   .  <span class="number">50</span>            <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line">004084<span class="built_in">DB</span>   .  <span class="number">53</span>            <span class="keyword">push</span> <span class="built_in">ebx</span></div><div class="line">004084DC   .  FF92 A0000000 <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">edx</span>+<span class="number">0xA0</span>]                   <span class="comment">;  取用户名</span></div><div class="line">004084E2   .  DBE2          <span class="keyword">fclex</span>                                          <span class="comment">;  清除异常</span></div><div class="line">004084E4   .  85C0          <span class="keyword">test</span> <span class="built_in">eax</span>,<span class="built_in">eax</span></div><div class="line">004084E6   .  <span class="number">7D</span> <span class="number">12</span>         <span class="keyword">jge</span> XVBCrack1.004084FA                         <span class="comment">;  函数返回正常</span></div><div class="line">004084E8   .  <span class="number">68</span> A0000000   <span class="keyword">push</span> <span class="number">0xA0</span></div><div class="line">004084ED   .  <span class="number">68</span> D05A4000   <span class="keyword">push</span> VBCrack1.00405AD0</div><div class="line">004084F2   .  <span class="number">53</span>            <span class="keyword">push</span> <span class="built_in">ebx</span></div><div class="line">004084F3   .  <span class="number">50</span>            <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line">004084F4   .  FF15 <span class="number">48104000</span> <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaHresultChec&gt;<span class="comment">;  MSVBVM60.__vbaHresultCheckObj</span></div><div class="line">004084FA   &gt;  C745 A8 <span class="number">01000</span>&gt;<span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x58</span>],<span class="number">0x1</span></div><div class="line"><span class="number">00408501</span>   .  C745 A0 <span class="number">02000</span>&gt;<span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x60</span>],<span class="number">0x2</span></div><div class="line"><span class="number">00408508</span>   .  8D4D A0       <span class="keyword">lea</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x60</span>]</div><div class="line">0040850B   .  <span class="number">51</span>            <span class="keyword">push</span> <span class="built_in">ecx</span></div><div class="line">0040850C   .  8B95 14FFFFFF <span class="keyword">mov</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0xEC</span>]</div><div class="line"><span class="number">00408512</span>   .  <span class="number">52</span>            <span class="keyword">push</span> <span class="built_in">edx</span></div><div class="line"><span class="number">00408513</span>   .  8B45 C0       <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x40</span>]</div><div class="line"><span class="number">00408516</span>   .  <span class="number">50</span>            <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line"><span class="number">00408517</span>   .  FF15 <span class="number">84104000</span> <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.#<span class="number">631</span>&gt;]           <span class="comment">;  取到用户名的第一位</span></div><div class="line"><span class="number">0040851D</span>   .  8BD0          <span class="keyword">mov</span> <span class="built_in">edx</span>,<span class="built_in">eax</span></div><div class="line">0040851F   .  8D4D BC       <span class="keyword">lea</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x44</span>]</div><div class="line"><span class="number">00408522</span>   .  8B1D 3C114000 <span class="keyword">mov</span> <span class="built_in">ebx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaStrMove&gt;&gt;<span class="comment">;  MSVBVM60.__vbaStrMove</span></div><div class="line"><span class="number">00408528</span>   .  FFD3          <span class="keyword">call</span> <span class="built_in">ebx</span>                                       <span class="comment">;  &lt;&amp;MSVBVM60.__vbaStrMove&gt;</span></div><div class="line">0040852A   .  <span class="number">50</span>            <span class="keyword">push</span> <span class="built_in">eax</span>                                       <span class="comment">; /String</span></div><div class="line">0040852B   .  FF15 <span class="number">28104000</span> <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.#<span class="number">516</span>&gt;]           <span class="comment">; \把字符串返回ASII</span></div><div class="line"><span class="number">00408531</span>   .  0FBFC8        <span class="keyword">movsx</span> <span class="built_in">ecx</span>,<span class="built_in">ax</span></div><div class="line"><span class="number">00408534</span>   .  <span class="number">898D</span> 08FFFFFF <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0xF8</span>],<span class="built_in">ecx</span></div><div class="line">0040853A   .  DB85 08FFFFFF <span class="keyword">fild</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0xF8</span>]</div><div class="line"><span class="number">00408540</span>   .  DD9D 00FFFFFF <span class="keyword">fstp</span> <span class="built_in">qword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x100</span>]</div><div class="line"><span class="number">00408546</span>   .  DD85 00FFFFFF <span class="keyword">fld</span> <span class="built_in">qword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x100</span>]</div><div class="line">0040854C   .  DC4D C8       <span class="keyword">fmul</span> <span class="built_in">qword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x38</span>]                   <span class="comment">;  乘以上面的数据1</span></div><div class="line">0040854F   .  DFE0          <span class="keyword">fstsw</span> <span class="built_in">ax</span>                                       <span class="comment">;  保存状态字的值到AX</span></div><div class="line"><span class="number">00408551</span>   .  A8 <span class="number">0D</span>         <span class="keyword">test</span> <span class="built_in">al</span>,<span class="number">0xD</span></div><div class="line"><span class="number">00408553</span>   .  0F85 <span class="number">14040000</span> <span class="keyword">jnz</span> VBCrack1.<span class="number">0040896D</span></div><div class="line"><span class="number">00408559</span>   .  83EC <span class="number">08</span>       <span class="keyword">sub</span> <span class="built_in">esp</span>,<span class="number">0x8</span></div><div class="line">0040855C   .  DD1C24        <span class="keyword">fstp</span> <span class="built_in">qword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">esp</span>]                        <span class="comment">;  将st(0)的数保存在目标地址中</span></div><div class="line">0040855F   .  FF15 B0104000 <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaStrR8&gt;]     <span class="comment">;  将浮点数转化为字符串</span></div><div class="line"><span class="number">00408565</span>   .  8BD0          <span class="keyword">mov</span> <span class="built_in">edx</span>,<span class="built_in">eax</span></div><div class="line"><span class="number">00408567</span>   .  8D4D D0       <span class="keyword">lea</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x30</span>]</div><div class="line">0040856A   .  FFD3          <span class="keyword">call</span> <span class="built_in">ebx</span>                                       <span class="comment">;  调用MOVE 函数</span></div><div class="line">0040856C   .  8D55 BC       <span class="keyword">lea</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x44</span>]</div><div class="line">0040856F   .  <span class="number">52</span>            <span class="keyword">push</span> <span class="built_in">edx</span></div><div class="line"><span class="number">00408570</span>   .  8D45 C0       <span class="keyword">lea</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x40</span>]</div><div class="line"><span class="number">00408573</span>   .  <span class="number">50</span>            <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line"><span class="number">00408574</span>   .  6A <span class="number">02</span>         <span class="keyword">push</span> <span class="number">0x2</span></div><div class="line"><span class="number">00408576</span>   .  FF15 <span class="number">08114000</span> <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaFreeStrList&gt;<span class="comment">;  MSVBVM60.__vbaFreeStrList</span></div><div class="line">0040857C   .  83C4 0C       <span class="keyword">add</span> <span class="built_in">esp</span>,<span class="number">0xC</span></div><div class="line">0040857F   .  8D4D B4       <span class="keyword">lea</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x4C</span>]</div><div class="line"><span class="number">00408582</span>   .  FF15 <span class="number">58114000</span> <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaFreeObj&gt;]   <span class="comment">;  MSVBVM60.__vbaFreeObj</span></div><div class="line"><span class="number">00408588</span>   .  8D4D A0       <span class="keyword">lea</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x60</span>]</div><div class="line">0040858B   .  FF15 <span class="number">08104000</span> <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaFreeVar&gt;]   <span class="comment">;  MSVBVM60.__vbaFreeVar</span></div><div class="line"><span class="number">00408591</span>   .  8B4D D0       <span class="keyword">mov</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x30</span>]</div><div class="line"><span class="number">00408594</span>   .  <span class="number">51</span>            <span class="keyword">push</span> <span class="built_in">ecx</span></div><div class="line"><span class="number">00408595</span>   .  FF15 F8104000 <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaR8Str&gt;]     <span class="comment">;  MSVBVM60.__vbaR8Str</span></div><div class="line">0040859B   .  DC45 D4       <span class="keyword">fadd</span> <span class="built_in">qword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x2C</span>]                   <span class="comment">;  累加</span></div><div class="line">0040859E   .  DD5D D4       <span class="keyword">fstp</span> <span class="built_in">qword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x2C</span>]                   <span class="comment">;  保存ST0</span></div><div class="line">004085A1   .  DFE0          <span class="keyword">fstsw</span> <span class="built_in">ax</span></div><div class="line">004085A3   .  A8 <span class="number">0D</span>         <span class="keyword">test</span> <span class="built_in">al</span>,<span class="number">0xD</span></div><div class="line">004085A5   .  0F85 C2030000 <span class="keyword">jnz</span> VBCrack1.<span class="number">0040896D</span></div><div class="line">004085AB   .  B8 <span class="number">01000000</span>   <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">0x1</span></div><div class="line">004085B0   .  <span class="number">66</span>:03C7       <span class="keyword">add</span> <span class="built_in">ax</span>,<span class="built_in">di</span></div><div class="line">004085B3   .  0F80 B9030000 <span class="keyword">jo</span> VBCrack1<span class="meta">.00408972</span></div><div class="line">004085B9   .  8BF8          <span class="keyword">mov</span> <span class="built_in">edi</span>,<span class="built_in">eax</span></div><div class="line">004085BB   .  8B1D <span class="number">60104000</span> <span class="keyword">mov</span> <span class="built_in">ebx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaObjSet&gt;] <span class="comment">;  MSVBVM60.__vbaObjSet</span></div><div class="line">004085C1   .^ E9 C5FEFFFF   <span class="keyword">jmp</span> VBCrack1.0040848B                          <span class="comment">;  不断地对用户名做如上浮点运算</span></div><div class="line">004085C6   &gt;  8B16          <span class="keyword">mov</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">esi</span>]</div><div class="line">004085C8   .  <span class="number">56</span>            <span class="keyword">push</span> <span class="built_in">esi</span></div><div class="line">004085C9   .  FF92 <span class="number">00030000</span> <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">edx</span>+<span class="number">0x300</span>]</div><div class="line">004085CF   .  <span class="number">50</span>            <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line">004085D0   .  8D45 B4       <span class="keyword">lea</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x4C</span>]</div><div class="line">004085D3   .  <span class="number">50</span>            <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line">004085D4   .  FFD3          <span class="keyword">call</span> <span class="built_in">ebx</span></div><div class="line">004085D6   .  8BF8          <span class="keyword">mov</span> <span class="built_in">edi</span>,<span class="built_in">eax</span></div><div class="line">004085D8   .  8B0F          <span class="keyword">mov</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">edi</span>]</div><div class="line">004085DA   .  8D55 C0       <span class="keyword">lea</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x40</span>]</div><div class="line">004085<span class="built_in">DD</span>   .  <span class="number">52</span>            <span class="keyword">push</span> <span class="built_in">edx</span></div><div class="line">004085DE   .  <span class="number">57</span>            <span class="keyword">push</span> <span class="built_in">edi</span></div><div class="line">004085DF   .  FF91 A0000000 <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">ecx</span>+<span class="number">0xA0</span>]                   <span class="comment">;  取出注册码</span></div><div class="line">004085E5   .  DBE2          <span class="keyword">fclex</span></div><div class="line">004085E7   .  85C0          <span class="keyword">test</span> <span class="built_in">eax</span>,<span class="built_in">eax</span></div><div class="line">004085E9   .  <span class="number">7D</span> <span class="number">12</span>         <span class="keyword">jge</span> XVBCrack1.004085FD</div><div class="line">004085EB   .  <span class="number">68</span> A0000000   <span class="keyword">push</span> <span class="number">0xA0</span></div><div class="line">004085F0   .  <span class="number">68</span> D05A4000   <span class="keyword">push</span> VBCrack1.00405AD0</div><div class="line">004085F5   .  <span class="number">57</span>            <span class="keyword">push</span> <span class="built_in">edi</span></div><div class="line">004085F6   .  <span class="number">50</span>            <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line">004085F7   .  FF15 <span class="number">48104000</span> <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaHresultChec&gt;<span class="comment">;  MSVBVM60.__vbaHresultCheckObj</span></div><div class="line">004085FD   &gt;  8B45 C0       <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x40</span>]</div><div class="line"><span class="number">00408600</span>   .  <span class="number">50</span>            <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line"><span class="number">00408601</span>   .  FF15 F8104000 <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaR8Str&gt;]     <span class="comment">;  转化为浮点数、</span></div><div class="line"><span class="number">00408607</span>   .  DC5D D4       <span class="keyword">fcomp</span> <span class="built_in">qword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x2C</span>]                  <span class="comment">;  比较注册码</span></div><div class="line">0040860A   .  DFE0          <span class="keyword">fstsw</span> <span class="built_in">ax</span></div><div class="line">0040860C   .  F6C4 <span class="number">40</span>       <span class="keyword">test</span> <span class="number">ah</span>,<span class="number">0x40</span></div><div class="line">0040860F   .  <span class="number">74</span> <span class="number">07</span>         <span class="keyword">je</span> XVBCrack1<span class="meta">.00408618</span></div><div class="line"><span class="number">00408611</span>   .  B8 <span class="number">01000000</span>   <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">0x1</span>                                    <span class="comment">;  最高位不相等赋值为1</span></div><div class="line"><span class="number">00408616</span>   .  EB <span class="number">02</span>         <span class="keyword">jmp</span> XVBCrack1.0040861A</div><div class="line"><span class="number">00408618</span>   &gt;  33C0          <span class="keyword">xor</span> <span class="built_in">eax</span>,<span class="built_in">eax</span>                                    <span class="comment">;  相等赋值为0</span></div><div class="line">0040861A   &gt;  F7D8          <span class="keyword">neg</span> <span class="built_in">eax</span>                                        <span class="comment">;  求补</span></div><div class="line">0040861C   .  <span class="number">66</span>:8BF8       <span class="keyword">mov</span> <span class="built_in">di</span>,<span class="built_in">ax</span></div><div class="line">0040861F   .  8D4D C0       <span class="keyword">lea</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x40</span>]</div><div class="line"><span class="number">00408622</span>   .  FF15 <span class="number">54114000</span> <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaFreeStr&gt;]   <span class="comment">;  MSVBVM60.__vbaFreeStr</span></div><div class="line"><span class="number">00408628</span>   .  8D4D B4       <span class="keyword">lea</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x4C</span>]</div><div class="line">0040862B   .  FF15 <span class="number">58114000</span> <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[&lt;&amp;MSVBVM60.__vbaFreeObj&gt;]   <span class="comment">;  MSVBVM60.__vbaFreeObj</span></div><div class="line"><span class="number">00408631</span>   .  <span class="number">66</span>:85FF       <span class="keyword">test</span> <span class="built_in">di</span>,<span class="built_in">di</span></div><div class="line"><span class="number">00408634</span>   .  0F84 B9020000 <span class="keyword">je</span> VBCrack1.004088F3</div><div class="line">0040863A   .  8B0E          <span class="keyword">mov</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">esi</span>]</div><div class="line">0040863C   .  <span class="number">56</span>            <span class="keyword">push</span> <span class="built_in">esi</span></div><div class="line"><span class="number">0040863D</span>   .  FF91 <span class="number">00030000</span> <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">ecx</span>+<span class="number">0x300</span>]</div><div class="line"><span class="number">00408643</span>   .  <span class="number">50</span>            <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line"><span class="number">00408644</span>   .  8D55 B0       <span class="keyword">lea</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x50</span>]</div><div class="line"><span class="number">00408647</span>   .  <span class="number">52</span>            <span class="keyword">push</span> <span class="built_in">edx</span></div><div class="line"><span class="number">00408648</span>   .  FFD3          <span class="keyword">call</span> <span class="built_in">ebx</span></div><div class="line">0040864A   .  <span class="number">8985</span> 34FFFFFF <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0xCC</span>],<span class="built_in">eax</span></div><div class="line"><span class="number">00408650</span>   .  8B06          <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">esi</span>]</div><div class="line"><span class="number">00408652</span>   .  <span class="number">56</span>            <span class="keyword">push</span> <span class="built_in">esi</span></div><div class="line"><span class="number">00408653</span>   .  FF90 FC020000 <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">eax</span>+<span class="number">0x2FC</span>]</div><div class="line"><span class="number">00408659</span>   .  <span class="number">50</span>            <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line">0040865A   .  8D4D B4       <span class="keyword">lea</span> <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x4C</span>]</div><div class="line"><span class="number">0040865D</span>   .  <span class="number">51</span>            <span class="keyword">push</span> <span class="built_in">ecx</span></div><div class="line">0040865E   .  FFD3          <span class="keyword">call</span> <span class="built_in">ebx</span></div><div class="line"><span class="number">00408660</span>   .  8BF8          <span class="keyword">mov</span> <span class="built_in">edi</span>,<span class="built_in">eax</span></div><div class="line"><span class="number">00408662</span>   .  8B17          <span class="keyword">mov</span> <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">edi</span>]</div><div class="line"><span class="number">00408664</span>   .  8D45 C0       <span class="keyword">lea</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span>-<span class="number">0x40</span>]</div><div class="line"><span class="number">00408667</span>   .  <span class="number">50</span>            <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line"><span class="number">00408668</span>   .  <span class="number">57</span>            <span class="keyword">push</span> <span class="built_in">edi</span></div><div class="line"><span class="number">00408669</span>   .  FF92 A0000000 <span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">edx</span>+<span class="number">0xA0</span>]</div><div class="line">0040866F   .  DBE2          <span class="keyword">fclex</span></div><div class="line"><span class="number">00408671</span>   .  85C0          <span class="keyword">test</span> <span class="built_in">eax</span>,<span class="built_in">eax</span></div><div class="line"><span class="number">00408673</span>   .  <span class="number">7D</span> <span class="number">12</span>         <span class="keyword">jge</span> XVBCrack1<span class="meta">.00408687</span>                         <span class="comment">;  关键跳转</span></div></pre></td></tr></table></figure></li><li><p>5)对于这个函数，网上给的解释有点问题，我自己去跟到内存地址里面，发现这是一个取第一个字符的函数。<br><img src="https://i.imgur.com/ON7Ftcp.png" alt=""><br><img src="https://i.imgur.com/hpo0U7u.png" alt=""></p></li><li>6）对于关键跳，首先这是一个大型跳转，需要警惕往下翻，出现了一个msg，说明这个是一个成功的弹窗（假码没有msg）。说明这个不能跳。</li><li>7）如何查看正确的注册码？？在fcomp比较指令处查看即可！<br><img src="https://i.imgur.com/X8lEAOQ.png" alt=""><br><img src="https://i.imgur.com/xIrUCxv.png" alt=""></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;例子1：&quot;&gt;&lt;a href=&quot;#例子1：&quot; class=&quot;headerlink&quot; title=&quot;例子1：&quot;&gt;&lt;/a&gt;例子1：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;思路&amp;amp;步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1）查壳&lt;/li&gt;
&lt;li&gt;2）测试发现，这个程序错误没有提示，我们对vbaLenBstr下断，注意对这个函数下断，最好使用IDA 对这个函数进行交叉参考，不然找不到正确的函数。
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>逆向工程例题</title>
    <link href="http://yoursite.com/2017/11/22/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E4%BE%8B%E9%A2%98/"/>
    <id>http://yoursite.com/2017/11/22/逆向工程例题/</id>
    <published>2017-11-22T13:02:11.000Z</published>
    <updated>2017-11-30T09:36:34.937Z</updated>
    
    <content type="html"><![CDATA[<h1 id="逆向分析："><a href="#逆向分析：" class="headerlink" title="逆向分析："></a>逆向分析：</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>软件逆向工程（Software Reverse Engineering）又称软件反向工程，是指从可运行的程序系统出发，运用解密、反汇编、系统分析、程序理解等多种计算机技术,对软件的结构、流程、算法、代码等进行逆向拆解和分析，推导出软件产品的源代码、设计原理、结构、算法、处理过程、运行方法及相关文档等。通常，人们把对软件进行反向分析的整个过程统称为软件逆向工程，把在这个过程中所采用的技术都统称为软件逆向工程技术。</strong><a id="more"></a></p><h1 id="例1：分道扬镳"><a href="#例1：分道扬镳" class="headerlink" title="例1：分道扬镳"></a>例1：分道扬镳</h1><p><strong>1.题目来源：<a href="http://www.shiyanbar.com/ctf/1885" target="_blank" rel="external">http://www.shiyanbar.com/ctf/1885</a></strong><br><strong>2.解题思路：</strong> </p><ul><li><p>步骤：</p><ul><li>注意这是错误的思路：</li><li><p>1）直接拖到IDA分析，f5反编译，得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">int main_0()</div><div class="line">&#123;</div><div class="line"> size_t v0; // eax@9</div><div class="line"> size_t v1; // eax@11</div><div class="line"> char v3; // [sp+Ch] [bp-7Ch]@1</div><div class="line"> char v4[48]; // [sp+4Ch] [bp-3Ch]@1</div><div class="line"> unsigned int v5; // [sp+7Ch] [bp-Ch]@1</div><div class="line"> unsigned int v6; // [sp+80h] [bp-8h]@1</div><div class="line"> int v7; // [sp+84h] [bp-4h]@1</div><div class="line"> memset(&amp;v3, 0xCCu, 0x7Cu);</div><div class="line"> v6 = 0;</div><div class="line"> v5 = 0;</div><div class="line"> v7 = 0 / 0;</div><div class="line"> printf(&quot;Please input your key:\n&quot;);</div><div class="line"> gets(v4);</div><div class="line"> if ( strlen(v4) &gt; 32 )</div><div class="line"> &#123;</div><div class="line">   printf(&quot;Too long!\n&quot;);</div><div class="line"> &#125;</div><div class="line"> else</div><div class="line"> &#123;</div><div class="line">   v5 = 0;</div><div class="line">   v4[strlen(v4)] = 0;</div><div class="line">   if ( strlen(v4) )</div><div class="line">   &#123;</div><div class="line">     do</div><div class="line">     &#123;</div><div class="line">       if ( !isalpha(v4[v5]) &amp;&amp; v4[v5] != 123 &amp;&amp; v4[v5] != 125 &amp;&amp; v4[v5] != 95 )</div><div class="line">       &#123;</div><div class="line">         printf(&quot;Sorry,you are wrong!\n&quot;);</div><div class="line">         exit(0);</div><div class="line">       &#125;</div><div class="line">       ++v5;</div><div class="line">       v0 = strlen(v4);</div><div class="line">     &#125;</div><div class="line">     while ( v5 &lt; v0 );</div><div class="line">   &#125;</div><div class="line">  _strlwr(v4);                                // 转化为小写</div><div class="line">   v6 = 0;</div><div class="line">  if ( strlen(v4) )</div><div class="line">  &#123;</div><div class="line">     do</div><div class="line">     &#123;</div><div class="line">       v4[v6++] += -128;</div><div class="line">       v1 = strlen(v4);</div><div class="line">     &#125;</div><div class="line">     while ( v6 &lt; v1 );</div><div class="line">   &#125;</div><div class="line">   if ( !strcmp(v4, &amp;byte_425A30) )</div><div class="line">     printf(&quot;Good!\n&quot;);</div><div class="line">   else</div><div class="line">     printf(&quot;Sorry,you are wrong!\n&quot;);</div><div class="line">   system(&quot;pause&quot;);</div><div class="line"> &#125;</div><div class="line"> system(&quot;pause&quot;);</div><div class="line"> return 0;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></li><li><p>2)如图：找到比较的另一个字符串，因为要加128，但是又要保证输入为字符类型。所以：待比较值是一个负数。<br><img src="https://i.imgur.com/a7iMaJf.png" alt=""></p></li><li>3)根据伪代码逆向得到：<br><img src="https://i.imgur.com/jkrQkpb.png" alt=""></li><li>4)没想到这个是错的吧，哈哈哈~~~~<br><img src="https://i.imgur.com/iO7IxSO.png" alt=""></li><li>注意：以下是思路：</li><li>1）OD或者IDA搜索字符串，如图：<br><img src="https://i.imgur.com/LPvYhk6.png" alt=""></li><li>2) 迷宫问题，首先我们要知道四个方向对应的字符，起始位置，终点就行。根据地址迅速画出图像：<br><img src="https://i.imgur.com/baBOH8U.png" alt=""></li><li>3）根据题目我们很清楚知道#就是终点了</li><li>4）拖入IDA 看看，我们容易得到：<ul><li>1）输入字符串长度为22</li><li>2）四个方向字符为h,j,k,l<br><img src="https://i.imgur.com/U4L8AmB.png" alt=""><br><img src="https://i.imgur.com/ekzxUpJ.png" alt=""></li></ul></li><li>5)继续用IDA 分析，发现以下伪代码决定字符与方向的对应关系。<br><img src="https://i.imgur.com/wPN4hft.png" alt=""><br><img src="https://i.imgur.com/27TdHOk.png" alt=""><br><img src="https://i.imgur.com/tzt4EL5.png" alt=""><br><img src="https://i.imgur.com/ihtChjz.png" alt=""></li><li>6）如上图所示，当V14==’h’时，如果v6在v7和v9之间就会报错，我们结合迷宫是一个8X8的矩阵，可以得到，h是控制左右的，又由于–v6，我们得到h是控制向左的。同理：l是向右</li><li>7）由于k和j是v6+=8，v6-=8.我们知道k是控制向上的，j是控制向下的的！</li><li>8）现在就差迷宫的入口了，进过调试我们知道入口在迷宫第10个地址处。</li><li>9）其实只有一条路：<strong>jjjjjlllllkkkkhhhjjjl</strong></li></ul></li></ul><hr><h1 id="例2：Position"><a href="#例2：Position" class="headerlink" title="例2：Position"></a>例2：Position</h1><p><strong>1.题目来源：<a href="http://reversing.kr/download.php?n=7" target="_blank" rel="external">http://reversing.kr/download.php?n=7</a></strong><br><strong>2.解题思路：</strong></p><ul><li><p>步骤：</p><ul><li>1）利用OD打开，查看字符串.但是用IDA却不行。<br><img src="https://i.imgur.com/bsn6yvz.png" alt=""></li><li>2）在IDA搜索函数GetWindowsTextW（）出现目标函数。利用交叉引用找到调用的地方。如图<br><img src="https://i.imgur.com/llsuq7v.png" alt=""></li><li><p>3）F5反编译出现伪代码如下：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div></pre></td><td class="code"><pre><div class="line">signed<span class="built_in"> int </span>__stdcall sub_401740(int a1)</div><div class="line">    &#123;</div><div class="line">  signed<span class="built_in"> int </span>v1; // edi@1</div><div class="line">  char *v2; // ecx@2</div><div class="line">  signed<span class="built_in"> int </span>v4; // esi@4</div><div class="line">  signed<span class="built_in"> int </span>v5; // esi@8</div><div class="line">  __int16 v6; // bx@10</div><div class="line">  unsigned __int8 v7; // al@15</div><div class="line">  unsigned __int8 v8; // ST2C_1@15</div><div class="line">  unsigned __int8 v9; // al@15</div><div class="line">  unsigned __int8 v10; // bl@15</div><div class="line">  wchar_t *v11; // eax@15</div><div class="line">  __int16 v12; // di@15</div><div class="line">  __int16 v13; // ax@15</div><div class="line">  wchar_t *v14; // eax@16</div><div class="line">  __int16 v15; // di@16</div><div class="line">  __int16 v16; // ax@16</div><div class="line">  wchar_t *v17; // eax@17</div><div class="line">  __int16 v18; // di@17</div><div class="line">  __int16 v19; // ax@17</div><div class="line">  wchar_t *v20; // eax@18</div><div class="line">  __int16 v21; // di@18</div><div class="line">  __int16 v22; // ax@18</div><div class="line">  wchar_t *v23; // eax@19</div><div class="line">  __int16 v24; // di@19</div><div class="line">  __int16 v25; // ax@19</div><div class="line">  unsigned __int8 v26; // al@20</div><div class="line">  unsigned __int8 v27; // ST2C_1@20</div><div class="line">  unsigned __int8 v28; // al@20</div><div class="line">  unsigned __int8 v29; // bl@20</div><div class="line">  wchar_t *v30; // eax@20</div><div class="line">  __int16 v31; // di@20</div><div class="line">  __int16 v32; // ax@20</div><div class="line">  wchar_t *v33; // eax@21</div><div class="line">  __int16 v34; // di@21</div><div class="line">  __int16 v35; // ax@21</div><div class="line">  wchar_t *v36; // eax@22</div><div class="line">  __int16 v37; // di@22</div><div class="line">  __int16 v38; // ax@22</div><div class="line">  wchar_t *v39; // eax@23</div><div class="line">  __int16 v40; // di@23</div><div class="line">  __int16 v41; // ax@23</div><div class="line">  wchar_t *v42; // eax@24</div><div class="line">  __int16 v43; // si@24</div><div class="line">  __int16 v44; // ax@24</div><div class="line">  unsigned __int8 v45; // [sp+10h] [bp-28h]@15</div><div class="line">  unsigned __int8 v46; // [sp+10h] [bp-28h]@20</div><div class="line">  unsigned __int8 v47; // [sp+11h] [bp-27h]@15</div><div class="line">  unsigned __int8 v48; // [sp+11h] [bp-27h]@20</div><div class="line">  unsigned __int8 v49; // [sp+13h] [bp-25h]@15</div><div class="line">  unsigned __int8 v50; // [sp+13h] [bp-25h]@20</div><div class="line">  unsigned __int8 v51; // [sp+14h] [bp-24h]@15</div><div class="line"> unsigned __int8 v52; // [sp+14h] [bp-24h]@20</div><div class="line">  unsigned __int8 v53; // [sp+19h] [bp-1Fh]@15</div><div class="line">  unsigned __int8 v54; // [sp+19h] [bp-1Fh]@20</div><div class="line">  unsigned __int8 v55; // [sp+1Ah] [bp-1Eh]@15</div><div class="line">  unsigned __int8 v56; // [sp+1Ah] [bp-1Eh]@20</div><div class="line">  unsigned __int8 v57; // [sp+1Bh] [bp-1Dh]@15</div><div class="line">  unsigned __int8 v58; // [sp+1Bh] [bp-1Dh]@20</div><div class="line">  unsigned __int8 v59; // [sp+1Ch] [bp-1Ch]@15</div><div class="line">  unsigned __int8 v60; // [sp+1Ch] [bp-1Ch]@20</div><div class="line">  <span class="built_in">int </span>v61; // [sp+20h] [bp-18h]@1</div><div class="line">  <span class="built_in">int </span>v62; // [sp+24h] [bp-14h]@1</div><div class="line">  char v63; // [sp+28h] [bp-10h]@1</div><div class="line">  <span class="built_in">int </span>v64; // [sp+34h] [bp-4h]@1</div><div class="line">  v1 = 0;</div><div class="line">  v64 = 0;</div><div class="line">  LOBYTE(v64) = 2;</div><div class="line">  CWnd::GetWindowTextW(a1 + 304, &amp;v61);</div><div class="line">  <span class="built_in">if </span>( *(_DWORD *)(v61 - 12) == 4 )</div><div class="line"> &#123;</div><div class="line">    v4 = 0;</div><div class="line">    while ( (unsigned __int16)ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v61, v4) &gt;= 97u</div><div class="line">         &amp;&amp; (unsigned __int16)ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v61, v4) &lt;= 122u )    //取小写字母</div><div class="line">    &#123;</div><div class="line">      ++v4;</div><div class="line">      <span class="built_in">if </span>( v4 &gt;= 4 )</div><div class="line">      &#123;</div><div class="line">LABEL_8:</div><div class="line">        v5 = 0;</div><div class="line">        while ( 1 )</div><div class="line">        &#123;</div><div class="line">         <span class="built_in"> if </span>( v1 != v5 )</div><div class="line">          &#123;</div><div class="line">            v6 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v61, v5);</div><div class="line">           <span class="built_in"> if </span>( (unsigned __int16)ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v61, v1) == v6 )</div><div class="line">             <span class="built_in"> goto </span><span class="class">LABEL_2;</span></div><div class="line">          &#125;</div><div class="line">          ++v5;</div><div class="line">         <span class="built_in"> if </span>( v5 &gt;= 4 )</div><div class="line">          &#123;</div><div class="line">            ++v1;</div><div class="line">           <span class="built_in"> if </span>( v1 &lt; 4 )</div><div class="line">             <span class="built_in"> goto </span><span class="class">LABEL_8;</span></div><div class="line">            CWnd::GetWindowTextW(a1 + 420, &amp;v62);</div><div class="line">           <span class="built_in"> if </span>( *(_DWORD *)(v62 - 12) != 11 || (unsigned __int16)ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v62, 5) != 45 )</div><div class="line">             <span class="built_in"> goto </span><span class="class">LABEL_2;</span></div><div class="line">            v7 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v61, 0);</div><div class="line">            v8 = (v7 &amp; 1) + 5;</div><div class="line">            v59 = ((v7 &gt;&gt; 4) &amp; 1) + 5;</div><div class="line">            v53 = ((v7 &gt;&gt; 1) &amp; 1) + 5;</div><div class="line">            v55 = ((v7 &gt;&gt; 2) &amp; 1) + 5;</div><div class="line">            v57 = ((v7 &gt;&gt; 3) &amp; 1) + 5;</div><div class="line">            v9 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v61, 1);</div><div class="line">            v45 = (v9 &amp; 1) + 1;</div><div class="line">            v51 = ((v9 &gt;&gt; 4) &amp; 1) + 1;</div><div class="line">            v47 = ((v9 &gt;&gt; 1) &amp; 1) + 1;</div><div class="line">            v10 = ((v9 &gt;&gt; 2) &amp; 1) + 1;</div><div class="line">            v49 = ((v9 &gt;&gt; 3) &amp; 1) + 1;</div><div class="line">            v11 = (wchar_t *)ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetBuffer(&amp;v63);</div><div class="line">            itow_s(v8 + v10, v11, 10u, 10);     // 进制转换</div><div class="line">            v12 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v63, 0);</div><div class="line">            v13 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v62, 0);</div><div class="line">            v2 = &amp;v63;</div><div class="line">           <span class="built_in"> if </span>( v13 == v12 )</div><div class="line">            &#123;</div><div class="line">              ATL::CSimpleStringT&lt;wchar_t,1&gt;::ReleaseBuffer(&amp;v63, -1);</div><div class="line">              v14 = (wchar_t *)ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetBuffer(&amp;v63);</div><div class="line">              itow_s(v57 + v49, v14, 0xAu, 10); // 进制转化</div><div class="line">              v15 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v62, 1);</div><div class="line">              v16 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v63, 0);</div><div class="line">              v2 = &amp;v63;</div><div class="line">             <span class="built_in"> if </span>( v15 == v16 )</div><div class="line">              &#123;</div><div class="line">                ATL::CSimpleStringT&lt;wchar_t,1&gt;::ReleaseBuffer(&amp;v63, -1);</div><div class="line">                v17 = (wchar_t *)ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetBuffer(&amp;v63);</div><div class="line">                itow_s(v53 + v51, v17, 0xAu, 10);</div><div class="line">                v18 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v62, 2);</div><div class="line">                v19 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v63, 0);</div><div class="line">                v2 = &amp;v63;</div><div class="line">               <span class="built_in"> if </span>( v18 == v19 )</div><div class="line">                &#123;</div><div class="line">                  ATL::CSimpleStringT&lt;wchar_t,1&gt;::ReleaseBuffer(&amp;v63, -1);</div><div class="line">                  v20 = (wchar_t *)ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetBuffer(&amp;v63);</div><div class="line">                  itow_s(v55 + v45, v20, 0xAu, 10);</div><div class="line">                  v21 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v62, 3);</div><div class="line">                  v22 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v63, 0);</div><div class="line">                  v2 = &amp;v63;</div><div class="line">                 <span class="built_in"> if </span>( v21 == v22 )</div><div class="line">                  &#123;</div><div class="line">                    ATL::CSimpleStringT&lt;wchar_t,1&gt;::ReleaseBuffer(&amp;v63, -1);</div><div class="line">                    v23 = (wchar_t *)ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetBuffer(&amp;v63);</div><div class="line">                    itow_s(v59 + v47, v23, 0xAu, 10);</div><div class="line">                    v24 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v62, 4);</div><div class="line">                    v25 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v63, 0);</div><div class="line">                    v2 = &amp;v63;</div><div class="line">                   <span class="built_in"> if </span>( v24 == v25 )</div><div class="line">                    &#123;</div><div class="line">                      ATL::CSimpleStringT&lt;wchar_t,1&gt;::ReleaseBuffer(&amp;v63, -1);</div><div class="line">                      v26 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v61, 2);</div><div class="line">                      v27 = (v26 &amp; 1) + 5;</div><div class="line">                      v60 = ((v26 &gt;&gt; 4) &amp; 1) + 5;</div><div class="line">                      v54 = ((v26 &gt;&gt; 1) &amp; 1) + 5;</div><div class="line">                      v56 = ((v26 &gt;&gt; 2) &amp; 1) + 5;</div><div class="line">                      v58 = ((v26 &gt;&gt; 3) &amp; 1) + 5;</div><div class="line">                      v28 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v61, 3);</div><div class="line">                      v46 = (v28 &amp; 1) + 1;</div><div class="line">                      v52 = ((v28 &gt;&gt; 4) &amp; 1) + 1;</div><div class="line">                      v48 = ((v28 &gt;&gt; 1) &amp; 1) + 1;</div><div class="line">                      v29 = ((v28 &gt;&gt; 2) &amp; 1) + 1;</div><div class="line">                      v50 = ((v28 &gt;&gt; 3) &amp; 1) + 1;</div><div class="line">                      v30 = (wchar_t *)ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetBuffer(&amp;v63);</div><div class="line">                      itow_s(v27 + v29, v30, 0xAu, 10);</div><div class="line">                      v31 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v62, 6);</div><div class="line">                      v32 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v63, 0);</div><div class="line">                      v2 = &amp;v63;</div><div class="line">                     <span class="built_in"> if </span>( v31 == v32 )</div><div class="line">                      &#123;</div><div class="line">                        ATL::CSimpleStringT&lt;wchar_t,1&gt;::ReleaseBuffer(&amp;v63, -1);</div><div class="line">                        v33 = (wchar_t *)ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetBuffer(&amp;v63);</div><div class="line">                        itow_s(v58 + v50, v33, 0xAu, 10);</div><div class="line">                        v34 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v62, 7);</div><div class="line">                        v35 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v63, 0);</div><div class="line">                        v2 = &amp;v63;</div><div class="line">                       <span class="built_in"> if </span>( v34 == v35 )</div><div class="line">                        &#123;</div><div class="line">                          ATL::CSimpleStringT&lt;wchar_t,1&gt;::ReleaseBuffer(&amp;v63, -1);</div><div class="line">                          v36 = (wchar_t *)ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetBuffer(&amp;v63);</div><div class="line">                          itow_s(v54 + v52, v36, 0xAu, 10);</div><div class="line">                          v37 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v62, 8);</div><div class="line">                          v38 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v63, 0);</div><div class="line">                          v2 = &amp;v63;</div><div class="line">                         <span class="built_in"> if </span>( v37 == v38 )</div><div class="line">                          &#123;</div><div class="line">                            ATL::CSimpleStringT&lt;wchar_t,1&gt;::ReleaseBuffer(&amp;v63, -1);</div><div class="line">                            v39 = (wchar_t *)ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetBuffer(&amp;v63);</div><div class="line">                            itow_s(v56 + v46, v39, 0xAu, 10);</div><div class="line">                            v40 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v62, 9);</div><div class="line">                            v41 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v63, 0);</div><div class="line">                            v2 = &amp;v63;</div><div class="line">                           <span class="built_in"> if </span>( v40 == v41 )</div><div class="line">                            &#123;</div><div class="line">                              ATL::CSimpleStringT&lt;wchar_t,1&gt;::ReleaseBuffer(&amp;v63, -1);</div><div class="line">                              v42 = (wchar_t *)ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetBuffer(&amp;v63);</div><div class="line">                              itow_s(v60 + v48, v42, 0xAu, 10);</div><div class="line">                              v43 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v62, 10);</div><div class="line">                              v44 = ATL::CSimpleStringT&lt;wchar_t,1&gt;::GetAt(&amp;v63, 0);</div><div class="line">                              v2 = &amp;v63;</div><div class="line">                             <span class="built_in"> if </span>( v43 == v44 )</div><div class="line">                              &#123;</div><div class="line">                                ATL::CSimpleStringT&lt;wchar_t,1&gt;::ReleaseBuffer(&amp;v63, -1);</div><div class="line">                                ATL::CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;::~CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;(&amp;v63);</div><div class="line">                                ATL::CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;::~CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;(&amp;v62);</div><div class="line">                                ATL::CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;::~CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;(&amp;v61);</div><div class="line">                               <span class="built_in"> return </span>1;</div><div class="line">                              &#125;</div><div class="line">                            &#125;</div><div class="line">                          &#125;</div><div class="line">                        &#125;</div><div class="line">                      &#125;</div><div class="line">                    &#125;</div><div class="line">                  &#125;</div><div class="line">                &#125;</div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">           <span class="built_in"> goto </span><span class="class">LABEL_3;</span></div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">LABEL_2:</div><div class="line">  v2 = &amp;v63;</div><div class="line">ABEL_3:</div><div class="line">ATL::CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;::~CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;(v2);</div><div class="line">ATL::CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;::~CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;(&amp;v62);</div><div class="line">ATL::CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;::~CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;(&amp;v61);</div><div class="line"> <span class="built_in">return </span>0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>4)我们验证我们分析函数的正确性，进去401740函数，就可以得到上面的反编译代码：如图<br><img src="https://i.imgur.com/KMORKGT.png" alt=""></p></li><li>5)算法的主干部分：<br><img src="https://i.imgur.com/td5MShj.png" alt=""><br><img src="https://i.imgur.com/BnAOjUi.png" alt=""><br><img src="https://i.imgur.com/GN4eZWu.png" alt=""><br><img src="https://i.imgur.com/qH1RAB5.png" alt=""></li><li><p>6）分析得到以下信息：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">v7=name[<span class="number">0</span>]</div><div class="line">v8 = (v7 &amp; <span class="number">1</span>) + <span class="number">5</span></div><div class="line">v59 = ((v7 &gt;&gt; <span class="number">4</span>) &amp; <span class="number">1</span>) + <span class="number">5</span></div><div class="line">v53 = ((v7 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>) + <span class="number">5</span></div><div class="line">v55 = ((v7 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>) + <span class="number">5</span></div><div class="line">v57 = ((v7 &gt;&gt; <span class="number">3</span>) &amp; <span class="number">1</span>) + <span class="number">5</span></div><div class="line"></div><div class="line">v9=name[<span class="number">1</span>]</div><div class="line">v45 = (v9 &amp; <span class="number">1</span>) + <span class="number">1</span></div><div class="line">v51 = ((v9 &gt;&gt; <span class="number">4</span>) &amp; <span class="number">1</span>) + <span class="number">1</span></div><div class="line">v47 = ((v9 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>) + <span class="number">1</span></div><div class="line">v10 = ((v9 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>) + <span class="number">1</span></div><div class="line">v49 = ((v9 &gt;&gt; <span class="number">3</span>) &amp; <span class="number">1</span>) + <span class="number">1</span></div><div class="line"></div><div class="line">v8+v10=serial[<span class="number">0</span>]</div><div class="line">v57+v49==serial[<span class="number">1</span>]</div><div class="line">v53+v51==serial[<span class="number">2</span>]</div><div class="line">v55+v45==serial[<span class="number">3</span>]</div><div class="line">v59+v47==serial[<span class="number">4</span>]</div><div class="line"></div><div class="line">=====================</div><div class="line"></div><div class="line">v26=name[<span class="number">2</span>]</div><div class="line">v27 = (v26 &amp; <span class="number">1</span>) + <span class="number">5</span></div><div class="line">v60 = ((v26 &gt;&gt; <span class="number">4</span>) &amp; <span class="number">1</span>) + <span class="number">5</span></div><div class="line">v54 = ((v26 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>) + <span class="number">5</span></div><div class="line">v56 = ((v26 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>) + <span class="number">5</span></div><div class="line">v58 = ((v26 &gt;&gt; <span class="number">3</span>) &amp; <span class="number">1</span>) + <span class="number">5</span></div><div class="line"></div><div class="line">v28=name[<span class="number">3</span>]</div><div class="line">v46 = (v28 &amp; <span class="number">1</span>) + <span class="number">1</span></div><div class="line">v52 = ((v28 &gt;&gt; <span class="number">4</span>) &amp; <span class="number">1</span>) + <span class="number">1</span></div><div class="line">v48 = ((v28 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>) + <span class="number">1</span></div><div class="line">v29 = ((v28 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>) + <span class="number">1</span></div><div class="line">v50 = ((v28 &gt;&gt; <span class="number">3</span>) &amp; <span class="number">1</span>) + <span class="number">1</span></div><div class="line"></div><div class="line"></div><div class="line">v27+v29==serial[<span class="number">5</span>]</div><div class="line">v58+v50==serial[<span class="number">6</span>]</div><div class="line">v54+v52==serial[<span class="number">7</span>]</div><div class="line">v56+v46==serial[<span class="number">8</span>]</div><div class="line">v60+v48==serial[<span class="number">9</span>]</div></pre></td></tr></table></figure></li><li><p>6)找网上的wp，写出注册机</p><pre><code class="python">serial=<span class="string">'7687677776'</span><span class="keyword">for</span> i <span class="keyword">in</span> range(ord(<span class="string">'a'</span>),ord(<span class="string">'z'</span>)+<span class="number">1</span>):<span class="keyword">for</span> j <span class="keyword">in</span> range(ord(<span class="string">'a'</span>),ord(<span class="string">'z'</span>)+<span class="number">1</span>):  v7=i  v9=j  v8 = (v7 &amp; <span class="number">1</span>) + <span class="number">5</span>  v59 = ((v7 &gt;&gt; <span class="number">4</span>) &amp; <span class="number">1</span>) + <span class="number">5</span>  v53 = ((v7 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>) + <span class="number">5</span>  v55 = ((v7 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>) + <span class="number">5</span>  v57 = ((v7 &gt;&gt; <span class="number">3</span>) &amp; <span class="number">1</span>) + <span class="number">5</span>  v45 = (v9 &amp; <span class="number">1</span>) + <span class="number">1</span>  v51 = ((v9 &gt;&gt; <span class="number">4</span>) &amp; <span class="number">1</span>) + <span class="number">1</span>  v47 = ((v9 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>) + <span class="number">1</span>  v10 = ((v9 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>) + <span class="number">1</span>  v49 = ((v9 &gt;&gt; <span class="number">3</span>) &amp; <span class="number">1</span>) + <span class="number">1</span>  <span class="keyword">if</span> v8+v10==int(serial[<span class="number">0</span>]) <span class="keyword">and</span> v57+v49==int(serial[<span class="number">1</span>]) <span class="keyword">and</span> v53+v51==int(serial[<span class="number">2</span>]) <span class="keyword">and</span> v55+v45==int(serial[<span class="number">3</span>]) <span class="keyword">and</span> v59+v47==int(serial[<span class="number">4</span>]):      <span class="keyword">print</span> chr(i),chr(j)<span class="keyword">print</span> <span class="string">'==============='</span><span class="keyword">for</span> i <span class="keyword">in</span> range(ord(<span class="string">'a'</span>),ord(<span class="string">'z'</span>)+<span class="number">1</span>):<span class="keyword">for</span> j <span class="keyword">in</span> range(ord(<span class="string">'a'</span>),ord(<span class="string">'z'</span>)+<span class="number">1</span>):  v26=i  v28=j  v27 = (v26 &amp; <span class="number">1</span>) + <span class="number">5</span>  v60 = ((v26 &gt;&gt; <span class="number">4</span>) &amp; <span class="number">1</span>) + <span class="number">5</span>  v54 = ((v26 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>) + <span class="number">5</span>  v56 = ((v26 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>) + <span class="number">5</span>  v58 = ((v26 &gt;&gt; <span class="number">3</span>) &amp; <span class="number">1</span>) + <span class="number">5</span>  v46 = (v28 &amp; <span class="number">1</span>) + <span class="number">1</span>  v52 = ((v28 &gt;&gt; <span class="number">4</span>) &amp; <span class="number">1</span>) + <span class="number">1</span>  v48 = ((v28 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>) + <span class="number">1</span>  v29 = ((v28 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>) + <span class="number">1</span>  v50 = ((v28 &gt;&gt; <span class="number">3</span>) &amp; <span class="number">1</span>) + <span class="number">1</span>  <span class="keyword">if</span> v27+v29==int(serial[<span class="number">5</span>]) <span class="keyword">and</span> v58+v50==int(serial[<span class="number">6</span>]) <span class="keyword">and</span> v54+v52==int(serial[<span class="number">7</span>]) <span class="keyword">and</span> v56+v46==int(serial[<span class="number">8</span>]) <span class="keyword">and</span> v60+v48==int(serial[<span class="number">9</span>]):      <span class="keyword">print</span> chr(i),chr(j)</code></pre></li><li>7)因为，最后一个字母是p，所以：有4种可能结果bump,cqmp,gtmp,gpmp.试一下其中一个就行。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;逆向分析：&quot;&gt;&lt;a href=&quot;#逆向分析：&quot; class=&quot;headerlink&quot; title=&quot;逆向分析：&quot;&gt;&lt;/a&gt;逆向分析：&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;软件逆向工程（Software Reverse Engineering）又称软件反向工程，是指从可运行的程序系统出发，运用解密、反汇编、系统分析、程序理解等多种计算机技术,对软件的结构、流程、算法、代码等进行逆向拆解和分析，推导出软件产品的源代码、设计原理、结构、算法、处理过程、运行方法及相关文档等。通常，人们把对软件进行反向分析的整个过程统称为软件逆向工程，把在这个过程中所采用的技术都统称为软件逆向工程技术。&lt;/strong&gt;
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>浅探hash算法的前世今生[转]</title>
    <link href="http://yoursite.com/2017/11/18/%E6%B5%85%E6%8E%A2hash%E7%AE%97%E6%B3%95%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/"/>
    <id>http://yoursite.com/2017/11/18/浅探hash算法的前世今生/</id>
    <published>2017-11-18T14:50:11.000Z</published>
    <updated>2017-11-21T05:35:23.138Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q:我为什么要写这篇文章？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A:你没发现我很久没有跟新文章了么？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q：为什么跟新这个内容？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A：你一个搞安全的不研究加密算法，你还能干什么？？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q：你了解hash算法嘛？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A：不了解，那还不能学啊，安全组的，你不会百度，你还学什么安全？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后，这篇文章，我参考了网上诸多关于hash算法的文章，在此表示深深的谢意，愿我们在这知识的海洋里能继续遨游。2017.11.18夜<br><a id="more"></a></p><h1 id="hash算法"><a href="#hash算法" class="headerlink" title="hash算法"></a>hash算法</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>Hash，一般翻译做“散列”，也有直接音译为”哈希”的，就是把任意长度的输入（又叫做预映射， pre-image），通过散列算法，变换成固定长度的输出，该输出就是散列值。这种转换是一种压缩映射，也就是，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，而不可能从散列值来唯一的确定输入值。同时，只有改变里面些许的内容，hash值可能出现很大的不同。 密码学上的 Hash 又被称为”消息摘要(message digest)。</strong><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong><font color="#DC143C">MD5 和 SHA1 可以说是目前应用最广泛的Hash算法。</font>而它们都是以 MD4 为基础设计的。参考相应RFC文档可以得到MD4(RFC 1320)、MD5(RFC 1321)算法的详细描述和算法的C源代码</strong></p><h1 id="MD5："><a href="#MD5：" class="headerlink" title="MD5："></a>MD5：</h1><ul><li>MD5介绍：<ul><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1990年R.L.Rivest提出哈希函数MD4,特别适合32位计算机软件实现，对于长的信息签名很实用。MD5是MD4的改进版，它比MD4更复杂，但是设计思想相似并且也产生了128位摘要。</li></ul></li><li>MD5哈希算法流程：<br>对于任意长度的明文，MD5首先对其进行分组，使得每一组的长度为512位，然后对这些明文分组反复重复处理。对于每个明文分组的摘要生成过程如下：<ul><li>(1) 将512位的明文分组划分为16个子明文分组，每个子明文分组为32位。</li><li>(2) 申请4个32位的链接变量，记为A、B、C、D。</li><li>(3) 子明文分组与链接变量进行第1轮运算。</li><li>(4) 子明文分组与链接变量进行第2轮运算。</li><li>(5) 子明文分组与链接变量进行第3轮运算。</li><li>(6) 子明文分组与链接变量进行第4轮运算。</li><li>(7) 链接变量与初始链接变量进行求和运算。</li><li>(8) 链接变量作为下一个明文分组的输入重复进行以上操作。</li><li>(9) 最后，4个链接变量里面的数据就是MD5摘要。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Q:我为什么要写这篇文章？&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A:你没发现我很久没有跟新文章了么？&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Q：为什么跟新这个内容？&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A：你一个搞安全的不研究加密算法，你还能干什么？？&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Q：你了解hash算法嘛？&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A：不了解，那还不能学啊，安全组的，你不会百度，你还学什么安全？&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最后，这篇文章，我参考了网上诸多关于hash算法的文章，在此表示深深的谢意，愿我们在这知识的海洋里能继续遨游。2017.11.18夜&lt;br&gt;
    
    </summary>
    
      <category term="密码学" scheme="http://yoursite.com/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>浅谈数据结构之栈</title>
    <link href="http://yoursite.com/2017/11/12/%E6%B5%85%E8%B0%88%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%A0%88/"/>
    <id>http://yoursite.com/2017/11/12/浅谈数据结构之栈/</id>
    <published>2017-11-12T08:02:11.000Z</published>
    <updated>2017-11-21T05:35:23.142Z</updated>
    
    <content type="html"><![CDATA[<h2 id="栈的概念："><a href="#栈的概念：" class="headerlink" title="栈的概念："></a>栈的概念：</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>栈是一种只允许在一端进行插入或者删除的线性表，他是一种操作受限的线性表，在表中只允许进行插入或者删除的一端叫做栈顶另一端叫做栈底。栈具有先进后出（Last in first out）的性质。</strong><a id="more"></a></p><h2 id="栈的存储结构："><a href="#栈的存储结构：" class="headerlink" title="栈的存储结构："></a>栈的存储结构：</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>顺序存储和链式存储。</strong></p><h2 id="顺序存储："><a href="#顺序存储：" class="headerlink" title="顺序存储："></a>顺序存储：</h2><ul><li>利用顺序存储方式实现的栈称为顺序栈，通常0下标称之为栈底，这样空栈时栈顶指针top==-1，压栈top++，出栈 top–。</li><li><p>DAT: </p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">typedef int datatype;</div><div class="line">typedef struct </div><div class="line">&#123;</div><div class="line">datatype data[MAX];</div><div class="line">int top;</div><div class="line">&#125;SeqStack;</div></pre></td></tr></table></figure></li><li><p>初始化：</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">   <span class="function">SeqStack *<span class="title">InitStack</span><span class="params">()</span>   <span class="comment">//初始化</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">SeqStack *s = (SeqStack*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SeqStack));</div><div class="line">s-&gt;top = <span class="number">-1</span>;</div><div class="line"><span class="keyword">return</span> s;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>压栈：</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">PushStack</span><span class="params">(SeqStack *s,datatype x)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span> (s-&gt;top == MAX - <span class="number">1</span>)  <span class="comment">//栈从0开始计算的。</span></div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"栈满\n"</span>);</div><div class="line"><span class="keyword">return</span> FALSE;</div><div class="line">&#125;</div><div class="line">s-&gt;top++;</div><div class="line">s-&gt;data[s-&gt;top] = x;</div><div class="line"><span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>出栈：</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">PopStack</span><span class="params">(SeqStack *s, datatype *x)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span> (s-&gt;top == <span class="number">-1</span>)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"栈空\n"</span>);</div><div class="line"><span class="keyword">return</span> FALSE;</div><div class="line">&#125;</div><div class="line">*x = s-&gt;data[s-&gt;top];</div><div class="line">s-&gt;top--;</div><div class="line"><span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>取栈顶：</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function">datatype <span class="title">TopStack</span><span class="params">(SeqStack *s)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span> (s-&gt;top == <span class="number">-1</span>)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"栈空\n"</span>);</div><div class="line"><span class="keyword">return</span> FALSE;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> s-&gt;data[s-&gt;top];</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>遍历栈：</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">   <span class="function"><span class="keyword">void</span> <span class="title">ShowStack</span><span class="params">(SeqStack *s)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> tmp = s-&gt;top;</div><div class="line"><span class="keyword">while</span> (s-&gt;top != <span class="number">-1</span>)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, s-&gt;data[s-&gt;top]);</div><div class="line">s-&gt;top--;</div><div class="line">&#125;</div><div class="line">s-&gt;top = tmp;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;栈的概念：&quot;&gt;&lt;a href=&quot;#栈的概念：&quot; class=&quot;headerlink&quot; title=&quot;栈的概念：&quot;&gt;&lt;/a&gt;栈的概念：&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;栈是一种只允许在一端进行插入或者删除的线性表，他是一种操作受限的线性表，在表中只允许进行插入或者删除的一端叫做栈顶另一端叫做栈底。栈具有先进后出（Last in first out）的性质。&lt;/strong&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>OD断点设置技巧</title>
    <link href="http://yoursite.com/2017/11/10/OD%E6%96%AD%E7%82%B9%E8%AE%BE%E7%BD%AE%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2017/11/10/OD断点设置技巧/</id>
    <published>2017-11-10T08:45:11.000Z</published>
    <updated>2017-11-21T05:35:23.132Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>断点是一个信号，它通知调试器，在某个特定点上暂时将程序执行挂起。当执行在某个断点处挂起时，我们称程序处于中断模式。进入中断模式并不会终止或结束程序的执行。执行可以在任何时候继续。断点的本质还是一种中断。</strong><a id="more"></a></p><h1 id="主要的四种断点设置方式："><a href="#主要的四种断点设置方式：" class="headerlink" title="主要的四种断点设置方式："></a>主要的四种断点设置方式：</h1><p>1.字符串断点<br>2.API断点<br>3.条件断点<br>4.run跟踪断点</p><ul><li>断点设置：<ul><li>API断点：<ul><li>1.可以在菜单栏—API断点处下断</li><li>2.在命令行输入 bp+API函数名字，然后执行到返回（alt+F9）</li></ul></li><li>条件断点：<ul><li>1.运行</li><li>2.在window窗口找到Edit（需要刷新）记录句柄信息</li><li>3.在反汇编窗口，ctrl+G输入函数名字，定位在函数里面</li><li>4.shift+F2设置条件断点，条件为【esp+4】==Edit地址</li><li><strong>注意：esp+4是句柄信息（也是GetWindowTextW的第一个参数)；条件是断在call的第一个参数处！！</strong></li></ul></li><li>run追踪：<ul><li>1.Ctrl+E 找到程序模块<br><img src="https://i.imgur.com/8sq9suE.png" alt=""></li><li>2.Ctrl+T 暂停run跟踪条件，输入如下信息（选中EIP位于范围内，范围是基址和大小）<br><img src="https://i.imgur.com/TRcA3SG.png" alt=""></li><li>3.运行。</li><li>补充内容：<ul><li>在反汇编窗口的快捷菜单中选择“Run跟踪［Run trace］|添加到所有函数入口处［Add entries of all procedures］”，<font color="#DC143C">这样能够检查每个可识别的函数被调用的次数。</font></li><li>另一个命令“Run跟踪［Run trace］|添加到函数中所有的分支［Add branches in procedure］”<font color="#DC143C">会强行跟踪此函数中所有识别的跳转目的地址的内容。</font>在这种情况下，统计功能能够找到最频繁执行的分支，您可以优化这部分的代码，以提高速度。</li><li>在反汇编窗口中的某条命令上使用快捷菜单中选择“搜索［Search for］|Run跟踪的最新记录［Last record in run trace］”用于查找该命令是否被执行过，如果执行过，最后一次执行在哪里。  </li></ul></li></ul></li></ul></li><li>其他断点设置：<ul><li>1.万能断点:ebp hmemcpy<ul><li>ebp 在调用函数处下断（bp是指在调用函数内部下断）</li><li>hmemcpy—16位函数，截获大部分的字符串输入</li></ul></li><li>2.条件断点参考:<a href="http://bbs.pediy.com/thread-16494.htm" target="_blank" rel="external">http://bbs.pediy.com/thread-16494.htm</a></li><li>3.合适于xp的万能断点：<ul><li>1）首先查看user32模块</li><li>2）Ctrl+B，利用字符串·搜索F3 A5 8B C8 83 E1 03 F3 A4 E8</li><li>3）或者：8B C1 C1 E9 02 F3 A5 8B C8 83 E1 03 F3 A4 E8</li><li>4）在停的地方下断，此时代码处在系统领空</li><li>5）alt+F9，回到程序领空</li></ul></li><li><strong>4.利用消息断点寻找关键跳转：</strong><ul><li>1）打开“windows”窗口（程序运行）</li><li>2）在一些关键的地方设置消息断点（选择那些容易触发事件的地方）</li><li>3）根据条件设置断点类型（如202鼠标右键消息类型）</li><li>4）此时会断在系统领空，我们按Alt+F9回到用户·代码<br><img src="https://i.imgur.com/KuaDdHq.png" alt=""></li><li>5)补充：<ul><li>对于这片文章<a href="http://bbs.pediy.com/showthread.php?t=46520" target="_blank" rel="external">http://bbs.pediy.com/showthread.php?t=46520</a>出现下消息断点输入不完整的情况可以，下完断点，禁止断点，然后运行输入完毕后（不要点击确定）激活断点，运行就可！</li></ul></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;断点是一个信号，它通知调试器，在某个特定点上暂时将程序执行挂起。当执行在某个断点处挂起时，我们称程序处于中断模式。进入中断模式并不会终止或结束程序的执行。执行可以在任何时候继续。断点的本质还是一种中断。&lt;/strong&gt;
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>浅谈数据结构之队列</title>
    <link href="http://yoursite.com/2017/11/09/%E6%B5%85%E8%B0%88%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%98%9F%E5%88%97/"/>
    <id>http://yoursite.com/2017/11/09/浅谈数据结构之队列/</id>
    <published>2017-11-09T03:00:11.000Z</published>
    <updated>2017-11-21T05:35:23.142Z</updated>
    
    <content type="html"><![CDATA[<h1 id="队列的定义："><a href="#队列的定义：" class="headerlink" title="队列的定义："></a>队列的定义：</h1><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。需要注意的是：<font color="#DC143C">入队的时候是队尾入队，出队的时候是队头出队</font></strong><br><a id="more"></a></p><h1 id="队列的存储形式："><a href="#队列的存储形式：" class="headerlink" title="队列的存储形式："></a>队列的存储形式：</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;与线性表和栈类似，队列也有<font color="#DC143C">顺序存储和链式存储</font>两种存储结构。</p><ul><li><font color="#DC143C">顺序存储(循环队列)</font>：即有一组地址连续的存储单元依次存放队列中的数据元素，一般情况下使用以为数组来作为队列的顺序存储空间。为了避免尾巴在头的前面我们采取的循环队列的处理方式。首尾相接的循环表构建方法我们采用的是求模的方法。 <pre><code>类型定义：  typedef struct  {      datatype data[MAX];      int rear,front;  }SeQueue;</code></pre>    <pre><code>置空队列：  SeQueue *InitQueue()   //置空队列  {      SeQueue *p = (SeQueue*)malloc(sizeof(SeQueue));      p->front = p->rear = MAX-1;   //首尾指针指向相同的地方，MAX-1，输入时正好对头在第一个位置。      return p;  }</code></pre>   <pre><code>入队列：  int InQueue(SeQueue *p, datatype x)  //入队列  {      if ((p->rear + 1) % MAX == (p->front))  //首先看是否已满      {          printf("队满");          return FALSE;      }      else      {    p->data[p->rear] = x;             //先入队列在指针加1，和先指针+1在入队列不一样          p->rear = (p->rear + 1) % MAX;          return TRUE;      }  }</code></pre><pre><code>出队列:  int OutQueue(SeQueue *p, datatype *x)  //出队列  {      if (p->front == p->rear)      {          printf("队列已满");          return FALSE;      }      else      {          *x = p->data[p->front];          p->front=(p->front+1)%MAX;          return 0;      }  }</code></pre><pre><code>判队空:  int EmptyQueue(SeQueue *p)     //判队空  {      if (p->front == p->rear)   //空      {          printf("队列为空\n");          return 1;      }          else          return 0;  }</code></pre><pre><code>显示:  void ShowQueue(SeQueue *p)  {      int i;      for (i = p->front; i != p->rear; i=(i+1)%MAX)          printf("%c ", p->data[i]);  }</code></pre></li><li><p><font color="#DC143C">链式存储：</font>如果用户不知道需要的内存大小，可以采用链式存储结构，和链栈一样，使用单链表实现链队列，为了操作方便，可以使用带头结点的单链表表示队列，并设置头指针和尾指针，头指针指向队头结点，尾指针指向队尾节点。</p><pre><code>  typedef struct node  {      datatype data;      struct node *next;  }Qnode;     //链式队列的节点  typedef struct  {      Qnode *front;      Qnode *rear;  }LQueue;   //链式队列的头指针节点  LQueue *InitQueue()  {      LQueue *q = (LQueue*)malloc(sizeof(LQueue));      Qnode *p = (Qnode*)malloc(sizeof(Qnode));      p->next = NULL;      q->front = q->rear = p;   //头指向建立好的节点  }  /*----------------------------  注意：front指针永远指向第一个节点  --------------------------------*/  void InQueue(LQueue *q, datatype x)   //入队列  {      Qnode *p = (Qnode*)malloc(sizeof(Qnode));      p->data = x;      p->next = NULL;      q->front->next = p;     //目的是使队列和新加入的节点链接起来      q->front = p;           //母的是使头指针的rear指针指向队尾  }  /*----------------------------------  注意：队首出队列  -----------------------------------*/  int OutQueue(LQueue *q, datatype *x)  {      Qnode *p;      if (!EmptyQueue(q))  //队列为空          return FALSE;      else      {          *x = q->front->data;          p = q->front->next;     //p指向第一个节点          q ->front->next= p->next;    //头指针指向第一个节点的下一个节点          free(p);      }      if (q->front->next==NULL)    //队列中只有最后一个数据了      {              q->front = q->rear;          return TRUE;      }  }  int EmptyQueue(LQueue *q)      //判队空  {      if (q->front == q->rear)      {          printf("队列为空\n");          return 1;      }      else          return 0;  }</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;队列的定义：&quot;&gt;&lt;a href=&quot;#队列的定义：&quot; class=&quot;headerlink&quot; title=&quot;队列的定义：&quot;&gt;&lt;/a&gt;队列的定义：&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。需要注意的是：&lt;font color=&quot;#DC143C&quot;&gt;入队的时候是队尾入队，出队的时候是队头出队&lt;/font&gt;&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>switch结构逆向分析</title>
    <link href="http://yoursite.com/2017/11/06/switch%E7%BB%93%E6%9E%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/11/06/switch结构逆向分析/</id>
    <published>2017-11-06T09:02:11.000Z</published>
    <updated>2017-11-21T05:35:23.133Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>暑假看了看雪的知识库，偶然间看到这篇besterChen写的switch结构分析一文，甚喜之，原封不动的抄了下来，在此表示非常感谢。这是在暑假的word版经过复核及重新测试，发现原文许多反汇编代码与原先语句有出入，可能是现在编译器更加高级了。为了保证原文的统一和完整性，在此没有对原文代码进行修改，只是在后面进行了补充，形式为图片类型。随后也会附上关于本次的测试样本（<a href="http://pan.baidu.com/s/1gfo0ejx" target="_blank" rel="external">http://pan.baidu.com/s/1gfo0ejx</a>），</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>switch 结构的逆向难度在于不同分支的switch通过反编译器可能演变成不同的汇编语言版本，这就要求逆向工程师精确掌握反汇编switch的规律。灵活的运用调试器进行调试。</strong><br><a id="more"></a></p><h1 id="1-case-lt-3的情况："><a href="#1-case-lt-3的情况：" class="headerlink" title="1.case&lt;=3的情况："></a>1.case&lt;=3的情况：</h1><p>先看第一个程序段：</p><p><pre><code><br>    switch (nscore)<br>    {<br>    case 1:<br>        ntmpNum = 1;<br>        break;<br>    case 3:<br>        ntmpNum = 3;<br>        break;<br>    case 4:<br>        ntmpNum = 4;<br>        break;<br>    default:<br>        ntmpNum = 10;<br>    }<br>    printf(“%d”, ntmpNum); // 要调用一下ntmpNum，否则上面的switch会被优化掉<br></code></pre><br>OD载入，看一下：</p><p><pre><code><br>    00401013 &gt;|.  E8 0F010000    call    00401127     ;scanf<br>    00401018  |.  8B4424 08      mov     eax, dword ptr [esp+8]<br>    0040101C  |?  83C4 08        add     esp, 8          ; 上面scanf是C类调用<br>    0040101F  |?  48             dec     eax       ; 通过EAX的减法来判断属于哪个分支<br>    00401020  |?  74 1D          je      short 0040103F<br>    00401022  |.  83E8 02        sub     eax, 2<br>    00401025  .  74 11          je      short 00401038<br>    00401027      48             dec     eax<br>    00401028      74 07          je      short 00401031<br>    0040102A      B8 0A000000    mov     eax, 0A<br>    0040102F      EB 13          jmp     short 00401044   ;break<br>    00401031  |.  B8 04000000    mov     eax, 4<br>    00401036  |.  EB 0C          jmp     short 00401044<br>    00401038  |?  B8 03000000    mov     eax, 3<br>    0040103D  |?  EB 05         jmp     short 00401044<br>    0040103F  |?  B8 01000000    mov     eax, 1<br>    00401044  |.  50             push    eax<br>    00401045  |?  68 38904000    push    00409038       ;  ASCII “%d”<br></code></pre><br>通过上述反汇编代码，我们容易得知：在有规律的switch语句中，汇编代码显得有规律，和if语句一致。测试结果与原文一致。</p><h1 id="2-case项多于3项且有规律的情况："><a href="#2-case项多于3项且有规律的情况：" class="headerlink" title="2.case项多于3项且有规律的情况："></a>2.case项多于3项且有规律的情况：</h1><p>第一个程序段：</p><p><pre><code><br>    scanf(“%d”, &amp;nscore);<br>    switch (nscore)<br>    {<br>        case 3:<br>            ntmpNum = 1;<br>               break;<br>        case 1:<br>            ntmpNum = 3;<br>            break;<br>        case 5:<br>            ntmpNum = 4;<br>            break;<br>        case 9:<br>            ntmpNum = 4;<br>            break;<br>        case 7:<br>            ntmpNum = 4;<br>            break;<br>        case 11:<br>            ntmpNum = 4;<br>            break;<br>        default:<br>            ntmpNum = 10;<br>    }<br>    printf(“%d”, ntmpNum); // 要调用一下ntmpNum，否则上面的switch会被优化掉<br></code></pre><br>这段代码，我们将有规律的case打乱顺序，然后看编译器是怎么处理的。<br>OD中查看反汇编形式：</p><p><pre><code><br>    0040100E  |.  68 38904000   push    00409038            ; ASCII “%d”<br>    00401013  |.  E8 3F010000   call    00401157            ; scanf<br>    00401018  |.  8B4C24 08     mov     ecx, dword ptr [esp+8]  ;得到输入的内容<br>    0040101C  |.  83C4 08       add     esp, 8<br>    0040101F  |.  8D41 FF       lea     eax, dword ptr [ecx-1]  ;输入的内容-1; Switch (cases 1..B)<br>    00401022  |.  83F8 0A       cmp     eax, 0A<br>    00401025  |.  77 1C         ja      short 00401043<br>    00401027  |.  FF2485 641040&gt;jmp     dword ptr [eax*4+401064] ;查表，跳转到对应的CASE中<br>    0040102E  |&gt;  B8 01000000   mov     eax, 1             ;  Case 3 of switch 0040101F<br>    00401033  |.  EB 13         jmp     short 00401048<br>    00401035  |&gt;  B8 03000000   mov     eax, 3             ;  Case 1 of switch 0040101F<br>    0040103A  |.  EB 0C         jmp     short 00401048<br>    0040103C  |&gt;  B8 04000000   mov     eax, 4             ;  Cases 5,7,9,B of switch 0040101F<br>    00401041  |.  EB 05         jmp     short 00401048<br>    00401043  |&gt;  B8 0A000000   mov     eax, 0A            ;  Default case of switch 0040101F<br>    00401048  |&gt;  50            push    eax<br>    00401049  |.  68 38904000   push    00409038           ;  ASCII “%d”<br>    0040104E  |.  E8 D3000000   call    00401126           ;  printf<br></code></pre><br>跟随下这个表，我们发现，这个表就在调用它的函数后，如下：</p><p><pre><code><br>    00401064  00401035  switch.00401035<br>    00401068  00401043  switch.00401043          插入的是default分支的首地址<br>    0040106C  0040102E  switch.0040102E<br>    00401070  00401043  switch.00401043          插入的是default分支的首地址<br>    00401074  0040103C  switch.0040103C<br>    00401078  00401043  switch.00401043          插入的是default分支的首地址<br>    0040107C  0040103C  switch.0040103C<br>    00401080  00401043  switch.00401043          插入的是default分支的首地址<br>    00401084  0040103C  switch.0040103C<br>    00401088  00401043  switch.00401043          插入的是default分支的首地址<br>    0040108C  0040103C  switch.0040103C<br></code></pre></p><font color="#DC143C">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;认真对比一下这个表，发现，它先是对case后的常量排序，然后再将对应的处理代码的首地址写成一个表，通过jmp   dword ptr [eax*4+401064] 查表直接进入到对应的case中。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于缺省的case（我们是间隔2递增的case）在表中填充的是default分支的首地址。</font><ul><li>补充：<ul><li>我输入的是3，也就是case语句的第二个语句（1.3.5….）</li><li>利用IDA pro查看分支表，如图：<br><img src="https://i.imgur.com/fGlHnLG.png" alt=""></li><li>然后查看od跳转的地方（401341）：<br><img src="https://i.imgur.com/bdTKhlv.png" alt=""></li><li>对比od可以知道：401377是默认分支，其他是有效的的case分支。也就是IDA pro显示的分支表中的2.4.6.8….如图，可以知道：在分支表存在的顺序按照nscore排列。<br><img src="https://i.imgur.com/EWEajcb.png" alt=""></li></ul></li></ul><h1 id="3-多于三项部分有规律的情况"><a href="#3-多于三项部分有规律的情况" class="headerlink" title="3.多于三项部分有规律的情况:"></a>3.多于三项部分有规律的情况:</h1><p><strong>（1）上个我们发现，它会给缺省的case表项中填补default分支的首地址，那我们将这个间隔调大，观察一下编译器会怎么处理，代码段如下：</strong></p><p><pre><code><br>    scanf(“%d”, &amp;nscore);<br>    switch (nscore)<br>    {<br>        case 1:<br>            ntmpNum = 1;<br>            break;<br>        case 2:<br>            ntmpNum = 2;<br>            break;<br>        case 3:<br>            ntmpNum = 3;<br>            break;<br>    //这里丢失20多个case<br>        case 26:<br>            ntmpNum = 26;<br>            break;<br>        case 27:<br>            ntmpNum = 27;<br>            break;<br>        case 28:<br>            ntmpNum = 28;<br>            break;<br>        default:<br>            ntmpNum = 10;<br>    }<br>    printf(“%d”, ntmpNum); // 要调用一下ntmpNum，否则上面的switch会被优化掉<br></code></pre><br>反汇编观察一下：</p><p><pre><code><br>    0040100E    68 38904000     push    00409038                      ; ASCII “%d”<br>    00401013    E8 6F010000     call    00401187                      ; scanf<br>    00401018    8B4C24 08       mov     ecx, dword ptr [esp+8]        ; 得到输入的内容<br>    0040101C    83C4 08         add     esp, 8<br>    0040101F    8D41 FF         lea     eax, dword ptr [ecx-1]        ; 输入的内容-1<br>    00401022    83F8 1B         cmp     eax, 1B<br>    00401025    77 39           ja      short 00401060<br>    00401027    33D2            xor     edx, edx<br>    00401029    8A90 9C104000   mov     dl, byte ptr [eax+40109C]     ; 检索case的下标索引值表<br>    ;它参与运算从地址表中找到对应的case地址<br>    0040102F    FF2495 80104000 jmp     dword ptr [edx*4+401080]<br>    ; 通过值表填充的CASE索引值，查地址表<br>    00401036    B8 01000000     mov     eax, 1<br>    0040103B    EB 28           jmp     short 00401065                  ; break<br>    0040103D    B8 02000000     mov     eax, 2<br>    00401042    EB 21           jmp     short 00401065<br>    00401044    B8 03000000     mov     eax, 3<br>    00401049    EB 1A           jmp     short 00401065<br>    0040104B    B8 1A000000     mov     eax, 1A<br>    00401050    EB 13           jmp     short 00401065<br>    00401052    B8 1B000000     mov     eax, 1B<br>    00401057    EB 0C           jmp     short 00401065<br>    00401059    B8 1C000000     mov     eax, 1C<br>    0040105E    EB 05           jmp     short 00401065<br>    00401060    B8 0A000000     mov     eax, 0A<br>    00401065    50              push    eax<br>    00401066    68 38904000     push    00409038                         ; ASCII “%d”<br></code></pre><br>下标索引表：</p><p><pre><code><br>    0040109C    00          DB 00    case 1的索引值<br>    0040109D    01          DB 01    case 2的索引值<br>    0040109E    02          DB 02    case 3的索引值<br>    0040109F    06          DB 06    下面全部填充default的索引值<br>    004010A0    06          DB 06<br>    …<br>    004010B4    06          DB 06<br>    004010B5    03          DB 03    case 4的索引值<br>    004010B6    04          DB 04    case 5的索引值<br>    004010B7    05          DB 05    case 6的索引值<br></code></pre><br>这样查两个表，缺省的case项在索引表中插入 default 的索引值，这样每个case项就节省了3个字节的空间。</p><p><pre><code><br>    mov     dl, byte ptr [eax+40109C]   // 40109C是索引表首地址<br>    jmp     dword ptr [edx*4+401080]    // 401080是跳转地址表的首地址。<br></code></pre></p><ul><li><p>补充：</p><ul><li>根据OD和IDA的联合调试，发现这个和上面的方法是一样的。直接使用的是地址值，并没有经过索引表来中介传输。<br><img src="https://i.imgur.com/9tMLKKV.png" alt=""><br><img src="https://i.imgur.com/s6wouQW.png" alt=""><br><strong>（2）我们继续增大这个case之间的差距，让它超过255，代码段如下：</strong><br><pre><code><br>scanf(“%d”, &amp;nscore)；<br>switch (nscore)<br>{<br>  case 1:<pre><code>ntmpNum = 1;break;</code></pre>  case 2:<pre><code>ntmpNum = 2;break;</code></pre>  case 3:<pre><code>ntmpNum = 3;break;</code></pre>  //这里丢失几个case<br>  case 326:<pre><code>ntmpNum = 26;break;</code></pre>  case 327:<pre><code>ntmpNum = 27;break;</code></pre>  case 328:<pre><code>ntmpNum = 28;break;</code></pre>  default:<pre><code>ntmpNum = 10;</code></pre>}<br>printf(“%d”, ntmpNum); // 要调用一下ntmpNum，否则上面的switch会被优化掉<br></code></pre><br>反汇编看一下效果：<br><pre><code><br>00401018    8B4424 08       mov     eax, dword ptr [esp+8]  ; 得到输入的内容<br>0040101C    83C4 08         add     esp, 8<br>0040101F    3D 46010000     cmp     eax, 146            ; 判断是不是大case中最小的<br>00401024    7F 27           jg      short 0040104D    ; 如果大于，就进入大case中比较<br>00401026    74 1E           je      short 00401046    ; 如果相等就直接进入0x146的case代码段<br>00401028    48              dec     eax            ; 否则就到小的case段中比较。<br>00401029    74 14           je      short 0040103F<br>0040102B    48              dec     eax<br>0040102C    74 0A           je      short 00401038<br>0040102E    48              dec     eax<br>0040102F    75 26           jnz     short 00401057    ; default了。<br>00401031    B8 03000000     mov     eax, 3<br>00401036    EB 32           jmp     short 0040106A<br>00401038    B8 02000000     mov     eax, 2<br>0040103D    EB 2B           jmp     short 0040106A<br>0040103F    B8 01000000     mov     eax, 1<br>00401044    EB 24           jmp     short 0040106A<br>00401046    B8 1A000000     mov     eax, 1A<br>0040104B    EB 1D           jmp     short 0040106A<br>0040104D    2D 47010000     sub     eax, 147<br>; 减去一个case项值，得到一个差值，这样就可以判断大case了。<br>00401052    74 11           je      short 00401065<br>00401054    48              dec     eax<br>00401055    74 07           je      short 0040105E<br>00401057    B8 0A000000     mov     eax, 0A<br>0040105C    EB 0C           jmp     short 0040106A<br>0040105E    B8 1C000000     mov     eax, 1C<br>00401063    EB 05           jmp     short 0040106A<br>00401065    B8 1B000000     mov     eax, 1B<br>0040106A    50              push    eax<br>0040106B    68 38904000     push    00409038            ; ASCII “%d”<br>00401070    E8 B1000000     call    00401126<br></code></pre><br>看到了么？这里就分成了两段，每段当做if来处理的，我想应该是我们每段的case数量太少，我们让上面的case 数量大于3个试试，看看会不会是只要大于三项的有规律case就查表，少于等于3项的就当成if来处理。</li></ul></li><li><p>补充：</p><ul><li>我也不清楚为什么编译器会和146.147.148这三个数比较，然后跳入第二次default。<br><img src="https://i.imgur.com/BPjANEv.png" alt=""></li></ul></li></ul><p>代码如下：</p><p><pre><code><br>    scanf(“%d”, &amp;nscore);<br>    switch (nscore)<br>    {<br>        case 1:<br>            ntmpNum = 1;<br>            break;<br>        case 2:<br>            ntmpNum = 2;<br>            break;<br>        case 3:<br>            ntmpNum = 3;<br>            break;<br>        case 4:<br>            ntmpNum = 4;<br>            break;<br>        case 5:<br>            ntmpNum = 5;<br>            break;<br>        //这里丢失几个case<br>        case 326:<br>            ntmpNum = 326;<br>            break;<br>        case 327:<br>            ntmpNum = 327;<br>            break;<br>        case 328:<br>            ntmpNum = 328;<br>            break;<br>        default:<br>            ntmpNum = 10;<br>    }<br>    printf(“%d”, ntmpNum); // 要调用一下ntmpNum，否则上面的switch会被优化掉<br></code></pre><br>反汇编看下效果：</p><p><pre><code><br>    0040100E    68 38904000     push    00409038                         ; ASCII “%d”<br>    00401013    E8 5F010000     call    00401177                         ; scanf<br>    00401018    8B4424 08       mov     eax, dword ptr [esp+8]           ; 得到输入的内容<br>    0040101C    83C4 08         add     esp, 8<br>    0040101F    3D 46010000     cmp     eax, 146<br>    00401024    7F 39           jg      short 0040105F<br>    00401026    74 30           je      short 00401058<br>    00401028    48              dec     eax<br>    00401029    83F8 04         cmp     eax, 4<br>    0040102C    77 3B           ja      short 00401069<br>    0040102E    FF2485 98104000 jmp     dword ptr [eax*4+401098]<br>    00401035    B8 01000000     mov     eax, 1<br>    0040103A    EB 40           jmp     short 0040107C<br>    0040103C    B8 02000000     mov     eax, 2<br>    00401041    EB 39           jmp     short 0040107C<br>    00401043    B8 03000000     mov     eax, 3<br>    00401048    EB 32           jmp     short 0040107C<br>    0040104A    B8 04000000     mov     eax, 4<br>    0040104F    EB 2B           jmp     short 0040107C<br>    00401051    B8 05000000     mov     eax, 5<br>    00401056    EB 24           jmp     short 0040107C<br>    00401058    B8 46010000     mov     eax, 146<br>    0040105D    EB 1D           jmp     short 0040107C<br>    0040105F    2D 47010000     sub     eax, 147<br>    00401064    74 11           je      short 00401077<br>    00401066    48              dec     eax<br>    00401067    74 07           je      short 00401070<br>    00401069    B8 0A000000     mov     eax, 0A<br>    0040106E    EB 0C           jmp     short 0040107C<br>    00401070    B8 48010000     mov     eax, 148<br>    00401075    EB 05           jmp     short 0040107C<br>    00401077    B8 47010000     mov     eax, 147<br>    0040107C    50              push    eax<br>    0040107D    68 38904000     push    00409038                         ; ASCII “%d”<br>    00401082    E8 BF000000     call    00401146<br></code></pre><br>跳转表如下：</p><p><pre><code><br>    00401098  00401035  switch.00401035<br>    0040109C  0040103C  switch.0040103C<br>    004010A0  00401043  switch.00401043<br>    004010A4  0040104A  switch.0040104A<br>    004010A8  00401051  switch.00401051<br></code></pre><br>哈哈，不多说了，我们看下无规律的情况。</p><ul><li>补充（原文的反汇编代码和这次实验不一样，原文存在地址表，这个不存在）<ul><li>可能是利用最优二叉树算法得到的中间的146.147.148的值。<br><img src="https://i.imgur.com/NuuD0FS.png" alt=""><br><img src="https://i.imgur.com/T7M4S7F.png" alt=""><br><img src="https://i.imgur.com/ViSkkB0.png" alt=""><h1 id="4-对于毫无规律的情况。"><a href="#4-对于毫无规律的情况。" class="headerlink" title="4.对于毫无规律的情况。"></a>4.对于毫无规律的情况。</h1><strong>(1)通过上个例子的分析，我们大概可以猜出来，编译器会择优选择查表，查双表来对部分离得比较近的case项作处理，最后才考虑毫无规律的情况，为了提高我们这次测试的成功率，我们让每个相邻的case项差值都超过255，为了避免switch当做if来处理，我们多写几个case，具体代码段如下:</strong><br><pre><code><br>scanf(“%d”, &amp;nscore);<br>switch (nscore)<br>{<br> case 1:<pre><code>ntmpNum = 1;break;</code></pre> case 300:<pre><code>ntmpNum = 300;break;</code></pre> case 570:<pre><code>ntmpNum = 570;break;</code></pre> case 830:<pre><code>ntmpNum = 830;break;</code></pre> case 1094:<pre><code>ntmpNum = 1094;break;</code></pre> case 1314:<pre><code>ntmpNum = 32;break;</code></pre> case 1614:<pre><code> ntmpNum = 1614; break;case 1894: ntmpNum = 1894; break;</code></pre> case 2199:<pre><code> ntmpNum = 2199; break;case 2578:   ntmpNum = 2578; break;</code></pre> case 2800:<pre><code>ntmpNum = 2800;break;</code></pre> case 3178:<pre><code>ntmpNum = 3178;break;</code></pre> case 3568:<pre><code>ntmpNum = 3568;break;</code></pre> case 3856:<pre><code>ntmpNum = 3856;break;</code></pre> case 4212:<pre><code>ntmpNum = 4212;break;</code></pre> case 4679:<pre><code>ntmpNum = 4679;break;</code></pre> case 5050:<pre><code>ntmpNum = 5050;break;</code></pre> case 5486:<pre><code>ntmpNum = 5486;break;</code></pre> case 5797:<pre><code>ntmpNum = 5797;break;</code></pre> case 6089:<pre><code>ntmpNum = 6089;break;</code></pre> case 6713:<pre><code>ntmpNum = 6713;break;</code></pre> case 8425:<pre><code>ntmpNum = 8425;break;</code></pre> case 8973:<pre><code>ntmpNum = 8973;break;</code></pre> case 9545:<pre><code>ntmpNum = 9545;break;</code></pre> case 9987:<pre><code>ntmpNum = 9987;break;</code></pre> case 11254:<pre><code>ntmpNum = 11254;break;</code></pre> case 12489:<pre><code>ntmpNum = 12489;break;</code></pre> case 15798:<pre><code>ntmpNum = 15798;break;</code></pre> case 26874:<pre><code>ntmpNum = 26874;break;</code></pre> case 34721:<pre><code>ntmpNum = 34721;break;</code></pre> case 39681:<pre><code>ntmpNum = 39681;break;</code></pre> default:<pre><code>ntmpNum = 10;</code></pre>}<br>printf(“%d”, ntmpNum); // 要调用一下ntmpNum，否则上面的switch会被优化掉<br></code></pre><br>反汇编结果和上述理论一致。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;暑假看了看雪的知识库，偶然间看到这篇besterChen写的switch结构分析一文，甚喜之，原封不动的抄了下来，在此表示非常感谢。这是在暑假的word版经过复核及重新测试，发现原文许多反汇编代码与原先语句有出入，可能是现在编译器更加高级了。为了保证原文的统一和完整性，在此没有对原文代码进行修改，只是在后面进行了补充，形式为图片类型。随后也会附上关于本次的测试样本（&lt;a href=&quot;http://pan.baidu.com/s/1gfo0ejx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://pan.baidu.com/s/1gfo0ejx&lt;/a&gt;），&lt;/strong&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;switch 结构的逆向难度在于不同分支的switch通过反编译器可能演变成不同的汇编语言版本，这就要求逆向工程师精确掌握反汇编switch的规律。灵活的运用调试器进行调试。&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>浅谈数据结构之二叉树</title>
    <link href="http://yoursite.com/2017/11/05/%E6%B5%85%E8%B0%88%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://yoursite.com/2017/11/05/浅谈数据结构之二叉树/</id>
    <published>2017-11-05T10:45:11.000Z</published>
    <updated>2017-11-21T05:35:23.140Z</updated>
    
    <content type="html"><![CDATA[<h1 id="树的定义："><a href="#树的定义：" class="headerlink" title="树的定义："></a>树的定义：</h1><p>树是n（n&gt;=0）个节点的有限集合。当n==0时，称为空树，当n&gt;=0时，树满足以下条件：<br>    <strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（1）有且仅有一个称为根的特定节点，该节点没有前驱节点，有一个或者多个后继节点。</strong><br>    <strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（2） 除根节点以外的n-1个节点可以划分为m个互不相交的有限集合，该集合称之为树，即根的子树</strong><br><a id="more"></a></p><h1 id="二叉树的定义："><a href="#二叉树的定义：" class="headerlink" title="二叉树的定义："></a>二叉树的定义：</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在计算机科学中，二叉树是每个节点最多有两个子树的树结构。通常子树被称作“左子树”（left subtree）和“右子树”（right subtree）。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;二叉树的每个结点至多只有二棵子树(不存在度大于2的结点)，二叉树的子树有左右之分，次序不能颠倒。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>二叉树的第i层至多有2^{i-1}个结点；深度为k的二叉树至多有2^k-1个结点；对任何一棵二叉树T，如果其终端结点数为n_0，度为2的结点数为n_2，则n_0=n_2+1。</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>一棵深度为k，且有2^k-1个节点称之为满二叉树；深度为k，有n个节点的二叉树，当且仅当其每一个节点都与深度为k的满二叉树中，序号为1至n的节点对应时，称之为完全二叉树。</strong></p><h1 id="二叉树的存储结构："><a href="#二叉树的存储结构：" class="headerlink" title="二叉树的存储结构："></a>二叉树的存储结构：</h1><p><strong>1.顺序存储结构：</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于满二叉树和完全二叉树来说，按照满二叉树节点连续编号的次序，将各节点数据存放在一组连续的内存单元，即用一维数组作为存储结构。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;满足一下条件：<br><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1)左子树是双亲节点次序的2n倍</strong><br><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2)右子树是双亲节点次序的2n+1倍</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如图所示，将二叉树按顺序结构存储：<br>     <img src="https://i.imgur.com/N43CGuq.jpg" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将这个二叉树按顺序结构存储：<br>     <img src="https://i.imgur.com/SjnBCZt.jpg" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;二叉树的顺序存储模型的DAT描述如下：</p><pre><code>     typedef char datatype      typedef struct      {         datatype SqBiTree[MAXSIZE+1];         int nodemax;     }BiTree;</code></pre>**2.链式存储结构：**&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;二叉树的链式存储结构是指用链表来表示一棵二叉树，即用链来指示元素的逻辑关系。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;二叉树的每个结点最多有两个孩子，因此，每个结点除了存储自身的数据外，还应设置两个指针分别指向左、右孩子结点。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如图所示，将二叉树链式结构存储：    ![](https://i.imgur.com/EnR6Mhx.png)  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;二叉树的链式存储模式的DAT描述：<pre><code>     typedef char datatype     typedef struct node     {          datatype data;          struct node *Lchild;           struct node *Rchild;    }</code></pre> # 二叉树的建立：<pre><code>    void CreateBiTree(BiTree &root)     //创建二叉树    {                                   //这里加上&意思是传递的参数为指针的引用，括号里面等价于 BiTreeNode* &T        char ch;        ch = getchar();        if ('#' == ch)            root = NULL;        else        {            root = (BiTree)malloc(sizeof(BiTree));            root->data = ch;            CreateBiTree(root->Lchild);            CreateBiTree(root->Rchild);        }    }</code></pre># 二叉树的遍历：<pre><code> 1）先序递归遍历：     void PreOrder(BiTree root)     {       if (root)       {          visit(root->data);          PreOrder(root->Lchild);          PreOrder(root->Rchild);       }     }</code></pre><pre><code> 2)中序递归遍历：    void InOrder(BiTree root)    {        if(root)        {                InOrder(root->LChild);            visit(root->data);            InOrder(root->RChild);        }    }</code></pre><pre><code> 2)后序递归遍历：    void PostOrder(BiTree root)    {        if(root)        {            PostOrder(root->Lchild);            PostOrder(root->RChild);            visit(root->data);        }    }</code></pre><pre><code> 2)先序非递归遍历：    void PreOrder(BiTree root)]    {        SeqStack *s;        InitStack(s);        BiTree p=root;        while(p!=NULL||s!=NULL)        {            while(p!=NULL)            {                visit(p->data);                Push(s,p);          //保存上一步节点信息，以便下次返回使用                p=p->LChild;            }            if(IsEmpty(s))            {                Pop(s,&p);                p=p->RChild;      //进入右子树，开始下一次循环            }            }    }</code></pre><pre><code>二叉树的层次遍历    void LevelOrder(BiTree root)    {        SeqQueue *q;        BiTree p;        InitQueue(q);        EnterQueue(q,root);        //人队列        while(!IsEmpty(q))        {            DeleteQueue(q,&p);   //出队列            visit(p);            if(p->Lchild)                EnterQueue(q,p);            if(p->Rchild)                EnterQueue(q,p);        }    }</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;树的定义：&quot;&gt;&lt;a href=&quot;#树的定义：&quot; class=&quot;headerlink&quot; title=&quot;树的定义：&quot;&gt;&lt;/a&gt;树的定义：&lt;/h1&gt;&lt;p&gt;树是n（n&amp;gt;=0）个节点的有限集合。当n==0时，称为空树，当n&amp;gt;=0时，树满足以下条件：&lt;br&gt;    &lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;（1）有且仅有一个称为根的特定节点，该节点没有前驱节点，有一个或者多个后继节点。&lt;/strong&gt;&lt;br&gt;    &lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;（2） 除根节点以外的n-1个节点可以划分为m个互不相交的有限集合，该集合称之为树，即根的子树&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>六类语言的逆向思路</title>
    <link href="http://yoursite.com/2017/11/02/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E8%AF%AD%E8%A8%80%E7%9A%84%E9%80%86%E5%90%91%E6%80%9D%E8%B7%AF/"/>
    <id>http://yoursite.com/2017/11/02/六种常见语言的逆向思路/</id>
    <published>2017-11-02T12:45:11.000Z</published>
    <updated>2017-11-21T05:35:23.134Z</updated>
    
    <content type="html"><![CDATA[<h1 id="语言列表："><a href="#语言列表：" class="headerlink" title="语言列表："></a>语言列表：</h1><ul><li>VB        MASM32   </li><li>VC        BCB </li><li>易语言     Delphi<a id="more"></a></li></ul><h1 id="破解思路："><a href="#破解思路：" class="headerlink" title="破解思路："></a>破解思路：</h1><ul><li><font color="#DC143C">1.VB破解：</font><ul><li>1）VBExplorer查找按钮事件</li><li>2）有提示框则bp rtcMsgBox</li><li>3）通过：<pre><code>* bp __vbaStrCmp/__vbaStrComp/__vbaVarTstEq* bp __vbaStrCmp  （比较字符串）* bp __vbaStrComp （同上）</code></pre></li><li>4）万能断点法(816C24法)：<pre><code>* 注册验证程序可以用这个断点下断，一般离程序访问注册表很近：* bp __vbaStrToAnsi* 5F12堆栈调用</code></pre></li><li>总结：<ul><li>VB程序破解的关键跳转，一般与其它语言的不同,没有JPM XXXXXXX一般以 JE/JNE XXXXXXXXX 跳转记录一般不会很远(虽然是短距离跳转，但是关键就在这里，可以设置大量的信息) 。如果发现False/True 可能是关键点</li></ul></li></ul></li></ul><hr><ul><li><font color="#DC143C">2.易语言破解思路:</font><ul><li>1）信息框法:<ul><li>bp MessageBoxA(断对话框)</li></ul></li><li>2）字符串法<ul><li>查看易语言文本信息:bp GetProcessHeap F9运行4次，取消断点 执行ALT+F9 用户代码 F8单步走</li><li>或者在区段为”.data”/“.ecode”下断，运行</li></ul></li><li>3）窗口标题法 bp SetWindowTextA</li><li>4）F12堆栈调用<ul><li>0040C0CB=易语言.0040C0CB (ASCII “shaonanshaonvluntan”)</li></ul></li></ul></li></ul><hr><ul><li><font color="#DC143C">3.DELPHI破解:</font><ul><li>1）DEDE、PE Explorer ResScope作为强有力的辅助工具找按妞事件</li><li>2）Point-H法</li><li>3）bp GetDlgItem/GetDlgItemTextA(断输入框)</li><li>4）bp MessageBoxA(W)(断对话框)—Ctrl+N</li><li>5）字符串法—插件/搜索所有参考文本</li><li>6）如果程序界面标题有[未注册/注册/VIP版/标准版/钻石版] 之类字样的<br>　　可以通过查找FormCreate/FormShow—-DEDE，找到关键标志位!<br>　　 来判断程序怎么样的判断是否注册或者用户类型</li><li>7）窗口标题法 bp SetWindowTextA</li><li>8）F12堆栈调用</li><li>9) 注册表:</li><li>10)特殊断点：<ul><li>bpx RegCreateKeyExA 对于Delphi程序程序来说，用这个断点比较合适</li><li>bp RegCreateKeyExA 对于加了壳的程序</li></ul></li></ul></li></ul><hr><ul><li><font color="#DC143C">4.C+破解.C类</font><ul><li>1）Point-H法<br>　　bp GetDlgItem(断按下按钮)<br>　　bp MessageBoxA(断对话框)</li><li>2）字符串法</li><li>3）F12堆栈调用</li><li>4）窗口标题法 bp SetWindowTextA</li><li>5）★★C+程序专用断点★★<ul><li>bp lstrcmpA (KERNEL32.lstrcmpA) 比较用法</li><li>bp _mbscmp //比较</li></ul></li><li>6）C类程序的经典断点:<ul><li>bp GetWindowTextA(断按下按钮) //也是适用于其它语言</li><li>bp GetWindowTextLengthA(断按下按钮) //也是适用于其它语言</li><li>bp GetDlgItem(断按下按钮) //也是适用于其它语言</li><li>bp GetDlgItemTextA</li><li>ds:[004021C8]=77C01881 (msvcrt._mbscmp)</li></ul></li></ul></li></ul><hr><ul><li><font color="#DC143C">5.BC++破解</font><ul><li>1）DEDE、PE Explorer作为强有力的辅助工具找按妞事件</li><li>2）Point-H法</li><li>3）bp GetDlgItem/GetDlgItemTextA(断输入框)</li><li>4）bp MessageBoxA(W)(断对话框)—Ctrl+N</li><li>5）字符串法—插件/搜索所有参考文本</li><li>6）如果程序界面标题有[未注册/注册/VIP版/标准版/钻石版] 之类字样的可以通过查找FormCreate/FormShow—-DEDE，找到关键标志位!来判断程序怎么样的判断是否注册或者用户类型</li><li>7）窗口标题法 bp SetWindowTextA</li><li>8）F12堆栈调用</li><li>9) bpx RegCreateKeyExA 对于Delphi程序程序来说，用这个断点比较合适<br>bp RegCreateKeyExA 对于加了壳的程序</li></ul></li></ul><hr><ul><li><font color="#DC143C">6.MASM32 / TASM32破解</font><ul><li>1）Point-H法<ul><li>bp GetDlgItem(断按下按钮)</li><li>bp MessageBoxA(断对话框)</li></ul></li><li>2）字符串法</li><li>3）F12堆栈调用</li><li>4）窗口标题法 bp SetWindowTextA</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;语言列表：&quot;&gt;&lt;a href=&quot;#语言列表：&quot; class=&quot;headerlink&quot; title=&quot;语言列表：&quot;&gt;&lt;/a&gt;语言列表：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;VB        MASM32   &lt;/li&gt;
&lt;li&gt;VC        BCB &lt;/li&gt;
&lt;li&gt;易语言     Delphi
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>浅探脱壳技术</title>
    <link href="http://yoursite.com/2017/10/25/%E6%B5%85%E6%8E%A2%E8%84%B1%E5%A3%B3%E6%8A%80%E6%9C%AF/"/>
    <id>http://yoursite.com/2017/10/25/浅探脱壳技术/</id>
    <published>2017-10-25T12:45:11.000Z</published>
    <updated>2017-11-21T05:35:23.139Z</updated>
    
    <content type="html"><![CDATA[<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在一些计算机软件里有一段专门负责保护软件不被非法修改或反编译的程序。它们一般都是先于程序运行，拿到控制权，然后完成它们保护软件的任务。就像动植物的壳一般都是在身体外面一样理所当然（但后来也出现了所谓的“壳中带籽”的壳）。由于这段程序和自然界的壳在功能上有很多相同的地方，基于命名的规则，大家就把这样的程序称为“壳”。软件加壳是作者写完软件后，为了保护自己的代码或维护软件产权等利益所常用到的手段。目前有很多加壳工具，既然有盾，自然就有矛，脱壳即去掉软件所加的壳，软件脱壳 有手动脱和自动脱壳之分。</strong><br><a id="more"></a></p><ul><li><strong>方法1：单步法</strong><ul><li>1.向上的跳转不让他实现，向下的跳转让他实现。</li><li>2.经过跨段跳转后，直接跳到OEP</li></ul></li></ul><hr><ul><li><strong>方法2：堆栈平衡法</strong><ul><li>1.查看寄存器窗口，一直按f8，只要esp变化（变红），右键转到内存地址窗口。</li><li>2.对该地址下硬件断点。</li><li>3.重新运行，发现od停在断点处，取消断点。</li><li>4.单步后经过很长的跳转，直达oep。</li></ul></li></ul><hr><ul><li><strong>方法3：二次内存镜像法</strong><ul><li>1.寻找内存模块的rsrc段。</li><li>3.如果没找到，直接在00401000处下断，然后单步法</li><li>4.如果找到了，在rsrc资源模块下断。</li><li>5.运行后，在004010000（代码段入口处）处下断。运行。</li><li>6.单步法。</li></ul></li></ul><hr><ul><li><strong>方法4：一步直达法（针对UPX和ASPASK)</strong><ul><li><ol><li>od 查找-查找命令找到popad（注意不勾选整个区段），然后跳转oep（如果不是可以多次查找）</li></ol></li><li>2.注意跳转不一定是非条件跳转，也可以是条件跳转，而且不论长短<br><img src="https://i.imgur.com/Knx04Lu.png" alt=""></li><li>之后利用ollydbgdump或者loadpe进行脱壳</li><li>loadpe过程：在进程中右键修正镜像大小，然后点击完整转存。</li><li>如果脱壳失败失败，先修改IAT，然后修改转存文件</li></ul></li></ul><hr><ul><li><strong>关于ASPACK的脱壳技巧：</strong><ul><li>1.以上4种脱壳技术</li><li>2.模拟跟踪法（1）<ul><li>前提是不含sfx尾链。</li><li>输入命令tc eip&lt;xxxxxx(xxxxxx是sfx区段的地址)</li></ul></li><li>3.模拟跟踪法（2）<ul><li>依次：选项–&gt;调试设置–&gt;sfx.</li><li>选择一种方式（一般是第二种)</li><li>运行，自动到达eop</li></ul></li></ul></li></ul><hr><ul><li><strong>关于Nspack壳的脱壳技巧：</strong><ul><li>关于北斗1.3的可以使用单步法，esp平衡法，二次内存镜像法。</li><li>关于北斗3.之前的壳：<ul><li>1.在GetVersion函数处下断点，（命令行处下断点）。</li><li>2.运行，程序暂停后，单步（很近），在retn处下断后，运行。</li><li>3.单步，上拉出现oep。</li></ul></li></ul></li></ul><hr><ul><li><strong>关于fsg壳的脱壳技巧：</strong><ul><li>一般的壳为了保护代码，会利用跳转，避开关键跳转，不让其调到OEP，会把跳转地址隐藏在寄存器单元中如ebx，esp等。如图，便跳过了jmp这一个关键跳转。<br><img src="https://i.imgur.com/KDEgAJk.png" alt=""></li><li>适合于fsg的esp定律：<ul><li>单步–&gt;看esp变化了–&gt;<strong>查看堆栈窗口</strong>–&gt;<strong>找到第四个数值</strong>–&gt;跟随反汇编窗口–&gt;下硬件执行断点–&gt;运行<br><img src="https://i.imgur.com/438oLhV.png" alt=""></li></ul></li><li>修复IAT<ul><li>寻找导入函数，记录偏移，找到上面和下面的地址，并记录。在修复工具IAT信息栏输入，起始地址和大小，修复！！！</li></ul></li></ul></li></ul><hr><ul><li><strong>关于PECompack 2.x壳的脱壳技巧：</strong><ul><li>1.单步法</li><li>2.Esp定律法</li><li>3.特殊方法1：<ul><li>1.命令行输入BP VirtualFree</li><li>2.SHIFT+F9，然后取消断点</li><li>3.在ALT+F9（返回到用户界面）</li><li>4.查找命令 push 8000(特征码)</li><li>5.运行到这</li><li>6.单步跟</li></ul></li><li>4.特殊方法2：<ul><li>1.BP VirtualFree</li><li>2.两次SHIFT+F9</li><li>3.<strong>中断后取消断点</strong></li><li>4.<strong>Alt+F9返回用户界面</strong></li><li>5.单步走。</li></ul></li><li>5.特殊方法3:<ul><li>1.bp VirtualAlloc</li><li>2.SHIFT+F9运行</li><li>3.取消断点</li><li>4.ALT+F9</li><li>5.向下拉，看到JMP。运行到这（oep）</li></ul></li><li>6.特殊方法4（GetVersion合适壳是vc编写的）：<ul><li>1.在GetVersion这个函数下断点（命令行输入 at GetVersion）</li><li>2.运行，在retn处下断，运行.</li><li>3.F7，向上拉出现OEP.</li></ul></li><li>7.最后一次异常法：<ul><li>1.<strong>取消所有异常。</strong></li><li>2.Shift+F9</li><li>3.记录第x次跑飞。</li><li>4.寻找x-1次的SE句柄</li><li>5.转到SE xxxx处</li><li>6.下断，shift+F9运行，然后单步跟（//在retn后面一处下断（直接单步跟））</li></ul></li></ul></li></ul><hr><ul><li><strong>关于EZIP壳的脱壳技巧</strong><ul><li>1.用单步法和ESP法寻找OEP</li><li>2.利用loadpe（修正镜像大小—完整转存）</li><li>3.利用pe修正程序（手动修改EOP）</li><li>4.必要时可以重建PE和修改正确的IAT</li></ul></li></ul><hr><ul><li><strong>关于TElock壳的脱壳技巧</strong><ul><li>1.最后一次异常法或者二次镜像法</li><li>2.利用模拟跟踪法，在x-1次异常结束后，使用模拟跟踪法！OD直接到OEP，见第二课！</li><li>3.利用修复工具修复，发现有无效函数，利用ring3修复，卡死，我们采用修复工具打开原版，用等级3修复，然后抓取脱壳后的文件</li><li><strong>注意：之前我们需要打开源程序！！！</strong></li></ul></li></ul><hr><ul><li><strong>关于Upack壳的脱壳机巧</strong><ul><li>1.使用esp定律法，遇到大跳转（会出现-的符号）<ul><li><strong>注意：如果跳转未实现，则需要利用条件断点。</strong></li></ul></li></ul></li></ul><hr><ul><li><strong>关于Acprotect壳的脱壳技巧</strong><ul><li>1.设置异常（不忽略内存异常），隐藏OD</li><li>2.Shift+F9    在SE处下内存访问断点</li><li>3.SHIFT+F9，F2，再一次SHIFT+F9，下断，再一次SHIFT+F9</li><li>4.取消所有断点，在运行到retn处</li><li>5.内存，00401000。F2，SHIFT+F9</li><li>6.直达OEP！！</li><li>参考：<br><a href="http://http://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=429917" target="_blank" rel="external">http://http://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=429917</a></li></ul></li></ul><hr><ul><li><strong>关于Acprotect壳的脱壳技巧</strong><ul><li>1.在retn上设置条件跟随，</li><li>2.二进制赋值跟随出的EOP数据</li><li>3.在代码段设置断点，运行</li><li>4.把复制的的二进制代码，按照字节数粘贴到代码段之上</li><li>5.右键-设置此处为EOP</li><li>6.修复，如果有无效指针，利用3修复，保存</li><li>7.参考：<br><a href="http://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=429917" target="_blank" rel="external">http://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=429917</a></li></ul></li></ul><hr><ul><li><strong>总结：</strong><ul><li>1.壳的分类：压缩壳、加密壳</li><li>2.脱壳的基本方法：<ul><li>1.单步</li><li>2.ESP定律</li><li>3.内存镜像</li><li>4.模拟跟踪（2类）<pre><code>* 1）SFX跟踪* 2）tc eip&lt;XXXX</code></pre></li><li>5.最后一次异常</li><li>6.特殊</li></ul></li><li>3.常见语言特点：<ul><li>1.VB:<pre><code>push QQ个性网.00404754call <jmp.&msvbvm60.#100>add byte ptr ds:[eax],aladd byte ptr ds:[eax],aladd byte ptr ds:[eax],alxor byte ptr ds:[eax],aladd byte ptr ds:[eax],aldec eax</jmp.&msvbvm60.#100></code></pre>* 2.delphi:<pre><code>push ebpmov ebp,espadd esp,-10</code></pre>* 3.BC++:<pre><code>jmp short btengine.0040168Abound di,dword ptr ds:[edx]inc ebxsub ebp,dword ptr ds:[ebx]</code></pre>* 4.VC++:<pre><code>push ebpmov ebp,esppush -1</code></pre>* 5.汇编（ASM）<pre><code>push 0call <jmp.&kernel32.getmodulehandlea>mov dword ptr ds:[40705B],eaxpush 80push 11.0040752C</jmp.&kernel32.getmodulehandlea></code></pre></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在一些计算机软件里有一段专门负责保护软件不被非法修改或反编译的程序。它们一般都是先于程序运行，拿到控制权，然后完成它们保护软件的任务。就像动植物的壳一般都是在身体外面一样理所当然（但后来也出现了所谓的“壳中带籽”的壳）。由于这段程序和自然界的壳在功能上有很多相同的地方，基于命名的规则，大家就把这样的程序称为“壳”。软件加壳是作者写完软件后，为了保护自己的代码或维护软件产权等利益所常用到的手段。目前有很多加壳工具，既然有盾，自然就有矛，脱壳即去掉软件所加的壳，软件脱壳 有手动脱和自动脱壳之分。&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>网络科技协会纳新免试题</title>
    <link href="http://yoursite.com/2017/10/24/%E7%BD%91%E5%8D%8F%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2017/10/24/网协面试题/</id>
    <published>2017-10-24T07:45:11.000Z</published>
    <updated>2017-11-21T05:35:23.145Z</updated>
    
    <content type="html"><![CDATA[<p><strong>网络科技协会纳新面试题:</strong><br></p><ul><li>第一关：<ul><li>查看官网页面，找到神秘代码,发现这是一个校验码。经过提醒，发现这个是百度云盘的校验码。输入pan.baidu.com/s/1crqIKI.<br><img src="https://i.imgur.com/AipNeGr.png" alt=""><a id="more"></a></li></ul></li><li>第二关：<ul><li>安卓逆向题，利用jeb2，右键反汇编代码，查看伪代码如下：<br><img src="https://i.imgur.com/O083lhj.png" alt=""></li><li>很显然这是base64编码，并且后面也提示了，利用base64解码就可以得到一个网站。<br><img src="https://i.imgur.com/FNO60ns.png" alt=""></li></ul></li><li>第三关：<ul><li>输入数据发现只能输入四位。</li><li>审查元素修改length<br><img src="https://i.imgur.com/TbgumkS.png" alt=""></li><li>随便输入比他大的数字就行！<br><img src="https://i.imgur.com/OeETamD.png" alt=""></li></ul></li><li>第四关：<ul><li>到图书馆听广播，频段为88.8</li><li>到图书馆寻找线索</li><li>得到线索为uggc://cna.onvqh.pbz/f/1rESIwrd，这是一个url，但是被编码了，url的格式为http：//………，可以知道这是凯撒密码，网上搜索凯撒密码在线解密即可解除<br><img src="https://i.imgur.com/QxubIIj.png" alt=""></li><li>得到游戏入口：<br><img src="https://i.imgur.com/6l7tnlN.png" alt=""></li></ul></li><li>第五关:<ul><li>逆向破解题。打开之后是一个打飞机的游戏<br><img src="https://i.imgur.com/Q49BzED.png" alt=""><br><img src="https://i.imgur.com/bhaZTnP.png" alt=""></li><li>而且下载了不止一个文件，所以文件之间存在彼此的依赖关系。<br><img src="https://i.imgur.com/CG3z2uy.png" alt=""></li><li>假设managed第一个文件就存在这种关系。（你也可以使用一些进程分析工具，通过查找对dll装载得到这个结论）对他进行分析，发现这个是一个c#编译的.net程序。</li><li>省去其中用IDA pro 分析的艰辛历程，得到的经验是存在一个score的变量。</li><li>利用ILSPY分析，直接找到关键语句<br><img src="https://i.imgur.com/vz2MRdi.png" alt=""></li><li><font color="#DC143C">1得知，当score大于500时，程序进行加密运算，拿字符串的第二位开始，到len-2结束，不断循环对字符串与10异或</font></li><li>写出注册机如下，得到一个ftp地址。<br><img src="https://i.imgur.com/RelW4vb.png" alt=""></li><li>下载之。</li></ul></li><li>第六关<strong><font color="#DC143C">(付世琦学姐给的wp)</font></strong>:<ul><li>数据挖掘题，有一个readme和压缩包文件，里面是一个2500多万行的数据。一般的Excel无法全部加载（Excel只能加载104万行数据）</li><li>你可以把文件拆分成100万行的….<br><img src="https://i.imgur.com/HvvFqfh.png" alt=""><br><img src="https://i.imgur.com/1VooYjh.png" alt=""></li></ul></li><li>第七关<strong><font color="#DC143C">(刘锁镇学长给的wp)</font></strong>：<ul><li>第一题：<ul><li>例如我的输入是”0123456789123456”.</li><li><img src="https://i.imgur.com/R9HcxLx.png" alt=""></li><li>我们观察一下Process函数:</li><li><img src="https://i.imgur.com/rulTmbo.png" alt=""></li><li>可以看到,  流程并不复杂, 只是简单的将密钥流与text的每一位的ansi编码做异或处理.<br>最后提取处理后组成的字符串的前4位. 作为返回结果.</li><li>解密&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;加密:<br><img src="https://i.imgur.com/V4pzXnC.png" alt=""></li><li>为什么会存在多解?</li><li>在process函数中, 我们异或后的位数为8位, 为了是位数和传入的text位数相等(等于 4 位), 我把8位截断, 取了前4 位.<br>导致解密的时候, 只能恢复目标md5的一半.即我们只需要一半位数的md5就能够推出最后的密文. 而另一半md5可任意.</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;网络科技协会纳新面试题:&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一关：&lt;ul&gt;
&lt;li&gt;查看官网页面，找到神秘代码,发现这是一个校验码。经过提醒，发现这个是百度云盘的校验码。输入pan.baidu.com/s/1crqIKI.&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/AipNeGr.png&quot; alt=&quot;&quot;&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>算法练习1--八皇后问题</title>
    <link href="http://yoursite.com/2017/10/19/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A01--%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/10/19/算法练习1--八皇后问题/</id>
    <published>2017-10-19T08:45:11.000Z</published>
    <updated>2017-11-21T05:35:23.143Z</updated>
    
    <content type="html"><![CDATA[<p><strong>问题概述：</strong><br><br><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;八皇后问题，是一个古老而著名的问题，是回溯算法的典型案例。该问题是国际西洋棋棋手马克斯·贝瑟尔于1848年提出：在8×8格的国际象棋上摆放八个皇后，使其不能互相攻击，即任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法。 高斯认为有76种方案。1854年在柏林的象棋杂志上不同的作者发表了40种不同的解，后来有人用图论的方法解出92种结果。计算机发明后，有多种计算机语言可以解决此问题</strong>。<br><br><a id="more"></a><br><strong>算法思路：</strong><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为每个皇后不能在同一行，同一列，以及主副斜对角线上，所以我们首先去掉行的这一限制，即：第一次放在第一行，第二次就不放在第一行了。每递归一次（即一行）考虑8列，即每个行，皇后有八个位置可以放置。利用循环，找个每行的不和以前的皇后相互攻击每个位置。<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们利用一个一维数组表示每个皇后所在的位置，即：num[i]=j;表示皇后在第i行的第j列。因为出去了每行的因素，所以剩下的冲突的可能性是：每一列，主副对角线。同列：c[r]==c[j]; 同对角线有两种可能，即主对角线方向和副对角线方向。 主对角线方向满足:行之差等于列之差：r-j==c[r]-c[j]; 副对角线方向满足:行之差等于列之差的相反数：r-j==c[j]-c[r]。<br></p><p><pre><code><br>main.cpp<br>int n=8,count = 0,num[10];<br>void search(int n);   /<em>寻找八皇后的位置，递归算法</em>/<br>void print();     /<em>打印输出</em>/<br>int main(void)<br>{<br>    search(0);<br>    printf(“%d”, count);<br>    getchar();<br>    return 0;<br>}<br>void search(int r)<br>{<br>    int i,j;<br>    if (r == n)<br>    {<br>        print();<br>        count++;<br>        return;<br>    }<br>    for (i = 0; i &lt; 8; i++)<br>    {<br>        int ok = 1;     /<em>默认符合条件</em>/<br>        num[r] = i;     /<em>为num数组附上比较的初值</em>/<br>        for (j = 0; j &lt; r; j++)<br>        {<br>            if (num[j] == num[r] || num[r] - num[j] == r - j || num[r] - num[j] == j - r)<br>            {<br>                ok = 0;<br>                break;<br>            }<br>        }<br>        if (ok)<br>            search(r + 1);<br>    }<br>}<br>void print()<br>{<br>    int i, j;<br>    for (i = 0; i &lt; n; i++)<br>    {<br>        for (j = 0; j &lt; n; j++)<br>        {<br>            if (j == num[i])<br>                printf(“1”);<br>            else<br>                printf(“0”);<br>        }<br>        printf(“\n”);<br>    }<br>    printf(“\n”);<br>}<br></code></pre><br><img src="https://i.imgur.com/bhG4POb.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;问题概述：&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;八皇后问题，是一个古老而著名的问题，是回溯算法的典型案例。该问题是国际西洋棋棋手马克斯·贝瑟尔于1848年提出：在8×8格的国际象棋上摆放八个皇后，使其不能互相攻击，即任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法。 高斯认为有76种方案。1854年在柏林的象棋杂志上不同的作者发表了40种不同的解，后来有人用图论的方法解出92种结果。计算机发明后，有多种计算机语言可以解决此问题&lt;/strong&gt;。&lt;br&gt;&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>堆与栈的区别（内存和数据结构角度）</title>
    <link href="http://yoursite.com/2017/10/17/%E5%A0%86%E6%A0%88%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%88%E5%86%85%E5%AD%98%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%A7%92%E5%BA%A6%EF%BC%89/"/>
    <id>http://yoursite.com/2017/10/17/堆栈的区别（内存和数据结构角度）/</id>
    <published>2017-10-17T11:00:11.000Z</published>
    <updated>2017-11-21T05:35:23.136Z</updated>
    
    <content type="html"><![CDATA[<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在计算机领域，堆栈是一个不容忽视的概念，我们编写的C语言程序基本上都要用到。但对于很多的初学着来说，堆栈是一个很模糊的概念。堆栈：一种数据结构、一个在程序运行时用于存放的地方，这可能是很多初学者的认识，因为我曾经就是这么想的和汇编语言中的堆栈一词混为一谈。我身边的一些编程的朋友以及在网上看帖遇到的朋友中有好多也说不清堆栈，所以我想有必要给大家分享一下我对堆栈的看法，有说的不对的地方请朋友们不吝赐教，这对于大家学习会有很大帮助。</strong><br><br><a id="more"></a></p><p>#<strong>数据结构的栈和堆:</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DC143C">堆和栈都是一种数据项按序排列的数据结构。</font><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们先从大家比较熟悉的栈说起吧，栈就像装数据的桶或箱子,它是一种具有<strong>后进先出性质</strong>的数据结构，也就是说后存放的先取，先存放的后取。这就如同我们要取出放在箱子里面底下的东西（放入的比较早的物体），我们首先要移开压在它上面的物体（放入的比较晚的物体）。<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;堆像一棵倒过来的树。堆是一种经过排序的树形数据结构，每个结点都有一个值。通常我们所说的堆的数据结构，是指二叉堆。堆的特点是根结点的值最小（或最大），且根结点的两个子树也是一个堆。由于堆的这个特性，常用来实现优先队列，<font color="#DC143C">堆的存取是随意，这就如同我们在图书馆的书架上取书，虽然书的摆放是有顺序的，但是我们想取任意一本时不必像栈一样，先取出前面所有的书，书架这种机制不同于箱子，我们可以直接取出我们想要的书。<strong>（自由度大）</strong></font><br></p><p>#<strong>内存中的的栈和堆:</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;内存中的栈区处于相对较高的地址以地址的增长方向为上的话，栈地址是向下增长的。栈中分配局部变量空间。<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DC143C">堆区是向上增长的用于分配程序员申请的内存空间。</font>另外还有静态区是分配静态变量，全局变量空间的；只读区是分配常量和程序代码空间的；以及其他一些分区。<br><br><br><strong>来看一个网上很流行的经典例子：</strong><br></p><p><pre><code><br>main.cpp<br>int a = 0; 全局初始化区<br>char <em>p1; 全局未初始化区<br>main()<br>{<br>    int b; 栈<br>    char s[] = “abc”; 栈<br>    char </em>p2; 栈<br>    char <em>p3 = “123456”; 123456\0在常量区，p3在栈上。<br>    static int c =0； 全局（静态）初始化区<br>    p1 = (char </em>)malloc(10); 堆<br>    p2 = (char <em>)malloc(20); 堆  //自由度高<br>}<br></em></code></pre><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于栈的大小有限，所以用子函数还是有物理意义的，而不仅仅是逻辑意义。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;栈： 在函数调用时，第一个进栈的是主函数中函数调用后的下一条指令（函数调用语句的下一条可执行语句）的地址，然后是函数的各个参数，<em>*在大多数的C编译器中，参数是由右往左入栈的，然后是函数中的局部变量。注意静态变量是不入栈的。当本次函数调用结束后，局部变量先出栈，然后是参数，最后栈顶指针指向最开始存的地址，</em>也就是主函数中的下一条指令，程序由该点继续运行。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;堆：一般是在堆的头部用一个字节存放堆的大小。堆中的具体内容有程序员安排。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在计算机领域，堆栈是一个不容忽视的概念，我们编写的C语言程序基本上都要用到。但对于很多的初学着来说，堆栈是一个很模糊的概念。堆栈：一种数据结构、一个在程序运行时用于存放的地方，这可能是很多初学者的认识，因为我曾经就是这么想的和汇编语言中的堆栈一词混为一谈。我身边的一些编程的朋友以及在网上看帖遇到的朋友中有好多也说不清堆栈，所以我想有必要给大家分享一下我对堆栈的看法，有说的不对的地方请朋友们不吝赐教，这对于大家学习会有很大帮助。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>MySql基本操作</title>
    <link href="http://yoursite.com/2017/10/14/MySql%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2017/10/14/MySql基本操作/</id>
    <published>2017-10-14T12:45:11.000Z</published>
    <updated>2017-11-21T05:35:23.131Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库简介："><a href="#数据库简介：" class="headerlink" title="数据库简介："></a>数据库简介：<br></h1><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据库(Database)是按照数据结构来组织、存储和管理数据的仓库，它产生于距今六十多年前，随着信息技术和市场的发展，特别是二十世纪九十年代以后，数据管理不再仅仅是存储和管理数据，而转变成用户所需要的各种数据管理的方式。数据库有很多种类型，从最简单的存储有各种数据的表格到能够进行海量数据存储的大型数据库系统都在各个方面得到了广泛的应用……</strong><br><a id="more"></a></p><ul><li><strong>第一部分：创建数据库及其使用</strong><ul><li><font color="#DC143C">1)创建数据库：  <strong>Create database [数据库名字];</strong></font></li><li><font color="#DC143C">2)使用数据库：  <strong>Use [数据库名];</strong></font></li><li><font color="#DC143C">3)查看数据库：  <strong>Show databases;</strong></font></li><li><font color="#DC143C">4)查看正在使用的数据库：<strong>select database();</strong></font><br><br><img src="https://i.imgur.com/aPE9qWN.png" alt=""><br><br></li></ul></li></ul><hr><ul><li><strong>第二部分：数据表的创建和使用</strong><ul><li><font color="#DC143C">1)数据表的创建：<strong>create table [表名]（列名 类型名，………）;</strong></font><br><img src="https://i.imgur.com/u6VhVYW.png" alt=""><br><img src="https://i.imgur.com/WXrp6DT.png" alt=""><br><img src="https://i.imgur.com/Z2E3xvd.png" alt=""></li><li><font color="#DC143C">2)外键约束：<strong>foreign key【（属性）】 references 【字表名】【（属性名）】;</strong></font><br><img src="http://oxnvtxe03.bkt.clouddn.com/4.png" alt=""><br><img src="http://oxnvtxe03.bkt.clouddn.com/5.png" alt=""></li><li><font color="#DC143C">3)数据表的查看：<strong>show tables；</strong></font></li><li><font color="#DC143C">4)查看表中每一列的元素：  <strong>show columns from【数据表名】;</strong></font><br><img src="http://oxnvtxe03.bkt.clouddn.com/6.png" alt=""></li><li><font color="#DC143C"> 5）建立索引: <strong>create unique/cluster index [索引名] on [表名][(列名，asc、desc)；</strong></font><br><img src="http://oxnvtxe03.bkt.clouddn.com/1.png" alt=""><br><br></li></ul></li></ul><hr><ul><li><strong>第三部分：数据表的修改：</strong><ul><li><font color="#DC143C"> 1）增加列: <strong>alter tabele [表名] add [属性/列名] 数据格式 【first/after+[列名]】</strong></font><br><img src="http://oxnvtxe03.bkt.clouddn.com/2.png" alt=""></li><li><font color="#DC143C"> 2）删除列：<strong>alter table [表名] drop<br>column [列名];</strong></font><br><br><img src="https://i.imgur.com/wPEr183.png" alt=""></li><li><font color="#DC143C"> 2) 修改列的属性:   <strong>alter table [表名] alter column [列名][数据类型]</strong></font></li><li><font color="#DC143C"> 给列添加主键约束:   <strong>alter table [表名] add  primary key/ unique key([列名]);</strong></font><br><img src="http://oxnvtxe03.bkt.clouddn.com/1111.png" alt=""><br><img src="http://oxnvtxe03.bkt.clouddn.com/1111.png" alt=""> </li><li><font color="#DC143C"> 3)删除默认约束：<strong>alter table [表名] alter [列名] drop default;</strong></font><br><img src="http://oxnvtxe03.bkt.clouddn.com/7.png" alt=""></li><li><font color="#DC143C"> 4)删除主键约束：<strong>alter table [表名] drop primary key;</strong></font><br><img src="http://oxnvtxe03.bkt.clouddn.com/8.png" alt=""></li><li><font color="#DC143C">5)删除唯一约束:<strong>alter table [表名] drop index [列名];</strong></font><br><br><img src="http://oxnvtxe03.bkt.clouddn.com/10.png" alt=""></li><li><font color="#DC143C">6)删除外键约束：<strong>alter table [表名] drop foreign key [约束名称，通过show create table [表名查看];</strong></font><br><img src="http://oxnvtxe03.bkt.clouddn.com/11.png" alt=""><br><img src="http://oxnvtxe03.bkt.clouddn.com/12.png" alt=""><br><img src="http://oxnvtxe03.bkt.clouddn.com/13.png" alt=""></li><li><font color="#DC143C">7)删除表:   <strong>drop table [表名];</strong></font><br><br><img src="http://oxnvtxe03.bkt.clouddn.com/14.png" alt=""><br><br></li></ul></li></ul><hr><ul><li><strong>第四部分：对数据的修改：</strong><ul><li><font color="#DC143C"> 1)插入全部数据：<strong>insert 【数据表名】values(数据1，数据2……)；</strong></font><br><br><img src="http://oxnvtxe03.bkt.clouddn.com/15.png" alt=""></li><li><font color="#DC143C"> 2)插入部分数据：<strong>Insert [数据表名]（属性名1，属性名2……）values(数据1，数据2);</strong></font><br><img src="http://oxnvtxe03.bkt.clouddn.com/16.png" alt=""></li><li><font color="#DC143C"> 3)修改数据：<strong>Insert [数据表名] set (列名1)=（表达式1）………；</strong></font><br><img src="http://oxnvtxe03.bkt.clouddn.com/17.png" alt=""></li><li><font color="#DC143C"> 4)复制表的数据：</font><br><br><img src="http://oxnvtxe03.bkt.clouddn.com/23.png" alt=""><br><img src="https://i.imgur.com/BMfOmdw.png" alt=""></li><li><font color="#DC143C"> 5)更新数据表单的数据：<strong>update table [数据表名] set [表达式]  where [条件] (条件语句为可选语句)</strong></font><br><img src="http://oxnvtxe03.bkt.clouddn.com/19.png" alt=""><br><img src="http://oxnvtxe03.bkt.clouddn.com/18.png" alt=""></li><li><font color="#DC143C"> 6)删除元组：<strong>delete from [表名] where[条件]</strong></font><br><br><img src="http://oxnvtxe03.bkt.clouddn.com/22.png" alt=""><br><br></li></ul></li></ul><hr><ul><li><strong>第五部分：查询语句：</strong><ul><li><font color="#DC143C"> 1)查询记录： <strong> select * from 【数据表名】;</strong></font><br><br><img src="http://oxnvtxe03.bkt.clouddn.com/20.png" alt=""> </li><li><font color="#DC143C"> 2）多表查询： <strong>select [表名].[列名]….from [数据表名]；</strong></font><br><img src="http://oxnvtxe03.bkt.clouddn.com/24.png" alt=""></li><li><font color="#DC143C"> 3)定义别名：<strong>select 【列名】as [别名] from [表名]；</strong><br><img src="http://oxnvtxe03.bkt.clouddn.com/25..png" alt=""></font></li><li><font color="#DC143C"> 4) 条件查询： <strong>select 【查询内容】from 【数据表名】where 【条件表达式】;</strong></font><br><img src="http://oxnvtxe03.bkt.clouddn.com/26.png" alt=""></li><li><font color="#DC143C"> 5） 分组：<strong>select 【查询内容】from 【数据表名】group by [列名表达式]</strong><br><img src="https://i.imgur.com/BVBjrbh.png" alt=""></font></li><li><font color="#DC143C"> 6）having语句：<strong>select 【查询内容】from 【数据表名】group by [列名表达式] having 【条件】</strong><br><img src="https://i.imgur.com/U3N8EHO.png" alt=""></font></li><li><font color="#DC143C"> 6）order by语句：<strong>select 【查询内容】from 【数据表名】order by [列名表达式]</strong><br><img src="https://i.imgur.com/e48tUT2.png" alt=""></font></li><li><font color="#DC143C"> 6）having语句：<strong>select 【查询内容】from 【数据表名】limit n(,m)</strong><br><img src="https://i.imgur.com/UzudAAh.png" alt=""><br><img src="https://i.imgur.com/mchgJk2.png" alt=""><br><br></font></li></ul></li></ul><hr><ul><li><strong>第六部分：高级查询语句</strong><ul><li><font color="#DC143C">子查询：<ul><li>不相关子查询：<ul><li>1.子查询语句不能使用order by。</li><li>2.内层查询不依赖外部查询。</li><li>3.子查询并不显示结果，只是返回给外部查询</li><li>4.返回多个结果可以用any或者all来表示。</li><li>5.也可以使用聚合函数（max，min等）。</li><li>6.谓词表和谓词和聚集函数及in谓词的等价关系<br><img src="https://i.imgur.com/1QiNhwo.png" alt=""><br><img src="https://i.imgur.com/3afujFC.png" alt=""></li><li>例子1：（in或者not in）<br><img src="https://i.imgur.com/fQQL2nH.jpg" alt=""></li><li>例子2： （比较运算符）<br><img src="https://i.imgur.com/J98u6i6.jpg" alt=""></li><li>例子3：  (谓词和聚集函数)<br><img src="https://i.imgur.com/FdpTiEX.jpg" alt=""></li></ul></li><li>相关子查询：<ul><li>依赖于外层查询</li><li>执行时子查询需要不断引用父查询中的列值</li></ul></li><li>Exists：<ul><li>子查询不返回具体数值，只返回逻辑值 </li><li>select 属性列表达式用*表示，因为exists不具有实际意义<br><img src="https://i.imgur.com/80mFy02.jpg" alt=""><br><br></li></ul></li></ul></font></li></ul></li></ul><hr><ul><li><strong>第七部分</strong><ul><li>新建视图： <strong>create view [视图名]（属性列）[select 子查询] with check option</strong><br><img src="https://i.imgur.com/7LDi4uv.png" alt=""><br><img src="https://i.imgur.com/mlqY7Jc.png" alt=""></li><li>删除视图：<strong>drop view [视图名]</strong><br><img src="https://i.imgur.com/PxuAVjI.png" alt=""></li><li>查询视图信息： <strong>与表一致</strong><br><img src="https://i.imgur.com/Tk4KWkz.png" alt=""></li><li>更新数据与表一致。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数据库简介：&quot;&gt;&lt;a href=&quot;#数据库简介：&quot; class=&quot;headerlink&quot; title=&quot;数据库简介：&quot;&gt;&lt;/a&gt;数据库简介：&lt;br&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;数据库(Database)是按照数据结构来组织、存储和管理数据的仓库，它产生于距今六十多年前，随着信息技术和市场的发展，特别是二十世纪九十年代以后，数据管理不再仅仅是存储和管理数据，而转变成用户所需要的各种数据管理的方式。数据库有很多种类型，从最简单的存储有各种数据的表格到能够进行海量数据存储的大型数据库系统都在各个方面得到了广泛的应用……&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>安全杂项例题</title>
    <link href="http://yoursite.com/2017/10/14/%E5%AE%89%E5%85%A8%E6%9D%82%E9%A1%B9%E4%BE%8B%E9%A2%98/"/>
    <id>http://yoursite.com/2017/10/14/安全杂项例题/</id>
    <published>2017-10-14T09:02:11.000Z</published>
    <updated>2017-11-21T05:35:23.137Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安全杂项简介："><a href="#安全杂项简介：" class="headerlink" title="安全杂项简介："></a>安全杂项简介：<br></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>ISC即安全杂项，题目涉及流量分析、电子取证、人肉搜索、数据分析、大数据统计等等，覆盖面比较广，主要考查参赛选手的各种基础综合知识。本系列课程中你可以学到各种编码解码，社会工程学，流量分析，日志分析等知识。</strong><a id="more"></a></p><h1 id="例1：功夫"><a href="#例1：功夫" class="headerlink" title="例1：功夫"></a>例1：功夫<br></h1><p><strong>1.题目来源：<a href="http://http://www.shiyanbar.com/ctf/1887" target="_blank" rel="external">http://http://www.shiyanbar.com/ctf/1887</a></strong><br><strong>2.解题思路：</strong> </p><ul><li>步骤：<ul><li>1.得到一个kungfu.rar的包</li><li>2.在Ubuntu下跑得到一个png的图片<br> <img src="http://oxnvtxe03.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171013215859.png" alt=""></li><li>3.把文件格式改为png</li><li>4.得到这样的图片，有hexedit打开，文件末尾出现字符<font color="#DC143C">“VF95c0s5XzVyaGtfX3VGTXR9M0Vse251QEUg”</font></li><li>5.发现这是一个基于base64编码的字符</li><li>6.通过解base64编码：得到<font color="#DC143C">“T_ysK9_5rhk__uFMt}3El{nu@E”</font>字符串</li><li>7.根据经验两个括号方向相反，得知这是栅栏密码</li><li>8.解栅栏密码得<font color="#DC143C">“Th3_kEy<em>ls</em>{Kun9Fu_M@5tEr}”</font></li><li>9.坑爹得是，提交括号里面的就行！<br><br></li></ul><hr><h1 id="例2："><a href="#例2：" class="headerlink" title="例2："></a>例2：<br></h1><strong>1.题目来源:<a href="http://http://www.shiyanbar.com/ctf/1886" target="_blank" rel="external">http://http://www.shiyanbar.com/ctf/1886</a></strong><br><strong>2.解题思路:</strong></li><li>步骤：<ul><li>1.打开连接<a href="http://ctf5.shiyanbar.com/423/misc/code.txt" target="_blank" rel="external">http://ctf5.shiyanbar.com/423/misc/code.txt</a>看到一群字符，得知这是base64编码。</li><li>2.如图所示：<br><img src="https://i.imgur.com/1ddK7Np.png" alt=""></li><li>3.利用base64解码：得到如下的东西<br><img src="https://i.imgur.com/oZhypVt.png" alt=""></li><li>4.这是二维码，但是我生成不了图片，所以在网上找到一个教程，得到如下的图片<br><img src="http://oxnvtxe03.bkt.clouddn.com/156462156066504801.png" alt="">)</li><li>5.扫描二维码即可。</li><li>备注：参照wp：<br><a href="http://www.shiyanbar.com/ctf/writeup/2661" target="_blank" rel="external">http://www.shiyanbar.com/ctf/writeup/2661</a><br><br></li></ul></li></ul><hr><h1 id="例3"><a href="#例3" class="headerlink" title="例3"></a>例3</h1><p><strong>1.题目来源：<a href="http://www.shiyanbar.com/ctf/1879" target="_blank" rel="external">http://www.shiyanbar.com/ctf/1879</a></strong><br><strong>2.解题思路：</strong></p><ul><li>步骤：<ul><li>1.下载为zip文件，通过binwalk测试不存在隐写</li><li>2.打开出现密码，没办法只能跑，开始是暴力破解的方式，后来采用字典的形式跑出来结果：<br><img src="http://oxnvtxe03.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171015194747.png" alt=""></li><li>3.得到图片，查看属性，得知flag。<br><br></li></ul></li></ul><hr><h1 id="例4"><a href="#例4" class="headerlink" title="例4"></a>例4</h1><p><strong>1.题目来源：<a href="http://www.shiyanbar.com/ctf/1860" target="_blank" rel="external">http://www.shiyanbar.com/ctf/1860</a></strong><br><strong>2.解题思路：</strong></p><ul><li>步骤：<ul><li>1.下载zip，打开，出现一个txt文件，里面写的坐标，联系到题干，就容易想到这些坐标可能就是一个一个的像素点。</li><li>2.抄袭抄袭抄袭，我们猿类的事情能叫抄袭么？</li><li>3.写出一个py脚本：<br><br><img src="http://oxnvtxe03.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171016205833.png" alt=""></li><li>4.得到一个图片，扫扫就行！<br><br><img src="http://oxnvtxe03.bkt.clouddn.com/img%252FOEErd2swdmxqZW5Ha252U2d2U1JvQllHdytib3FqQVRyR3hzRzg1cE16UmpDZ1p0Yi81UndnPT0.jpg" alt=""><br><br></li></ul></li></ul><hr><h1 id="例5"><a href="#例5" class="headerlink" title="例5"></a>例5</h1><p><strong>1.题目来源：<a href="http://www.shiyanbar.com/ctf/1857" target="_blank" rel="external">http://www.shiyanbar.com/ctf/1857</a></strong><br><strong>2.解题思路</strong></p><ul><li>步骤：<ul><li>1.下载rar得到一个gif的文件，但是这个文件打不开，肯定改写了文件标志，使得软件无法读取，从网上找了一个gif的文件，修复标志头即可！<br><br><img src="https://i.imgur.com/bixIRO0.png" alt=""></li><li>2.得到gif图，本来我想用查图神器steg看看隐藏的信息！看了一遍没有发现！<br></li><li>3.脑洞来了，网上说记录小黄人走的信息，然后根据base64，得到flag！<br></li><li>4.利用Gifsplitter分解gif，然后根据如图的编号，记录编号的位置<br><br><img src="https://i.imgur.com/3p3hRgk.png" alt=""><br><br><br>记录编号：<br><br><img src="https://i.imgur.com/6giUfKi.png" alt=""><br></li><li>5.根据base64转化表得到flag<br><br><img src="https://i.imgur.com/3nNtigM.png" alt=""><br><br><img src="https://i.imgur.com/TKjmTH2.png" alt=""><br><br><img src="https://i.imgur.com/wBI07rc.png" alt=""><br><br><br></li></ul></li></ul><hr><h1 id="例6："><a href="#例6：" class="headerlink" title="例6："></a>例6：</h1><p><strong>1.题目来源：<a href="http://www.shiyanbar.com/ctf/1855" target="_blank" rel="external">http://www.shiyanbar.com/ctf/1855</a></strong><br><strong>2.解题思路：</strong></p><ul><li>步骤：<ul><li>1.得到两个txt文件，经过ubuntu的查看，发现都是32字节的文件<br><img src="https://i.imgur.com/95FLzfn.png" alt=""></li><li>2.脑洞：对他们进行异或操作。<br><br><img src="https://i.imgur.com/WmNCY1N.png" alt=""><br><br></li></ul></li></ul><hr><h1 id="例7："><a href="#例7：" class="headerlink" title="例7："></a>例7：</h1><p><strong>1.题目来源：<a href="http://www.shiyanbar.com/ctf/1851" target="_blank" rel="external">http://www.shiyanbar.com/ctf/1851</a></strong><br><strong>2.解题思路：</strong></p><ul><li>步骤:<ul><li>1.利用binwalk跑出，这是一个zip文件（错误思路：我直接用hex打开也能查到key，但是找不到下面所说的秘钥文件）</li><li>2.解压出来，得到一个公钥文件和一个秘钥文件。<br><img src="https://i.imgur.com/7hEsYjQ.png" alt=""></li><li>3.首先分析key文件。hex打开，发现这是一个base64加密的文件。解密得。<br><img src="https://i.imgur.com/GguGuNk.png" alt=""></li><li>4.根据百度答案，nicki的歌名为anaconda（蛇）</li><li>5.最难的是，没接触过加密算法不知道有一个serpent这个加密算法，百度了一下。<br><img src="https://i.imgur.com/rcc9fok.png" alt=""></li><li>6.找到一个serpent的解密网站<br><img src="https://i.imgur.com/qUjdIbS.png" alt=""><br><br></li></ul></li></ul><hr><h1 id="例8："><a href="#例8：" class="headerlink" title="例8："></a>例8：</h1><p><strong>题目来源：<a href="http://www.shiyanbar.com/ctf/1850" target="_blank" rel="external">http://www.shiyanbar.com/ctf/1850</a></strong><br><strong>解题思路：</strong></p><ul><li>步骤：<ul><li>1.放到ubuntu里面binwalk去跑。<br><img src="https://i.imgur.com/nY4BHfv.png" alt=""></li><li>2.发现这是很多个gzip压缩包构成</li><li>3.我们用binwalk的解压参数，对其进行解压缩操作<br><img src="https://i.imgur.com/m3zndVw.png" alt=""></li><li>4.查看属性是gzip属性，把文件格式换成zip继续解压，然后用hex打开</li><li>5.得到以下<br><img src="https://i.imgur.com/DZYnRa7.png" alt=""></li><li>6.由此，我们知道每个文件对应的是一个字符。</li><li>7.利用python，不断地去解压和读取十六进制字符可以得到flag。</li><li>注：binwalk的具体用法如下：<br><img src="https://i.imgur.com/s0AWbZG.png" alt=""><br><br></li></ul></li></ul><hr><h1 id="例9："><a href="#例9：" class="headerlink" title="例9："></a>例9：</h1><p><strong>题目来源：<a href="http://www.shiyanbar.com/ctf/1844" target="_blank" rel="external">http://www.shiyanbar.com/ctf/1844</a></strong><br><strong>解题思路：</strong></p><ul><li>步骤：<ul><li>1.音频文件，试听发现双音轨，且存在一条音道是摩尔斯电码。</li><li>2.上神器AU，打开发现：真的存在摩尔斯电码的脉冲形式。<br><img src="https://i.imgur.com/t0eLACH.png" alt=""></li><li>3.根据摩尔斯密码表，长的为-，短的为·，得到电码为：<br><img src="https://i.imgur.com/iqrSaGI.png" alt=""></li><li>4.flag是：MUZIKISG00D<br><br></li></ul></li></ul><hr><h1 id="例10：保险箱"><a href="#例10：保险箱" class="headerlink" title="例10：保险箱"></a>例10：保险箱</h1><p><strong> 题目来源：<a href="http://www.shiyanbar.com/ctf/1835" target="_blank" rel="external">http://www.shiyanbar.com/ctf/1835</a></strong><br><strong>解题思路：</strong></p><ul><li>步骤：<ul><li>1.利用rar破解工具破解<br><img src="https://i.imgur.com/t0oZzku.png" alt=""></li><li>2.得到txt，直接输入flag即可。<br><img src="https://i.imgur.com/7Zxcoes.png" alt=""></li><li>可能有人以为是md5。何为md5？<br><a href="http://www.shiyanbar.com/questions/1099" target="_blank" rel="external">http://www.shiyanbar.com/questions/1099</a>32位密码。<br><br></li></ul></li></ul><hr><h1 id="例11：社工岛的历练"><a href="#例11：社工岛的历练" class="headerlink" title="例11：社工岛的历练"></a>例11：社工岛的历练</h1><p><strong> 题目来源：<a href="http://www.shiyanbar.com/ctf/1816" target="_blank" rel="external">http://www.shiyanbar.com/ctf/1816</a></strong><br><strong>解题思路：</strong></p><ul><li>步骤：<ul><li>1.题干说明网易爆出的密码泄露，首先想到的是漏洞时间，首先到乌云上搜索关于该漏洞的信息。但是乌云挂了，所以找到一份乌云镜像。<a href="http://wooyun.jozxing.cc/static/bugs/wooyun-2011-03866.html" target="_blank" rel="external">http://wooyun.jozxing.cc/static/bugs/wooyun-2011-03866.html</a></li><li>2.在该镜像上有一张图片，发现有用户名是461443564@163.com的密码<br><img src="https://i.imgur.com/Jj2bexE.jpg" alt=""><br><br></li></ul></li></ul><hr><h1 id="例12：抓到你了"><a href="#例12：抓到你了" class="headerlink" title="例12：抓到你了"></a>例12：抓到你了</h1><p><strong> 题目来源：<a href="http://www.shiyanbar.com/ctf/1813" target="_blank" rel="external">http://www.shiyanbar.com/ctf/1813</a></strong><br><strong> 解题思路：</strong></p><ul><li>步骤：<ul><li>1.根据题目判断是数据包文件，直接拖到wireshark中</li><li>2.因为是ping数据包，ping使用的是icmp协议，筛选出5条报文<br><img src="https://i.imgur.com/kh6TCmS.png" alt=""></li><li>3.查看详细信息，得到date数据<br><img src="https://i.imgur.com/QT70RTL.png" alt=""></li><li><strong>备注：学习wireshark的使用和tcpip协议的基础知识</strong></li></ul></li></ul><h2 id=""><a href="#" class="headerlink" title=""></a><br></h2><h1 id="例13：Only-One-File"><a href="#例13：Only-One-File" class="headerlink" title="例13：Only One File"></a>例13：Only One File</h1><p><strong> 题目来源：<a href="http://www.shiyanbar.com/ctf/1783" target="_blank" rel="external">http://www.shiyanbar.com/ctf/1783</a></strong><br><strong> 解题思路：</strong></p><ul><li>步骤：<ul><li>1.给了一个zip文件，通过题目的提示在linux下会更加高效，所以在linux利用binwalk跑一下，发现里面存在很多zip文件。<br><img src="https://i.imgur.com/LjrY9Vk.png" alt=""></li><li>2.利用binwalk -e的命令解压文件，得到<br><img src="https://i.imgur.com/1nrfYz8.png" alt=""></li><li>3.然后进入文件夹，发现一个名为xaa无格式文件，但是linux已经显示了这个文件的属性（图片），利用file跑一遍。发现这是一个png图片，但是打不开。<br><img src="https://i.imgur.com/TiK2eiP.png" alt=""></li><li>4.根据题意只存在一个文件，说明要把得到的文件合并起来，利用cat命令合并文件<br><img src="https://i.imgur.com/20rIcJz.png" alt=""></li><li>5.但是这个和一般的图片隐写不一样，利用常规工具无法得到结果，hex打开，发现这是firework弄得图片文件。<br><img src="https://i.imgur.com/bOI8FtB.png" alt=""></li><li>6.利用firework打开发现如图的“二维码”<br><img src="https://i.imgur.com/xZubEIp.png" alt=""></li><li>7.发现其色调和一般二维码色调相反，利用滤镜—调整颜色—颜色反转得到原图，扫描。<br><img src="https://i.imgur.com/j7b8Zgh.png" alt=""><br><img src="https://i.imgur.com/1CF5QjC.png" alt=""></li><li>8.<strong>firework的介绍：</strong><a href="https://baike.baidu.com/item/fireworks/444403" target="_blank" rel="external">https://baike.baidu.com/item/fireworks/444403</a></li></ul></li></ul><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><br></h2><h1 id="例14：NSCTF-misc250"><a href="#例14：NSCTF-misc250" class="headerlink" title="例14：NSCTF misc250"></a>例14：NSCTF misc250</h1><p><strong> 题目来源：<a href="http://www.shiyanbar.com/ctf/1767" target="_blank" rel="external">http://www.shiyanbar.com/ctf/1767</a></strong><br><strong> 解题思路：</strong></p><ul><li>步骤：<ul><li>1.拖到wireshark分析，根据题意，这是室友在局域网下载文件时，所截获的数据包，所以筛选出http协会的数据出来分析。<br><img src="https://i.imgur.com/pu9bP0O.png" alt=""></li><li>2.根据wireshark给出的描述，发现第129个分组是html文件，我们尝试打开分组。<br><img src="https://i.imgur.com/kK5XPxs.png" alt=""></li><li>3.找到了关键词，把这个文件保存成html文件（右键到处分组字节流）。</li><li>4.打开第150个分组，发现这是一个rar。保存该分组<br><img src="https://i.imgur.com/7EnGJCE.png" alt=""></li><li>5.发现rar文件需要密码，打开html文件。<br><img src="https://i.imgur.com/q8UmzRY.png" alt=""></li><li>6.开始想的是用掩码爆破的方式爆破掉，但是不知道为什么会失败，看了别人的wp后，我们先构造字典，然后字典爆破。<br><img src="https://i.imgur.com/y2sEfXM.png" alt=""></li><li>7.然后跑字典得到密码，解压，得到flag<br><img src="https://i.imgur.com/RtFuMqm.png" alt=""><br><img src="https://i.imgur.com/pmLvKv1.png" alt=""><h1 id="例15：XDCTF-misc200"><a href="#例15：XDCTF-misc200" class="headerlink" title="例15：XDCTF misc200"></a>例15：XDCTF misc200</h1><strong> 题目来源：<a href="http://www.shiyanbar.com/ctf/1762" target="_blank" rel="external">http://www.shiyanbar.com/ctf/1762</a> </strong><br><strong> 解题思路：</strong></li></ul></li><li>步骤：<ul><li>binwalk下跑一下出现zip，然后-e参数分离。</li><li>出现两个zip，一个加密，一个未加密，曾经有过类似的题，利用zip明文破解。</li><li>经过查找，未加密的readme的值和加密压缩包的值一样。将readme.txt压缩，然后导入ARCHPR软件爆破即可。</li><li>爆破方法：<a href="http://jingyan.baidu.com/article/3052f5a1f62d6597f31f861c.html" target="_blank" rel="external">http://jingyan.baidu.com/article/3052f5a1f62d6597f31f861c.html</a></li><li>注意：但是不知道为什么不需要跑完也可以解密，刚刚想回去，就点了退出，然后保存进度，发现zip里面存在一个flag，打开就出现了flag!<br><a href="https://i.imgur.com/u5U0qLD.png" target="_blank" rel="external"></a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安全杂项简介：&quot;&gt;&lt;a href=&quot;#安全杂项简介：&quot; class=&quot;headerlink&quot; title=&quot;安全杂项简介：&quot;&gt;&lt;/a&gt;安全杂项简介：&lt;br&gt;&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;ISC即安全杂项，题目涉及流量分析、电子取证、人肉搜索、数据分析、大数据统计等等，覆盖面比较广，主要考查参赛选手的各种基础综合知识。本系列课程中你可以学到各种编码解码，社会工程学，流量分析，日志分析等知识。&lt;/strong&gt;
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
</feed>
