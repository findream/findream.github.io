<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>findream&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-03T03:52:36.989Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>findream</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>博客总览</title>
    <link href="http://yoursite.com/2099/12/31/%E5%8D%9A%E5%AE%A2%E6%80%BB%E8%A7%88/"/>
    <id>http://yoursite.com/2099/12/31/博客总览/</id>
    <published>2099-12-31T06:02:11.000Z</published>
    <updated>2018-09-03T03:52:36.989Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;博客数据分为10类，逆向爱好者可以参考借鉴。<br><a id="more"></a></p><h2 id="CTF相关"><a href="#CTF相关" class="headerlink" title="CTF相关"></a>CTF相关</h2><ul><li><p><font color="#1E90FF"><strong>安全杂项例题:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2017/10/14/安全杂项例题/" target="_blank" rel="external">https://findream.github.io/2017/10/14/安全杂项例题/</a></p></li><li><p><font color="#1E90FF"><strong>逆向工程例题:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2017/11/22/逆向工程例题/" target="_blank" rel="external">https://findream.github.io/2017/11/22/逆向工程例题/</a></p></li><li><p><font color="#1E90FF"><strong>2015年强网杯MISC和RE:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/04/09/2015年强网杯/" target="_blank" rel="external">https://findream.github.io/2018/04/09/2015年强网杯/</a></p></li><li><p><font color="#1E90FF"><strong>XCTF嘉年华资格赛</strong></font>:&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/05/22/XCTF嘉年华比赛试题/" target="_blank" rel="external">https://findream.github.io/2018/05/22/XCTF嘉年华比赛试题/</a></p></li><li><p><font color="#1E90FF"><strong>看雪2017CTF</strong></font>:&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/05/05/看雪CTF2017/" target="_blank" rel="external">https://findream.github.io/2018/05/05/看雪CTF2017/</a></p></li><li><p><font color="#1E90FF"><strong>GCTF解析</strong></font>:&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/05/26/GCTF/" target="_blank" rel="external">https://findream.github.io/2018/05/26/GCTF/</a></p></li><li><p><font color="#1E90FF"><strong>西电CTF(moectf):</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/08/02/西电CTF(moectf" target="_blank" rel="external">https://findream.github.io/2018/08/02/西电CTF(moectf)/</a>/)</p></li><li><p><font color="#1E90FF"><strong>北邮自招CTF-Re</strong></font>:&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/08/01/北邮自招CTF/" target="_blank" rel="external">https://findream.github.io/2018/08/01/北邮自招CTF/</a></p></li><li><p><font color="#1E90FF"><strong>巅峰极客CTF:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/07/28/巅峰极客CTF/" target="_blank" rel="external">https://findream.github.io/2018/07/28/巅峰极客CTF/</a></p></li><li><font color="#1E90FF"><strong>BugKuCTF</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/08/14/BugKu_CTF/" target="_blank" rel="external">https://findream.github.io/2018/08/14/BugKu_CTF/</a></li><li><font color="#1E90FF"><strong>网鼎杯CTF</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/08/21/网鼎杯CTF/#more" target="_blank" rel="external">https://findream.github.io/2018/08/21/网鼎杯CTF/#more</a></li></ul><h2 id="Linux相关"><a href="#Linux相关" class="headerlink" title="Linux相关"></a>Linux相关</h2><ul><li><p><font color="#1E90FF"><strong>Linux常见命令(2)常见命令:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/04/28/Linux常见命令_2_其他命令/" target="_blank" rel="external">https://findream.github.io/2018/04/28/Linux常见命令<em>2</em>其他命令/</a></p></li><li><p><font color="#1E90FF"><strong>Linux常见命令(3)软件包管理:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/05/07/Linux常见命令_3_软件包管理/" target="_blank" rel="external">https://findream.github.io/2018/05/07/Linux常见命令<em>3</em>软件包管理/</a></p></li><li><p><font color="#1E90FF"><strong>Linux常见命令(4)用户和组管理:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/05/17/Linux常见命令_4_用户和用户组管理/" target="_blank" rel="external">https://findream.github.io/2018/05/17/Linux常见命令<em>4</em>用户和用户组管理/</a></p></li><li><p><font color="#1E90FF"><strong>Linux常见命令(5)权限管理:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/05/20/Linux常见命令_5_权限管理/" target="_blank" rel="external">https://findream.github.io/2018/05/20/Linux常见命令<em>5</em>权限管理/</a></p></li><li><p><font color="#1E90FF"><strong>Linux常见命令(6)shell基础:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/05/25/Linux常见命令_6_shell基础/" target="_blank" rel="external">https://findream.github.io/2018/05/25/Linux常见命令_6_shell基础/</a></p></li><li><p><font color="#1E90FF"><strong>Linux常见命令(7)shell命令:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/06/10/Linux常见命令_7_shell编程/" target="_blank" rel="external">https://findream.github.io/2018/06/10/Linux常见命令_7_shell编程/</a></p></li><li><p><font color="#1E90FF"><strong>Linux常见命令(8)进程管理:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/06/22/Linux常见命令_8_进程管理/" target="_blank" rel="external">https://findream.github.io/2018/06/22/Linux常见命令<em>8</em>进程管理/</a></p></li></ul><h2 id="病毒分析相关"><a href="#病毒分析相关" class="headerlink" title="病毒分析相关"></a>病毒分析相关</h2><ul><li><p><font color="#1E90FF"><strong>搭建inetsim虚拟分析网络:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/02/10/搭建inetsim虚拟分析网络/" target="_blank" rel="external">https://findream.github.io/2018/02/10/搭建inetsim虚拟分析网络/</a></p></li><li><p><font color="#1E90FF"><strong>病毒分析技术(1):</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/01/12/病毒分析技术_1_/" target="_blank" rel="external">https://findream.github.io/2018/01/12/病毒分析技术<em>1</em>/</a></p></li><li><p><font color="#1E90FF"><strong>病毒分析技术(2):</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/03/02/病毒分析技术_2_/" target="_blank" rel="external">https://findream.github.io/2018/03/02/病毒分析技术<em>2</em>/</a></p></li><li><p><font color="#1E90FF"><strong>病毒分析技术(3)–小型硬盘加密病毒:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/03/05/病毒分析技术_3_/" target="_blank" rel="external">https://findream.github.io/2018/03/05/病毒分析技术<em>3</em>/</a></p></li><li><p><font color="#1E90FF"><strong>病毒分析技术(4)–U盘病毒:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/03/08/病毒分析技术_4_U盘病毒/" target="_blank" rel="external">https://findream.github.io/2018/03/08/病毒分析技术_4_U盘病毒/</a></p></li><li><p><font color="#1E90FF"><strong>病毒分析技术(5)–骷髅病毒:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/03/15/病毒分析技术_5_骷髅病毒/" target="_blank" rel="external">https://findream.github.io/2018/03/15/病毒分析技术<em>5</em>骷髅病毒/</a></p></li><li><p><font color="#1E90FF"><strong>病毒分析技术(6)–熊猫烧香病毒:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/03/25/病毒分析技术_6_熊猫烧香病毒/" target="_blank" rel="external">https://findream.github.io/2018/03/25/病毒分析技术<em>6</em>熊猫烧香病毒/</a></p></li><li><p><font color="#1E90FF"><strong>病毒分析技术(7):</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/03/29/病毒分析技术_7_/" target="_blank" rel="external">https://findream.github.io/2018/03/29/病毒分析技术<em>7</em>/</a></p></li><li><p><font color="#1E90FF"><strong>病毒分析技术(8)–芦苇病毒:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/04/14/病毒分析技术_8_芦苇病毒/" target="_blank" rel="external">https://findream.github.io/2018/04/14/病毒分析技术<em>8</em>芦苇病毒/</a></p></li><li><p><font color="#1E90FF"><strong>病毒分析技术(9)–文件下载者病毒:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/07/08/病毒分析技术_9_文件下载者/" target="_blank" rel="external">https://findream.github.io/2018/07/08/病毒分析技术<em>9</em>文件下载者/</a></p></li><li><p><font color="#1E90FF"><strong>病毒分析技术(10)–MBR病毒:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/07/23/病毒分析技术_10_MBR修改病毒/" target="_blank" rel="external">https://findream.github.io/2018/07/23/病毒分析技术_10_MBR修改病毒/</a></p></li><li><p><font color="#1E90FF"><strong>病毒分析技术(11)–文件下载者病毒变种:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/07/25/病毒分析技术_11_文件下载者变种1/" target="_blank" rel="external">https://findream.github.io/2018/07/25/病毒分析技术<em>11</em>文件下载者变种1/</a></p></li><li><p><font color="#1E90FF"><strong>病毒分析技术(12)–GandGrab勒索病毒:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/07/31/病毒分析技术_12_GandCrab勒索病毒/" target="_blank" rel="external">https://findream.github.io/2018/07/31/病毒分析技术_12_GandCrab勒索病毒/</a></p></li><li><p><font color="#1E90FF"><strong>病毒分析技术(13)–Wanncry勒索病毒:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/08/08/病毒分析技术_13_WannaCry勒索病毒/" target="_blank" rel="external">https://findream.github.io/2018/08/08/病毒分析技术_13_WannaCry勒索病毒/</a></p></li></ul><h2 id="C-相关"><a href="#C-相关" class="headerlink" title="C++相关"></a>C++相关</h2><ul><li><p><font color="#1E90FF"><strong>第二章&lt;变量，语句&gt;:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/04/11/C++第二章_变量和基本类型/" target="_blank" rel="external">https://findream.github.io/2018/04/11/C++第二章_变量和基本类型/</a></p></li><li><p><font color="#1E90FF"><strong>第三章&lt;字符串<em>向量</em>数组&gt;:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/03/22/C++第三章_字符串_向量_数组/" target="_blank" rel="external">https://findream.github.io/2018/03/22/C++第三章<em>字符串</em>向量_数组/</a></p></li><li><p><font color="#1E90FF"><strong>第四章&lt;运算符&gt;:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/03/30/C++第四章_运算符/" target="_blank" rel="external">https://findream.github.io/2018/03/30/C++第四章_运算符/</a></p></li><li><p><font color="#1E90FF"><strong>C++第五章&lt;语句&gt;:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/04/08/C++第五章_语句/" target="_blank" rel="external">https://findream.github.io/2018/04/08/C++第五章_语句/</a></p></li><li><p><font color="#1E90FF"><strong>第六章&lt;函数&gt;:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/04/11/C++第六章_函数/" target="_blank" rel="external">https://findream.github.io/2018/04/11/C++第六章_函数/</a></p></li></ul><h2 id="逆向工程相关"><a href="#逆向工程相关" class="headerlink" title="逆向工程相关"></a>逆向工程相关</h2><ul><li><p><font color="#1E90FF"><strong>浅谈脱壳技术:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2017/10/25/浅探脱壳技术/" target="_blank" rel="external">https://findream.github.io/2017/10/25/浅探脱壳技术/</a></p></li><li><p><font color="#1E90FF"><strong>六类语言的逆向思路:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2017/11/02/六种常见语言的逆向思路/" target="_blank" rel="external">https://findream.github.io/2017/11/02/六种常见语言的逆向思路/</a></p></li><li><p><font color="#1E90FF"><strong>switch结构逆向分析:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2017/11/06/switch结构逆向分析/" target="_blank" rel="external">https://findream.github.io/2017/11/06/switch结构逆向分析/</a></p></li><li><p><font color="#1E90FF"><strong>OD断点设置技巧:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2017/11/10/OD断点设置技巧/" target="_blank" rel="external">https://findream.github.io/2017/11/10/OD断点设置技巧/</a></p></li><li><p><font color="#1E90FF"><strong>VB程序调试练习:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2017/11/27/VB程序逆向练习/" target="_blank" rel="external">https://findream.github.io/2017/11/27/VB程序逆向练习/</a></p></li><li><p><font color="#1E90FF"><strong>局部线程存储技术:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2017/12/02/线程局部存储技术/" target="_blank" rel="external">https://findream.github.io/2017/12/02/线程局部存储技术/</a></p></li><li><p><font color="#1E90FF"><strong>给逆向工作者的忠告:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2017/12/09/给逆向分析人员的忠告/" target="_blank" rel="external">https://findream.github.io/2017/12/09/给逆向分析人员的忠告/</a></p></li><li><p><font color="#1E90FF"><strong>浅谈Base64加密原理及应用:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2017/12/24/浅谈Base64的加密与解密/" target="_blank" rel="external">https://findream.github.io/2017/12/24/浅谈Base64的加密与解密/</a></p></li><li><p><font color="#1E90FF"><strong>Zw和Nt的区别:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/01/23/内核Nt和Zw函数区别/" target="_blank" rel="external">https://findream.github.io/2018/01/23/内核Nt和Zw函数区别/</a></p></li><li><p><font color="#1E90FF"><strong>浅谈SEH技术:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/01/24/浅谈SEH技术/" target="_blank" rel="external">https://findream.github.io/2018/01/24/浅谈SEH技术/</a></p></li><li><p><font color="#1E90FF"><strong>反向shell:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/02/02/反向shell技术/" target="_blank" rel="external">https://findream.github.io/2018/02/02/反向shell技术/</a></p></li><li><p><font color="#1E90FF"><strong>用户态下的Rootkit进程隐藏技术:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/02/07/用户态下的RootKit进程隐藏技术/" target="_blank" rel="external">https://findream.github.io/2018/02/07/用户态下的RootKit进程隐藏技术/</a></p></li><li><p><font color="#1E90FF"><strong>反汇编对抗技术:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/02/17/对抗反汇编技术/" target="_blank" rel="external">https://findream.github.io/2018/02/17/对抗反汇编技术/</a></p></li><li><p><font color="#1E90FF"><strong>反调试技术:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/02/19/反调试技术/" target="_blank" rel="external">https://findream.github.io/2018/02/19/反调试技术/</a></p></li><li><p><font color="#1E90FF"><strong>常见脱壳思路:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/07/15/常见壳的脱壳思路/" target="_blank" rel="external">https://findream.github.io/2018/07/15/常见壳的脱壳思路/</a></p></li><li><p><font color="#1E90FF"><strong>angr使用笔记：</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/08/27/二进制分析工具angr使用笔记/" target="_blank" rel="external">https://findream.github.io/2018/08/27/二进制分析工具angr使用笔记/</a></p></li></ul><h2 id="深入解析windows操作系统"><a href="#深入解析windows操作系统" class="headerlink" title="深入解析windows操作系统"></a>深入解析windows操作系统</h2><ul><li><p><font color="#1E90FF"><strong>windows API:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/02/10/Windows_API_函数/" target="_blank" rel="external">https://findream.github.io/2018/02/10/Windows<em>API</em>函数/</a></p></li><li><p><font color="#1E90FF"><strong>windows系统机制–陷阱分发:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/03/31/《Windows%20Internals》第三章_系统机制/" target="_blank" rel="external">https://findream.github.io/2018/03/31/《Windows%20Internals》第三章_系统机制/</a></p></li><li><p><font color="#1E90FF"><strong>系统机制-映像加载器:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/04/26/《Windows%20Internals》第三章_映像加载器/" target="_blank" rel="external">https://findream.github.io/2018/04/26/《Windows%20Internals》第三章_映像加载器/#more</a></p></li><li><p><font color="#1E90FF"><strong>全局标志和windows内核事件跟踪:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/04/26/《Windows%20Internals》第三章_全局标志和内核事件跟踪/" target="_blank" rel="external">https://findream.github.io/2018/04/26/《Windows%20Internals》第三章_全局标志和内核事件跟踪/</a></p></li><li><p><font color="#1E90FF"><strong>第三章:系统机制-同步:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/04/08/《Windows%20Internals》第三章_同步/" target="_blank" rel="external">https://findream.github.io/2018/04/08/《Windows%20Internals》第三章_同步/</a></p></li><li><p><font color="#1E90FF"><strong>注册表:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/06/04/《Windows%20Internals》第四章_注册表/" target="_blank" rel="external">https://findream.github.io/2018/06/04/《Windows%20Internals》第四章_注册表/</a></p></li></ul><h2 id="数据结构和算法相关"><a href="#数据结构和算法相关" class="headerlink" title="数据结构和算法相关"></a>数据结构和算法相关</h2><ul><li><p><font color="#1E90FF"><strong>八皇后问题:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2017/10/19/算法练习1--八皇后问题/" target="_blank" rel="external">https://findream.github.io/2017/10/19/算法练习1–八皇后问题/</a></p></li><li><p><font color="#1E90FF"><strong>浅谈数据结构之二叉树:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2017/11/05/浅谈数据结构之二叉树/" target="_blank" rel="external">https://findream.github.io/2017/11/05/浅谈数据结构之二叉树/</a></p></li><li><p><font color="#1E90FF"><strong>浅谈数据结构之队列:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2017/11/09/浅谈数据结构之队列/" target="_blank" rel="external">https://findream.github.io/2017/11/09/浅谈数据结构之队列/</a></p></li><li><p><font color="#1E90FF"><strong>数据结构之栈:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2017/11/12/浅谈数据结构之栈/" target="_blank" rel="external">https://findream.github.io/2017/11/12/浅谈数据结构之栈/</a></p></li><li><p><font color="#1E90FF"><strong>浅谈hash算法前世今生:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2017/11/18/浅探hash算法的前世今生/" target="_blank" rel="external">https://findream.github.io/2017/11/18/浅探hash算法的前世今生/</a></p></li><li><p><font color="#1E90FF"><strong>XUPT_ACM比赛解析:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/03/18/XUPT-ACM比赛题解/" target="_blank" rel="external">https://findream.github.io/2018/03/18/XUPT-ACM比赛题解/</a></p></li><li><p><font color="#1E90FF"><strong>动态规划–编辑距离问题:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/05/24/动态规划_编辑距离/" target="_blank" rel="external">https://findream.github.io/2018/05/24/动态规划_编辑距离/</a></p></li></ul><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><ul><li><p><font color="#1E90FF"><strong>Mysql基本使用:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2017/10/14/MySql基本操作/" target="_blank" rel="external">https://findream.github.io/2017/10/14/MySql基本操作/</a></p></li><li><p><font color="#1E90FF"><strong>堆和栈的区别(内存和数据结构角度):</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2017/10/17/堆栈的区别%EF%BC%88内存和数据结构角度%EF%BC%89/" target="_blank" rel="external">https://findream.github.io/2017/10/17/堆栈的区别%EF%BC%88内存和数据结构角度%EF%BC%89/</a></p></li><li><p><font color="#1E90FF"><strong>网协纳新免试题:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2017/10/24/网协面试题/" target="_blank" rel="external">https://findream.github.io/2017/10/24/网协面试题/</a></p></li><li><p><font color="#1E90FF"><strong>重新配置Hexo博客:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/01/29/重新配置hexo博客/" target="_blank" rel="external">https://findream.github.io/2018/01/29/重新配置hexo博客/</a></p></li><li><p><font color="#1E90FF"><strong>CVE-2017-16995本地提权漏洞:</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/03/23/CVE-2017-16995本地提权漏洞复现/" target="_blank" rel="external">https://findream.github.io/2018/03/23/CVE-2017-16995本地提权漏洞复现/</a></p></li></ul><h2 id="windbg学习笔记"><a href="#windbg学习笔记" class="headerlink" title="windbg学习笔记"></a>windbg学习笔记</h2><ul><li><p><font color="#1E90FF"><strong>windbg学习笔记(1):</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/04/05/windbg学习笔记_1_/" target="_blank" rel="external">https://findream.github.io/2018/04/05/windbg学习笔记<em>1</em>/</a></p></li><li><p><font color="#1E90FF"><strong>windbg学习笔记(2):</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/07/17/windbg学习笔记_2_/" target="_blank" rel="external">https://findream.github.io/2018/07/17/windbg学习笔记<em>2</em>/</a></p></li><li><p><font color="#1E90FF"><strong>windbg学习笔记(3):</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/07/19/windbg学习笔记_3_/" target="_blank" rel="external">https://findream.github.io/2018/07/19/windbg学习笔记<em>3</em>/</a></p></li><li><p><font color="#1E90FF"><strong>windbg学习笔记(4):</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/07/22/windbg学习笔记_4_/" target="_blank" rel="external">https://findream.github.io/2018/07/22/windbg学习笔记<em>4</em>/</a></p></li><li><p><font color="#1E90FF"><strong>windbg学习笔记(5)–内核调试(1):</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/07/25/windbg学习笔记_5_内核调试基本命令/" target="_blank" rel="external">https://findream.github.io/2018/07/25/windbg学习笔记<em>5</em>内核调试基本命令/</a></p></li><li><p><font color="#1E90FF"><strong>windbg学习笔记(6)–内核调试(2):</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/07/26/windbg学习笔记_6_/" target="_blank" rel="external">https://findream.github.io/2018/07/26/windbg学习笔记<em>6</em>/</a></p></li></ul><h2 id="windows-PE结构"><a href="#windows-PE结构" class="headerlink" title="windows PE结构"></a>windows PE结构</h2><ul><li><p><font color="#1E90FF"><strong><windows pe="">延迟加载导入表:</windows></strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/05/14/《windows%20PE》延迟加载表/" target="_blank" rel="external">https://findream.github.io/2018/05/14/《windows%20PE》延迟加载表/</a></p></li><li><p><font color="#1E90FF"><strong><windows pe="">重定位表:</windows></strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/05/14/《windows%20PE》重定位表/" target="_blank" rel="external">https://findream.github.io/2018/05/14/《windows%20PE》重定位表/</a></p></li><li><p><font color="#1E90FF"><strong><windows pe="">导出表:</windows></strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/05/11/《windows%20PE》导出表/" target="_blank" rel="external">https://findream.github.io/2018/05/11/《windows%20PE》导出表/</a></p></li><li><p><font color="#1E90FF"><strong><windows pe="">导入表:</windows></strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/05/09/《windows%20PE》导入表/" target="_blank" rel="external">https://findream.github.io/2018/05/09/《windows%20PE》导入表/</a></p></li><li><p><font color="#1E90FF"><strong><windows pe="">PE文件头:</windows></strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/05/07/《windows%20PE》PE文件头/" target="_blank" rel="external">https://findream.github.io/2018/05/07/《windows%20PE》PE文件头/</a></p></li></ul><h2 id="格蠹汇编"><a href="#格蠹汇编" class="headerlink" title="格蠹汇编"></a>格蠹汇编</h2><ul><li><font color="#1E90FF"><strong>&lt;格蠹汇编&gt;<em>第9章</em>经典阅读器的经典死锁：</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/08/12/《格蠹汇编》_第九章_经典阅读器的经典死锁/" target="_blank" rel="external">https://findream.github.io/2018/08/12/《格蠹汇编》<em>第九章</em>经典阅读器的经典死锁/</a></li><li><font color="#1E90FF"><strong>《格蠹汇编》<em>第十章</em>转储分析双误谜团：</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/08/13/《格蠹汇编》_第十章_转储分析双误谜团/" target="_blank" rel="external">https://findream.github.io/2018/08/13/《格蠹汇编》<em>第十章</em>转储分析双误谜团/</a> </li><li><font color="#1E90FF"><strong>《格蠹汇编》_第13章_SDK安装程序卡壳之谜：</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/08/16/《格蠹汇编》_第13章_SDK安装程序卡壳之谜/" target="_blank" rel="external">https://findream.github.io/2018/08/16/《格蠹汇编》_第13章_SDK安装程序卡壳之谜/</a></li><li><font color="#1E90FF"><strong>《格蠹汇编》<em>第14章</em>是谁动了我的句柄：</strong></font>&nbsp;&nbsp;&nbsp;&nbsp; <a href="https://findream.github.io/2018/08/16/《格蠹汇编》_第14章_是谁动了我的句柄/" target="_blank" rel="external">https://findream.github.io/2018/08/16/《格蠹汇编》<em>第14章</em>是谁动了我的句柄/</a></li><li><font color="#1E90FF"><strong>&lt;格蠹汇编&gt;<em>第21章</em>趣谈托管程序的辅助调试线程：</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/08/27/《格蠹汇编》_第21章_趣谈托管程序的辅助调试线程/" target="_blank" rel="external">https://findream.github.io/2018/08/27/《格蠹汇编》<em>第21章</em>趣谈托管程序的辅助调试线程/</a></li><li><font color="#1E90FF"><strong>&lt;格蠹汇编&gt;<em>第25章</em>如何调试窗口大总管：</strong></font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://findream.github.io/2018/08/28/《格蠹汇编》_第25章_如何调试窗口大总管/" target="_blank" rel="external">https://findream.github.io/2018/08/28/《格蠹汇编》<em>第25章</em>如何调试窗口大总管/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;博客数据分为10类，逆向爱好者可以参考借鉴。&lt;br&gt;
    
    </summary>
    
      <category term="总览" scheme="http://yoursite.com/categories/%E6%80%BB%E8%A7%88/"/>
    
    
  </entry>
  
  <entry>
    <title>病毒分析技术_15_sata勒索病毒</title>
    <link href="http://yoursite.com/2018/09/10/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF_15_sata%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92/"/>
    <id>http://yoursite.com/2018/09/10/病毒分析技术_15_sata勒索病毒/</id>
    <published>2018-09-10T02:45:11.000Z</published>
    <updated>2018-09-10T09:56:41.933Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一：目录"><a href="#一：目录" class="headerlink" title="一：目录"></a>一：目录</h1><ul><li>1.目录</li><li>2.样本信息</li><li>3.样本分析</li><li>4.技术总计<a id="more"></a></li></ul><h1 id="二：样本信息"><a href="#二：样本信息" class="headerlink" title="二：样本信息"></a>二：样本信息</h1><ul><li>1.病毒名称：sta.exe</li><li>2.样本md5： ECF5CABC81047B46977A4DF9D8D68797</li><li>3.是否加壳：有壳MPRESS v2.12</li><li>4.编译语言：VC(待定，查壳器无法判断)</li><li>5.样本来源：c&amp;c服务器[服务器关闭]</li></ul><h1 id="三：样本分析"><a href="#三：样本分析" class="headerlink" title="三：样本分析"></a>三：样本分析</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先病毒运行时，先创建了一个名为<code>SATANAPP</code>的互斥体。<br>    <img src="https://i.imgur.com/dtbNuJ7.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;创建c:\Temp\KSession文件，作为文件加密硬件信息。创建”C:\_How_to_decrypt_files.txt”提示信息。<br>    <img src="https://i.imgur.com/LJPSuGO.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;提示信息主要含有三种语言，英语中文，韩文(日文？不知道)，以及给出的作者BTC钱包地址和邮箱地址，以及硬件ID信息<br>    <img src="https://i.imgur.com/hsmsNBk.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接着将生成的指纹信息，利用HTTP协议发送到服务器101.99.84.136。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接着是三个文件加密模块，第二个是主要加密数据库类型文件，第三个是加密所有文件。<br>    <img src="https://i.imgur.com/yjOBong.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;程序首先会排除如图的目录和文件后缀。<br>    <img src="https://i.imgur.com/K5tmvJm.png" alt=""><br>    <img src="https://i.imgur.com/zKTBQQC.png" alt=""><br>    <img src="https://i.imgur.com/OilvDii.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据函数CryptDeriveKey发现这个样本的加密算法但是DES加密算法，属于对称加密。所以解密会相对容易一点。<br>    <img src="https://i.imgur.com/uMgDoBR.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;加密完成后，把对应的公钥发送给服务器端。然后利用notepad打开提示信息。<br>    <img src="https://i.imgur.com/U81cLPa.png" alt=""><br>    <img src="https://i.imgur.com/k7nqJPB.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;与撒旦病毒最开始的样本不同此次变种只是在加密文件末尾附加了HardID和PUBLIC信息<br>    <img src="https://i.imgur.com/aMI85K0.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一：目录&quot;&gt;&lt;a href=&quot;#一：目录&quot; class=&quot;headerlink&quot; title=&quot;一：目录&quot;&gt;&lt;/a&gt;一：目录&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;1.目录&lt;/li&gt;
&lt;li&gt;2.样本信息&lt;/li&gt;
&lt;li&gt;3.样本分析&lt;/li&gt;
&lt;li&gt;4.技术总计
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>WhaleCTF</title>
    <link href="http://yoursite.com/2018/09/06/WhaleCTF/"/>
    <id>http://yoursite.com/2018/09/06/WhaleCTF/</id>
    <published>2018-09-06T06:02:11.000Z</published>
    <updated>2018-09-10T03:31:45.894Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h2 id="Warmup"><a href="#Warmup" class="headerlink" title="Warmup"></a>Warmup</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;流程非常简单，接收输入，然后与0xE进行异或，最后与<code>LDYVLQMZHuY:|cQ[^Qyo|cQ{~QYO\CQ[^/s</code>比较。<br>   <img src="https://i.imgur.com/ymjsE1T.png" alt=""></p><a id="more"></a><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据上述很简单的写出一个脚本，但是有一个字符有点文件，如果直接复制上述字符串“\”，编译器可能将它识别成转义字符，所以我们需要将它提出来重新运算。<br>    <img src="https://i.imgur.com/6MtEjya.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;重运算结果上，明显看到这个“\”符号没有参与运算。最后利用ASCII编码运算，以下是脚本<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">char</span> str[]=<span class="string">"LDYVLQMZHuY:|cQ[^Qyo|cQ&#123;~QYO\CQ[^/s\0"</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(str);i++)</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,str[i]^<span class="number">0xE</span>);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n%c"</span>,<span class="number">0X5c</span>^<span class="number">0xE</span>);   <span class="comment">//补倒数第七位字符</span></div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">//BJWXB_CTF&#123;W4rm_UP_warm_up_WARM_UP!&#125;</span></div></pre></td></tr></table></figure></p><h2 id="R100"><a href="#R100" class="headerlink" title="R100"></a>R100</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elf文件，查壳没有发现异常。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;流程也很简单，接收输入，然后验证输入，正确的话ok。<br>    <img src="https://i.imgur.com/6RJe3zt.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;发现验证函数里面是个二维数组，使得input和数组如下关系即可：<code>if ( (&amp;v3)[i % 3][2 * (i / 3)] - *(char *)(i + input) != 1 )</code><br>     <img src="https://i.imgur.com/pEKFfVm.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;写出脚本即可<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">char</span> v3[<span class="number">3</span>][<span class="number">7</span>]=</div><div class="line">&#123;&#123;<span class="string">'D'</span>,<span class="string">'u'</span>,<span class="string">'f'</span>,<span class="string">'h'</span>,<span class="string">'b'</span>,<span class="string">'m'</span>,<span class="string">'f'</span>&#125;,</div><div class="line">         &#123;<span class="string">'p'</span>,<span class="string">'G'</span>,<span class="number">0x60</span>,<span class="string">'i'</span>,<span class="string">'m'</span>,<span class="string">'o'</span>,<span class="string">'s'</span>&#125;,</div><div class="line"> &#123;<span class="string">'e'</span>,<span class="string">'w'</span>,<span class="string">'U'</span>,<span class="string">'g'</span>,<span class="string">'l'</span>,<span class="string">'p'</span>,<span class="string">'t'</span>&#125;&#125;;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">11</span>;i++)</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,v3[i % <span class="number">3</span>][<span class="number">2</span> * (i / <span class="number">3</span>)] <span class="number">-1</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">//Code_Talkers</span></div></pre></td></tr></table></figure></p><h2 id="逆向练习"><a href="#逆向练习" class="headerlink" title="逆向练习"></a>逆向练习</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;查壳。未发现异常</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;查看流程如下：接收输入，然后进入sub_411136编码，但是经过动态调试，发现这个函数返回原输入。然后打印输入，接着和一个全局变量<code>KfxEeft}f{gyrYgthtyhifsjei53UUrrr_t2cdsef66246087138\0087138</code>前17位比较，最后加上1204}即可，这是IDA分析的结果。<br>    <img src="https://i.imgur.com/52Mk2VA.png" alt=""><br>    <img src="https://i.imgur.com/bjvlLEC.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是，进过动态调式发现，上述的字符串只是取其中的一部分，而且这部分没有规律。一步一步调试，最终发现flag。这道题关键是如何下断点是比较困难的。<br>    <img src="https://i.imgur.com/0a7UjD2.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后加上<code>1024}</code>即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Re&quot;&gt;&lt;a href=&quot;#Re&quot; class=&quot;headerlink&quot; title=&quot;Re&quot;&gt;&lt;/a&gt;Re&lt;/h1&gt;&lt;h2 id=&quot;Warmup&quot;&gt;&lt;a href=&quot;#Warmup&quot; class=&quot;headerlink&quot; title=&quot;Warmup&quot;&gt;&lt;/a&gt;Warmup&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;流程非常简单，接收输入，然后与0xE进行异或，最后与&lt;code&gt;LDYVLQMZHuY:|cQ[^Qyo|cQ{~QYO\CQ[^/s&lt;/code&gt;比较。&lt;br&gt;   &lt;img src=&quot;https://i.imgur.com/ymjsE1T.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>&lt;格蠹汇编&gt;_第29章_在调试中细品CPU</title>
    <link href="http://yoursite.com/2018/09/04/%E3%80%8A%E6%A0%BC%E8%A0%B9%E6%B1%87%E7%BC%96%E3%80%8B_%E7%AC%AC29%E7%AB%A0_%E5%9C%A8%E8%B0%83%E8%AF%95%E5%99%A8%E4%B8%AD%E7%BB%86%E5%93%81CPU/"/>
    <id>http://yoursite.com/2018/09/04/《格蠹汇编》_第29章_在调试器中细品CPU/</id>
    <published>2018-09-04T07:02:11.000Z</published>
    <updated>2018-09-04T08:22:28.907Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引用栈上的变量"><a href="#引用栈上的变量" class="headerlink" title="引用栈上的变量"></a>引用栈上的变量</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通常，在函数入口处会执行以下代码,这样子函数的栈底就是父函数栈顶。在ebp值上面的空间就是子函数需要使用的栈空间，下面是父函数使用的栈空间。所以<strong>ebp+正数代表的是传入子函数的参数，ebp+负数代表的是子函数的局部变量。</strong><br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">push</span> <span class="built_in">esp</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ebp</span>, <span class="built_in">esp</span></div></pre></td></tr></table></figure></p><h2 id="淡化段机制"><a href="#淡化段机制" class="headerlink" title="淡化段机制"></a>淡化段机制</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;操作系统大都使用分页机制作为内存管理的主要手段，这是因为段机制是不可禁止的，同时考虑到软件的兼容性，只能淡化段机制的作用。比如讲段基地址设置为0，边界设置为最大，再如共享段描述符。让不同的进程使用相同的段描述符，这就是调试不同的程序但是其段地址是相同的了。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;每个CPU都有自己的<strong>全局描述表(GDT)</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如下图，后面的数值表示的是段描述符在全局描述表的位置，<strong>当段选择子的第三位全部置零后得到对应的段描述符的偏移值。</strong>例如在cs的值为0x1b，但是对应的段描述符表的偏移则是0x18，对应的就是全局描述符表的KGDT_R3_CODE.<br>    <img src="https://i.imgur.com/cLzQ0F8.png" alt=""></p><h2 id="特殊的FS段"><a href="#特殊的FS段" class="headerlink" title="特殊的FS段"></a>特殊的FS段</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;windows中FS寄存器有特殊的用法，当CPU在内核中运行时，FS指向的是PCR，当CPU在用户态运行时，FS指向的是TEB。利用<code>dg命令</code>可以查看段描述信息。如下可以发现，使用dg 38和!teb查看的FS指向的TEB结构的基地址都是相同的。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span><span class="string">:009&gt;</span> <span class="string">dg</span> <span class="number">38</span></div><div class="line">                                  <span class="string">P</span> <span class="string">Si</span> <span class="string">Gr</span> <span class="string">Pr</span> <span class="string">Lo</span></div><div class="line"><span class="string">Sel</span>    <span class="string">Base</span>     <span class="string">Limit</span>     <span class="string">Type</span>    <span class="string">l</span> <span class="string">ze</span> <span class="string">an</span> <span class="string">es</span> <span class="string">ng</span> <span class="string">Flags</span></div><div class="line"><span class="bullet">-</span><span class="meta">---</span> <span class="bullet">--------</span> <span class="bullet">--------</span> <span class="bullet">----------</span> <span class="bullet">-</span> <span class="bullet">--</span> <span class="bullet">--</span> <span class="bullet">--</span> <span class="bullet">--</span> <span class="bullet">--------</span></div><div class="line"><span class="number">0038</span> <span class="number">7</span><span class="string">ffd5000</span> <span class="number">00000</span><span class="string">fff</span> <span class="string">Data</span> <span class="string">RW</span> <span class="string">Ac</span> <span class="number">3</span> <span class="string">Bg</span> <span class="string">By</span> <span class="string">P</span>  <span class="string">Nl</span> <span class="number">000004</span><span class="string">f3</span></div><div class="line"><span class="number">0</span><span class="string">:009&gt;</span> <span class="string">!teb</span></div><div class="line"><span class="string">TEB</span> <span class="string">at</span> <span class="number">7</span><span class="string">ffd5000</span></div><div class="line"><span class="attr">    ExceptionList:</span>        <span class="number">02</span><span class="string">eaffe4</span></div><div class="line"><span class="attr">    StackBase:</span>            <span class="number">02</span><span class="string">eb0000</span></div><div class="line"><span class="attr">    StackLimit:</span>           <span class="number">02</span><span class="string">eaf000</span></div><div class="line"><span class="attr">    SubSystemTib:</span>         <span class="number">00000000</span></div><div class="line"><span class="attr">    FiberData:</span>            <span class="number">00001e00</span></div><div class="line"><span class="attr">    ArbitraryUserPointer:</span> <span class="number">00000000</span></div><div class="line"><span class="attr">    Self:</span>                 <span class="number">7</span><span class="string">ffd5000</span></div><div class="line"><span class="attr">    EnvironmentPointer:</span>   <span class="number">00000000</span></div><div class="line"><span class="attr">    ClientId:</span>             <span class="number">000001</span><span class="string">b8</span> <span class="string">.</span> <span class="number">00000</span><span class="string">ae4</span></div><div class="line"><span class="attr">    RpcHandle:</span>            <span class="number">00000000</span></div><div class="line">    <span class="string">Tls</span> <span class="attr">Storage:</span>          <span class="number">00000000</span></div><div class="line">    <span class="string">PEB</span> <span class="attr">Address:</span>          <span class="number">7</span><span class="string">ffdf000</span></div><div class="line"><span class="attr">    LastErrorValue:</span>       <span class="number">0</span></div><div class="line"><span class="attr">    LastStatusValue:</span>      <span class="number">0</span></div><div class="line">    <span class="string">Count</span> <span class="string">Owned</span> <span class="attr">Locks:</span>    <span class="number">0</span></div><div class="line"><span class="attr">    HardErrorMode:</span>        <span class="number">0</span></div></pre></td></tr></table></figure></p><h2 id="我是谁？"><a href="#我是谁？" class="headerlink" title="我是谁？"></a>我是谁？</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PCR处理器控制区是用于存放CPU的编号，IDT和GDT表和重要状态的内存区域，使用<code>!pcr命令</code>可以查看信息<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="string">kd&gt;</span> <span class="string">!pcr</span></div><div class="line"><span class="string">KPCR</span> <span class="string">for</span> <span class="string">Processor</span> <span class="number">0</span> <span class="string">at</span> <span class="attr">ffdff000:</span></div><div class="line">    <span class="string">Major</span> <span class="number">1</span> <span class="string">Minor</span> <span class="number">1</span></div><div class="line"><span class="string">NtTib.ExceptionList:</span> <span class="number">8054</span><span class="string">a4b0</span></div><div class="line">    <span class="string">NtTib.StackBase:</span> <span class="number">8054</span><span class="string">acf0</span></div><div class="line">   <span class="string">NtTib.StackLimit:</span> <span class="number">80547</span><span class="string">f00</span></div><div class="line"> <span class="string">NtTib.SubSystemTib:</span> <span class="number">00000000</span></div><div class="line">      <span class="string">NtTib.Version:</span> <span class="number">00000000</span></div><div class="line">  <span class="string">NtTib.UserPointer:</span> <span class="number">00000000</span></div><div class="line">      <span class="string">NtTib.SelfTib:</span> <span class="number">00000000</span></div><div class="line"></div><div class="line">            <span class="attr">SelfPcr:</span> <span class="string">ffdff000</span></div><div class="line">               <span class="attr">Prcb:</span> <span class="string">ffdff120</span></div><div class="line">               <span class="attr">Irql:</span> <span class="number">00000000</span></div><div class="line">                <span class="attr">IRR:</span> <span class="number">00000000</span></div><div class="line">                <span class="attr">IDR:</span> <span class="string">ffffffff</span></div><div class="line">      <span class="attr">InterruptMode:</span> <span class="number">00000000</span></div><div class="line">                <span class="attr">IDT:</span> <span class="number">8003</span><span class="string">f400</span></div><div class="line">                <span class="attr">GDT:</span> <span class="number">8003</span><span class="string">f000</span></div><div class="line">                <span class="attr">TSS:</span> <span class="number">80042000</span></div><div class="line"></div><div class="line">      <span class="attr">CurrentThread:</span> <span class="number">80553740</span></div><div class="line">         <span class="attr">NextThread:</span> <span class="number">00000000</span></div><div class="line">         <span class="attr">IdleThread:</span> <span class="number">80553740</span></div><div class="line"></div><div class="line">          <span class="attr">DpcQueue:</span>  <span class="number">0x80553da0</span> <span class="number">0x80500df0</span> <span class="string">[Normal]</span> <span class="string">nt!KiTimerExpiration</span></div><div class="line"><span class="string">kd&gt;</span> <span class="string">dg</span> <span class="number">30</span></div><div class="line">                                  <span class="string">P</span> <span class="string">Si</span> <span class="string">Gr</span> <span class="string">Pr</span> <span class="string">Lo</span></div><div class="line"><span class="string">Sel</span>    <span class="string">Base</span>     <span class="string">Limit</span>     <span class="string">Type</span>    <span class="string">l</span> <span class="string">ze</span> <span class="string">an</span> <span class="string">es</span> <span class="string">ng</span> <span class="string">Flags</span></div><div class="line"><span class="bullet">-</span><span class="meta">---</span> <span class="bullet">--------</span> <span class="bullet">--------</span> <span class="bullet">----------</span> <span class="bullet">-</span> <span class="bullet">--</span> <span class="bullet">--</span> <span class="bullet">--</span> <span class="bullet">--</span> <span class="bullet">--------</span></div><div class="line"><span class="number">0030</span> <span class="string">ffdff000</span> <span class="number">00001</span><span class="string">fff</span> <span class="string">Data</span> <span class="string">RW</span> <span class="string">Ac</span> <span class="number">0</span> <span class="string">Bg</span> <span class="string">Pg</span> <span class="string">P</span>  <span class="string">Nl</span> <span class="number">00000</span><span class="string">c93</span></div></pre></td></tr></table></figure></p><h2 id="不可缺少的TSS段"><a href="#不可缺少的TSS段" class="headerlink" title="不可缺少的TSS段"></a>不可缺少的TSS段</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TSS段，用于存放一个任务的执行状态的段，一般的会给每个任务分配一个TSS段，便于进行任务的切换，但是，windows这样的操作系统只是创建少数的TSS段，例如KGDT_TSS,KGDT_DF_TSS和KGDT_NMI_TSS，但是后面两个TSS是处理双误和不可屏蔽中断的任务切换的，也就是说，CPU会根据这两个TSS进行任务切换，<strong>关于第一个TSS是所有线程共享的</strong>，它的内容是随着任务的切换而改变的，也就是说os在切换线程时候，并不跟换TSS，而是更新TSS的内容。</p><h2 id="拓展到64位"><a href="#拓展到64位" class="headerlink" title="拓展到64位"></a>拓展到64位</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;和x32相比，x64取消了硬件方式下的任务切换，对TSS结构发生了很大修改。但是硬件还是保留了自动切换栈的功能，新增了一个名为IST的域。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;引用栈上的变量&quot;&gt;&lt;a href=&quot;#引用栈上的变量&quot; class=&quot;headerlink&quot; title=&quot;引用栈上的变量&quot;&gt;&lt;/a&gt;引用栈上的变量&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;n
      
    
    </summary>
    
      <category term="&lt;格蠹汇编&gt;" scheme="http://yoursite.com/categories/%E6%A0%BC%E8%A0%B9%E6%B1%87%E7%BC%96/"/>
    
    
  </entry>
  
  <entry>
    <title>ISG_CTF_Re</title>
    <link href="http://yoursite.com/2018/09/03/ISG_CTF_Re/"/>
    <id>http://yoursite.com/2018/09/03/ISG_CTF_Re/</id>
    <published>2018-09-03T06:02:11.000Z</published>
    <updated>2018-09-03T08:07:39.889Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Junkcode"><a href="#Junkcode" class="headerlink" title="Junkcode"></a>Junkcode</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linux可执行文件，进过查壳没有发现异常，通过看题目，猜测程序可能加花，利用IDA打开，发现程序果然加花，但是通过重定义数据类型发现这并不是传统的加花来进行混淆。<br><a id="more"></a><br>    <img src="https://i.imgur.com/fBNNPw7.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之后利用动态调试一下，很快找到main函数。通过对比机器指令，发现动态和静态的指令不一样，断定这可能是smc代码。<br>    <img src="https://i.imgur.com/bZrStxu.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在问题集中在逆向check函数上了，但是无法F5，原因是没有创建函数的，创建完函数，然后F5一下。发现这是ptr1^input==ptr2,找到其他两个数组内容，就可以写脚本了。<br>    <img src="https://i.imgur.com/vuhR75k.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;脚本如下：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">int main(void)</div><div class="line">&#123;</div><div class="line">int num1[<span class="number">23</span>]=&#123;<span class="number">0x96</span>,<span class="number">0x8B</span>,<span class="number">0xCA</span>,<span class="number">0xD8</span>,<span class="number">0x72</span>,<span class="number">0xF9</span>,<span class="number">0xE8</span>,<span class="number">0xC0</span>,</div><div class="line">            <span class="number">0xF7</span>,<span class="number">0x0D</span>,<span class="number">0x46</span>,<span class="number">0x40</span>,<span class="number">0x29</span>,<span class="number">0x42</span>,<span class="number">0xA2</span>,<span class="number">0x9F</span>,</div><div class="line">            <span class="number">0x3E</span>,<span class="number">0x2C</span>,<span class="number">0x34</span>,<span class="number">0x71</span>,<span class="number">0xB2</span>,<span class="number">0x9E</span>,<span class="number">0xDA</span>&#125;;</div><div class="line">    int num2[<span class="number">23</span>]=&#123;<span class="number">0xDF</span>,<span class="number">0xD8</span>,<span class="number">0x8D</span>,<span class="number">0xA3</span>,<span class="number">0x18</span>,<span class="number">0xAC</span>,<span class="number">0x86</span>,<span class="number">0x8B</span>,</div><div class="line">                  <span class="number">0xA8</span>,<span class="number">0x6E</span>,<span class="number">0x76</span>,<span class="number">0x24</span>,<span class="number">0x4C</span>,<span class="number">0x1D</span>,<span class="number">0xCC</span>,<span class="number">0xAF</span>,</div><div class="line">                  <span class="number">0x4A</span>,<span class="number">0x73</span>,<span class="number">0x5E</span>,<span class="number">0x24</span>,<span class="number">0xDC</span>,<span class="number">0xD5</span>,<span class="number">0xA7</span>&#125;;</div><div class="line">    for(int i=<span class="number">0</span>;i&lt;<span class="number">23</span>;i++)</div><div class="line">    printf(<span class="string">"%c"</span>,num1[i]^num2[i]);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Junkcode&quot;&gt;&lt;a href=&quot;#Junkcode&quot; class=&quot;headerlink&quot; title=&quot;Junkcode&quot;&gt;&lt;/a&gt;Junkcode&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;linux可执行文件，进过查壳没有发现异常，通过看题目，猜测程序可能加花，利用IDA打开，发现程序果然加花，但是通过重定义数据类型发现这并不是传统的加花来进行混淆。&lt;br&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>病毒分析技术_14_Wannamine2.0挖矿病毒</title>
    <link href="http://yoursite.com/2018/09/03/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF_14_Wannamine2.0%E6%8C%96%E7%9F%BF%E7%97%85%E6%AF%92/"/>
    <id>http://yoursite.com/2018/09/03/病毒分析技术_14_Wannamine2.0挖矿病毒/</id>
    <published>2018-09-03T02:45:11.000Z</published>
    <updated>2018-09-03T07:03:23.986Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Wannamine2.0是wannamine家族的变种。该家族特征是使用NSA泄露的eternalblue漏洞利用工具包+扫描传播模块+挖矿木马，一切未打ms17-010漏洞补丁的机器都将是其目标，对于网络中存在ms17-010漏洞的机器而言，它是不可忽视的安全威胁。该挖矿木马为了躲避杀毒软件查杀，特地将主控程序加密并放到资源EnrollCertXaml.dll中。样本通过MS17-010（永恒之蓝）漏洞进行传播，其漏洞利用模块是使用的NSA工具包eternalblue和doublepuls，即2017年影子经纪人所公开的NSA工具包，定时和C&amp;C进行连接接受命令和更新模块，主要目的为挖掘门罗币。<br><a id="more"></a></p><h1 id="一：目录"><a href="#一：目录" class="headerlink" title="一：目录"></a>一：目录</h1><ul><li>1.目录</li><li>2.样本信息</li><li>3.样本分析</li><li>4.防御手段</li></ul><h1 id="二：样本信息"><a href="#二：样本信息" class="headerlink" title="二：样本信息"></a>二：样本信息</h1><ul><li>1.样本名称：spoolsv.exe</li><li>2.样本md5:97911A1DA380F874393CF15982C6B1B9</li><li>3.是否加壳:无壳</li><li>4.编译语言：Microsoft Visual C++ v14 - 2015 - x64 </li><li>5.样本来源：客户受感染主机</li></ul><h1 id="三：样本分析"><a href="#三：样本分析" class="headerlink" title="三：样本分析"></a>三：样本分析</h1><h2 id="母体文件"><a href="#母体文件" class="headerlink" title="母体文件"></a>母体文件</h2><ul><li><p>首先，获取系统信息和进程线程ID，进行运算，产生标志，这一点和WanaCry一致。<br>   <img src="https://i.imgur.com/OwuUqlR.png" alt=""></p></li><li><p>接着初始化网络。创建一个名为{F5175396-40C2-0218-278D6EE}的互斥体。<br>   <img src="https://i.imgur.com/eyG1k84.png" alt=""></p></li><li><p>然后，程序创建了五个线程，分别执行查找指定文件，链接445端口，进行局域网内传播，获取主机名和同一网段内的其他主机IP验证是否可以通过445端口链接，开辟存储TCP表，从task.attendecr.com:80/task处读取文件到内存，访问读取error.ttemdecr:8080/log,或者scan.attendecr.80/status内容。<br>  <img src="https://i.imgur.com/6DvitaS.png" alt=""><br>  <img src="https://i.imgur.com/OytxI5G.png" alt=""><br>  <img src="https://i.imgur.com/g2cSqzU.png" alt=""></p></li><li><p>Thread_1:</p><ul><li>连接字符串，c:\windows\System32\EnrollCertXaml.dll，判断c:\windows\System32\EnrollCertXaml.dll是否存在，如果存在，则读取入内存，<br>  <img src="https://i.imgur.com/nOWPKlb.png" alt=""><br>  <img src="https://i.imgur.com/JiFiICc.png" alt=""></li><li>如果不存在，创建C:\Windows\SpeechsTracing\Crypt”目录，然后释放病毒文件到C:\Windows\SpeechsTracing\Misresoft<br>  <img src="https://i.imgur.com/gvYx8CL.png" alt=""></li><li>删除源目录<br>  <img src="https://i.imgur.com/uxrebIc.png" alt=""></li><li>拼接字符串，读取svchost的配置信息<br>  <img src="https://i.imgur.com/aEL6tTg.png" alt=""></li><li>释放x86.dll和x64.dll文件到C:\Windows\SpeechsTracing\Microsoft\中<br>  <img src="https://i.imgur.com/BI0IXv5.png" alt=""><br>  <img src="https://i.imgur.com/6NiGyPn.png" alt=""></li><li>根据上面的print函数(相当于赋值操作)，创建了两个进程，执行c:\windows\SpeechsTracing\Microsoft\svchost.exe操作，<br><img src="https://i.imgur.com/wrwmt34.png" alt=""><br><img src="https://i.imgur.com/xrvHhQh.png" alt=""></li><li>读取并写入stage1.txt，判断攻击是否成功<br><img src="https://i.imgur.com/D0Sp9zF.png" alt=""></li><li>然后，通过CreateProcessA函数启动spoolsv.exe安装后门程序，同时将这个行为特征记录在stage2.txt。<br><img src="https://i.imgur.com/15VjaNJ.png" alt=""></li><li>调用CreateThread，创建一个线程。</li></ul></li><li><p>Thread_2 </p><ul><li>遍历每个IP地址</li><li>创建线程，每创建64个线程，暂停500ms</li><li>连接445端口和63257端口，<br><img src="https://i.imgur.com/IGNYQF3.png" alt=""></li><li>进入关键区，将可以被利用的地址保存，<br> <img src="https://i.imgur.com/7a0LPlb.png" alt=""></li></ul></li><li><p>Thread_3</p><ul><li>获取用户名和主机名<br>  <img src="https://i.imgur.com/iEnpfMI.png" alt=""></li><li>如果不是本地回环，则将ip地址传入sub_14000C110，目的是交给线程2<br>  <img src="https://i.imgur.com/bbprcyn.png" alt=""></li></ul></li><li><p>Thread_4</p><ul><li>存放已经可以被利用的IP的Tcp表，<br><img src="https://i.imgur.com/VuhjwqR.png" alt=""></li></ul></li><li><p>Thread_5</p><ul><li>从task.attendecr.com:80/tasks读取文件到内存<br><img src="https://i.imgur.com/gz4PMKs.png" alt=""></li></ul></li><li><p>Thread_6</p><ul><li>从访问读取error.ttemdecr:8080/log,或者scan.attendecr.80/status处读取文件<br><img src="https://i.imgur.com/CgvqPUA.png" alt=""></li></ul></li></ul><h2 id="x86-dll-x64-dll"><a href="#x86-dll-x64-dll" class="headerlink" title="x86.dll(x64.dll)"></a>x86.dll(x64.dll)</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x64.dll和x86.dll针对不同的架构，但是其功能是相同的。所以为了篇幅期间只分析x86.dll。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以看到x86.dll有三个导出函数，分别是DllRegisterServer，DllUnregisterServer，DllEntryPoint，从名字上来看这只是只是注册服务和删除服务的导出函数。<br>     <img src="https://i.imgur.com/rFRuOYt.png" alt=""></p><ul><li>创建了互斥体名为{B3DD837C-473B}的互斥体<br>  <img src="https://i.imgur.com/EPRFnse.png" alt=""><br>  <img src="https://i.imgur.com/s965CXu.png" alt=""></li><li>初始化网络，创建了线程，主要用于释放病毒，这里释放的是关于上文所述的EnrollCertXaml.dll，然后解压<br>  <img src="https://i.imgur.com/e2PbBZS.png" alt=""><br>  <img src="https://i.imgur.com/kMxBpG7.png" alt=""></li><li>将恶意代码数据写入SOFTWARE\Microsoft\Windows NT\CurrentVersion\Svchost中的netsvcs中，而svchost是用来加载成组服务的，netsvcs 是一组服务的集合，不是单个的服务，具体哪些服务在netsvcs里，由此我们可以知道，病毒写入此注册表的目的是为了启动服务。从而实现常驻。<br>   <img src="https://i.imgur.com/oH62LYi.png" alt=""></li><li>以c:\windows\System32\svchost.exe -k netsvcs参数创建服务。<br>   <img src="https://i.imgur.com/TZNBSJp.png" alt=""></li><li>设置服务的描述和文件信息，servicedll指向dll文件的路径。<br>   <img src="https://i.imgur.com/zAaDmZV.png" alt=""></li></ul><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于样本不全，无法对病毒的关键逻辑进行分析。</p><h1 id="四：防御手段"><a href="#四：防御手段" class="headerlink" title="四：防御手段"></a>四：防御手段</h1><h2 id="1-打ms17-010补丁"><a href="#1-打ms17-010补丁" class="headerlink" title="1.打ms17-010补丁"></a>1.打ms17-010补丁</h2><ul><li>官方补丁【注：补丁如果打不上原因kennel是补丁依赖，即安装此次的补丁需要前一个补丁的支持。】：<a href="https://docs.microsoft.com/zh-cn/security-updates/Securitybulletins/2017/ms17-010" target="_blank" rel="external">https://docs.microsoft.com/zh-cn/security-updates/Securitybulletins/2017/ms17-010</a><br>  <img src="https://i.imgur.com/0sOu2UG.png" alt=""></li></ul><h2 id="2-封堵445端口"><a href="#2-封堵445端口" class="headerlink" title="2.封堵445端口"></a>2.封堵445端口</h2><ul><li>防火墙禁用445端口</li><li>组策略445端口</li><li>禁用SMB服务</li></ul><h2 id="3-安装安全软件"><a href="#3-安装安全软件" class="headerlink" title="3.安装安全软件"></a>3.安装安全软件</h2><ul><li>进过测试，国内大部分安全厂商具备查杀此类病毒的能力</li><li>建议：查杀时，最后隔离网络，避免交叉感染</li></ul><h2 id="4-如何判定是否安装补丁"><a href="#4-如何判定是否安装补丁" class="headerlink" title="4.如何判定是否安装补丁"></a>4.如何判定是否安装补丁</h2><ul><li>1）控制面板-程序和功能-卸载程序-补丁更新</li><li>2）cmd命令行-输入systeminfo</li><li>3）win+R 输入regedit，依次展开，查看注册表项：<br>HKEY_LOCAL_MACHINE\SOFTWARE\MICROSOFT\WINDOWS NT\Currentversion\hotfix</li></ul><h2 id="5-安全意识"><a href="#5-安全意识" class="headerlink" title="5.安全意识"></a>5.安全意识</h2><ul><li>不下载、不运行未知来源的软件，不点开不明链接，要有网络安全防范意识。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Wannamine2.0是wannamine家族的变种。该家族特征是使用NSA泄露的eternalblue漏洞利用工具包+扫描传播模块+挖矿木马，一切未打ms17-010漏洞补丁的机器都将是其目标，对于网络中存在ms17-010漏洞的机器而言，它是不可忽视的安全威胁。该挖矿木马为了躲避杀毒软件查杀，特地将主控程序加密并放到资源EnrollCertXaml.dll中。样本通过MS17-010（永恒之蓝）漏洞进行传播，其漏洞利用模块是使用的NSA工具包eternalblue和doublepuls，即2017年影子经纪人所公开的NSA工具包，定时和C&amp;amp;C进行连接接受命令和更新模块，主要目的为挖掘门罗币。&lt;br&gt;
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>&lt;格蠹汇编&gt;_第25章_如何调试窗口大总管</title>
    <link href="http://yoursite.com/2018/08/28/%E3%80%8A%E6%A0%BC%E8%A0%B9%E6%B1%87%E7%BC%96%E3%80%8B_%E7%AC%AC25%E7%AB%A0_%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95%E7%AA%97%E5%8F%A3%E5%A4%A7%E6%80%BB%E7%AE%A1/"/>
    <id>http://yoursite.com/2018/08/28/《格蠹汇编》_第25章_如何调试窗口大总管/</id>
    <published>2018-08-28T07:02:11.000Z</published>
    <updated>2018-08-29T01:25:00.579Z</updated>
    
    <content type="html"><![CDATA[<h2 id="神圣不可侵犯"><a href="#神圣不可侵犯" class="headerlink" title="神圣不可侵犯"></a>神圣不可侵犯</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CSRSS进程，中文全称是系统服务进程，他监管着系统中运行的所有windows进程和线程。在消息分发，桌面管理，终端登录，控制台管理，DOS虚拟机等方面起着重要作用。由于其重要性，调试CSRSS进程也是相当困难的<br><a id="more"></a></p><h2 id="特殊的调试方式"><a href="#特殊的调试方式" class="headerlink" title="特殊的调试方式"></a>特殊的调试方式</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;尽管很重要，但是windows依然给我调试CSRSS进程的可能性。一共需要进行两部分操作。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先，需要修改windows全局标志来启用对CSRSS调试的支持，有两种方法修改全局标志，第一种是修改注册表<code>HKLM\SYSTEM\CurrentControlSet\Control\Session Manager</code>,将GlobalFlag的数值与0x20000或运算，并写入。第2种方法是在windbg目录执行gflags /r +20000，并在图形界面勾选“Enable debugging of Win32 Subsystem”.<br>    <img src="https://i.imgur.com/CYBqMhU.png" alt=""><br>    <img src="https://i.imgur.com/VqYoXI5.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接下来是使用所谓的双机调试。我们一般使用两台计算机调试CSRSS，被调试机器不需要接收用户输入，没有用户界面，可以运行在后台，可以使用<strong>NTSD</strong>，调试主机使用windbg，以<strong>内核调试</strong>方式连接到被调试机器。</p><h2 id="附加到CSRSS"><a href="#附加到CSRSS" class="headerlink" title="附加到CSRSS"></a>附加到CSRSS</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;搭建好双机调试的环境后，在启用内核调试环境后，利用命令行的形式进入windbg目录下，执行<code>NTSD --</code>,可以看到控制台没有任何提示，但是NTSD在后台运行。<br>     <img src="https://i.imgur.com/HmsJDkI.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后在调试主机，以内核调试下的双机调试打开windbg，发现windbg已经附加在了CSRSS，只是CSRSS并没有中断下来，有一个方法是利用F12中断，当存在有页面的程序是，按F12可以使其中断在调试器。但是这样也好复杂。<br>     <img src="https://i.imgur.com/VjVQLDw.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;windbg下有个小工具就是干这件事的，将控制台切换到windbg目录，并且查找CSRSS的PID，然后 执行<code>breakin PID</code>即可中断在调试器。<br>     <img src="https://i.imgur.com/AEwx9Cc.png" alt=""></p><h2 id="符号文件"><a href="#符号文件" class="headerlink" title="符号文件"></a>符号文件</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当windbg中断后，利用<code>lm</code>罗列所有模块或者使用<code>k</code>命令查看栈回溯的话可能会得到一个warning，这是因为我们没有加载符号信息，但是我们应该加载被调试系统的符号还是加载调试系统的符号信息呢？之前说过<strong>调试端的调试器用于人机接口，被调试端的调试器起到真正的调试功能</strong>，所以，应该加载<strong>被调试的端的符号信息</strong>，执行<code>.sympath c:\symbols1</code>,然后<code>.reload</code>即可。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有了符号信息后执行lm后显示模块信息，且没有warning<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">0:011&gt; lm</div><div class="line">lm</div><div class="line">start    end        module name</div><div class="line">4a680000 4a685000   csrss      (no symbols)           </div><div class="line">62c20000 62c29000   LPK        (pdb symbols)          c:<span class="symbol">\s</span>ymbols1<span class="symbol">\l</span>pk.pdb<span class="symbol">\4</span>B6570DF2CFF45AAB60E416993385EAC1<span class="symbol">\l</span>pk.pdb</div><div class="line">73fa0000 7400b000   USP10      (pdb symbols)          c:<span class="symbol">\s</span>ymbols1<span class="symbol">\u</span>sp10.pdb<span class="symbol">\0</span>F289BC0C9A94139BC1C31EDEDBF52311<span class="symbol">\u</span>sp10.pdb</div><div class="line">75aa0000 75aab000   CSRSRV     (export symbols)       C:<span class="symbol">\W</span>INDOWS<span class="symbol">\s</span>ystem32<span class="symbol">\C</span>SRSRV.dll</div><div class="line">75ab0000 75ac0000   basesrv    (export symbols)       C:<span class="symbol">\W</span>INDOWS<span class="symbol">\s</span>ystem32<span class="symbol">\b</span>asesrv.dll</div><div class="line">75e00000 75eae000   sxs        (export symbols)       C:<span class="symbol">\W</span>INDOWS<span class="symbol">\s</span>ystem32<span class="symbol">\s</span>xs.dll</div><div class="line">764e0000 76534000   winsrv     (export symbols)       C:<span class="symbol">\W</span>INDOWS<span class="symbol">\s</span>ystem32<span class="symbol">\w</span>insrv.dll</div><div class="line">77d10000 77da0000   USER32     (pdb symbols)          c:<span class="symbol">\s</span>ymbols1<span class="symbol">\u</span>ser32.pdb<span class="symbol">\D</span>18A41B74E7F458CAAAC1847E2D8BF022<span class="symbol">\u</span>ser32.pdb</div><div class="line">77da0000 77e49000   ADVAPI32   (pdb symbols)          c:<span class="symbol">\s</span>ymbols1<span class="symbol">\a</span>dvapi32.pdb<span class="symbol">\5</span>EFB9BF42CC64024AB64802E467394642<span class="symbol">\a</span>dvapi32.pdb</div><div class="line">77e50000 77ee2000   RPCRT4     (pdb symbols)          c:<span class="symbol">\s</span>ymbols1<span class="symbol">\r</span>pcrt4.pdb<span class="symbol">\C</span>CD4FE9B704E48B6B8A12F31E112AA6F2<span class="symbol">\r</span>pcrt4.pdb</div><div class="line">77ef0000 77f39000   GDI32      (pdb symbols)          c:<span class="symbol">\s</span>ymbols1<span class="symbol">\g</span>di32.pdb<span class="symbol">\7</span>40F60A99F2A417E96C387400994588D2<span class="symbol">\g</span>di32.pdb</div><div class="line">77fc0000 77fd1000   Secur32    (pdb symbols)          c:<span class="symbol">\s</span>ymbols1<span class="symbol">\s</span>ecur32.pdb<span class="symbol">\E</span>8D378740B8E4A46B19CAFCD2D6DDF7D2<span class="symbol">\s</span>ecur32.pdb</div><div class="line">7c800000 7c91e000   KERNEL32   (pdb symbols)          c:<span class="symbol">\s</span>ymbols1<span class="symbol">\k</span>ernel32.pdb<span class="symbol">\3</span>4560E80F5C54175B208848EF863C5BD2<span class="symbol">\k</span>ernel32.pdb</div><div class="line">7c920000 7c9b3000   ntdll      (pdb symbols)          c:<span class="symbol">\s</span>ymbols1<span class="symbol">\n</span>tdll.pdb<span class="symbol">\1</span>751003260CA42598C0FB326585000ED2<span class="symbol">\n</span>tdll.pdb</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用x modulename!funcationname，查看符号信息。使用 ~*查看所有线程<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">0</span>:<span class="number">011</span>&gt; x winsrv!*</div><div class="line">x winsrv!*</div><div class="line"><span class="number">764</span>e84eb winsrv!UserServerDllInitialization (&lt;no parameter info&gt;)</div><div class="line"><span class="number">764</span>e88c9 winsrv!ConServerDllInitialization (&lt;no parameter info&gt;)</div><div class="line"><span class="number">764</span>ec121 winsrv!UserSoundSentry (&lt;no parameter info&gt;)</div><div class="line"><span class="number">764</span>f4ba4 winsrv!UserTestTokenForInteractive (&lt;no parameter info&gt;)</div><div class="line"><span class="number">0</span>:<span class="number">011</span>&gt; ~*</div><div class="line">~*</div><div class="line">   <span class="number">0</span>  <span class="attribute">Id</span>: <span class="number">254.25</span>c <span class="attribute">Suspend</span>: <span class="number">1</span> <span class="attribute">Teb</span>: <span class="number">7</span>ffde000 Unfrozen</div><div class="line">      <span class="attribute">Priority</span>: <span class="number">2</span>  Priority <span class="attribute">class</span>: <span class="number">32</span>  <span class="attribute">Affinity</span>: <span class="number">1</span></div><div class="line">   <span class="number">1</span>  <span class="attribute">Id</span>: <span class="number">254.260</span> <span class="attribute">Suspend</span>: <span class="number">1</span> <span class="attribute">Teb</span>: <span class="number">7</span>ffdd000 Unfrozen</div><div class="line">      <span class="attribute">Start</span>: winsrv!ConServerDllInitialization+<span class="number">0</span>x35f4 (<span class="number">764</span>ebebd) </div><div class="line">      <span class="attribute">Priority</span>: <span class="number">0</span>  Priority <span class="attribute">class</span>: <span class="number">32</span>  <span class="attribute">Affinity</span>: <span class="number">1</span></div><div class="line">   <span class="number">2</span>  <span class="attribute">Id</span>: <span class="number">254.264</span> <span class="attribute">Suspend</span>: <span class="number">1</span> <span class="attribute">Teb</span>: <span class="number">7</span>ffdc000 Unfrozen</div><div class="line">      <span class="attribute">Start</span>: CSRSRV!CsrValidateMessageString+<span class="number">0</span>x179 (<span class="number">75</span>aa4616) </div><div class="line">      <span class="attribute">Priority</span>: <span class="number">0</span>  Priority <span class="attribute">class</span>: <span class="number">32</span>  <span class="attribute">Affinity</span>: <span class="number">1</span></div><div class="line">   <span class="number">3</span>  <span class="attribute">Id</span>: <span class="number">254.268</span> <span class="attribute">Suspend</span>: <span class="number">1</span> <span class="attribute">Teb</span>: <span class="number">7</span>ffdb000 Unfrozen</div><div class="line">      <span class="attribute">Start</span>: CSRSRV!CsrUnhandledExceptionFilter+<span class="number">0</span>x936 (<span class="number">75</span>aa3b3a) </div><div class="line">      <span class="attribute">Priority</span>: <span class="number">0</span>  Priority <span class="attribute">class</span>: <span class="number">32</span>  <span class="attribute">Affinity</span>: <span class="number">1</span></div><div class="line">   <span class="number">4</span>  <span class="attribute">Id</span>: <span class="number">254.274</span> <span class="attribute">Suspend</span>: <span class="number">1</span> <span class="attribute">Teb</span>: <span class="number">7</span>ffda000 Unfrozen</div><div class="line">      <span class="attribute">Start</span>: CSRSRV!CsrValidateMessageString+<span class="number">0</span>x179 (<span class="number">75</span>aa4616) </div><div class="line">      <span class="attribute">Priority</span>: <span class="number">0</span>  Priority <span class="attribute">class</span>: <span class="number">32</span>  <span class="attribute">Affinity</span>: <span class="number">1</span></div></pre></td></tr></table></figure></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用这样NTSD和双机调试可以调试众多系统进程。例如wilogon.exe,CSRSS其实是服务器进程，其他进程是客户进程。进程内部有WINSRV,CSRSRV,BASESRV三个模块。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;神圣不可侵犯&quot;&gt;&lt;a href=&quot;#神圣不可侵犯&quot; class=&quot;headerlink&quot; title=&quot;神圣不可侵犯&quot;&gt;&lt;/a&gt;神圣不可侵犯&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CSRSS进程，中文全称是系统服务进程，他监管着系统中运行的所有windows进程和线程。在消息分发，桌面管理，终端登录，控制台管理，DOS虚拟机等方面起着重要作用。由于其重要性，调试CSRSS进程也是相当困难的&lt;br&gt;
    
    </summary>
    
      <category term="&lt;格蠹汇编&gt;" scheme="http://yoursite.com/categories/%E6%A0%BC%E8%A0%B9%E6%B1%87%E7%BC%96/"/>
    
    
  </entry>
  
  <entry>
    <title>&lt;格蠹汇编&gt;_第9章_趣谈托管程序的辅助调试线程</title>
    <link href="http://yoursite.com/2018/08/27/%E3%80%8A%E6%A0%BC%E8%A0%B9%E6%B1%87%E7%BC%96%E3%80%8B_%E7%AC%AC21%E7%AB%A0_%E8%B6%A3%E8%B0%88%E6%89%98%E7%AE%A1%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%BE%85%E5%8A%A9%E8%B0%83%E8%AF%95%E7%BA%BF%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/08/27/《格蠹汇编》_第21章_趣谈托管程序的辅助调试线程/</id>
    <published>2018-08-27T07:02:11.000Z</published>
    <updated>2018-09-03T03:43:30.221Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当执行windows可执行文件时，OS会创建一个线程，叫做<strong>初始线程</strong>，应用程序的主函数都是在这个线程里面执行的。<br><a id="more"></a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是对于托管程序来说，在托管程序初始化期间，.Net运行时还会自动创建两个工作线程，一个是系统创建的初始化线程，另外两个是.Net运行时创建的工作线程，一个是与内存回收相关的<strong>终结器线程</strong>，另外一个是支持调试的<strong>辅助调试进程</strong>。</p><h2 id="托管调试模型"><a href="#托管调试模型" class="headerlink" title="托管调试模型"></a>托管调试模型</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;托管程序的调试一共有三种：</p><ul><li>使用非托管调试器调试程序中的非托管代码。</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们知道Net程序一共有三部分组成，第一个是非托管代码和数据，第二个是托管代码和数据，第三个是支持托管调试的<strong>运行时控制器[CRThread]。</strong>对于调试程序也分为三部分：本地代码调试器，托管调试器，托管API。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为托管代码最终也是要编译为本地代码，所以利用这个调试模式可以调试本地代码也是调试托管代码。但是需要使用特定插件才可查看托管代码的数据结构</p><ul><li>使用托管调试器调试托管代码</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;托管调试器通过调试器API和被调试进程运行时控制器通信来访问要调试的托管代码和数据。这种模式不会跟踪本地代码。</p><ul><li>混合调试</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;速度慢</p><h2 id="联系纽带"><a href="#联系纽带" class="headerlink" title="联系纽带"></a>联系纽带</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RCThread作为调试器与被调试程序通讯的纽带。当我们使用<code>~*命令</code>打印被调试进程所有线程的时候，发现第二个(1号线程)是RcThread，任何利用<code>~ 1n命令</code>挂起该线程，然后再利用VS调试，发现VS失去响应调试失败。</p><h2 id="刺探线程、"><a href="#刺探线程、" class="headerlink" title="刺探线程、"></a>刺探线程、</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当调试器右端需要访问托管程序资源时候，首先需要先获取这些资源的保护锁，如果这个保护锁是由托管程序普通线程拥有的，那么将导致死锁，所以RcThread会创建一个新县城用于帮助Rcthread刺探信息</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前置知识&quot;&gt;&lt;a href=&quot;#前置知识&quot; class=&quot;headerlink&quot; title=&quot;前置知识&quot;&gt;&lt;/a&gt;前置知识&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;当执行windows可执行文件时，OS会创建一个线程，叫做&lt;strong&gt;初始线程&lt;/strong&gt;，应用程序的主函数都是在这个线程里面执行的。&lt;br&gt;
    
    </summary>
    
      <category term="&lt;格蠹汇编&gt;" scheme="http://yoursite.com/categories/%E6%A0%BC%E8%A0%B9%E6%B1%87%E7%BC%96/"/>
    
    
  </entry>
  
  <entry>
    <title>angr使用笔记</title>
    <link href="http://yoursite.com/2018/08/27/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7angr%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/08/27/二进制分析工具angr使用笔记/</id>
    <published>2018-08-27T06:02:11.000Z</published>
    <updated>2018-08-31T08:05:50.270Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般来说，二进制文件有两种分析方法：静态分析、动态分析。<br><a id="more"></a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;静态分析是指：直接阅读二进制编码。<strong>静态分析的特点是：覆盖全面。</strong>但是，静态分析有它的缺点。如前面所说，二进制文件本身并不好理解，甚至像天书一样。因此，静态分析想得到精确的结果，则需要进行长时间的分析，使分析时间变长。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;态分析不阅读二进制代码，而是直接把二进制文件扔到实际环境下执行，但是，由于设备的输入信息可以是任意的，因此动态分析不可能做到面面俱到。也就是说，<strong>分析结果虽然非常准确，但不能全面覆盖。</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;打CTF的Re题的时候，程序一般的流程就是接收输入，然后执行一个验证过程，如果程序通过认证，跳出一个flag，否则跳出一个error。而我们一般的思路是逆向这个认证过程，这就考察一个人的逆向思维了。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不妨换一个思维，<strong>不找中间的认证过程，而是直接寻找认证通过状态</strong></p><h2 id="符号执行"><a href="#符号执行" class="headerlink" title="符号执行"></a>符号执行</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;符号执行(Symbolic Execution）是一种<strong>程序分析技术</strong>。其可以通过<strong>分析程序</strong>来得到让特定代码区域执行的输入。使用符号执行分析一个程序时，<strong>该程序会使用符号值作为输入，而非一般执行程序时使用的具体值。</strong>在达到目标代码时，分析器可以得到相应的<strong>路径约束</strong>，然后通过约束求解器来得到可以触发目标代码的具体值。</p><h2 id="什么是Angr"><a href="#什么是Angr" class="headerlink" title="什么是Angr"></a>什么是Angr</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;angr是一个用于分析二进制文件的python框架。它专注于静态和符号分析，使其适用于各种任务。他寄生于2层环境中，第一层为angr环境，是一个利用virtualenvwrapper软件模拟出来的python环境，用于解决环境的不兼容问题，第二层是真实的python环境，也就是说我们需要执行python后才能使用import angr导入模块。</p><h3 id="一般属性"><a href="#一般属性" class="headerlink" title="一般属性"></a>一般属性</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先，我们需要知道文件的基本属性，例如架构，文件名，入口点之类的。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; proj = angr.Project(<span class="string">'./test1_nopie'</span>,auto_load_libs=False)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; proj.arch</div><div class="line">&lt;Arch AMD64 (LE)&gt;</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; proj.filename</div><div class="line"><span class="string">'./test1_nopie'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; proj.entry</div><div class="line"><span class="number">4195584</span></div></pre></td></tr></table></figure></p><h3 id="装载器"><a href="#装载器" class="headerlink" title="装载器"></a>装载器</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从二进制文件加载到在虚拟地址空间中非常复杂！我们有一个叫CLE的模块来处理这个问题。称为<strong>加载程序</strong>，位于项目的.loader属性。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; proj.loader</div><div class="line">&lt;Loaded test1_nopie, maps [<span class="number">0</span>x400000:<span class="number">0</span>x3008000]&gt;</div><div class="line">&gt;&gt;&gt; proj<span class="selector-class">.loader</span><span class="selector-class">.min_addr</span></div><div class="line"><span class="number">4194304</span></div><div class="line">&gt;&gt;&gt; proj<span class="selector-class">.loader</span><span class="selector-class">.max_addr</span></div><div class="line"><span class="number">50364416</span></div></pre></td></tr></table></figure></p><h3 id="工厂-The-factory"><a href="#工厂-The-factory" class="headerlink" title="工厂 {The factory}"></a>工厂 {The factory}</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;angr里面含有很多可用于实例化的类，其中factory类是二进制分析中最常用的类。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Project对象只代表程序的“初始化映像”。利用编程语言的角度来解释就是，<strong>Project只是一个对象(类)</strong>，并没有实例化，是抽象的。但是，当执行angr的时候，<strong>使用的是一个代表模拟程序状态的特定对象</strong>，需要使用state()方法来实例化对象。一个SimState包含一个程序的内存，寄存器，文件系统数据…任何会在执行中改变的“实时数据”都会在这个state中。</p><h3 id="模拟化管理器-Simulation-Managers"><a href="#模拟化管理器-Simulation-Managers" class="headerlink" title="模拟化管理器 {Simulation Managers}"></a>模拟化管理器 {Simulation Managers}</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;simgr适用于程序模拟执行的接口，state只是表示程序执行过程中的一个状态，那么利用simgr可以使得程序执行到下一个状态。</p><h2 id="安装angr"><a href="#安装angr" class="headerlink" title="安装angr"></a>安装angr</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先使用命令<code>sudo apt-get install python-dev libffi-dev build-essential</code>安装python-dev，libffi-dev等工具。linux发行版通常会把类库的头文件和相关的pkg-config分拆成一个单独的xxx-dev，以python为例，如果你需要安装一个第三方的库，这个库里面含有调用C++(c)的API，或者程序需要连接静态库(.so)则需要安装python-dev。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接着使用<code>pip install virtualenvwrapper</code>安装virtualenvwrapper。 python virtual enviroment是一个python环境管理工具，该工具能够在真实的系统中创建一个虚拟的python环境，以防止软件安装过程中对真实环境的影响，同时也能方便解决python中不同版本不兼容的问题。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用pip的方法安装，则安装路径是<code>/usrname[需要替换成你的]/local/bin/</code>，如果在后面还是找不到的话，使用<code>find / -name virtualenvwrapper.sh</code>查找</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接着设置环境变量<code>export WORKON_HOME=$HOME/Python-workhome</code>,HOME/Python-workhome就是准备放置虚拟环境的地址,比如说选择<code>/tmp</code></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后使用<code>source /usrname[需要替换成你的]/local/bin/virtualenvwrapper.sh</code>执行脚本。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用<code>mkvirtualenv angr</code>命令建立angr的虚拟python环境，并启动。这一步前提是执行了上一步的脚本，否则报找不到命令的错误</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后使用<code>sudo pip install angr</code>安装angr，如果报错，安装<code>sudo pip install cffi</code>。</p><h2 id="使用angr"><a href="#使用angr" class="headerlink" title="使用angr"></a>使用angr</h2><h3 id="一般性流程"><a href="#一般性流程" class="headerlink" title="一般性流程"></a>一般性流程</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般常见的有以下命令：</p><ul><li><p>新建一个angr工程</p><ul><li>proj = angr.Project(‘./CrakeMe’,auto_load_libs=false)</li></ul></li><li><p>新建一个SimState对象</p><ul><li>state = p.factory.entry_state()</li></ul></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SimState对象在angr其中的一个子模块SimuVEX中，它追踪且记录着符号信息、符号对应的内存信息和符号对应的寄存器信息，以及打开的文件信息等。可以通过Project.factory这个容器中的任何一个方法来获取SimState对象。这个factory有多个构造函数，如：block、entry_state等。这里使用entry_state返回一个初始化到二进制entry point的SimState对象。</p><ul><li><p>创建一个simgr对象,创建一个模拟器用来模拟程序执行</p><ul><li>simgr = proj.factory.simgr(state)</li></ul></li><li><p>利用IDA查找两个分支，然后去探索,用explore执行模拟器，find和avoid用来作为约束条件</p><ul><li>simgr.explore(find=0x300602,avoid=0x40060E)</li></ul></li><li><p>打印爆破出来的结果</p><ul><li>print simgr.found[0].solver.eval(argv1)<br><img src="https://i.imgur.com/qhF5Pg8.png" alt=""><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">import</span> angr </div><div class="line"><span class="built_in">import</span> claripy   <span class="comment"># 接收命令行参数</span></div><div class="line"><span class="attr">proj</span> = angr.Project('./ais3_crackme',<span class="attr">auto_load_libs=False)</span> <span class="comment"># 创建项目</span></div><div class="line"><span class="attr">argv1</span> = claripy.BVS('argv1',<span class="number">50</span>*<span class="number">8</span>)   <span class="comment"># 设置输入</span></div><div class="line"><span class="attr">state</span> = proj.factory.entry_state(<span class="attr">args=['./ais3_crackme',argv1])</span>  <span class="comment"># 设置入口点</span></div><div class="line"><span class="attr">simgr</span> = proj.factory.simgr(state)       <span class="comment"># 初始化运行器</span></div><div class="line">simgr.explore(<span class="attr">find=0x300602,avoid=0x40060E)</span>  <span class="comment"># 探索</span></div><div class="line">print simgr.found[<span class="number">0</span>].solver.eval(argv1)   <span class="comment"># 打印结果</span></div><div class="line">print simgr.found[<span class="number">0</span>].solver.eval(agrv1,<span class="attr">cast_to=str)</span>  <span class="comment"># 转化为asscii</span></div></pre></td></tr></table></figure></li></ul></li></ul><h3 id="获取输入"><a href="#获取输入" class="headerlink" title="获取输入"></a>获取输入</h3><ul><li><strong>无输入</strong></li><li><strong>命令行输入</strong> </li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当程序要求命令行参数时，我们首先需要使用claripy这个模块来定义抽象的数据。<br><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> claripy</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;laripy的BVS函数可以创建一个指定长度的抽象数据，BVS函数要求两个参数，第一个参数为变量名，第二个参数为变量长度。<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">argv1</span> = claripy(<span class="string">'argv1'</span>,<span class="number">50</span>*<span class="number">8</span>)</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这样，我们就创建好了一个命令行参数，我们现在可以将程序运行到程序入口处，并获得当前的一个状态。<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">state</span> = proj.factory.entry_state(args=['./CrakeMe',argv1])</div></pre></td></tr></table></figure></p><ul><li><strong>标准输入</strong></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当程序需要从标准输入处读取数据时，需要使用read_from()函数，要注意，这个函数位于状态中，并且我们可以对输入进行一些约束以减少符号执行遍历的路径<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> xrange(<span class="number">5</span>):   </div><div class="line">    k = <span class="keyword">state</span>.posix.files[<span class="number">0</span>].read_from(<span class="number">1</span>) </div><div class="line">    <span class="keyword">state</span>.se.add(k!=<span class="number">10</span>)</div></pre></td></tr></table></figure></p><h2 id="获取输出"><a href="#获取输出" class="headerlink" title="获取输出"></a>获取输出</h2><ul><li><p>获取程序的当前输出</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print simgr<span class="selector-class">.found</span>[<span class="number">0</span>]<span class="selector-class">.posix</span><span class="selector-class">.dumps</span>(<span class="number">0</span>)</div></pre></td></tr></table></figure></li><li><p>命令行参数</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print simgr<span class="selector-class">.found</span>[<span class="number">0</span>]<span class="selector-class">.solver</span><span class="selector-class">.eval</span>(argv1,cast_to=str)</div></pre></td></tr></table></figure></li><li><p>标注输出</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">res = simgr<span class="selector-class">.founf</span>[<span class="number">0</span>]<span class="selector-class">.posix</span><span class="selector-class">.files</span>[<span class="number">0</span>].all_bytes()</div><div class="line">print simgr<span class="selector-class">.found</span>[<span class="number">0</span>]<span class="selector-class">.solver</span><span class="selector-class">.eval</span>(res,cast_to=str)</div></pre></td></tr></table></figure></li></ul><h2 id="CTF例子"><a href="#CTF例子" class="headerlink" title="CTF例子"></a>CTF例子</h2><h3 id="第一个Demo"><a href="#第一个Demo" class="headerlink" title="第一个Demo"></a>第一个Demo</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用如下代码：编译成一个64位的elf文件，在编译的过程中使用如下编译选项以关闭PIE选项:    <code>gcc -no-pie Test1.cpp -o test1</code> ，参考自：<a href="github.com/firmianay/CTF-All-In-One/blob/master/doc/4.4_gcc_sec.md">github.com/firmianay/CTF-All-In-One/blob/master/doc/4.4_gcc_sec.md</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">success</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"success\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">failed</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"failed\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">    <span class="keyword">char</span> name[<span class="number">9</span>];</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,name);</div><div class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(name,<span class="string">"jsk"</span>))&#123;</div><div class="line">        success();</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        failed();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用checksec检查文件属性，checksec利用<code>sudo pip install pwntools</code>安装的<br>    <img src="https://i.imgur.com/EtbjmLU.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在IDA中查看反汇编代码如下：存在两个分支。<br>    <img src="https://i.imgur.com/iplIpBp.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用如下angr脚本<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import angr</div><div class="line">proj = angr.Project(<span class="string">"./test1"</span>,auto_load_libs=False)   <span class="comment"># 创建工程</span></div><div class="line"><span class="keyword">state</span> = proj.factory.entry_state()     <span class="comment"># 确定程序入口</span></div><div class="line">simgr = proj.factory.simgr(<span class="keyword">state</span>)      <span class="comment"># 创建一个模拟器用来模拟程序执行</span></div><div class="line">simgr.explore(find=<span class="number">0</span>x0000000000400643,avoid=<span class="number">0</span>x000000000040064A)   <span class="comment"># 用explore执行模拟器，find和avoid用来作为约束条件</span></div><div class="line">simgr.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>)</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;结果如下：<br>    <img src="https://i.imgur.com/D2e5jpN.png" alt=""></p><h2 id="第二个Demo"><a href="#第二个Demo" class="headerlink" title="第二个Demo"></a>第二个Demo</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;题目来源：<a href="https://github.com/angr/angr-doc/tree/master/examples/ais3_crackme" target="_blank" rel="external">https://github.com/angr/angr-doc/tree/master/examples/ais3_crackme</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;执行一下发现<strong>命令行选项</strong>作为输入，所有在使用angr的时候需要导入<code>import charipy</code></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用IDA看一下，发现如下分支，确定约束条件<br>    <img src="https://i.imgur.com/SZlqQqG.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;编写angr脚本<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">import</span> angr</div><div class="line"><span class="built_in">import</span> charipy</div><div class="line"><span class="attr">proj</span> = angr.Project('./test2',<span class="attr">auto_load_libs=False)</span></div><div class="line"><span class="attr">argv1</span> = charipy.BVS('argv1',<span class="number">50</span>*<span class="number">8</span>)                    <span class="comment"># 确定输入的大小</span></div><div class="line"><span class="attr">state</span> = proj.factory.entry_state(<span class="attr">args=['./test2',argv1])</span></div><div class="line"><span class="attr">simgr</span> = proj.factory.simgr(state)</div><div class="line">simgr.explore(<span class="attr">find=0x0000000000400602,avoid=0x000000000040060E)</span></div><div class="line">print simgr.found[<span class="number">0</span>].solver.eval(argv1,<span class="attr">cast_to=str)</span>  <span class="comment"># 以字符形式打印flag</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;结果为：<br>    <img src="https://i.imgur.com/aewiZD9.png" alt=""></p><h2 id="第三个Demo"><a href="#第三个Demo" class="headerlink" title="第三个Demo"></a>第三个Demo</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这是一个标准输入的例子，但是我的ubuntu运行不起来。<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line">import angr</div><div class="line">import sys</div><div class="line">import claripy</div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding('utf8')</div><div class="line">p = angr.Project('./ppp')           <span class="comment"># 创建项目</span></div><div class="line"><span class="keyword">state</span> = p.factory.entry_state()     <span class="comment"># 描述程序状态</span></div><div class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> xrange(<span class="number">4</span>):                 <span class="comment"># 获取4位标准输入</span></div><div class="line">  k = <span class="keyword">state</span>.posix.files[<span class="number">0</span>].read_from(<span class="number">1</span>)  <span class="comment"># 固定读取标准输入最后一个字节</span></div><div class="line">  <span class="keyword">state</span>.se.add(k&gt;<span class="number">47</span>)            <span class="comment"># 限制输入内容</span></div><div class="line">k = <span class="keyword">state</span>.posix.files[<span class="number">0</span>].read_from(<span class="number">1</span>)     <span class="comment"># 读取最后一位</span></div><div class="line"><span class="keyword">state</span>.se.add(k==<span class="number">10</span>)                 <span class="comment"># k==10，换行符表示结束输入</span></div><div class="line"><span class="keyword">state</span>.posix.files[<span class="number">0</span>].seek(<span class="number">0</span>)        <span class="comment"># 设置读取位置位起始位置</span></div><div class="line"><span class="keyword">state</span>.posix.files[<span class="number">0</span>].length = <span class="number">5</span>     <span class="comment"># 读取5位</span></div><div class="line">print '[*] simulation_manager start...............'</div><div class="line"><span class="comment"># sm = p.factory.simulation_manager(state)</span></div><div class="line">sm = p.factory.simgr(<span class="keyword">state</span>)</div><div class="line">sm.explore(find=<span class="number">0</span>x08048689,avoid=<span class="number">0</span>x0804869E)</div><div class="line">if len(sm.found)&gt;<span class="number">0</span>:      <span class="comment"># 获取到了found</span></div><div class="line">inp = sm.found[<span class="number">0</span>].posix.files[<span class="number">0</span>].all_bytes()   <span class="comment"># 输出</span></div><div class="line">print sm.found[<span class="number">0</span>].solver.eval(inp,cast_to = str)</div><div class="line">print '[*] end angr.....'</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;一般来说，二进制文件有两种分析方法：静态分析、动态分析。&lt;br&gt;
    
    </summary>
    
      <category term="逆向工程" scheme="http://yoursite.com/categories/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>网鼎杯CTF</title>
    <link href="http://yoursite.com/2018/08/21/%E7%BD%91%E9%BC%8E%E6%9D%AFCTF/"/>
    <id>http://yoursite.com/2018/08/21/网鼎杯CTF/</id>
    <published>2018-08-21T06:02:11.000Z</published>
    <updated>2018-08-27T01:45:44.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第一次和博雅他们参加全国性的CTF比赛，学到了很多。算了算了，我就是想凑个前言出来，不编了不编了。<strong>Z3和angr这两个工具要好好学。</strong><br><a id="more"></a></p><h1 id="第一场——青龙之战"><a href="#第一场——青龙之战" class="headerlink" title="第一场——青龙之战"></a>第一场——青龙之战</h1><h2 id="Re题"><a href="#Re题" class="headerlink" title="Re题"></a>Re题</h2><h3 id="beijing"><a href="#beijing" class="headerlink" title="beijing"></a>beijing</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这道题就是在考脑洞的，elf，定位到函数主函数。流程很简单，将全局变量传入sub_8048460中，然后打印。<br>    <img src="https://i.imgur.com/7ewbzDQ.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;查看sub_4048460,流程也很简单，根据传入参数的不同利用switch进行不同的分支处理，每个分支都是异或运算。<br>    <img src="https://i.imgur.com/aupJEjr.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们可以看到在异或的右侧对应的变量是a,g,…..，懒得计算顺序，根据单词拼起来就是flag{amazing_beijing}.</p><h3 id="Advance"><a href="#Advance" class="headerlink" title="Advance"></a>Advance</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;执行程序，依然没有输入，可以看到一些hex数值。可以猜测应该是解密先是的hex数据。<br>     <img src="https://i.imgur.com/zCWu7qp.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先，将hex转化为ASCII编码。得到如下数据<code>K@LKVHr[DXEsLsYI@\AMYIr\EIZQ</code>.<br>     <img src="https://i.imgur.com/pZNtdcJ.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对前面的数交叉引用，发现TLS函数。得到加密逻辑<br>    <img src="https://i.imgur.com/og06XBi.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;编写如下脚本,得到flag：flag{d_with_a_template_phew}<br>    <img src="https://i.imgur.com/DGj8mRg.png" alt=""></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">tmp = <span class="string">'K@LKVHr[DXEsLsYI@\AMYIr\EIZQ'</span></div><div class="line">flag = <span class="string">""</span></div><div class="line"><span class="keyword">for</span> i in range(len(tmp)):</div><div class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</div><div class="line">        flag += <span class="keyword">chr</span>(<span class="keyword">ord</span>(tmp[i])^<span class="number">0x2D</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        flag += <span class="keyword">chr</span>(<span class="keyword">ord</span>(tmp[i])^<span class="number">0x2C</span>)</div><div class="line"><span class="keyword">print</span> flag</div></pre></td></tr></table></figure><h2 id="Misc题"><a href="#Misc题" class="headerlink" title="Misc题"></a>Misc题</h2><h3 id="minified"><a href="#minified" class="headerlink" title="minified"></a>minified</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一看就知道是一道隐写题。利用Stego打开，测试一下不同的通道的图像。可以发现在A0处无正常图片，可以判断是0通道有问题。<br>     <img src="https://i.imgur.com/gId4j2G.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;分别提取0通道的四张图片。这里提取通道是<strong>在主页面提取的，而不是在Analyse处提取</strong>。利用file–&gt; save as保存。<br>     <img src="https://i.imgur.com/ZKnNESV.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后将打开A0.png，然后Analyse–&gt;Image Combiner,在异或显示出flag。<br>    <img src="https://i.imgur.com/6wJ0dRz.png" alt=""></p><h1 id="第二场——白虎之战"><a href="#第二场——白虎之战" class="headerlink" title="第二场——白虎之战"></a>第二场——白虎之战</h1><h2 id="Re题-1"><a href="#Re题-1" class="headerlink" title="Re题"></a>Re题</h2><h3 id="give-a-try"><a href="#give-a-try" class="headerlink" title="give a try"></a>give a try</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PE文件，查壳，查看地址随机化并没有发现异常。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;拖入IDA中，发现主流程函数如下：首先判断字符串长度是否为42，接着利用随机数与输入进行乘积取模运算，最后与特定值进行比较。<br>    <img src="https://i.imgur.com/1VA7Mpq.png" alt=""><br>    <img src="https://i.imgur.com/JseeXDr.png" alt=""><br>    <img src="https://i.imgur.com/C0dJ6YB.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先，我们知道利用srand和rand产生的随机数并不是真正的随机数，只要传递给srand的随机数种子是确定的，所产生的随机数在每次运行时都是确定的，这个叫做<strong>伪随机数。</strong>这就奠定了可以使用爆破的方式求解</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第二点，我们知道dword_40406c处是作为随机数种子传入srand，做交叉引用，发现两处写入操作，判断是使用了<strong>TLS技术</strong>，tls在函数线程执行之前可以获得优先执行的权利，一般用于反调试，也可以用于数据的保护。这里利用CE查的原始数据为：<strong>0x31333359 ^ 3681</strong><br>     <img src="https://i.imgur.com/R3kSvVP.png" alt=""><br>     <img src="https://i.imgur.com/9RhNItW.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后一点是：由于IDA的f5反编译的差距较大，关于这道题利用内联汇编的形式写脚本。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line">unsigned <span class="keyword">int</span> fun(<span class="keyword">int</span> a1,<span class="keyword">int</span> a2)<span class="comment">;</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(void)</div><div class="line">&#123;</div><div class="line">srand(<span class="number">0x31333359</span> ^ <span class="number">3681</span>)<span class="comment">;    //初始化随机数种子</span></div><div class="line"><span class="keyword">int</span> dword_4030B4[<span class="number">42</span>] = &#123;<span class="number">0x63B25AF1</span>,<span class="number">0x0C5659BA5</span>,<span class="number">0x4C7A3C33</span>,<span class="number">0x0E4E4267</span>, <span class="number">0x0B611769B</span>,</div><div class="line"><span class="number">0x3DE6438C</span>, <span class="number">0x84DBA61F</span>,<span class="number">0x0A97497E6</span>, <span class="number">0x650F0FB3</span>, <span class="number">0x84EB507C</span>,</div><div class="line"><span class="number">0x0D38CD24C</span>,<span class="number">0x0E7B912E0</span>, <span class="number">0x7976CD4F</span>, <span class="number">0x84100010</span>, <span class="number">0x7FD66745</span>,</div><div class="line"><span class="number">0x711D4DBF</span>, <span class="number">0x5402A7E5</span>, <span class="number">0x0A3334351</span>, <span class="number">0x1EE41BF8</span>, <span class="number">0x22822EBE</span>,</div><div class="line"><span class="number">0x0DF5CEE48</span>, <span class="number">0x0A8180D59</span>, <span class="number">0x1576DEDC</span>, <span class="number">0x0F0D62B3B</span>, <span class="number">0x32AC1F6E</span>,</div><div class="line"><span class="number">0x9364A640</span>, <span class="number">0x0C282DD35</span>, <span class="number">0x14C5FC2E</span>, <span class="number">0x0A765E438</span>, <span class="number">0x7FCF345A</span>,</div><div class="line"><span class="number">0x59032BAD</span>, <span class="number">0x9A5600BE</span>, <span class="number">0x5F472DC5</span>, <span class="number">0x5DDE0D84</span>, <span class="number">0x8DF94ED5</span>,</div><div class="line"><span class="number">0x0BDF826A6</span>, <span class="number">0x515A737A</span>, <span class="number">0x4248589E</span>, <span class="number">0x38A96C20</span>, <span class="number">0x0CC7F61D9</span>,</div><div class="line"><span class="number">0x2638C417</span>, <span class="number">0x0D9BEB996</span> &#125;<span class="comment">;</span></div><div class="line"><span class="keyword">int</span> rand_table[<span class="number">42</span>] = &#123; <span class="number">0</span> &#125;<span class="comment">;        //初始化随机数表</span></div><div class="line">for (<span class="keyword">int</span> i = <span class="number">0</span><span class="comment">; i &lt; 42; i++)</span></div><div class="line">&#123;</div><div class="line">rand_table[i] = rand()<span class="comment">;        //生成随机数表</span></div><div class="line">printf_s(<span class="string">"%d\n"</span>, rand_table[i])<span class="comment">;</span></div><div class="line">printf_s(<span class="string">"--------\n"</span>)<span class="comment">;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">for (<span class="keyword">int</span> j = <span class="number">0</span><span class="comment">; j &lt; 42; j++)      //遍历次数</span></div><div class="line">&#123;</div><div class="line">for (<span class="keyword">int</span> i = <span class="number">32</span><span class="comment">; i &lt; 128; i++)     //遍历数值</span></div><div class="line">&#123;</div><div class="line">//printf_s(<span class="string">"%d\n"</span>, fun(rand_table[j], i))<span class="comment">;</span></div><div class="line">if (fun(rand_table[j], i) == dword_4030B4[j])</div><div class="line">printf(<span class="string">"%c"</span>, i)<span class="comment">;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">system(<span class="string">"pause"</span>)<span class="comment">;</span></div><div class="line">return <span class="number">0</span><span class="comment">;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">unsigned <span class="keyword">int</span> fun(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</div><div class="line">&#123;</div><div class="line">__asm &#123;</div><div class="line"><span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span>[<span class="built_in">ebp</span> + <span class="number">8</span>]      //第一个参数</div><div class="line"><span class="keyword">movzx</span>   <span class="built_in">ecx</span>, <span class="built_in">byte</span> <span class="built_in">ptr</span>[<span class="built_in">ebp</span> + <span class="number">12</span>]      //第二个参数</div><div class="line"><span class="keyword">mul</span>     <span class="built_in">ecx</span></div><div class="line"><span class="keyword">mov</span>     <span class="built_in">ecx</span>, <span class="number">0FAC96621h</span></div><div class="line"><span class="keyword">push</span>    <span class="built_in">eax</span></div><div class="line"><span class="keyword">xor</span>     <span class="built_in">edx</span>, <span class="built_in">edx</span></div><div class="line"><span class="keyword">div</span>     <span class="built_in">ecx</span></div><div class="line"><span class="keyword">pop</span>     <span class="built_in">eax</span></div><div class="line"><span class="keyword">push</span>    <span class="built_in">edx</span></div><div class="line"><span class="keyword">mul</span>     <span class="built_in">eax</span></div><div class="line"><span class="keyword">div</span>     <span class="built_in">ecx</span></div><div class="line"><span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="built_in">edx</span></div><div class="line"><span class="keyword">mul</span>     <span class="built_in">edx</span></div><div class="line"><span class="keyword">div</span>     <span class="built_in">ecx</span></div><div class="line"><span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="built_in">edx</span></div><div class="line"><span class="keyword">mul</span>     <span class="built_in">edx</span></div><div class="line"><span class="keyword">div</span>     <span class="built_in">ecx</span></div><div class="line"><span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="built_in">edx</span></div><div class="line"><span class="keyword">mul</span>     <span class="built_in">edx</span></div><div class="line"><span class="keyword">div</span>     <span class="built_in">ecx</span></div><div class="line"><span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="built_in">edx</span></div><div class="line"><span class="keyword">mul</span>     <span class="built_in">edx</span></div><div class="line"><span class="keyword">div</span>     <span class="built_in">ecx</span></div><div class="line"><span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="built_in">edx</span></div><div class="line"><span class="keyword">mul</span>     <span class="built_in">edx</span></div><div class="line"><span class="keyword">div</span>     <span class="built_in">ecx</span></div><div class="line"><span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="built_in">edx</span></div><div class="line"><span class="keyword">mul</span>     <span class="built_in">edx</span></div><div class="line"><span class="keyword">div</span>     <span class="built_in">ecx</span></div><div class="line"><span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="built_in">edx</span></div><div class="line"><span class="keyword">mul</span>     <span class="built_in">edx</span></div><div class="line"><span class="keyword">div</span>     <span class="built_in">ecx</span></div><div class="line"><span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="built_in">edx</span></div><div class="line"><span class="keyword">mul</span>     <span class="built_in">edx</span></div><div class="line"><span class="keyword">div</span>     <span class="built_in">ecx</span></div><div class="line"><span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="built_in">edx</span></div><div class="line"><span class="keyword">mul</span>     <span class="built_in">edx</span></div><div class="line"><span class="keyword">div</span>     <span class="built_in">ecx</span></div><div class="line"><span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="built_in">edx</span></div><div class="line"><span class="keyword">mul</span>     <span class="built_in">edx</span></div><div class="line"><span class="keyword">div</span>     <span class="built_in">ecx</span></div><div class="line"><span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="built_in">edx</span></div><div class="line"><span class="keyword">mul</span>     <span class="built_in">edx</span></div><div class="line"><span class="keyword">div</span>     <span class="built_in">ecx</span></div><div class="line"><span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="built_in">edx</span></div><div class="line"><span class="keyword">mul</span>     <span class="built_in">edx</span></div><div class="line"><span class="keyword">div</span>     <span class="built_in">ecx</span></div><div class="line"><span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="built_in">edx</span></div><div class="line"><span class="keyword">mul</span>     <span class="built_in">edx</span></div><div class="line"><span class="keyword">div</span>     <span class="built_in">ecx</span></div><div class="line"><span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="built_in">edx</span></div><div class="line"><span class="keyword">mul</span>     <span class="built_in">edx</span></div><div class="line"><span class="keyword">div</span>     <span class="built_in">ecx</span></div><div class="line"><span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="built_in">edx</span></div><div class="line"><span class="keyword">mul</span>     <span class="built_in">edx</span></div><div class="line"><span class="keyword">div</span>     <span class="built_in">ecx</span></div><div class="line"><span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="built_in">edx</span></div><div class="line"><span class="keyword">pop</span>     <span class="built_in">edx</span></div><div class="line"><span class="keyword">mul</span>     <span class="built_in">edx</span></div><div class="line"><span class="keyword">div</span>     <span class="built_in">ecx</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>, <span class="built_in">edx</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;执行的结果如下：flag{h3r3_th3r3<em>i5</em>@_w1ll-th3r3<em>i5</em>@_w4y}<br>     <img src="https://i.imgur.com/PRaHGlk.png" alt=""></p><h3 id="Martricks"><a href="#Martricks" class="headerlink" title="Martricks"></a>Martricks</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbsp利用IDA，可以看到流程。如图，我们可以发现存在两个提示，一个正确一个错误，输入可以被限制是字符串(根据scanf格式就可以知道了)。既然是字符串，就可以使用angr暴力求解得到flag.<br>     <img src="https://i.imgur.com/8hvcLwH.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbsp成功路径find=0x400A84,失败路径：avoid=0x400A90,利用angr爆破代码如下：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> angr</div><div class="line"></div><div class="line"><span class="keyword">def</span> main():</div><div class="line">    p = angr.<span class="keyword">Project</span>(<span class="string">"martricks"</span>)   <span class="comment">//导入项目</span></div><div class="line">    simgr = p.factory.simulation_manager(p.factory.full_init_state())</div><div class="line">    simgr.explore(<span class="keyword">find</span>=<span class="number">0</span>x400A84, avoid=<span class="number">0</span>x400A90)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> simgr.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>).strip(<span class="string">'\0\n'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line"><span class="keyword">print</span> main()</div></pre></td></tr></table></figure></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="套娃"><a href="#套娃" class="headerlink" title="套娃"></a>套娃</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;直接定位到最后一张图片，利用Stego查看，Alpha通道是白色的，说明可能是LSB隐写，我们利用Data Extract查看一下各个通道。<br>    <img src="https://i.imgur.com/3mhJ4Aa.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为之前在A通道是白色的，所以判断可能是RGB存在LSB隐写的可能性。先是进行如下设置。<br>    <img src="https://i.imgur.com/FS3gHRV.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;没有发现线索，修改一下Bit Plane Order(瞎试)。可以在BGR处发现flag<br>    <img src="https://i.imgur.com/BpYlc5q.png" alt=""></p><h3 id="虚幻"><a href="#虚幻" class="headerlink" title="虚幻"></a>虚幻</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据提示，这是一个汉信码，果然是官方的比赛就是这样任性。科普一下汉信码的图，以后要用到。<br>    <img src="https://i.imgur.com/bdBuJCf.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先题目给的和汉信码差距很大，binwalk(foremost)得到九张图片。按照foremost的命名顺序拼好。<br>    <img src="https://i.imgur.com/Ce4exDV.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在利用Stego在R7处形成黑白图片。<br>    <img src="https://i.imgur.com/f0VlFF8.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;发现和汉信码还是有点差距(这个真的不好想)，对上述图片反色一下，得到<br>    <img src="https://i.imgur.com/o1r8cow.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对比一下正常的汉信码，发现缺少4个角，PPT补上。<br>     <img src="https://i.imgur.com/QJDK0KT.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用<a href="http://www.efittech.com/hxdec.aspx" target="_blank" rel="external">http://www.efittech.com/hxdec.aspx</a>扫一下得到flag。<br>     <img src="https://i.imgur.com/YxB1Yix.png" alt=""></p><h1 id="第三场"><a href="#第三场" class="headerlink" title="第三场"></a>第三场</h1><h2 id="Misc-1"><a href="#Misc-1" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Not-only-base"><a href="#Not-only-base" class="headerlink" title="Not_only_base"></a>Not_only_base</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;打开一看，全是大写字母，等号没在最后，因为提示是base，可以猜到是<strong>base32</strong>，首先必须移位，想到是栅栏。所以得到如下：flag{N0t_0NLy_b4sE32}<br>    <img src="https://i.imgur.com/stfs2FB.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;第一次和博雅他们参加全国性的CTF比赛，学到了很多。算了算了，我就是想凑个前言出来，不编了不编了。&lt;strong&gt;Z3和angr这两个工具要好好学。&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>&lt;格蠹汇编&gt;_第14章_是谁动了我的句柄</title>
    <link href="http://yoursite.com/2018/08/16/%E3%80%8A%E6%A0%BC%E8%A0%B9%E6%B1%87%E7%BC%96%E3%80%8B_%E7%AC%AC14%E7%AB%A0_%E6%98%AF%E8%B0%81%E5%8A%A8%E4%BA%86%E6%88%91%E7%9A%84%E5%8F%A5%E6%9F%84/"/>
    <id>http://yoursite.com/2018/08/16/《格蠹汇编》_第14章_是谁动了我的句柄/</id>
    <published>2018-08-16T09:02:11.000Z</published>
    <updated>2018-08-16T10:30:42.084Z</updated>
    
    <content type="html"><![CDATA[<h2 id="回到异常现场"><a href="#回到异常现场" class="headerlink" title="回到异常现场"></a>回到异常现场</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;拿到一个dump文件，使用k命令进行栈回溯的时候，可能无法正常显示函数名，产生这样的问题的原因是dump文件显示的上下文信息是写入转储文件时的上下文，我们首先<strong>需要想办法切换到发生异常的时候的上下文。</strong><br><a id="more"></a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;windows系统的用户态转储文件专门定义了一种记录异常信息的数据块。称为<strong>异常数据流</strong>，数据结构为MINIDUMP_EXCEPTION_STREAM。使用<code>.ecxr命令</code>可以读取异常数据流，从而回到异常现场。可以看到当前函数为<code>RtlRaiseStatus</code>。这是一个抛出异常的函数</p><h2 id="何人触雷"><a href="#何人触雷" class="headerlink" title="何人触雷"></a>何人触雷</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用<code>kn</code>查看是和调用了上述函数，发现01号栈帧无法识别函数。为什么无法识别呢？？下一节解释，既然我们无法由栈顶到栈底分析，我们反向分析，也就是说<strong>从函数的调用者分析。</strong><br>    <img src="https://i.imgur.com/uqZcgPS.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们知道函数的返回地址一个在函数调用处的下5个字节(call一般长5字节)。也就是说函数的返回地址一定在父函数内部。由此，我们利用函数的返回值，去反向反汇编<strong>向前反汇编出函数的调用处。</strong>利用<code>ub retaddr</code>命令即可完成。</p><h2 id="代码流放"><a href="#代码流放" class="headerlink" title="代码流放"></a>代码流放</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为什么利用kn无法完全识别函数呢？原因在于编译器优化将执行概率高的代码尽可能放在一起，这样可以减少页面置换的发生，而需要移动其他代码才能放置这些高概率发生的代码。这些被移动的代码就是一些异常处理的函数代码，因为他们不经常被使用。优化器移动代码却不移动符号，这样调试器无法识别原本函数。</p><h2 id="事出何因"><a href="#事出何因" class="headerlink" title="事出何因"></a>事出何因</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用<code>uf [funname]</code>可以反汇编出函数所有代码。通过搜索地址的方式，将问题定位到了ZwSetEvent。如果函数返回失败，经过两次跳转，调用RtlRaiseStatus函数。抛出异常。</p><h2 id="那个句柄"><a href="#那个句柄" class="headerlink" title="那个句柄"></a>那个句柄</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;查看参数传递的情况，判断问题所在。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;回到异常现场&quot;&gt;&lt;a href=&quot;#回到异常现场&quot; class=&quot;headerlink&quot; title=&quot;回到异常现场&quot;&gt;&lt;/a&gt;回到异常现场&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;拿到一个dump文件，使用k命令进行栈回溯的时候，可能无法正常显示函数名，产生这样的问题的原因是dump文件显示的上下文信息是写入转储文件时的上下文，我们首先&lt;strong&gt;需要想办法切换到发生异常的时候的上下文。&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="&lt;格蠹汇编&gt;" scheme="http://yoursite.com/categories/%E6%A0%BC%E8%A0%B9%E6%B1%87%E7%BC%96/"/>
    
    
  </entry>
  
  <entry>
    <title>&lt;格蠹汇编&gt;_第16章_探寻唤醒失败的原因</title>
    <link href="http://yoursite.com/2018/08/16/%E3%80%8A%E6%A0%BC%E8%A0%B9%E6%B1%87%E7%BC%96%E3%80%8B_%E7%AC%AC16%E7%AB%A0_%E6%8E%A2%E5%AF%BB%E5%94%A4%E9%86%92%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%8E%9F%E5%9B%A0/"/>
    <id>http://yoursite.com/2018/08/16/《格蠹汇编》_第16章_探寻唤醒失败的原因/</id>
    <published>2018-08-16T09:02:11.000Z</published>
    <updated>2018-08-24T02:31:39.215Z</updated>
    
    <content type="html"><![CDATA[<h2 id="寻找突破口"><a href="#寻找突破口" class="headerlink" title="寻找突破口"></a>寻找突破口</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关于唤醒失败一般存在于内核态，可有两个突破口：</p><ul><li>1.使用<strong>!pcr</strong>查看处理器控制区，了解CPU状态</li><li>2.使用<strong>!locks</strong>寻找可能存在的系统死锁</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过查看当前线程和Idle.exe线程ID不同的处理器，但是该处理器处于用户态，<strong>而挂死一般是处于内核态</strong>，我们换个思路，利用<code>!locks</code>寻找存在的对象死锁。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在执行!locks命令发现线程87474da8线程拥有多个资源</p><h2 id="关键线程"><a href="#关键线程" class="headerlink" title="关键线程"></a>关键线程</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;查看线程信息，切换线程，然后查看栈回溯，发现用于睡眠的函数<code>NtSetSystemPowerState</code>和用于通知设备驱动的程序</p><h2 id="了解驱动"><a href="#了解驱动" class="headerlink" title="了解驱动"></a>了解驱动</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用<code>!drvobj</code>查看驱动的相关信息。然后利用<code>dt _DRIVER_OBJECT XXXXXXX</code>来获取_DRIVER_OBJECT结构的信息。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了了解设备接入方式可以使用<code>!drvstack</code>来描述设备栈的设备对象的地址，驱动名称等信息。</p><h2 id="解析参数"><a href="#解析参数" class="headerlink" title="解析参数"></a>解析参数</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在之前栈回溯中可以发现多个驱动函数被反复调用，但是我们没有驱动的符号信息，只能利用已知函数去推测未知函数的功能</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用已经公开的函数，PoCallDriver来判断，我们知道该函数第一个参数是设备对象，第二个参数是IRP IO请求包（需要调用的驱动程序）利用<code>!devobj</code>查看第一个参数，利用<code>!IRP</code>查看IRP。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;寻找突破口&quot;&gt;&lt;a href=&quot;#寻找突破口&quot; class=&quot;headerlink&quot; title=&quot;寻找突破口&quot;&gt;&lt;/a&gt;寻找突破口&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;关于唤醒
      
    
    </summary>
    
      <category term="&lt;格蠹汇编&gt;" scheme="http://yoursite.com/categories/%E6%A0%BC%E8%A0%B9%E6%B1%87%E7%BC%96/"/>
    
    
  </entry>
  
  <entry>
    <title>&lt;格蠹汇编&gt;_第13章_SDK安装程序卡壳之谜</title>
    <link href="http://yoursite.com/2018/08/16/%E3%80%8A%E6%A0%BC%E8%A0%B9%E6%B1%87%E7%BC%96%E3%80%8B_%E7%AC%AC13%E7%AB%A0_SDK%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F%E5%8D%A1%E5%A3%B3%E4%B9%8B%E8%B0%9C/"/>
    <id>http://yoursite.com/2018/08/16/《格蠹汇编》_第13章_SDK安装程序卡壳之谜/</id>
    <published>2018-08-16T07:02:11.000Z</published>
    <updated>2018-08-16T10:30:36.741Z</updated>
    
    <content type="html"><![CDATA[<h2 id="上调试器"><a href="#上调试器" class="headerlink" title="上调试器"></a>上调试器</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用<code>~*e ？ @$tid;!gle</code>命令，去显示进程中每个线程的TID和LastError值。其中<code>~*</code>查看所有线程，<code>e</code>选项是支持多条命令，不然只是显示最后一条。<code>@$tid</code>显示tid，<code>!gle</code>:显示LastError。<br><a id="more"></a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LastErrorValue，最后一次错误码，是一个很小的数，LastStatusValue，最后一次系统状态码，是一个很大的数。一般的，调用系统服务失败，会把状态码传递给RtlNtStatusToError函数，在函数内部修改LastStatusValue，然后将LastStatusValue转化为LastErrorValue。</p><h2 id="细看14d8线程"><a href="#细看14d8线程" class="headerlink" title="细看14d8线程"></a>细看14d8线程</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在windbg，切换线程使用~ 线程序号 s。如果需要使用TID切换线程，可以使用<code>~~ TID s</code>。</p><h2 id="细看现场"><a href="#细看现场" class="headerlink" title="细看现场"></a>细看现场</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于某些.NET托管代码，windbg由于没有私有符号，所以在栈回溯的时候没有办法显示名称，使用<strong>SOS扩展模块</strong>可以解析托管代码。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用<code>.loadby sos mscorwks</code>加载模块，使用<code>!clrstack</code>回溯栈，发现WinIoError函数，说明出现异常，产生异常的是该函数的下面一个函数。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用<code>!thread</code>命令查看线程信息，可以发现存在一次异常信息。<strong>异常名称的后面显示的是异常对象的地址。</strong>利用<code>!do [异常对象地址]</code>可以查看异常的详细信息。或者使用<code>!Printexception</code>打印所有异常。</p><h2 id="追本溯源"><a href="#追本溯源" class="headerlink" title="追本溯源"></a>追本溯源</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;判断某个函数的父函数，可以利用函数的返回地址是否在父函数内部来判断。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;上调试器&quot;&gt;&lt;a href=&quot;#上调试器&quot; class=&quot;headerlink&quot; title=&quot;上调试器&quot;&gt;&lt;/a&gt;上调试器&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;利用&lt;code&gt;~*e ？ @$tid;!gle&lt;/code&gt;命令，去显示进程中每个线程的TID和LastError值。其中&lt;code&gt;~*&lt;/code&gt;查看所有线程，&lt;code&gt;e&lt;/code&gt;选项是支持多条命令，不然只是显示最后一条。&lt;code&gt;@$tid&lt;/code&gt;显示tid，&lt;code&gt;!gle&lt;/code&gt;:显示LastError。&lt;br&gt;
    
    </summary>
    
      <category term="&lt;格蠹汇编&gt;" scheme="http://yoursite.com/categories/%E6%A0%BC%E8%A0%B9%E6%B1%87%E7%BC%96/"/>
    
    
  </entry>
  
  <entry>
    <title>BugKu_CTF</title>
    <link href="http://yoursite.com/2018/08/14/BugKu_CTF/"/>
    <id>http://yoursite.com/2018/08/14/BugKu_CTF/</id>
    <published>2018-08-14T07:02:11.000Z</published>
    <updated>2018-08-31T06:26:26.438Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RE题"><a href="#RE题" class="headerlink" title="RE题"></a>RE题</h1><h2 id="Easy-vb"><a href="#Easy-vb" class="headerlink" title="Easy_vb"></a>Easy_vb</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OD中查看字符串：得MCTF{_N3t_Rev_1s<em>E4ay</em>}<br>    <img src="https://i.imgur.com/NMumWx8.png" alt=""><br><a id="more"></a></p><h2 id="Re-1"><a href="#Re-1" class="headerlink" title="Re_1"></a>Re_1</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;查壳，检查地址随机化，拖入IDA中唯一的验证是一个比较字符串的操作，利用OD动态调试得到flag：<br>    <img src="https://i.imgur.com/Tr3T2mz.png" alt=""><br>    <img src="https://i.imgur.com/bGs02Ka.png" alt=""></p><h2 id="游戏过关"><a href="#游戏过关" class="headerlink" title="游戏过关"></a>游戏过关</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这种题就是给你dump用的，根据流程在下图中，标记为0的nop掉，标记为1的jmp。就可以了。<br>    <img src="https://i.imgur.com/z9WDolU.png" alt=""><br>    <img src="https://i.imgur.com/XScdgu1.png" alt=""><br>    <img src="https://i.imgur.com/A17mFWl.png" alt=""><br>    <img src="https://i.imgur.com/OewRG90.png" alt=""><br>    <img src="https://i.imgur.com/tARfNHd.png" alt=""><br>    <img src="https://i.imgur.com/icC2gDA.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;也可以直接修改跳转地址。再次不做赘述。</p><h2 id="逆向入门"><a href="#逆向入门" class="headerlink" title="逆向入门"></a>逆向入门</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;吐槽一句，这和逆向好像并没有关系，就是在<code>&lt;img src=&quot;&quot;/&gt;</code>引号中间填写原内容。还以为文件被加密了呢。<br>     <img src="https://i.imgur.com/4AKLJ58.png" alt=""></p><h2 id="Love"><a href="#Love" class="headerlink" title="Love"></a>Love</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;准备工作不赘述，拖入IDA 观察流程，先接受Inpuut，然后经过Base64加密，最后经过位移变换(在原基础上加上其在数组中的索引的值)，最后和<code>e3nifIH9b_C@n@dH</code>比较。<br>     <img src="https://i.imgur.com/EbHfbtl.png" alt=""><br>     <img src="https://i.imgur.com/lYsFfYd.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;解密如下：e3nifIH9b_C@n@dH–&gt;e2lfbDB2ZV95b3V9–&gt;{i_l0ve_you}</p><h2 id="Mountain-climbing"><a href="#Mountain-climbing" class="headerlink" title="Mountain climbing"></a>Mountain climbing</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;准备工作不做赘述，观察程序流程，首先，程序先是利用伪随机数创建了二维数组。然后接收Input，检查Input长度等于19，加密Input。然后在刚刚生成的二维随机数组里面，找出一队和最大的数值。<br>    <img src="https://i.imgur.com/JyknrwM.png" alt=""><br>    <img src="https://i.imgur.com/6qvmK6I.png" alt=""><br>    <img src="https://i.imgur.com/jNEiEKf.png" alt=""><br>    <img src="https://i.imgur.com/2c0NkKN.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用srand和rand，产生的都是伪随机数，我们在dword_423D78 = dword_41A138[101]下断，可以得到整个随机数数组。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">[<span class="number">77</span>],</div><div class="line">[<span class="number">5628</span>, <span class="number">6232</span>],</div><div class="line">[<span class="number">29052</span>,<span class="number">1558</span>, <span class="number">26150</span>],</div><div class="line">[<span class="number">12947</span>,<span class="number">29926</span>,<span class="number">11981</span>,<span class="number">22371</span>],</div><div class="line">[<span class="number">4078</span>, <span class="number">28629</span>,<span class="number">4665</span>, <span class="number">2229</span>, <span class="number">24699</span>],</div><div class="line">[<span class="number">27370</span>,<span class="number">3081</span>, <span class="number">18012</span>,<span class="number">24965</span>,<span class="number">2064</span>, <span class="number">26890</span>],</div><div class="line">[<span class="number">21054</span>,<span class="number">5225</span>, <span class="number">11777</span>,<span class="number">29853</span>,<span class="number">2956</span>, <span class="number">22439</span>,<span class="number">3341</span>],</div><div class="line">[<span class="number">31337</span>,<span class="number">14755</span>,<span class="number">5689</span>, <span class="number">24855</span>,<span class="number">4173</span>, <span class="number">32304</span>,<span class="number">292</span>,  <span class="number">5344</span>],</div><div class="line">[<span class="number">15512</span>,<span class="number">12952</span>,<span class="number">1868</span>, <span class="number">10888</span>,<span class="number">19581</span>,<span class="number">13463</span>,<span class="number">32652</span>,<span class="number">3409</span>, <span class="number">28353</span>],</div><div class="line">[<span class="number">26151</span>,<span class="number">14598</span>,<span class="number">12455</span>,<span class="number">26295</span>,<span class="number">25763</span>,<span class="number">26040</span>,<span class="number">8285</span>, <span class="number">27502</span>,<span class="number">15148</span>,<span class="number">4945</span>],</div><div class="line">[<span class="number">26170</span>,<span class="number">1833</span>, <span class="number">5196</span>, <span class="number">9794</span>, <span class="number">26804</span>,<span class="number">2831</span>, <span class="number">11993</span>,<span class="number">2839</span>, <span class="number">9979</span>, <span class="number">27428</span>,<span class="number">6684</span>],</div><div class="line">[<span class="number">4616</span>, <span class="number">30265</span>,<span class="number">5752</span>, <span class="number">32051</span>,<span class="number">10443</span>,<span class="number">9240</span>, <span class="number">8095</span>, <span class="number">28084</span>,<span class="number">26285</span>,<span class="number">8838</span>, <span class="number">18784</span>,<span class="number">6547</span>],</div><div class="line">[<span class="number">7905</span>, <span class="number">8373</span>, <span class="number">19377</span>,<span class="number">18502</span>,<span class="number">27928</span>,<span class="number">13669</span>,<span class="number">25828</span>,<span class="number">30502</span>,<span class="number">28754</span>,<span class="number">32357</span>,<span class="number">2843</span>, <span class="number">5401</span>, <span class="number">10227</span>],</div><div class="line">[<span class="number">22871</span>,<span class="number">20993</span>,<span class="number">8558</span>, <span class="number">10009</span>,<span class="number">6581</span>, <span class="number">22716</span>,<span class="number">12808</span>,<span class="number">4653</span>, <span class="number">24593</span>,<span class="number">21533</span>,<span class="number">9407</span>, <span class="number">6840</span>, <span class="number">30369</span>,<span class="number">2330</span>],</div><div class="line">[<span class="number">3</span>,    <span class="number">28024</span>,<span class="number">22266</span>,<span class="number">19327</span>,<span class="number">18114</span>,<span class="number">18100</span>,<span class="number">15644</span>,<span class="number">21728</span>,<span class="number">17292</span>,<span class="number">8396</span>, <span class="number">27567</span>,<span class="number">2002</span>, <span class="number">3830</span>, <span class="number">12564</span>,<span class="number">1420</span>],</div><div class="line">[<span class="number">29531</span>,<span class="number">21820</span>,<span class="number">9954</span>, <span class="number">8319</span>, <span class="number">10918</span>,<span class="number">7978</span>, <span class="number">24806</span>,<span class="number">30027</span>,<span class="number">17659</span>,<span class="number">8764</span>, <span class="number">3258</span>, <span class="number">20719</span>,<span class="number">6639</span>, <span class="number">23556</span>,<span class="number">25786</span>,<span class="number">11048</span>],</div><div class="line">[<span class="number">3544</span>, <span class="number">31948</span>,<span class="number">22</span>,   <span class="number">1591</span>, <span class="number">644</span>,  <span class="number">25981</span>,<span class="number">26918</span>,<span class="number">31716</span>,<span class="number">16427</span>,<span class="number">15551</span>,<span class="number">28157</span>,<span class="number">7107</span>, <span class="number">27297</span>,<span class="number">24418</span>,<span class="number">24384</span>,<span class="number">32438</span>,<span class="number">22224</span>],</div><div class="line">[<span class="number">12285</span>,<span class="number">12601</span>,<span class="number">13235</span>,<span class="number">21606</span>,<span class="number">2516</span>, <span class="number">13095</span>,<span class="number">27080</span>,<span class="number">16331</span>,<span class="number">23295</span>,<span class="number">20696</span>,<span class="number">31580</span>,<span class="number">28758</span>,<span class="number">10697</span>,<span class="number">4730</span>, <span class="number">16055</span>,<span class="number">22208</span>,<span class="number">2391</span>, <span class="number">20143</span>],</div><div class="line">[<span class="number">16325</span>,<span class="number">24537</span>,<span class="number">16778</span>,<span class="number">17119</span>,<span class="number">18198</span>,<span class="number">28537</span>,<span class="number">11813</span>,<span class="number">1490</span>, <span class="number">21034</span>,<span class="number">1978</span>, <span class="number">6451</span>, <span class="number">2174</span>, <span class="number">24812</span>,<span class="number">28772</span>,<span class="number">5283</span>, <span class="number">6429</span>, <span class="number">15484</span>,<span class="number">29353</span>,<span class="number">5942</span>],</div><div class="line">[<span class="number">7299</span>, <span class="number">6961</span>, <span class="number">32019</span>,<span class="number">24731</span>,<span class="number">29103</span>,<span class="number">17887</span>,<span class="number">17338</span>,<span class="number">26840</span>,<span class="number">13216</span>,<span class="number">8789</span>, <span class="number">12474</span>,<span class="number">24299</span>,<span class="number">19818</span>,<span class="number">18218</span>,<span class="number">14564</span>,<span class="number">31409</span>,<span class="number">5256</span>, <span class="number">31930</span>,<span class="number">26804</span>,<span class="number">9736</span>]</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后从中找和最大的，哈哈，广度优先搜索。可是我不会啊！！！接下来讲讲思路吧。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;假设得到了xxxxx是我们的flag，然后要带到加密函数里面，其实这个加密函数是可以不需要了解算法的。反正我当初就没了解算法，带入两组测试码:RVRVRVRVRVRVRVRVRVR LHLHLHLHLHLHLHLHLHL,<strong>可以知道V在偶数位上可以转化为R，L在奇数位上可以转化为H。</strong></p><h2 id="Take-the-maze"><a href="#Take-the-maze" class="headerlink" title="Take the maze"></a>Take the maze</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先查壳，发现是VC，然后检查地址随机化，存在修改字节码即可。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;拖入IDA中，浏览一下程序的主体流程：如下，首先接收输入，然后判断输入的长度，字符串长度必须要为24.接下来，对字符串的第16位与1进行异或，然后加密Input。加密方法暂时不做分析，我们往下看，验证加密后的Input的格式为数字<code>0-9,a-f</code>。最后调用<code>check函数</code>做最后一遍约束。然后打印png。<br>    <img src="https://i.imgur.com/obezW0p.png" alt=""><br>    <img src="https://i.imgur.com/4rKFuhw.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据题目maze，我们知道这是一道迷宫问题。首先查看check的信息。首先将input的奇数位存入v7，然后利用switch，分派给v11，其实我们可以发现v11作为数组byte_541168的索引，我们还发现byte_541168的数值又被swich分派出去了，考虑这是一个maze问题，又因为switch分支有四个，可以推测这四个函数是关于控制移动方向的函数。<br>     <img src="https://i.imgur.com/axNVUZ1.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接下来我们来验证猜测是否正确。在循环的循环增量可以看到迷宫的列数为26，方向是向下。if判断可以看出来，移动的范围&lt;=10。如果需要移动需要满足3个条件。最重要的是<code>dword_540548[1]^dword_540068[i]==0</code>。<br>     <img src="https://i.imgur.com/Kdnz6Ha.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;结合控制四个方向的函数，可以知道：迷宫范围是26*x(x暂时未知)。每步移动的范围是：上下：1-10，左右：1-24。<br>    <img src="https://i.imgur.com/KW4Bppp.png" alt=""><br>    <img src="https://i.imgur.com/4bmRMPy.png" alt=""><br>    <img src="https://i.imgur.com/1uVzuEs.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据上述分析，我们知道四个函数表示迷宫中四个方向的路线图，只需要满足上述三个条件即可移动，到这里需要写个IDC脚本，来dump我们需要知道的路径。<strong>好好学IDC，感觉这玩意很厉害</strong><br>    <img src="https://i.imgur.com/MjjDiIr.png" alt=""><br>    <img src="https://i.imgur.com/qiTACde.png" alt=""><br>    <img src="https://i.imgur.com/wZWhZMH.png" alt=""><br>    <img src="https://i.imgur.com/mjueQL1.png" alt=""><br>    <img src="https://i.imgur.com/0MKIaRI.png" alt=""><br>    <img src="https://i.imgur.com/8z3M9Ws.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接下来确定迷宫出口，我们知道迷宫宽26，311=11X26+25，<strong>也就说是从迷宫左上角到右下角</strong><br>    <img src="https://i.imgur.com/l8aH3KQ.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据四个方向的路径，我们结合迷宫出入口，画出路线图。<br>    <img src="https://i.imgur.com/7EB5gA3.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;结合1之前提到的，方向：0:下 2:左  3:右  4:上。移动范围：56789abcdef:表示每个方向重复的次数0123456789。得到<code>06360836063b0839073e0639</code>。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;考虑到输入之后存在一个加密函数，所以，刚刚我们得到的并不是flag。我们输入伪码<code>0123456789ABCDEFGabcdefg</code>，经过Encode函数。加密之后<code>0123456789</code>得到的是<code>0000000000</code>，为什么会这样，思考一下，为啥两个数运算之后为0，答案是在两个相同的数(字符)异或后得0，所以加密方法是<code>^auto(i)[0-22]</code>。<br>     <img src="https://i.imgur.com/Gu5cOw4.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;写出脚本，如下：得到flag：<code>07154=518?9i&lt;5=6!&amp;!v$#%.</code><br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> main(<span class="keyword">void</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">char</span> <span class="keyword">str</span>[]=<span class="string">"06360836063b0839073e0639"</span>;</div><div class="line"><span class="keyword">str</span>[<span class="number">16</span>]^=<span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;strlen(<span class="keyword">str</span>);i++)</div><div class="line"><span class="keyword">str</span>[i]^=i;</div><div class="line">puts(<span class="keyword">str</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;输入刚刚得到input，程序打印出来一个二维码，扫扫得到：(反正就是提示你，在flag后面加上“Docupa”)，最后得到flag：07154=518?9i&lt;5=6!&amp;!v$#%.Docupa</p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;签到题，关注一下。</p><h2 id="这是一张单纯的照片"><a href="#这是一张单纯的照片" class="headerlink" title="这是一张单纯的照片"></a>这是一张单纯的照片</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用winhex打开，查看十六进制数据即可。</p><h2 id="隐写"><a href="#隐写" class="headerlink" title="隐写"></a>隐写</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用Stego查看隐写，发现并没有。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用winhex查看，参照博客<a href="https://blog.mythsman.com/2015/12/08/1/" target="_blank" rel="external">https://blog.mythsman.com/2015/12/08/1/</a>可以发现在图片高度上可以做文章。修改第二行第六列数据为06。<br>    <img src="https://i.imgur.com/PQiUz0q.png" alt=""></p><h2 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; telnet基于tcp协议。所以追踪tcp流，在命令行输入<code>tcp contains &quot;flag&quot;</code>,得到。<br>    <img src="https://i.imgur.com/P7ZyvLK.png" alt=""></p><h2 id="眼见非实"><a href="#眼见非实" class="headerlink" title="眼见非实"></a>眼见非实</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 根据题目名字就知道是一个文件隐写类的，利用binwalk -e选项。最后在document.xml得到flag。<br>    <img src="https://i.imgur.com/cSMQfzU.png" alt=""></p><h2 id="又是一张图片，还单纯么"><a href="#又是一张图片，还单纯么" class="headerlink" title="又是一张图片，还单纯么"></a>又是一张图片，还单纯么</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;隐写，<code>binwalk</code>发现多个图片文件，但是解压不出来，利用<code>foremost</code>解压得到第2张图片。<br>    <img src="https://i.imgur.com/SL8Ngsy.png" alt=""></p><h2 id="猜"><a href="#猜" class="headerlink" title="猜"></a>猜</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;社工，百度识图了解一下</p><h2 id="宽带信息泄露"><a href="#宽带信息泄露" class="headerlink" title="宽带信息泄露"></a>宽带信息泄露</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bin文件，没有很好的解决方法，利用工具<strong>routerpassview</strong>打开bin文件，因为flag内容是用户名，所以搜索username即可。得到：<br>     <img src="https://i.imgur.com/frAPHKb.png" alt=""></p><h2 id="隐写2"><a href="#隐写2" class="headerlink" title="隐写2"></a>隐写2</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上Stego查看没有发现什么异常，利用binwalk -e，得到一个压缩包，和一个tips<br>    <img src="https://i.imgur.com/P34mCls.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;提示说密码是三个数，可以暴力，利用azpr暴力得到密码为781。发现还是一张图片</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Hex打开，发现base64加密。解密得到flag:flag{y0u Are a h@cker!}<br>    <img src="https://i.imgur.com/mZDvqMO.png" alt=""></p><h2 id="多种解决方法"><a href="#多种解决方法" class="headerlink" title="多种解决方法"></a>多种解决方法</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;和Re题的逆向入门相同。</p><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用<code>tar -xzf</code>解压，再利用cat命令查看。<br>    <img src="https://i.imgur.com/1KWn7hC.png" alt=""></p><h2 id="中国菜刀"><a href="#中国菜刀" class="headerlink" title="中国菜刀"></a>中国菜刀</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用wireshark查看流量包，定位到tcp流。发现存在一个flag压缩包。<br>    <img src="https://i.imgur.com/qvSaHjY.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是需要注意的是<strong>这个只是压缩包的路径，而不是压缩包的内容</strong>如果要看内容的话应该找对应的文件头。最后利用binwalk -e得到压缩包和里面的flag。</p><h2 id="那么多数据包"><a href="#那么多数据包" class="headerlink" title="那么多数据包"></a>那么多数据包</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其实，这道题我也没思路，binwalk啥的都用了，没有好的发现，最后我先使用strings获取一下字符串看看有啥突破没，得到一个base64编码，解码即可。得到看到流量里面已经get到了网站主机的shell了。<br>     <img src="https://i.imgur.com/LRWhJ0y.png" alt=""></p><h2 id="隐写3"><a href="#隐写3" class="headerlink" title="隐写3"></a>隐写3</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用Stego和binwalk没有发现什么问题，hex打开，发现在Y列上的数值为01，这是不现实的。修改为05保存查看<br>    <img src="https://i.imgur.com/ZMWCsNn.png" alt=""></p><h2 id="做个游戏"><a href="#做个游戏" class="headerlink" title="做个游戏"></a>做个游戏</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用Java Decompiler反编译，因为java代码反汇编的代码可读性很强，直接看即可，然后看到flag，发现是个base64，解密即可。<br>     <img src="https://i.imgur.com/2fdavLX.png" alt=""></p><h2 id="想蹭网先解开密码"><a href="#想蹭网先解开密码" class="headerlink" title="想蹭网先解开密码"></a>想蹭网先解开密码</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般的如果给了数据包，就是相当于给了wifi密码，根据提示，我们首先利用<code>crunch</code>生成字典，关于crunch的使用方法见<strong><a href="http://netsecurity.51cto.com/art/201706/541638.htm" target="_blank" rel="external">http://netsecurity.51cto.com/art/201706/541638.htm</a></strong><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">crunch <span class="number">11</span> <span class="number">11</span> -t <span class="number">1391040</span>%%%% -o zidian.txt</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后利用aircrack-ng去爆破密码，关于aircrack的用法如下：<a href="http://netsecurity.51cto.com/art/201105/264844.htm" target="_blank" rel="external">http://netsecurity.51cto.com/art/201105/264844.htm</a><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">aircrack-ng</span> <span class="selector-tag">wifi</span><span class="selector-class">.cap</span> <span class="selector-tag">-w</span> <span class="selector-tag">zidian</span><span class="selector-class">.txt</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aiircrack-ng 提示存在爆破的对象，选择3即可自动爆破得到flag。<br>    <img src="https://i.imgur.com/Hmn55iA.png" alt=""><br>    <img src="https://i.imgur.com/8dh9aLQ.png" alt=""></p><h2 id="linux2"><a href="#linux2" class="headerlink" title="linux2"></a>linux2</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据提示知道这是考察linux命令的，利用cat查看，发现KEY，但是本人眼戳，没定位到，利用输出重定位<code>cat linux2 &gt; 1.txt</code>得到数据。然后搜索即可。<br>    <img src="https://i.imgur.com/GFmZ1dw.png" alt=""></p><h2 id="细心的大象"><a href="#细心的大象" class="headerlink" title="细心的大象"></a>细心的大象</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这道题真的要求细心啊，binwalk提取出rar，发现加密。没有特殊提示不要爆破。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;密码才能够原图中找，查看图片详细信息得到一段base64编码，解密，带入压岁包得到以前做的题，修改数据即可。<br>     <img src="https://i.imgur.com/w29gymy.png" alt=""></p><h2 id="账号被盗了"><a href="#账号被盗了" class="headerlink" title="账号被盗了"></a>账号被盗了</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一开始就是考web，利用burp截获数据包，修改cookie，右键send to repeater 然后在repeater中修改为ture，最后go就可以得到<br>    <img src="https://i.imgur.com/lNKUEp9.png" alt=""><br>    <img src="https://i.imgur.com/RiKKWfv.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后得到一个CT刷枪的程序，一看就是盗号木马，我们在本地开启监控，目的是迅速定位目的IP地址。然后用wireshark获取数据流量包。如下：<br>    <img src="https://i.imgur.com/4RY6B4O.png" alt=""><br>    <img src="https://i.imgur.com/WbpQRPd.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;发现是base64编码，经过解码得到163邮箱的用户名和密码，登录163邮箱得到flag。<br>    <img src="https://i.imgur.com/yBFtBZY.png" alt=""></p><h2 id="流量分析1"><a href="#流量分析1" class="headerlink" title="流量分析1"></a>流量分析1</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;常规方法不适用，我们在第一个TCP包中，追踪TCP流发现：这是一些urlcoode编码<br>    <img src="https://i.imgur.com/slc7Mw9.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在线利用urlcoode解码得到一个b站用户的空间，<br>    <img src="https://i.imgur.com/jXWPj5l.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;发现用户在个性签名处存在base64编码，解base64得到：<br>    <img src="https://i.imgur.com/cAxwlou.png" alt=""></p><h2 id="猫片"><a href="#猫片" class="headerlink" title="猫片"></a>猫片</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这道题考察了众多知识点，有Lsb隐写，NTFS隐写，Re等知识点。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先拖到Stego里面查看，发现LSB隐写，因为A通道为白色，隐写存在于RBG通道中。如图下设置，发现在文件开头存在png，然后save bin。<br>    <img src="http://oxnvtxe03.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20180831112612.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;拖到binwalk 下跑一下发现存在文件隐写，foremost提取出来得到一半的二维码。修改文件第二行第六列大小。得到全部二维码，但是这个二维码需要反转一下颜色才行<br>    <img src="http://oxnvtxe03.bkt.clouddn.com/00000000%5B%E6%9C%AA%E5%8F%8D%E8%BD%AC%5D.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;扫扫得到一个flag.rar，打开得到提示flag不在这里，tips提示是NTFS隐写，利用工具ntfsstreamseditor得到一个pyc文件，<strong>但是这里有一个坑，只能用winrar解压缩，然后利用上述工具扫描隐藏的NTFS数据流文件，</strong>下面就是Re题了</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用在线解pyc的网站，得到py文件，发现流程特别简单，写出脚本即可,得到flag:flag{Y@e_Cl3veR_C1Ever!}<br>    <img src="http://oxnvtxe03.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20180831142419.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span><span class="params">()</span>:</span></div><div class="line">    flag = <span class="string">''</span></div><div class="line">    ciphertext = [<span class="string">'96'</span>,<span class="string">'65'</span>,<span class="string">'93'</span>,<span class="string">'123'</span>,<span class="string">'91'</span>,<span class="string">'97'</span>,<span class="string">'22'</span>,<span class="string">'93'</span>,<span class="string">'70'</span>,<span class="string">'102'</span>,<span class="string">'94'</span>,<span class="string">'132'</span>,<span class="string">'46'</span>,<span class="string">'112'</span>,<span class="string">'64'</span>,<span class="string">'97'</span>,<span class="string">'88'</span>,<span class="string">'80'</span>,<span class="string">'82'</span>,<span class="string">'137'</span>,<span class="string">'90'</span>,<span class="string">'109'</span>,<span class="string">'99'</span>,<span class="string">'112'</span>]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ciphertext)):</div><div class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</div><div class="line">            s = ord(s) - <span class="number">10</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            s = ord(s) + <span class="number">10</span></div><div class="line">s=chr(i^s)</div><div class="line">flag+=s</div><div class="line">print(flag)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;RE题&quot;&gt;&lt;a href=&quot;#RE题&quot; class=&quot;headerlink&quot; title=&quot;RE题&quot;&gt;&lt;/a&gt;RE题&lt;/h1&gt;&lt;h2 id=&quot;Easy-vb&quot;&gt;&lt;a href=&quot;#Easy-vb&quot; class=&quot;headerlink&quot; title=&quot;Easy_vb&quot;&gt;&lt;/a&gt;Easy_vb&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;OD中查看字符串：得MCTF{_N3t_Rev_1s&lt;em&gt;E4ay&lt;/em&gt;}&lt;br&gt;    &lt;img src=&quot;https://i.imgur.com/NMumWx8.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>&lt;格蠹汇编&gt;_第十章_转储分析双误谜团</title>
    <link href="http://yoursite.com/2018/08/13/%E3%80%8A%E6%A0%BC%E8%A0%B9%E6%B1%87%E7%BC%96%E3%80%8B_%E7%AC%AC10%E7%AB%A0_%E8%BD%AC%E5%82%A8%E5%88%86%E6%9E%90%E5%8F%8C%E8%AF%AF%E8%B0%9C%E5%9B%A2/"/>
    <id>http://yoursite.com/2018/08/13/《格蠹汇编》_第10章_转储分析双误谜团/</id>
    <published>2018-08-13T07:02:11.000Z</published>
    <updated>2018-08-16T10:30:38.346Z</updated>
    
    <content type="html"><![CDATA[<h2 id="何谓双误"><a href="#何谓双误" class="headerlink" title="何谓双误"></a>何谓双误</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;双误就是CPU是报告一个比较严重的异常后，在异常处理过程中，又发生了一个严重的异常(CPU无法处理)。<br><a id="more"></a></p><h2 id="蛛丝马迹"><a href="#蛛丝马迹" class="headerlink" title="蛛丝马迹"></a>蛛丝马迹</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用<code>!process</code>查看当前进程的信息，其中有一项为<code>DirBase(页目录基地址)</code>。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用<code>r CR3</code>命令来查看CR3寄存器内容，CR寄存器一共存在四个：CR0-CR3。保存着全局性和任务无关性。其中CR3保存的内容是进程的<strong>页目录物理地址</strong>。理论上CR3的值和DirBase是一致的，在切换任务时，CR3寄存器的内容随之改变。</p><h2 id="初现端倪"><a href="#初现端倪" class="headerlink" title="初现端倪"></a>初现端倪</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们在接到警告的时候，发现CR3寄存器的值和通过<code>!process</code>查看的DirBase的值不一样，在理论上这是不应该发生的。但是怎么就发生了呢？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在发生异常之后，CPU在内部，使用硬件相关的线程切换技术，切换CR3寄存器，但是系统却没有来得及及时更新已经发生改变的页目录基地址。造成CR3和DirBase数值不同。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在CPU控制区(FS指向的段)，保存着每个CPU的当前线程结构。在那个线程结构中，保存的是所属进程的进程信息。利用如下方法获取当前进程信息<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">fs</span>:[<span class="number">00000124H</span>]</div><div class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">eax</span>+<span class="number">1E0H</span>]</div></pre></td></tr></table></figure></p><h2 id="时光倒流"><a href="#时光倒流" class="headerlink" title="时光倒流"></a>时光倒流</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;任务门,就是登记在IDT表中的一种特殊地址。CPU可以根据这个门所指向的任务状态段（TSS）来切换指定的任务线程。例如IDT中的8号表项处的任务门来切换处理双误的新线程。利用<code>!pcr命令</code>得到当前线程的TSS，观察其内容。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Backlink成员是前一个任务的段选择子。利用<code>.tts [序号]</code>可以切换到前一个线程了。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">ntdll!_KTSS</div><div class="line">   +<span class="number">0x000</span> Backlink         : <span class="number">0xc45</span>                 &lt;---- 为前一个任务的TSS段选择子</div><div class="line">   +<span class="number">0x002</span> Reserved0        : <span class="number">0x4d8a</span></div><div class="line">   +<span class="number">0x004</span> Esp0             : <span class="number">0xf649bde0</span>            &lt;---- <span class="number">0</span> 级的 <span class="built_in">Esp</span> 值，这指向一个 KTRAP_FRAME 结构 V86Es 成员</div><div class="line">   +<span class="number">0x008</span> Ss0              : <span class="number">0x10</span></div><div class="line">   +<span class="number">0x00a</span> Reserved1        : <span class="number">0xb70f</span></div><div class="line">   +<span class="number">0x00c</span> NotUsed1         : [<span class="number">4</span>] <span class="number">0x5031ff00</span></div><div class="line">   +<span class="number">0x01c</span> <span class="built_in">CR3</span>              : <span class="number">0x8b55ff8b</span></div><div class="line">   +<span class="number">0x020</span> <span class="built_in">Eip</span>              : <span class="number">0xc75ffec</span></div><div class="line">   +<span class="number">0x024</span> EFlags           : <span class="number">0xe80875ff</span></div><div class="line">   +<span class="number">0x028</span> <span class="built_in">Eax</span>              : <span class="number">0xfffffbdd</span></div><div class="line">   +<span class="number">0x02c</span> <span class="built_in">Ecx</span>              : <span class="number">0x1b75c084</span></div><div class="line">   +<span class="number">0x030</span> <span class="built_in">Edx</span>              : <span class="number">0x8b184d8b</span></div><div class="line">   +<span class="number">0x034</span> <span class="built_in">Ebx</span>              : <span class="number">0x7d8b57d1</span></div><div class="line">   +<span class="number">0x038</span> <span class="built_in">Esp</span>              : <span class="number">0x2e9c110</span></div><div class="line">   +<span class="number">0x03c</span> <span class="built_in">Ebp</span>              : <span class="number">0xf3ffc883</span></div><div class="line">   +<span class="number">0x040</span> <span class="built_in">Esi</span>              : <span class="number">0x83ca8bab</span></div><div class="line">   +<span class="number">0x044</span> <span class="built_in">Edi</span>              : <span class="number">0xaaf303e1</span></div><div class="line">   +<span class="number">0x048</span> <span class="built_in">Es</span>               : <span class="number">0xeb5f</span></div><div class="line">   +<span class="number">0x04a</span> Reserved2        : <span class="number">0x6819</span></div><div class="line">   +<span class="number">0x04c</span> <span class="built_in">Cs</span>               : <span class="number">0x24fc</span></div><div class="line">   +<span class="number">0x04e</span> Reserved3        : <span class="number">0x44</span></div><div class="line">   +<span class="number">0x050</span> <span class="built_in">Ss</span>               : <span class="number">0x75ff</span></div><div class="line">   +<span class="number">0x052</span> Reserved4        : <span class="number">0xff18</span></div><div class="line">   +<span class="number">0x054</span> <span class="built_in">Ds</span>               : <span class="number">0x1475</span></div><div class="line">   +<span class="number">0x056</span> Reserved5        : <span class="number">0x75ff</span></div><div class="line">   +<span class="number">0x058</span> <span class="built_in">Fs</span>               : <span class="number">0xff10</span></div><div class="line">   +<span class="number">0x05a</span> Reserved6        : <span class="number">0xc75</span></div><div class="line">   +<span class="number">0x05c</span> <span class="built_in">Gs</span>               : <span class="number">0x75ff</span></div><div class="line">   +<span class="number">0x05e</span> Reserved7        : <span class="number">0xe808</span></div><div class="line">   +<span class="number">0x060</span> LDT              : <span class="number">0</span></div><div class="line">   +<span class="number">0x062</span> Reserved8        : <span class="number">0xffff</span></div><div class="line">   +<span class="number">0x064</span> Flags            : <span class="number">0</span></div><div class="line">   +<span class="number">0x066</span> IoMapBase        : <span class="number">0x20ac</span></div><div class="line">   +<span class="number">0x068</span> IoMaps           : [<span class="number">1</span>] _KiIoAccessMap</div><div class="line">   +<span class="number">0x208c</span> IntDirectionMap  : [<span class="number">32</span>]  <span class="string">"???"</span></div></pre></td></tr></table></figure></p><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">3</span>: kd&gt; !pcr</div><div class="line">KPCR for Processor <span class="number">3</span> at <span class="number">8</span><span class="attribute">ae9f000</span>:</div><div class="line">    Major <span class="number">1</span> Minor <span class="number">1</span></div><div class="line">NtTib.<span class="attribute">ExceptionList</span>: <span class="number">8</span>aea81a0</div><div class="line">    NtTib.<span class="attribute">StackBase</span>: <span class="number">00000000</span></div><div class="line">   NtTib.<span class="attribute">StackLimit</span>: <span class="number">00000000</span></div><div class="line"> NtTib.<span class="attribute">SubSystemTib</span>: <span class="number">8</span>aea3270</div><div class="line">      NtTib.<span class="attribute">Version</span>: <span class="number">00</span>ab16c4</div><div class="line">  NtTib.<span class="attribute">UserPointer</span>: <span class="number">00000008</span></div><div class="line">      NtTib.<span class="attribute">SelfTib</span>: <span class="number">7</span>fb4f000</div><div class="line"></div><div class="line">            <span class="attribute">SelfPcr</span>: <span class="number">8</span>ae9f000</div><div class="line">               <span class="attribute">Prcb</span>: <span class="number">8</span>ae9f120</div><div class="line">               <span class="attribute">Irql</span>: <span class="number">0000001</span>f</div><div class="line">                <span class="attribute">IRR</span>: <span class="number">00000000</span></div><div class="line">                <span class="attribute">IDR</span>: <span class="number">00000000</span></div><div class="line">      <span class="attribute">InterruptMode</span>: <span class="number">00000000</span></div><div class="line">                <span class="attribute">IDT</span>: <span class="number">8</span>aea8d00</div><div class="line">                <span class="attribute">GDT</span>: <span class="number">8</span>aea8900</div><div class="line">                <span class="attribute">TSS</span>: <span class="number">8</span>aea55e0</div><div class="line"></div><div class="line">      <span class="attribute">CurrentThread</span>: <span class="number">87</span>de6140</div><div class="line">         <span class="attribute">NextThread</span>: <span class="number">00000000</span></div><div class="line">         <span class="attribute">IdleThread</span>: <span class="number">8</span>aea5320</div><div class="line"></div><div class="line">          <span class="attribute">DpcQueue</span>: </div><div class="line"><span class="number">3</span>: kd&gt; dt _KTSS <span class="number">8</span>aea55e0</div><div class="line">nt!_KTSS</div><div class="line">   +<span class="number">0</span>x000 <span class="attribute">Backlink         </span>: <span class="number">0</span>x28</div><div class="line">   +<span class="number">0</span>x002 <span class="attribute">Reserved0        </span>: <span class="number">0</span></div><div class="line">   +<span class="number">0</span>x004 <span class="attribute">Esp0             </span>: <span class="number">0</span>x8aea86c0</div><div class="line">   +<span class="number">0</span>x008 <span class="attribute">Ss0              </span>: <span class="number">0</span>x10</div><div class="line">   +<span class="number">0</span>x00a <span class="attribute">Reserved1        </span>: <span class="number">0</span></div><div class="line">   +<span class="number">0</span>x00c <span class="attribute">NotUsed1         </span>: [<span class="number">4</span>] <span class="number">0</span></div><div class="line">   +<span class="number">0</span>x01c <span class="attribute">CR3              </span>: <span class="number">0</span>x185000</div><div class="line">   +<span class="number">0</span>x020 <span class="attribute">Eip              </span>: <span class="number">0</span>x81f223bb</div><div class="line">   +<span class="number">0</span>x024 <span class="attribute">EFlags           </span>: <span class="number">0</span></div><div class="line">   +<span class="number">0</span>x028 <span class="attribute">Eax              </span>: <span class="number">0</span></div><div class="line">   +<span class="number">0</span>x02c <span class="attribute">Ecx              </span>: <span class="number">0</span></div><div class="line">   +<span class="number">0</span>x030 <span class="attribute">Edx              </span>: <span class="number">0</span></div><div class="line">   +<span class="number">0</span>x034 <span class="attribute">Ebx              </span>: <span class="number">0</span></div><div class="line">   +<span class="number">0</span>x038 <span class="attribute">Esp              </span>: <span class="number">0</span>x8aea86c0</div><div class="line">   +<span class="number">0</span>x03c <span class="attribute">Ebp              </span>: <span class="number">0</span></div><div class="line">   +<span class="number">0</span>x040 <span class="attribute">Esi              </span>: <span class="number">0</span></div><div class="line">   +<span class="number">0</span>x044 <span class="attribute">Edi              </span>: <span class="number">0</span></div><div class="line">   +<span class="number">0</span>x048 <span class="attribute">Es               </span>: <span class="number">0</span>x23</div><div class="line">   +<span class="number">0</span>x04a <span class="attribute">Reserved2        </span>: <span class="number">0</span></div><div class="line">   +<span class="number">0</span>x04c <span class="attribute">Cs               </span>: <span class="number">8</span></div><div class="line">   +<span class="number">0</span>x04e <span class="attribute">Reserved3        </span>: <span class="number">0</span></div><div class="line">   +<span class="number">0</span>x050 <span class="attribute">Ss               </span>: <span class="number">0</span>x10</div><div class="line">   +<span class="number">0</span>x052 <span class="attribute">Reserved4        </span>: <span class="number">0</span></div><div class="line">   +<span class="number">0</span>x054 <span class="attribute">Ds               </span>: <span class="number">0</span>x23</div><div class="line">   +<span class="number">0</span>x056 <span class="attribute">Reserved5        </span>: <span class="number">0</span></div><div class="line">   +<span class="number">0</span>x058 <span class="attribute">Fs               </span>: <span class="number">0</span>x30</div><div class="line">   +<span class="number">0</span>x05a <span class="attribute">Reserved6        </span>: <span class="number">0</span></div><div class="line">   +<span class="number">0</span>x05c <span class="attribute">Gs               </span>: <span class="number">0</span></div><div class="line">   +<span class="number">0</span>x05e <span class="attribute">Reserved7        </span>: <span class="number">0</span></div><div class="line">   +<span class="number">0</span>x060 <span class="attribute">LDT              </span>: <span class="number">0</span></div><div class="line">   +<span class="number">0</span>x062 <span class="attribute">Reserved8        </span>: <span class="number">0</span></div><div class="line">   +<span class="number">0</span>x064 <span class="attribute">Flags            </span>: <span class="number">0</span></div><div class="line">   +<span class="number">0</span>x066 <span class="attribute">IoMapBase        </span>: <span class="number">0</span>x20ac</div><div class="line">   +<span class="number">0</span>x068 <span class="attribute">IoMaps           </span>: [<span class="number">1</span>] _KiIoAccessMap</div><div class="line">   +<span class="number">0</span>x208c <span class="attribute">IntDirectionMap  </span>: [<span class="number">32</span>]  <span class="string">"@???"</span></div></pre></td></tr></table></figure><h2 id="宝贵的内核态栈"><a href="#宝贵的内核态栈" class="headerlink" title="宝贵的内核态栈"></a>宝贵的内核态栈</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;多数线程都有两个栈，一个用户态栈，一个内核态栈，用户态栈大小为1M，一般不会造成溢出，但是内核态栈只有十几千字节到几十千字节，相对来说也是比较容易造成溢出的。</p><h2 id="课后实验"><a href="#课后实验" class="headerlink" title="课后实验"></a>课后实验</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;是一个dump文件，我们使用命令<code>!analyse -v</code>分析一下蓝屏产生的原因。可见注释的地方，产生了一个停止码。而带来的异常是double_fault。<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">3: kd&gt; !analyze -v</div><div class="line">******************************************************************************<span class="strong">*</span></div><div class="line"><span class="strong">*</span>                                                                             <span class="strong">*</span></div><div class="line"><span class="strong">*</span>                        Bugcheck Analysis                                    <span class="strong">*</span></div><div class="line"><span class="strong">*</span>                                                                             <span class="strong">*</span></div><div class="line"><span class="strong">*</span>*****************************************************************************<span class="strong">*</span></div><div class="line"><span class="strong"></span></div><div class="line"><span class="strong">UNEXPECTED_KERNEL_MODE_TRAP (7f)    //停止码</span></div><div class="line"><span class="strong">This means a trap occurred in kernel mode, and it's a trap of a kind</span></div><div class="line"><span class="strong">that the kernel isn't allowed to have/catch (bound trap) or that</span></div><div class="line"><span class="strong">is always instant death (double fault).  The first number in the</span></div><div class="line"><span class="strong">bugcheck params is the number of the trap (8 = double fault, etc)</span></div><div class="line"><span class="strong">Consult an Intel x86 family manual to learn more about what these</span></div><div class="line"><span class="strong">traps are. Here is a *</span>portion* of those codes:</div><div class="line">If kv shows a taskGate</div><div class="line"><span class="code">        use .tss on the part before the colon, then kv.</span></div><div class="line">Else if kv shows a trapframe</div><div class="line"><span class="code">        use .trap on that value</span></div><div class="line">Else</div><div class="line"><span class="code">        .trap on the appropriate frame will show where the trap was taken</span></div><div class="line"><span class="code">        (on x86, this will be the ebp that goes with the procedure KiTrap)</span></div><div class="line">Endif</div><div class="line">kb will then show the corrected stack.</div><div class="line">Arguments:</div><div class="line">Arg1: 00000008, EXCEPTION<span class="emphasis">_DOUBLE_</span>FAULT    //双误异常</div><div class="line">Arg2: 8aea3270</div><div class="line">Arg3: 00000000</div><div class="line">Arg4: 00000000</div><div class="line"></div><div class="line">Debugging Details:</div><div class="line">------------------</div><div class="line"><span class="symbol">WARNING: </span>Process directory table base C7F45840 doesn't match CR3 00185000   //不同</div><div class="line"><span class="symbol">WARNING: </span>Process directory table base C7F45840 doesn't match CR3 00185000</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于windbg给出的警告说明了CR3和DirBase值不相同，利用<code>r CR3</code>和<code>!prcess 0 0</code>查看对应的数据。发现两者数据确实不同。原因见&lt;<strong>初见端倪</strong>&gt;一节。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span><span class="string">:</span> <span class="string">kd&gt;</span> <span class="string">r</span> <span class="string">CR3</span></div><div class="line"><span class="string">cr3=00185000</span></div><div class="line"></div><div class="line"><span class="number">3</span><span class="string">:</span> <span class="string">kd&gt;</span> <span class="string">!process</span></div><div class="line"><span class="string">PROCESS</span> <span class="number">85</span><span class="string">ad72c0</span>  <span class="attr">SessionId:</span> <span class="number">1</span>  <span class="attr">Cid:</span> <span class="number">0</span><span class="string">cfc</span>    <span class="attr">Peb:</span> <span class="number">7</span><span class="string">fb4c000</span>  <span class="attr">ParentCid:</span> <span class="number">08</span><span class="string">ac</span></div><div class="line"><span class="attr">    DirBase:</span> <span class="string">c7f45840</span>  <span class="attr">ObjectTable:</span> <span class="number">8</span><span class="string">a127040</span>  <span class="attr">HandleCount:</span> <span class="string">&lt;Data</span> <span class="string">Not</span> <span class="string">Accessible&gt;</span></div><div class="line"><span class="attr">    Image:</span> <span class="string">ImBuggy.exe</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当使用<code>!process 0 0</code>遍历系统所有进程，发现system进程的Dirbase数据为00185000。这时候，我们大致了解到了事情的经过，程序ImBuggy.exe是发生双误异常后，CPU内部利用硬件机制将页目录基地址改变为00185000，但是OS并没有及时作出调整，产生了error，但是双误是如何产生的呢？<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span>: kd&gt; !process <span class="number">4</span> <span class="number">0</span>          //!process <span class="number">0</span> <span class="number">0</span> <span class="built_in">system</span></div><div class="line">Searching <span class="keyword">for</span> Process with Cid == <span class="number">4</span></div><div class="line">PROCESS 84ad78c0  SessionId: none  Cid: <span class="number">0004</span>    Peb: <span class="number">00000000</span>  ParentCid: <span class="number">0000</span></div><div class="line">    DirBase: <span class="number">00185000</span>  ObjectTable: <span class="number">8b203000</span>  HandleCount: &lt;Data Not Accessible&gt;</div><div class="line">    Image: System</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;先使用<code>.sympath c:\gedu\xxx</code>设置符号路径，然后加载符号(提前需要设置系统符号命令)。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用<code>knvL</code>命令回溯栈。<strong>n：显示行号，v:显示调用约定，L:省略源代码。</strong>0号栈是产生蓝屏的系统函数，1号栈是处理双误异常的异常处理函数KiTrap08(陷阱处理函数，08代表双误异常)。剩下的是RealBug!StackOverflow是产生双误的函数。<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span>: kd&gt; kvnL</div><div class="line"> # ChildEBP RetAddr  Args to Child              </div><div class="line"><span class="number">00</span> <span class="number">8</span>aea869c <span class="number">81f22433</span> <span class="number">0000007</span>f <span class="number">00000008</span> <span class="number">8</span>aea3270 nt!KiBugCheck2</div><div class="line"><span class="number">01</span> <span class="number">8</span>aea869c b<span class="number">0e013e4</span> <span class="number">0000007</span>f <span class="number">00000008</span> <span class="number">8</span>aea3270 nt!KiTrap08+<span class="number">0</span>x78 (FPO: TSS <span class="number">28</span>:<span class="number">0</span>)</div><div class="line"><span class="number">02</span> cf6ce004 b<span class="number">0e013e9</span> <span class="number">0000065</span>e cf6ce01c b<span class="number">0e013e9</span> RealBug!StackOverflow+<span class="number">0</span>x14 (FPO: [Non-Fpo]) (CONV: stdcall)</div><div class="line"><span class="number">03</span> cf6ce010 b<span class="number">0e013e9</span> <span class="number">0000065</span>f cf6ce028 b<span class="number">0e013e9</span> RealBug!StackOverflow+<span class="number">0</span>x19 (FPO: [Non-Fpo]) (CONV: stdcall)</div><div class="line"><span class="number">04</span> cf6ce01c b<span class="number">0e013e9</span> <span class="number">00000660</span> cf6ce034 b<span class="number">0e013e9</span> RealBug!StackOverflow+<span class="number">0</span>x19 (FPO: [Non-Fpo]) (CONV: stdcall)</div><div class="line"><span class="number">05</span> cf6ce028 b<span class="number">0e013e9</span> <span class="number">00000661</span> cf6ce040 b<span class="number">0e013e9</span> RealBug!StackOverflow+<span class="number">0</span>x19 (FPO: [Non-Fpo]) (CONV: stdcall)</div><div class="line"><span class="number">06</span> cf6ce034 b<span class="number">0e013e9</span> <span class="number">00000662</span> cf6ce04c b<span class="number">0e013e9</span> RealBug!StackOverflow+<span class="number">0</span>x19 (FPO: [Non-Fpo]) (CONV: stdcall)</div><div class="line">.......</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是，windbg并没有显示完全栈回溯，使用<code>kvnL 1000</code>回溯1000次调用。<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span>c9 cf6d0d58 b<span class="number">0e013e9</span> <span class="number">00000a25</span> cf6d0d70 b<span class="number">0e013e9</span> RealBug!StackOverflow+<span class="number">0</span>x19 (FPO: [Non-Fpo]) (CONV: stdcall)</div><div class="line"><span class="number">3</span>ca cf6d0d64 b<span class="number">0e013e9</span> <span class="number">00000a26</span> cf6d0d98 b0e01b16 RealBug!StackOverflow+<span class="number">0</span>x19 (FPO: [Non-Fpo]) (CONV: stdcall)</div><div class="line"><span class="number">3</span>cb cf6d0d70 b0e01b<span class="number">16 00000a27</span> cf6d0f24 a<span class="number">8e2e888</span> RealBug!StackOverflow+<span class="number">0</span>x19 (FPO: [Non-Fpo]) (CONV: stdcall)</div><div class="line"><span class="number">3</span>cc cf6d0d98 b0e01d50 <span class="number">85</span>cc2b<span class="number">68 00000001</span> <span class="number">87</span>ab4780 RealBug!RealBugDeviceControl+<span class="number">0</span>xb6 (FPO: [Non-Fpo]) (CONV: stdcall)</div><div class="line"><span class="number">3</span>cd cf6d0de4 <span class="number">81</span>fa807d <span class="number">84</span>ee91f<span class="number">8 85994f68</span> <span class="number">00000100</span> RealBug!RealBugDispatch+<span class="number">0</span>x90 (FPO: [Non-Fpo]) (CONV: stdcall)</div><div class="line"><span class="number">3</span>ce cf6d0dfc <span class="number">82066</span>baf <span class="number">85994</span>ffc <span class="number">85994f68</span> <span class="number">00000004</span> nt!IofCallDriver+<span class="number">0</span>x3d (FPO: [Non-Fpo])</div><div class="line"><span class="number">3</span>cf cf6d0e<span class="number">50 82066622</span> <span class="number">84</span>ee91f<span class="number">8 00000000</span> a<span class="number">8e31901</span> nt!IopSynchronousServiceTail+<span class="number">0</span>x10a (FPO: [Non-Fpo])</div><div class="line"><span class="number">3d</span>0 cf6d0ef0 <span class="number">8206624</span>f <span class="number">00000001</span> <span class="number">85994f68</span> <span class="number">00000000</span> nt!IopXxxControlFile+<span class="number">0</span>x3b7 (FPO: [Non-Fpo])</div><div class="line"><span class="number">3d</span>1 cf6d0f24 <span class="number">81</span>f200bc <span class="number">000000b4</span> <span class="number">00000000</span> <span class="number">00000000</span> nt!NtDeviceIoControlFile+<span class="number">0</span>x2a (FPO: [Non-Fpo])</div><div class="line"><span class="number">3d</span>2 cf6d0f24 <span class="number">77</span>c85ee4 <span class="number">000000b4</span> <span class="number">00000000</span> <span class="number">00000000</span> nt!KiFastCallEntry+<span class="number">0</span>x12c (FPO: [<span class="number">0</span>,<span class="number">3</span>] TrapFrame @ cf6d0f54)</div><div class="line">WARNING: Frame IP not in any known module. Following frames may be wrong.</div><div class="line"><span class="number">3d</span>3 <span class="number">0013f568</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">0</span>x77c85ee4</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在上面的栈回溯，可以得出，1.#3d2的返回地址接近用户态。2.根据栈回溯：程序递归调用了StackOverflow。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在栈回溯，可以看到双误处理函数的TSS：28，TSS:28表示的是<strong>前一个线程</strong>的TSS段选择子是28，利用<code>.tss 28</code>可以查看蓝屏前的线程信息。可以发生是StackOverflow函数发生了双误异常。接下来，我们看一下发生异常的原因是什么。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">3: kd&gt; .tss 28</div><div class="line"><span class="attribute">eax</span>=0000065e <span class="attribute">ebx</span>=0000010e <span class="attribute">ecx</span>=0000065e <span class="attribute">edx</span>=00000a28 <span class="attribute">esi</span>=84ee91f8 <span class="attribute">edi</span>=85cc2b68</div><div class="line"><span class="attribute">eip</span>=b0e013e4 <span class="attribute">esp</span>=cf6ce000 <span class="attribute">ebp</span>=cf6ce004 <span class="attribute">iopl</span>=0         nv up ei pl nz na po nc</div><div class="line"><span class="attribute">cs</span>=0008  <span class="attribute">ss</span>=0010  <span class="attribute">ds</span>=0023  <span class="attribute">es</span>=0023  <span class="attribute">fs</span>=0030  <span class="attribute">gs</span>=0000             <span class="attribute">efl</span>=00010202</div><div class="line">RealBug!StackOverflow+0x14:</div><div class="line">b0e013e4 e8e7ffffff      call    RealBug!StackOverflow (b0e013d0)</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如下图，在StackOverflow中递归调用了StackOverflow函数，会开辟处12个字节的栈空间。<br>     <img src="https://i.imgur.com/GwffPg7.png" alt=""><br>     <img src="https://i.imgur.com/6yhyY7k.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据栈回溯信息，发现从#002到#3CB一共调用了969次。产生了969*12=11628个字节大小栈空间。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用<code>!thread</code>查看线程的栈空间信息。最后一行：栈空间大小：cf6d1000-cfce000=3000，所需空间不够，在看current：cf6d0d8c明显不在cf6d1000-cfce000区间内，判断是栈溢出。<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span>: kd&gt; !thread</div><div class="line">THREAD <span class="number">87</span>de6140  Cid <span class="number">0</span>cfc<span class="number">.1778</span>  Teb: <span class="number">7</span>fb4f000 Win32Thread: <span class="number">80</span>cb9008 RUNNING on processor <span class="number">3</span></div><div class="line">IRP <span class="keyword">List</span>:</div><div class="line">    <span class="number">85994</span>f68: (<span class="number">0006</span>,<span class="number">0094</span>) Flags: <span class="number">00060030</span>  Mdl: <span class="number">00000000</span></div><div class="line"><span class="keyword">Not</span> impersonating</div><div class="line">DeviceMap                 ba46c160</div><div class="line">Owning Process            <span class="number">85</span>ad72c0       <span class="keyword">Image</span>:         ImBuggy.exe</div><div class="line">Attached Process          <span class="keyword">N</span>/A            <span class="keyword">Image</span>:         <span class="keyword">N</span>/A</div><div class="line">Wait Start TickCount      <span class="number">304716315</span>      <span class="keyword">Ticks</span>: <span class="number">0</span></div><div class="line"><span class="keyword">Context</span> <span class="keyword">Switch</span> <span class="keyword">Count</span>      <span class="number">1554</span>           IdealProcessor: <span class="number">0</span>             </div><div class="line">UserTime                  <span class="number">00</span>:<span class="number">00</span>:<span class="number">00.078</span></div><div class="line">KernelTime                <span class="number">00</span>:<span class="number">00</span>:<span class="number">00.093</span></div><div class="line">Win32 Start Address <span class="number">0x0040285e</span></div><div class="line"><span class="keyword">Stack</span> Init cf6d0fe0 Current cf6d0d8c Base cf6d1000 <span class="keyword">Limit</span> cf6ce000 Call <span class="number">00000000</span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;何谓双误&quot;&gt;&lt;a href=&quot;#何谓双误&quot; class=&quot;headerlink&quot; title=&quot;何谓双误&quot;&gt;&lt;/a&gt;何谓双误&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;双误就是CPU是报告一个比较严重的异常后，在异常处理过程中，又发生了一个严重的异常(CPU无法处理)。&lt;br&gt;
    
    </summary>
    
      <category term="&lt;格蠹汇编&gt;" scheme="http://yoursite.com/categories/%E6%A0%BC%E8%A0%B9%E6%B1%87%E7%BC%96/"/>
    
    
  </entry>
  
  <entry>
    <title>&lt;格蠹汇编&gt;_第9章_经典阅读器的经典死锁</title>
    <link href="http://yoursite.com/2018/08/12/%E3%80%8A%E6%A0%BC%E8%A0%B9%E6%B1%87%E7%BC%96%E3%80%8B_%E7%AC%AC9%E7%AB%A0_%E7%BB%8F%E5%85%B8%E9%98%85%E8%AF%BB%E5%99%A8%E7%9A%84%E7%BB%8F%E5%85%B8%E6%AD%BB%E9%94%81/"/>
    <id>http://yoursite.com/2018/08/12/《格蠹汇编》_第9章_经典阅读器的经典死锁/</id>
    <published>2018-08-12T07:02:11.000Z</published>
    <updated>2018-08-28T09:17:39.954Z</updated>
    
    <content type="html"><![CDATA[<h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用windbg的<code>!locks</code>来查看进程中的锁，特别是那些处于锁定状态的锁。<br><a id="more"></a></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span>:<span class="number">000</span>&gt; <span class="title">!locks</span></div><div class="line"></div><div class="line">CritSec ntdll<span class="title">!LdrpLoaderLock</span>+<span class="number">0</span> at <span class="number">7</span><span class="keyword">c</span><span class="number">99</span>b<span class="number">178</span></div><div class="line">LockCount          <span class="number">0</span></div><div class="line">RecursionCount     <span class="number">1</span></div><div class="line">OwningThread       <span class="number">6</span>a<span class="number">8</span></div><div class="line">EntryCount         <span class="number">0</span></div><div class="line">ContentionCount    <span class="number">0</span></div><div class="line">*** Locked</div><div class="line"></div><div class="line">Scanned <span class="number">20</span> critical sections</div></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从底层来说，关键区机制主要是通过<code>RTL_CRITICAL_SECTION结构</code>来实现的。<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">struct RTL_CRITICAL_SECTION</div><div class="line">&#123;</div><div class="line">+<span class="number">0x000</span>:  PRTL_CRITICAL_SECTION_DEBUG DebugInfo<span class="comment">;</span></div><div class="line">+<span class="number">0x004</span>   LONG LockCount<span class="comment">;     //标志关键区的锁状态</span></div><div class="line">LONG RecursionCount<span class="comment">;         //标记递归次数，用于支持同一个线程多次进入临界区</span></div><div class="line">HANDLE OwningThread<span class="comment">;          //进入临界区的线程ID</span></div><div class="line">HANDLE LockSemaphore<span class="comment">;        //标记临界区对应于的事件对象，如果为空，表示无线程处于等待状态</span></div><div class="line">ULONG_PTR SpinCount<span class="comment">;</span></div><div class="line">&#125;<span class="comment">;</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用!locks是没有办法查看LockSemaphore成员的，但是可以使用<code>!cs -l</code>可以。<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="section">0:000&gt; !cs -l</span></div><div class="line">-----------------------------------------</div><div class="line">DebugInfo          = 0x7c99b1a0</div><div class="line">Critical section   = 0x7c99b178 (ntdll!LdrpLoaderLock+0x0)</div><div class="line">LOCKED</div><div class="line">LockCount          = 0x0</div><div class="line">OwningThread       = 0x000006a8</div><div class="line">RecursionCount     = 0x1</div><div class="line">LockSemaphore      = 0x0         //等待对象</div><div class="line">SpinCount          = 0x00000000</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;死锁&quot;&gt;&lt;a href=&quot;#死锁&quot; class=&quot;headerlink&quot; title=&quot;死锁&quot;&gt;&lt;/a&gt;死锁&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;利用windbg的&lt;code&gt;!locks&lt;/code&gt;来查看进程中的锁，特别是那些处于锁定状态的锁。&lt;br&gt;
    
    </summary>
    
      <category term="&lt;格蠹汇编&gt;" scheme="http://yoursite.com/categories/%E6%A0%BC%E8%A0%B9%E6%B1%87%E7%BC%96/"/>
    
    
  </entry>
  
  <entry>
    <title>病毒分析技术(13) ---WannaCry勒索病毒</title>
    <link href="http://yoursite.com/2018/08/08/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF_13_WannaCry%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92/"/>
    <id>http://yoursite.com/2018/08/08/病毒分析技术_13_WannaCry勒索病毒/</id>
    <published>2018-08-08T03:02:11.000Z</published>
    <updated>2018-09-01T06:58:52.728Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>WannaCry（又叫Wanna Decryptor），一种“蠕虫式”的勒索病毒软件，大小3.3MB，由不法分子利用NSA（National Security Agency，美国国家安全局）泄露的危险漏洞<strong>“EternalBlue”（永恒之蓝）</strong>进行网络端口扫描攻击，目标机器被成功攻陷后会从攻击机下载WannaCry木马进行感染，并作为攻击机再次扫描互联网和局域网其他机器，行成蠕虫感染大范围超快速扩散。木马母体为mssecsvc.exe，运行后会扫描随机ip的互联网机器，尝试感染，也会扫描局域网相同网段的机器进行感染传播，此外会释放敲诈者程序tasksche.exe，对磁盘文件进行加密勒索。木马加密使用AES加密文件，并使用非对称加密算法RSA 2048加密随机密钥，每个文件使用一个随机密钥，理论上不可逆向破解。<br><a id="more"></a></p><h1 id="一：目录"><a href="#一：目录" class="headerlink" title="一：目录"></a>一：目录</h1><ul><li>1.目录</li><li>2.样本信息</li><li>3.行为分析</li><li>4.样本分析</li><li>5.技术总结</li></ul><h1 id="二：样本信息"><a href="#二：样本信息" class="headerlink" title="二：样本信息"></a>二：样本信息</h1><ul><li>1.样本名称：mssecsvc.exe</li><li>2.样本md5：db349b97c37d22f5ea1d1841e3c89eb4</li><li>3.是否加壳：无壳</li><li>4.编译语言：vc++</li><li>5.样本来源：来自于网络收集</li></ul><h1 id="三：行为分析"><a href="#三：行为分析" class="headerlink" title="三：行为分析"></a>三：行为分析</h1><ul><li>行为分析：<br>  <img src="https://i.imgur.com/ihlHjdg.png" alt=""><h1 id="四-样本分析"><a href="#四-样本分析" class="headerlink" title="四 样本分析"></a>四 样本分析</h1><h2 id="mssecsvc-exe-母本文件"><a href="#mssecsvc-exe-母本文件" class="headerlink" title="mssecsvc.exe(母本文件)"></a>mssecsvc.exe(母本文件)</h2></li><li>存在一个switch，如果联网访问该网址<code>http://www.iuqerfsodp9ifjaposdfjhgosurijfaewrwergwea.com</code>，恶意代码不会执行<br>  <img src="https://i.imgur.com/9WNrm07.png" alt=""></li><li><p>根据启动参数判断，是否第一次感染，如果第一次感染，创建服务，然后释放恶意代码到C://windows/tasksche.exe,并以/i参数执行恶意程序tasksche.exe。<br>  <img src="https://i.imgur.com/OSEQxtI.png" alt=""><br>  <img src="https://i.imgur.com/yT3OXia.png" alt=""></p></li><li><p>如果不是第一次被感染，则使得服务的ServiceMain函数连接到服务控制管理器上，成为服务控制调度程序线程。<br>  <img src="https://i.imgur.com/OhMKRbL.png" alt=""></p></li><li>ServiceMian函数作用：利用MS17_010漏洞漏，先读取自身的存在的payload的利用代码，根据系统不同需要读入两套不同的payload。<br>  <img src="https://i.imgur.com/ZNEG7ra.png" alt=""><br>  <img src="https://i.imgur.com/wRDjskM.png" alt=""><br>  <img src="https://i.imgur.com/A5ckrCA.png" alt=""></li><li>利用多线程，分别对内网和外网扫描。对于公网，病毒首先产生随机IP，然后连接到445端口，进行传播。<br>  <img src="https://i.imgur.com/MOAPBHP.png" alt=""><br>  <img src="https://i.imgur.com/xDCj0dH.png" alt=""></li><li>对于内网，选取同一网段的所有IP，然后利用445端口，进行传播。<br>  <img src="https://i.imgur.com/XPIIWdH.png" alt=""><br>  <img src="https://i.imgur.com/rausHoV.png" alt=""></li></ul><h2 id="tasksche-exe-释放模块"><a href="#tasksche-exe-释放模块" class="headerlink" title="tasksche.exe(释放模块)"></a>tasksche.exe(释放模块)</h2><ul><li>判断传入参数是否是/i。<br>  <img src="https://i.imgur.com/eM0oF1w.png" alt=""></li><li>向c://intel//xxxxx//中释放同一个恶意文件，实现多备份。<br>  <img src="https://i.imgur.com/iOZEWLE.png" alt=""></li><li>利用cmd.exe /c以不显示的方式执行tasksche.exe。之后创建服务。并启动服务<br>  <img src="https://i.imgur.com/086BNBX.png" alt=""><br>  <img src="https://i.imgur.com/5fPDl0R.png" alt=""><br>  <img src="https://i.imgur.com/Dbfq4bp.png" alt=""></li><li>创建互斥体，然后创建tasksche.exe创建服务。<br>  <img src="https://i.imgur.com/HHsw5RT.png" alt=""></li><li>创建注册表，然后利用WNcry@2ol7参数，释放多个文件。<ul><li>taskse.exe：<code>将权限提升至SeTcbPrivilege权限</code><br><img src="https://i.imgur.com/oaTvtlm.png" alt=""><br><img src="https://i.imgur.com/6yfShNM.png" alt=""></li><li>taskd.exe：<code>删除.WnCy文件</code><br><img src="https://i.imgur.com/Y0v5Sdp.png" alt=""><br><img src="https://i.imgur.com/ED9WgYG.png" alt=""></li><li>b.wnry:<code>图片bmp</code><br><img src="https://i.imgur.com/6wZg2Dq.png" alt=""></li><li>c.wncy: <code>洋葱浏览器地址和洋葱路由信息，黑客团伙利用比特币转账，减少被抓获的风险</code><br><img src="https://i.imgur.com/y7GJqeM.png" alt=""></li><li>r.wncy:<code>问答信息</code><br><img src="https://i.imgur.com/huKN6AC.png" alt=""></li><li>s.wncy:<code>洋葱路由器安装包和数据.rar</code><br><img src="https://i.imgur.com/jeQnfs9.png" alt=""></li><li>t.wncy：<code>后期恶意dll的加密版本</code></li><li>u.wncy:<code>文件感染后的提示界面</code><br><img src="https://i.imgur.com/5T6jYmG.png" alt=""></li></ul></li><li>向c.wncy中写入比特币钱包地址，利用暗网进行交易<br>   <img src="https://i.imgur.com/tFFcTFy.png" alt=""></li><li>调用attrib.exe +h来设置文件隐藏属性<br>  <img src="https://i.imgur.com/ATfi4CV.png" alt=""></li><li>调用icacls.exe来设置所有用户具有完全控制权限<br>  <img src="https://i.imgur.com/0NTGzJZ.png" alt=""></li><li>读取t.wncy文件到内存，解密出其中的一部分信息，寻找文件头，然后复制节区信息，形成完整的PE文件。<br>  <img src="https://i.imgur.com/xqmbmqR.png" alt=""><br>  <img src="https://i.imgur.com/Smdcdnw.png" alt=""><br>  <img src="https://i.imgur.com/xsMCwKw.png" alt=""><br>  <img src="https://i.imgur.com/FH6D8oF.png" alt=""></li><li>创建刚刚复制到内存中的dll文件的导入函数。然后调用导入函数。操作在内存中进行，文件不落地，有效规避了杀毒软件的查杀。<br>  <img src="https://i.imgur.com/BDg2U5w.png" alt=""><br>  <img src="https://i.imgur.com/nfSfgbS.png" alt=""></li></ul><h2 id="Inject-dll-感染模块"><a href="#Inject-dll-感染模块" class="headerlink" title="Inject.dll(感染模块)"></a>Inject.dll(感染模块)</h2><ul><li>此部分由tasksche.exe由t.wncy进过解密拷贝到内存，分析的时候把内存数据dump到内存，操作如下：首先定位到内存空间，od显示的内存段是整个DLL驻留的地方，不需要考虑其大小。将所有的hex选中后，然后右键<code>复制到二进制</code>，粘贴就可以了。</li><li>感染模块首先初始化一些操作，例如创建互斥体，获取函数地址，初始化加密模块。<br>  <img src="https://i.imgur.com/0wbU6WA.png" alt=""></li><li>然后创建5个线程：<ul><li>第一个线程：写入文件数据。<br><img src="https://i.imgur.com/NWwLr2S.png" alt=""></li><li>第二个线程：读取解密文件数据<br><img src="https://i.imgur.com/YApIj5M.png" alt=""></li><li>第三个线程：遍历和加密文件<br><img src="https://i.imgur.com/IfFk9tY.png" alt=""></li><li>第四个进程：间隔特定时间创建taskdl.exe进程，然后终止。<br><img src="https://i.imgur.com/sHGxfLI.png" alt=""></li><li>第五个线程：写入自启动项run，实现自启动。<br><img src="https://i.imgur.com/aHItbjJ.png" alt=""></li></ul></li><li>复制解密程序，提取洋葱浏览器<br>  <img src="https://i.imgur.com/4vYex6i.png" alt=""></li><li>利用kill命令杀死指定进程，防止加密的时候文件占用<br>  <img src="https://i.imgur.com/gz4KlfB.png" alt=""><br>  <img src="https://i.imgur.com/poTRQfK.png" alt=""></li><li>只加密本地硬盘的文件。<br>  <img src="https://i.imgur.com/w22oLdH.png" alt=""><br>  <img src="https://i.imgur.com/KA1qL5j.png" alt=""></li><li><p>排除以下文件路径和释放出来的文档说明<br>  <img src="https://i.imgur.com/YucWftJ.png" alt=""><br>  <img src="https://i.imgur.com/TAWEX8o.png" alt=""><br>  <img src="https://i.imgur.com/6k4GGxZ.png" alt=""></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="string">\ProgramData</span></div><div class="line"><span class="string">\Intel</span></div><div class="line"><span class="string">\WINDOWS</span></div><div class="line"><span class="string">\Program</span> Files</div><div class="line"><span class="string">\Program</span> Files (x86)</div><div class="line"><span class="string">\AppData\Local\Temp</span></div><div class="line"><span class="string">\Local</span> Settings<span class="string">\Temp</span></div><div class="line">@WanaDecryptor@.bmp</div><div class="line">@WanaDecryptor@.exe.lnk</div><div class="line">@Please_Read_Me@.txt</div></pre></td></tr></table></figure></li><li><p>移动三个说明文件。<br>  <img src="https://i.imgur.com/Mre0ikL.png" alt=""></p></li><li>重新创建文件，用来加密原始文件，加密完毕后将原始文件删除。<br>  <img src="https://i.imgur.com/ngaH87H.png" alt=""><br>  <img src="https://i.imgur.com/64ffOIG.png" alt=""><br>  <img src="https://i.imgur.com/Mzq5N6L.png" alt=""></li></ul><h1 id="五-技术总结"><a href="#五-技术总结" class="headerlink" title="五 技术总结"></a>五 技术总结</h1><h2 id="1-如何转储shellcode"><a href="#1-如何转储shellcode" class="headerlink" title="1 如何转储shellcode"></a>1 如何转储shellcode</h2><ul><li>OD,和其他dump软件可能没有对该段具有读写权限，导致dump失败</li><li>首先定位到内存空间，od显示的内存段是整个DLL驻留的地方，不需要考虑其大小。</li><li>将所有的hex选中。</li><li>然后右键<code>复制二进制</code>，粘贴就可以了。</li></ul><h2 id="2-传播技术"><a href="#2-传播技术" class="headerlink" title="2 传播技术"></a>2 传播技术</h2><ul><li>微软关于MS17-010的介绍：<a href="https://docs.microsoft.com/zh-cn/security-updates/Securitybulletins/2017/ms17-010" target="_blank" rel="external">https://docs.microsoft.com/zh-cn/security-updates/Securitybulletins/2017/ms17-010</a></li><li>github上，病毒使用的利用恶意代码：<a href="https://github.com/rapid7/metasploit-framework" target="_blank" rel="external">https://github.com/rapid7/metasploit-framework</a></li></ul><h2 id="3-加密流程"><a href="#3-加密流程" class="headerlink" title="3 加密流程"></a>3 加密流程</h2><ul><li>最开始，只是分析出来了函数是一个加密函数，并没有分析出加密流程，通过查看各个厂商的安全分析报告，将加密流程补上。<br>  <img src="https://i.imgur.com/42GGqoB.png" alt=""></li><li>首先利用CryptGenRandom产生AES随机秘钥。<strong>因为AES加密是对称的，也就是说如果知道了加密秘钥的话，很容易得到原始数据，通常会利用RSA对AES秘钥进行加密。</strong><br>  <img src="https://i.imgur.com/s2JHN2O.png" alt=""></li><li><p>接着，在将进过RSA加密的秘钥写入文件中，利用AES对源文件进行加密，<br>  <img src="https://i.imgur.com/jrVuHzX.png" alt=""><br>  <img src="https://i.imgur.com/PMJVIE3.png" alt=""> </p></li><li><p>密码学参考自：</p><ul><li>AES加密算法:<a href="https://blog.csdn.net/qq_28205153/article/details/55798628" target="_blank" rel="external">https://blog.csdn.net/qq_28205153/article/details/55798628</a></li><li>RSA加密算法：<a href="https://www.cnblogs.com/gwind/p/8013116.html" target="_blank" rel="external">https://www.cnblogs.com/gwind/p/8013116.html</a></li></ul></li><li><p>分析报告参考自：</p><ul><li>看雪：<a href="https://bbs.pediy.com/thread-228381.htm" target="_blank" rel="external">https://bbs.pediy.com/thread-228381.htm</a></li><li>腾讯电脑管家(安全客)：<a href="http://www.freebuf.com/articles/system/134578.html" target="_blank" rel="external">http://www.freebuf.com/articles/system/134578.html</a></li><li>火绒安全：<a href="https://bbs.pediy.com/thread-217662.htm" target="_blank" rel="external">https://bbs.pediy.com/thread-217662.htm</a></li><li>腾讯电脑管家：<a href="https://slab.qq.com/news/tech/1575.html#_Toc482982597" target="_blank" rel="external">https://slab.qq.com/news/tech/1575.html#_Toc482982597</a></li><li>360安全：<a href="https://www.anquanke.com/post/id/86092" target="_blank" rel="external">https://www.anquanke.com/post/id/86092</a></li></ul></li><li><p>所用到的数据：<a href="https://pan.baidu.com/s/1DwCH42dJbIBLR3WGwXS7nA" target="_blank" rel="external">https://pan.baidu.com/s/1DwCH42dJbIBLR3WGwXS7nA</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;WannaCry（又叫Wanna Decryptor），一种“蠕虫式”的勒索病毒软件，大小3.3MB，由不法分子利用NSA（National Security Agency，美国国家安全局）泄露的危险漏洞&lt;strong&gt;“EternalBlue”（永恒之蓝）&lt;/strong&gt;进行网络端口扫描攻击，目标机器被成功攻陷后会从攻击机下载WannaCry木马进行感染，并作为攻击机再次扫描互联网和局域网其他机器，行成蠕虫感染大范围超快速扩散。木马母体为mssecsvc.exe，运行后会扫描随机ip的互联网机器，尝试感染，也会扫描局域网相同网段的机器进行感染传播，此外会释放敲诈者程序tasksche.exe，对磁盘文件进行加密勒索。木马加密使用AES加密文件，并使用非对称加密算法RSA 2048加密随机密钥，每个文件使用一个随机密钥，理论上不可逆向破解。&lt;br&gt;
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>西电CTF(moectf)</title>
    <link href="http://yoursite.com/2018/08/02/%E8%A5%BF%E7%94%B5CTF(moectf)/"/>
    <id>http://yoursite.com/2018/08/02/西电CTF(moectf)/</id>
    <published>2018-08-02T06:02:11.000Z</published>
    <updated>2018-08-05T06:26:18.617Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Re题"><a href="#Re题" class="headerlink" title="Re题"></a>Re题</h1><h2 id="RE1"><a href="#RE1" class="headerlink" title="RE1"></a>RE1</h2><ul><li>签个到，分析一下流程，然后查一下字符，</li><li>得到flag:<code>moectf{Qidao_by_fa1con}</code><br>   <img src="https://i.imgur.com/hUxBv9r.png" alt=""><a id="more"></a></li></ul><h2 id="RE2"><a href="#RE2" class="headerlink" title="RE2:"></a>RE2:</h2><ul><li><p>流程如下：程序经过将input和特定值1xor之后20位后，将22位数据与特定值2进行比较。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">printf(<span class="string">"Please enter the flag:"</span>);</div><div class="line">fgets(&amp;Buf, <span class="number">29</span>, __iob);</div><div class="line">for ( i = <span class="number">0</span>; i &lt;= <span class="number">19</span>; ++i )</div><div class="line">  v27[i - <span class="number">48</span>] ^= v27[i - <span class="number">80</span>];                 <span class="comment">// string_hex^input</span></div><div class="line">for ( i = <span class="number">0</span>; i &lt;= <span class="number">21</span> &amp;&amp; v27[i - <span class="number">48</span>] == v27[i - <span class="number">112</span>]; ++i )</div><div class="line">  ;                                           <span class="comment">// 75 5A 70 55 41 73 2C 49 46 75 39 65 3E 4F 25 73 60  </span></div><div class="line">                                              <span class="comment">// 66 38 5A 21 7D                                   </span></div><div class="line">if ( i == <span class="number">22</span> )</div><div class="line">  printf(<span class="string">"conglution!"</span>);</div></pre></td></tr></table></figure></li><li><p>利用OD调试一下，发现特定值1为<code>0x75,0x5A,0x70,0x55,0x41,0x73,0x2C,0x49,0x46,0x75,0x39,0x65,0x3E,0x4F,0x25,0x73,0x60,0x66,0x38,0x5A,0x21,0x7D</code><br>   <img src="https://i.imgur.com/XIxCTDE.png" alt=""></p></li><li><p>特定值2为<code>0x18,0x35,0x15,0x36,0x35,0x15,0x57,0x20,0x15,0x2A,0x4F,0x20,0x4C,0x36,0x7A,0x36,0x20,0x15,0x41,0x7B</code><br>  <img src="https://i.imgur.com/QIUrnjT.png" alt=""></p></li><li><p>写出脚本</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">int main(void)</div><div class="line">&#123;</div><div class="line">int num1[<span class="number">22</span>]=&#123;<span class="number">0x75</span>,<span class="number">0x5A</span>,<span class="number">0x70</span>,<span class="number">0x55</span>,<span class="number">0x41</span>,<span class="number">0x73</span>,<span class="number">0x2C</span>,<span class="number">0x49</span>,<span class="number">0x46</span>,<span class="number">0x75</span>,<span class="number">0x39</span>,<span class="number">0x65</span>,<span class="number">0x3E</span>,<span class="number">0x4F</span>,<span class="number">0x25</span>,<span class="number">0x73</span>,<span class="number">0x60</span>,<span class="number">0x66</span>,<span class="number">0x38</span>,<span class="number">0x5A</span>,<span class="number">0x21</span>,<span class="number">0x7D</span>&#125;;</div><div class="line">int num2[<span class="number">20</span>]=&#123;<span class="number">0x18</span>,<span class="number">0x35</span>,<span class="number">0x15</span>,<span class="number">0x36</span>,<span class="number">0x35</span>,<span class="number">0x15</span>,<span class="number">0x57</span>,<span class="number">0x20</span>,<span class="number">0x15</span>,<span class="number">0x2A</span>,<span class="number">0x4F</span>,<span class="number">0x20</span>,<span class="number">0x4C</span>,<span class="number">0x36</span>,<span class="number">0x7A</span>,<span class="number">0x36</span>,<span class="number">0x20</span>,<span class="number">0x15</span>,<span class="number">0x41</span>,<span class="number">0x7B</span>&#125;;</div><div class="line">for(int i=<span class="number">0</span>;i&lt;=<span class="number">19</span>;i++)</div><div class="line">num1[i]=num1[i]^num2[i];</div><div class="line">for(int i=<span class="number">0</span>;i&lt;=<span class="number">21</span>;i++)</div><div class="line">printf(<span class="string">"%c"</span>,num1[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>flag:<code>moectf{iS_vEry_E@sy!!}</code></p></li></ul><h2 id="py逆向"><a href="#py逆向" class="headerlink" title="py逆向"></a>py逆向</h2><ul><li><p>利用网上的反编译工具，反编译如下：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># visit http://tool.lu/pyc/ for more information</span></div><div class="line">import base64</div><div class="line">r = <span class="built_in">open</span>(<span class="string">'flag'</span>, <span class="string">'r'</span>)   <span class="comment"># 输入</span></div><div class="line">rflag = <span class="string">'bX;oY4Tpe4D8Q2;VRW:&#123;U2;IQIP8fR?@'</span></div><div class="line">key = base64.b64encode(r.<span class="built_in">read</span>())   <span class="comment">#base64编码：Ylg7b1k0VHBlNEQ4UTI7VlJXOntVMjtJUUlQOGZSP0A=</span></div><div class="line">flag = <span class="string">''</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="built_in">len</span>(key) / <span class="number">4</span>):     <span class="comment">#取4分之1的长度</span></div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):            <span class="comment"># 0-3</span></div><div class="line">        flag += chr(ord(key[i * <span class="number">4</span> + j]) + j)   <span class="comment">#ord(key[i * 4 + j])这一步注意的是变化的是下标。0,1,3,4(i*4+0)5,6,7,8...</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> rflag == flag:  <span class="comment"># bX;oY4Tpe4D8Q2;VRW:&#123;U2;IQIP8fR?@  比较</span></div><div class="line">    print <span class="string">'You are right.'</span></div></pre></td></tr></table></figure></li><li><p>得知流程如下：先将input过一遍base64，然后进行位置数值运算，主要在原基础上+4的模，这个长度为0-3。然后按照位置写入flag，最后和特定字符比较。逆向过程如下：<br>  <img src="https://i.imgur.com/EUtQHP3.png" alt=""></p></li><li>flag:<code>moectf{pyC_RE_1S_E@sy}</code></li></ul><h2 id="你玩过2048么"><a href="#你玩过2048么" class="headerlink" title="你玩过2048么"></a>你玩过2048么</h2><ul><li>第一回答一下：没玩过</li><li>分析一下哈，查找一下字符串，有重点字符串<br>   <img src="https://i.imgur.com/JIQSol1.png" alt=""></li><li>交叉引用一下，找到几处重点区域：<br>   <img src="https://i.imgur.com/evV9K9k.png" alt=""><br>   <img src="https://i.imgur.com/1u0OHif.png" alt=""></li><li>我们分析如下：程序没有输入(利用awsd控制方向)，还有使用了rand伪随机数函数，我们可以判断出，可以使用爆破程序的方式得到flag。</li><li>利用OD，在需要跳转的地方改为jmp，不需要跳转的地方改为nop，修补程序，运行，登上1mins，既可以了。</li><li>flag:<code>moectf{Would_u_Like_Cola?}</code><br>  <img src="https://i.imgur.com/RYgcCmw.png" alt=""></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Re题&quot;&gt;&lt;a href=&quot;#Re题&quot; class=&quot;headerlink&quot; title=&quot;Re题&quot;&gt;&lt;/a&gt;Re题&lt;/h1&gt;&lt;h2 id=&quot;RE1&quot;&gt;&lt;a href=&quot;#RE1&quot; class=&quot;headerlink&quot; title=&quot;RE1&quot;&gt;&lt;/a&gt;RE1&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;签个到，分析一下流程，然后查一下字符，&lt;/li&gt;
&lt;li&gt;得到flag:&lt;code&gt;moectf{Qidao_by_fa1con}&lt;/code&gt;&lt;br&gt;   &lt;img src=&quot;https://i.imgur.com/hUxBv9r.png&quot; alt=&quot;&quot;&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>北邮自招CTF-Re</title>
    <link href="http://yoursite.com/2018/08/01/%E5%8C%97%E9%82%AE%E8%87%AA%E6%8B%9BCTF/"/>
    <id>http://yoursite.com/2018/08/01/北邮自招CTF/</id>
    <published>2018-08-01T06:02:11.000Z</published>
    <updated>2018-08-09T01:15:49.675Z</updated>
    
    <content type="html"><![CDATA[<h2 id="kaisa"><a href="#kaisa" class="headerlink" title="kaisa"></a>kaisa</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;听名字就是知道是一个恺撒密码。</p><ul><li>查壳，检查地址随机化。</li><li>直接F5，发现是个恺撒密码<br>   <img src="https://i.imgur.com/fT6R93g.png" alt=""></li><li>如果是个恺撒的话，肯定存在一个原始数据，经过恺撒变换的。string找一下。<pre><code>![](https://i.imgur.com/ODIW2RZ.png)</code></pre></li><li>双击，查看具体是啥数据，注意前面的m不要漏了<pre><code>![](https://i.imgur.com/yUHWdz5.png)</code></pre><a id="more"></a></li><li>这就结束了，放到解密网站上跑一下就好了<br>   <img src="https://i.imgur.com/t8zVv47.png" alt=""><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">  Output(aInputYourFlag_);</div><div class="line">  <span class="built_in">scanf</span>(aS, flag);</div><div class="line">  Length = <span class="built_in">strlen</span>(flag);</div><div class="line">  v4 = <span class="number">0</span>;</div><div class="line">  <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)Length &gt; <span class="number">0</span> )</div><div class="line">  &#123;</div><div class="line">    v5 = byte_408030;</div><div class="line">    <span class="keyword">do</span></div><div class="line">    &#123;</div><div class="line">      v6 = flag[v4];</div><div class="line">      <span class="keyword">if</span> ( v6 &lt; <span class="string">'a'</span> || v6 &gt; <span class="string">'z'</span> )</div><div class="line">      &#123;</div><div class="line">        <span class="keyword">if</span> ( v6 &gt;= <span class="string">'A'</span> &amp;&amp; v6 &lt;= <span class="string">'Z'</span> )</div><div class="line">          v6 = (<span class="keyword">unsigned</span> __int16)((<span class="keyword">unsigned</span> __int8)(v6 + v5 - <span class="string">'A'</span>) % <span class="number">26</span>) + <span class="string">'A'</span>;<span class="comment">// 大写字母</span></div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span></div><div class="line">      &#123;</div><div class="line">        v6 = (<span class="keyword">unsigned</span> __int16)((<span class="keyword">unsigned</span> __int8)(v6 + v5 - <span class="string">'a'</span>) % <span class="number">26</span>) + <span class="string">'a'</span>;<span class="comment">// 小写字母</span></div><div class="line">      &#125;</div><div class="line">      flag[v4++] = v6;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> ( v4 &lt; (<span class="keyword">signed</span> <span class="keyword">int</span>)Length );          <span class="comment">// 恺撒密码</span></div><div class="line">  &#125;</div><div class="line">  v7 = <span class="number">0</span>;</div><div class="line">  <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)Length &lt;= <span class="number">0</span> )</div><div class="line">  &#123;</div><div class="line">LABEL_13:</div><div class="line">    Output(aFlagIsYourInpu);                    <span class="comment">// 输出</span></div></pre></td></tr></table></figure></li></ul><h2 id="simple"><a href="#simple" class="headerlink" title="simple"></a>simple</h2><ul><li>查壳，检查地址随机化。</li><li><p>直接F5。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"> Output((<span class="keyword">int</span>)aPlzGiveMeYourF, v10);            <span class="comment">// plz give me your flag</span></div><div class="line">  scanf(aS, &amp;<span class="keyword">input</span>);</div><div class="line">  length = strlen(&amp;<span class="keyword">input</span>) + <span class="number">1</span>;</div><div class="line">  <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)(length - <span class="number">1</span>) &gt; <span class="number">31</span> )</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)(length - <span class="number">1</span>) &lt;= <span class="number">40</span> )</div><div class="line">    &#123;</div><div class="line">      Output((<span class="keyword">int</span>)aOkYouCanContin, v3);         <span class="comment">// ok,you can continue!</span></div><div class="line">      v6 = <span class="number">0</span>;</div><div class="line">      v14 = <span class="number">0</span>;</div><div class="line">      <span class="keyword">if</span> ( <span class="keyword">input</span> )</div><div class="line">      &#123;</div><div class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</div><div class="line">        &#123;</div><div class="line">          v7 = byte_408054[v6];</div><div class="line">          v8 = byte_408030[v6] ^ (<span class="number">16</span> * *(&amp;<span class="keyword">input</span> + v6) | ((<span class="keyword">unsigned</span> <span class="number">__</span>int8)*(&amp;<span class="keyword">input</span> + v6) &gt;&gt; <span class="number">4</span>));<span class="comment">// 运算式</span></div><div class="line">          *(&amp;<span class="keyword">input</span> + v6) = v8;</div><div class="line">          <span class="keyword">if</span> ( v8 != v7 )</div><div class="line">  <span class="keyword">break</span>;</div><div class="line">          v9 = v13[v6++];</div><div class="line">          <span class="keyword">if</span> ( !v9 )                            <span class="comment">// v9==0</span></div><div class="line">            goto LABEL_10;</div><div class="line">        &#125;</div><div class="line">        Output((<span class="keyword">int</span>)aNononoYourInpu, v11);      <span class="comment">// nonono, your input is not flag!</span></div><div class="line">LABEL_10:</div><div class="line">        <span class="keyword">if</span> ( v6 == <span class="number">32</span> )                         <span class="comment">// 长度为32</span></div><div class="line">          Output((<span class="keyword">int</span>)aGoodYouVeGotTh, v11);    <span class="comment">// 'good! you',27h,'ve got the flag~~~</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>得到运行流程是：初始化了byte_408054[v6]和byte_408030[v6]，使得byte_408030[v6]经过<code>byte_408030[v6] ^ (16 * *(&amp;input + v6) | ((unsigned __int8)*(&amp;input + v6) &gt;&gt; 4))</code>加密后和byte_408054[v6]每一位比较。相同即可！其他的都是障眼法。但是长度取32位即可！</p></li><li><p>利用z3写出脚本，[划重点，z3相当于一个计算器，如果可以使我们的思维不再逆向化]</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"># -*- coding: UTF-<span class="number">8</span> -*-</div><div class="line">from z3 import *</div><div class="line"></div><div class="line">v6 = [<span class="number">0x4f</span>,<span class="number">0x3b</span>,<span class="number">0x23</span>,<span class="number">0x11</span>,<span class="number">0xe1</span>,<span class="number">0x1f</span>,<span class="number">0xfe</span>,<span class="number">0xb3</span>,<span class="number">0x4b</span>,<span class="number">0xdd</span>,<span class="number">0x75</span>,<span class="number">0xfe</span>,<span class="number">0x47</span>,<span class="number">0xec</span>,<span class="number">0xf2</span>,<span class="number">0x43</span>,<span class="number">0xdc</span>,<span class="number">0x38</span>,<span class="number">0xd4</span>,<span class="number">0x64</span>,<span class="number">0xde</span>,<span class="number">0x45</span>,<span class="number">0xbd</span>,<span class="number">0x01</span>,<span class="number">0x1b</span>,<span class="number">0x04</span>,<span class="number">0xb9</span>,<span class="number">0x89</span>,<span class="number">0x7d</span>,<span class="number">0xb6</span>,<span class="number">0x4e</span>,<span class="number">0xe2</span>]</div><div class="line"></div><div class="line">v7 = [<span class="number">0x6b</span>,<span class="number">0x6e</span>,<span class="number">0x26</span>,<span class="number">0x54</span>,<span class="number">0x56</span>,<span class="number">0x4b</span>,<span class="number">0xe8</span>,<span class="number">0x80</span>,<span class="number">0xdc</span>,<span class="number">0x28</span>,<span class="number">0x46</span>,<span class="number">0x18</span>,<span class="number">0x71</span>,<span class="number">0xcb</span>,<span class="number">0x65</span>,<span class="number">0x44</span>,<span class="number">0x9b</span>,<span class="number">0x2b</span>,<span class="number">0x22</span>,<span class="number">0x82</span>,<span class="number">0x2b</span>,<span class="number">0x56</span>,<span class="number">0x8e</span>,<span class="number">0xe7</span>,<span class="number">0x69</span>,<span class="number">0x41</span>,<span class="number">0x4c</span>,<span class="number">0x1f</span>,<span class="number">0x3a</span>,<span class="number">0x45</span>,<span class="number">0x5c</span>,<span class="number">0x35</span>]</div><div class="line"></div><div class="line">v9 = [BitVec(<span class="string">"v9%d"</span>%i,<span class="number">16</span>) for i <span class="keyword">in</span> range(<span class="number">32</span>)]</div><div class="line"></div><div class="line">#print v9</div><div class="line">S = Solver()</div><div class="line"></div><div class="line">for i <span class="keyword">in</span> range(<span class="number">32</span>):</div><div class="line">    S.add(v9[i] &gt; <span class="number">32</span>)    #<span class="number">20</span>开始</div><div class="line">    S.add(v9[i] &lt; <span class="number">128</span>)   #小于<span class="number">128</span></div><div class="line">    S.add((v7[i]^(((<span class="number">16</span>*(v9[i]))|(v9[i]&gt;&gt;<span class="number">4</span>))<span class="subst">%256</span>)) == v6[i])  #暴力的大小是<span class="number">00</span>-FF(<span class="number">256</span>)之间</div><div class="line"></div><div class="line">if S.check() == sat:</div><div class="line">    m = S.model()</div><div class="line">    flag = <span class="string">''</span></div><div class="line"><span class="string">    for i in range(32):</span></div><div class="line"><span class="string">       flag += chr(m[v9[i]].as_long())</span></div><div class="line"><span class="string">    print flag</span></div></pre></td></tr></table></figure></li><li><p>同样的，你也可以暴力去跑出结果，这两种方式其实差不多，思路是：输入字符从00开始到FF，逐个带入运算表达式，满足条件，进行下一组测试，这道晚上32组测试，结束循环！<br>  <img src="https://i.imgur.com/vqTIiMX.png" alt=""></p></li></ul><h2 id="main"><a href="#main" class="headerlink" title="main"></a>main</h2><ul><li>这题不知道思路是什么，遇到一个问题IDA提示<code>sp-analysis failed</code>,解决方案如下：</li><li><p>找到esp不平衡的地方，在其上面一句，按下ALT+K修复栈指针。<br>   <img src="https://i.imgur.com/QkImnQf.png" alt=""></p></li><li><p>修改的内容是原来的偏移的相反数。</p><pre><code>![](https://i.imgur.com/blZDmWp.png)</code></pre></li><li><p>这样，修改后的ret的偏移为0，可以F5了<br>  <img src="https://i.imgur.com/0upNMwa.png" alt=""><br>  <img src="https://i.imgur.com/eDWqxjk.png" alt=""></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;kaisa&quot;&gt;&lt;a href=&quot;#kaisa&quot; class=&quot;headerlink&quot; title=&quot;kaisa&quot;&gt;&lt;/a&gt;kaisa&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;听名字就是知道是一个恺撒密码。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查壳，检查地址随机化。&lt;/li&gt;
&lt;li&gt;直接F5，发现是个恺撒密码&lt;br&gt;   &lt;img src=&quot;https://i.imgur.com/fT6R93g.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;如果是个恺撒的话，肯定存在一个原始数据，经过恺撒变换的。string找一下。&lt;pre&gt;&lt;code&gt;![](https://i.imgur.com/ODIW2RZ.png)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;双击，查看具体是啥数据，注意前面的m不要漏了&lt;pre&gt;&lt;code&gt;![](https://i.imgur.com/yUHWdz5.png)
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>病毒分析技术(12) ---GandCrab勒索病毒</title>
    <link href="http://yoursite.com/2018/07/31/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF_12_GandCrab%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92/"/>
    <id>http://yoursite.com/2018/07/31/病毒分析技术_12_GandCrab勒索病毒/</id>
    <published>2018-07-31T03:02:11.000Z</published>
    <updated>2018-07-31T03:30:00.874Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;呼，历时4天半，终于完成了对GandCrab病毒的分析，这个病毒是在52破解ScareCrowL前辈的帖子上参考借鉴而来，漫漫病毒分析之路，任重且道远，还好，我们拥有巨人的肩膀，让我们看的更远更多。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先讲一下，为什么分析这个病毒，在四叶草公司实习，几天下来，有点厌倦分析病毒这件事了，哇，想到以后还要干好多年，心态炸了。公司峰哥给我了两个样本，说现在流行勒索和挖矿病毒，客户也中过，叫我去试试分析。然后就有了这篇病毒分析报告。顿时，分析出来有不一样的收获，这是传统病毒不一样的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一月份，GandCrab勒索软件首次亮相，这是一种着名的恶意软件，分布在黑暗网络上，可能源于俄罗斯，主要针对斯堪的纳维亚和英语国家。……（码字太麻烦了，这里有一份关于GandCrab简介，了解一下：<a href="http://baijiahao.baidu.com/s?id=1599794170709869995&amp;wfr=spider&amp;for=pc" target="_blank" rel="external">http://baijiahao.baidu.com/s?id=1599794170709869995&amp;wfr=spider&amp;for=pc</a>）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IDA产生的分析数据库(IDA 6.8)：<a href="https://pan.baidu.com/s/156A8SyhBVMjAKcjlf5SN4Q" target="_blank" rel="external">https://pan.baidu.com/s/156A8SyhBVMjAKcjlf5SN4Q</a></p><h1 id="一：目录"><a href="#一：目录" class="headerlink" title="一：目录"></a>一：目录</h1><ul><li>1.目录</li><li>2.样本信息</li><li>3.行为分析</li><li>4.样本分析</li><li>5.技术总结<a id="more"></a></li></ul><h1 id="二：样本信息"><a href="#二：样本信息" class="headerlink" title="二：样本信息"></a>二：样本信息</h1><ul><li>样本名称：hmieuy.exe</li><li>样本md5：f42774332fb637650ff0e524ce1b1685</li><li>是否加壳：无壳</li><li>编译语言：Microsoft Visual C++ v.10 - 2010 ( E8 ) </li><li>样本来源：<a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=712552&amp;extra=page%3D1%26filter%3Dtypeid%26typeid%3D62" target="_blank" rel="external">https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=712552&amp;extra=page%3D1%26filter%3Dtypeid%26typeid%3D62</a></li></ul><h1 id="三：行为分析"><a href="#三：行为分析" class="headerlink" title="三：行为分析"></a>三：行为分析</h1><ul><li>这个样本的主要作用就是从资源段中检索数据，然后把其加载到内存，经过解密，然后调用解密好的shellcode。</li><li>shellcode主要是调用LoadLibrary和GetProcAddress。获取所需要函数的地址，以便后期的生成新的病毒文件</li><li>重新开辟内存空间，解密新的PE文件，并把它映射入内存，复制文件头和各个区表。</li><li>修复IAT，这样就形成了新的病毒文件，命名为PE1.exe</li><li>PE1.exe采用dll反射注入技术，利用ReflectiveLoader要完成的任务是对自身的装载(这一切都是在内存中发生)</li><li>调用dll文件的入口点</li><li>核心程序的行为<ul><li>获取系统的DNS网域，本地用户名，键盘区域，CPU架构，CPU信息，磁盘驱动器</li><li>连接病毒服务器</li><li>判断病毒进程在系统中是否互斥，如果存在多个相同病毒进程，终止进程。</li><li>检查杀毒软件驱动，如果没有，则复制自身，修改注册表自启动</li><li>寻找并终止指定的进程，因为这些进程可能会影响到对文件的加密</li><li>利用机器数据生成加密赎金ID</li><li>启用微软加密服务</li><li>对磁盘文件除了必要文件必要路径下进行加密</li><li>检查进程安全令牌</li><li>删除卷影副本，避免管理员利用副本进行恢复。</li><li>执行指定的shell操作。<br><img src="https://i.imgur.com/eC9uxdq.png" alt=""></li></ul></li></ul><h1 id="四：样本分析"><a href="#四：样本分析" class="headerlink" title="四：样本分析"></a>四：样本分析</h1><h2 id="原始样本-hmieuy-exe"><a href="#原始样本-hmieuy-exe" class="headerlink" title="原始样本(hmieuy.exe)"></a>原始样本(hmieuy.exe)</h2><ul><li>通读代码，发现EnumResourceNamesA API函数，函数目的是枚举指定的二进制资源，我们可以猜测程序功能是，枚举资源文件，然后映射如内存，经过解密，形成shellcode，然后执行shellcode。<br>  <img src="https://i.imgur.com/PvZwDtY.png" alt=""><br>  <img src="https://i.imgur.com/vezYlfn.png" alt=""></li><li>修改内存保护设置，映射文件到内存，然后解密shellcode并且执行shellcode。<br>  <img src="https://i.imgur.com/mkzAExc.png" alt=""><br>  <img src="https://i.imgur.com/VA8bmL2.png" alt=""></li><li>这是第一层保护</li></ul><h2 id="shellcode-内存中dump而来"><a href="#shellcode-内存中dump而来" class="headerlink" title="shellcode(内存中dump而来)"></a>shellcode(内存中dump而来)</h2><ul><li>利用PEB，获取Kernel32.dll的基地址。<br>  <img src="https://i.imgur.com/nbKHSec.png" alt=""></li><li><p>获取LoadLibrary和GetProcAddress的地址，以便在函数中调用其他函数。这个是使用shellcode最先做的两件事情。</p></li><li><p>再次申请空间，加载解密后续的病毒代码，首先加载文件头，然后遍历节区，<br>  <img src="https://i.imgur.com/l3j6zFP.png" alt=""></p></li><li><p>修改IAT<br>  <img src="https://i.imgur.com/yfKHcwj.png" alt=""></p></li></ul><h2 id="PE1-exe（内存中dump而来）"><a href="#PE1-exe（内存中dump而来）" class="headerlink" title="PE1.exe（内存中dump而来）"></a>PE1.exe（内存中dump而来）</h2><ul><li>观察tmain函数，发现函数流程就是经过三个验证，最后执行sub_11A8.而这个函数是反射式dll注入的主要的函数。<br>  <img src="https://i.imgur.com/n7OGNno.png" alt=""></li><li>调用了函数sub_获取的机器信息和dll导出函数ReflectiveLoader<br>  <img src="https://i.imgur.com/6q0zV9i.png" alt=""><br>  <img src="https://i.imgur.com/Ou7Qzm6.png" alt=""></li><li>修改内存保护设置<br>  <img src="https://i.imgur.com/KGj9daA.png" alt=""></li><li>调用函数ReflectiveLoader，反射式dll注入自身[这是病毒保护自我的重点，了解反射式dll注入的流程]<br>  <img src="https://i.imgur.com/GI8yT8C.png" alt=""><ul><li>1.需要获取被加载到内存dll的基地址，连自己在内存的哪里都不知道，还玩的屁啊<br>  <img src="https://i.imgur.com/f2qlQfB.png" alt=""></li><li>2.利用模块和函数的Hash来获取主要函数的地址。<br>  <img src="https://i.imgur.com/wPYdpd4.png" alt=""><br>  <img src="https://i.imgur.com/ROWnZY4.png" alt=""><br>  <img src="https://i.imgur.com/BqblovG.png" alt=""></li><li>3.分配内存区域，存放dll代码(之前应该已经注入好了)<br>  <img src="https://i.imgur.com/qxZnVxF.png" alt=""></li><li>4.修复，获取IAT<br>  <img src="https://i.imgur.com/mtQK1oz.png" alt=""><br>  <img src="https://i.imgur.com/yMfYKjW.png" alt=""></li><li>5.修复重定位表<br>  <img src="https://i.imgur.com/BvmmJBq.png" alt=""></li><li>6.得到OEP，跳转到dll文件的OEP地址。<br>  <img src="https://i.imgur.com/uJsA6PC.png" alt=""><br>  <img src="https://i.imgur.com/0kvbmST.png" alt=""></li></ul></li></ul><h2 id="PE2-dll-内存中dump而来"><a href="#PE2-dll-内存中dump而来" class="headerlink" title="PE2.dll (内存中dump而来)"></a>PE2.dll (内存中dump而来)</h2><h3 id="整体分析"><a href="#整体分析" class="headerlink" title="整体分析"></a>整体分析</h3><ul><li>病毒发作的前期：<br>  <img src="https://i.imgur.com/OOQMD70.png" alt=""></li><li>病毒发作的中期：<br>  <img src="https://i.imgur.com/afPz1LZ.png" alt=""></li><li>病毒发作的晚期：<br>  <img src="https://i.imgur.com/TETqvdw.png" alt=""></li></ul><h3 id="模块1：收集机器信息，链接url读取文件，生成互斥体"><a href="#模块1：收集机器信息，链接url读取文件，生成互斥体" class="headerlink" title="模块1：收集机器信息，链接url读取文件，生成互斥体"></a>模块1：收集机器信息，链接url读取文件，生成互斥体</h3><ul><li>调用GetInforAndOpenUrl(10007580)获取系统信息，检测进程中是否存在指定给的杀毒软件，然后连接指定的url读取文件<ul><li>系统的DNS网域，</li><li>本地用户名，</li><li>键盘区域，但是病毒并不感染俄罗斯用户<br><img src="https://i.imgur.com/kdfqpjg.png" alt=""></li><li>CPU架构，</li><li>CPU信息，</li><li>磁盘驱动器<br><img src="https://i.imgur.com/68pEhmT.png" alt=""><br><img src="https://i.imgur.com/kAADsGT.png" alt=""></li><li>检测进程中是否存在指定给的杀毒软件<br><img src="https://i.imgur.com/Zk6b7Gd.png" alt=""></li></ul></li><li>连接到指定的URL，并且读取文件<br>  <img src="https://i.imgur.com/opIpqJT.png" alt=""><ul><li>打开Http请求，读取网络文件至缓冲区<br><img src="https://i.imgur.com/ehPElVU.png" alt=""></li></ul></li><li>以自身的硬件信息，生成ranson-id，并由此创建互斥体。<br>  <img src="https://i.imgur.com/qZcvZsM.png" alt=""></li></ul><h3 id="模块2：检测杀软驱动"><a href="#模块2：检测杀软驱动" class="headerlink" title="模块2：检测杀软驱动"></a>模块2：检测杀软驱动</h3><ul><li>检查是否有卡巴斯基和诺顿等杀软的驱动，先检查是否存在卡巴斯基的驱动，如果存在，XXX，如果不存在，在检查其他杀软的驱动，如果都不存在，那就将自身复制，同时写入注册表自启动项。<br>  <img src="https://i.imgur.com/zxUWYA9.png" alt=""><br>  <img src="https://i.imgur.com/MRuX5Qo.png" alt=""><ul><li>将病毒释放到系统目录下。<br><img src="https://i.imgur.com/GEft18W.png" alt=""><br><img src="https://i.imgur.com/0jkOjsc.png" alt=""></li><li>将释放的文件写入注册表Runonce中，以实现病毒的自启。<br><img src="https://i.imgur.com/d2J5sx1.png" alt=""><br><img src="https://i.imgur.com/RrkcJrA.png" alt=""></li></ul></li></ul><h3 id="模块3：关闭相关进程"><a href="#模块3：关闭相关进程" class="headerlink" title="模块3：关闭相关进程"></a>模块3：关闭相关进程</h3><ul><li>由于在进程文件加密的时候，不允许进程占用，所以需要终止某些特定的进程。<br>  <img src="https://i.imgur.com/e2s1k5a.png" alt=""><br>  <img src="https://i.imgur.com/FIvNDBH.png" alt=""></li></ul><h3 id="模块4：利用机器数据生成RansomID"><a href="#模块4：利用机器数据生成RansomID" class="headerlink" title="模块4：利用机器数据生成RansomID"></a>模块4：利用机器数据生成RansomID</h3><ul><li>产生了支付赎金的赎金ID，这个是由的pc_group和机器识别码生成的，<br>   <img src="https://i.imgur.com/Z6mfW5R.png" alt=""><br>   <img src="https://i.imgur.com/KBg0LHc.png" alt=""></li><li>同时为了受害者方便交付赎金，提供了安装洋葱浏览器的教程，卧槽真的贴心。<br>  <img src="https://i.imgur.com/5XAHwt6.png" alt=""></li></ul><h3 id="模块5：启用微软的CSP加密服务"><a href="#模块5：启用微软的CSP加密服务" class="headerlink" title="模块5：启用微软的CSP加密服务"></a>模块5：启用微软的CSP加密服务</h3><ul><li>利用CryptAcquireContextW创建CSP密码容器句柄</li><li>利用 CryptGenKey产生随机秘钥<ul><li>生成密钥有两种方式，CryptGenKey（生成随机密钥）和CryptImportKey（导入密钥），病毒使用了CryptGenKey方式。另：Microsoft Base Cryptographic Provider v1.0：密钥长度为512位。Microsoft Enhanced Cryptographic Provider v1.0：密钥长度为1024位</li></ul></li><li>加密</li><li>销毁容器<br>  <img src="https://i.imgur.com/DsGbt7D.png" alt=""></li></ul><h3 id="模块6：发送Base加密后的公秘钥"><a href="#模块6：发送Base加密后的公秘钥" class="headerlink" title="模块6：发送Base加密后的公秘钥"></a>模块6：发送Base加密后的公秘钥</h3><ul><li>产生特征的编码字符<br>   <img src="https://i.imgur.com/dHAI6aq.png" alt=""><br>   <img src="https://i.imgur.com/wBqkB1a.png" alt=""></li><li>将RSA生成的秘钥和公钥利用CryptBinaryToStringA函数Base64加密，以便后期网路传输。<br>   <img src="https://i.imgur.com/r3cUppG.png" alt=""><br>   <img src="https://i.imgur.com/EnkzDN8.png" alt=""></li><li>检索系统信息，然后再进行Base64编码。<br>   <img src="https://i.imgur.com/QQH8O1N.png" alt=""></li><li>将获取的机器信息的Base64编码连接到秘钥的后面<br>   <img src="https://i.imgur.com/QkwfWEK.png" alt=""></li><li>读取之前释放到Hacky目录下的病毒，可以是利用后续的函数进行父子进程共享该段数据。<br>   <img src="https://i.imgur.com/yVfAJo8.png" alt=""></li><li>建立管道通信，解析域名，判断网络连接是否正常<br>   <img src="https://i.imgur.com/RqupYhR.png" alt=""></li></ul><h4 id="模块7：建立管道通信"><a href="#模块7：建立管道通信" class="headerlink" title="模块7：建立管道通信"></a>模块7：建立管道通信</h4><ul><li>首先将三个域名传入。<ul><li>malwarehunterteam.bit</li><li>politiaromana.bit</li><li>gdcb.bit<br><img src="https://i.imgur.com/ItxAF0B.png" alt=""></li></ul></li><li>创建管道连接，管道的作用是实现进程之间的消息交互<br>  <img src="https://i.imgur.com/RtZbJku.png" alt=""></li><li>利用管道的通信机制，创建一个子进程，命令行参数是<code>nslookup %s ns1.virmach.ru</code>,目的是解析之前穿入的三个域名。读取文件，判断是否联网，如果没有联网，readfile的buf存在error信息，程序进程死循环<br>  <img src="https://i.imgur.com/J9VA1ME.png" alt=""><br>  <img src="https://i.imgur.com/L5Iyfk2.png" alt=""><br>  <img src="https://i.imgur.com/0fVO0Ez.png" alt=""></li><li>管道输入的一般新步骤：<br>  <img src="https://i.imgur.com/WULxnv0.png" alt=""></li><li>修补可执行文件，我们将一些关键A24FF4等跳转jmp或者nop掉即可实现。</li></ul><h3 id="模块8：文件加密部分"><a href="#模块8：文件加密部分" class="headerlink" title="模块8：文件加密部分"></a>模块8：文件加密部分</h3><ul><li>病毒首先需要获取机器的磁盘驱动器。除了CD-ROM其他的驱动器都被感染，对于搜索到的每个驱动器，释放一个线程，进行加密。加快加密的速度。<br>  <img src="https://i.imgur.com/wb6XSnA.png" alt=""></li><li>病毒不会感染特殊目录和特殊格式的文件<br>  <img src="https://i.imgur.com/FIIqbOy.png" alt=""><br>  <img src="https://i.imgur.com/nZOfPMo.png" alt=""></li><li>然后在驱动器中遍历，如果是文档则递归调用原函数，负责调用加密函数。<br>  <img src="https://i.imgur.com/cjUyEjo.png" alt=""><br>  <img src="https://i.imgur.com/6AUZn7Q.png" alt=""></li><li>管道通信</li></ul><h3 id="模块9：安全令牌检测"><a href="#模块9：安全令牌检测" class="headerlink" title="模块9：安全令牌检测"></a>模块9：安全令牌检测</h3><ul><li>检测进程的安全令牌<br>   <img src="https://i.imgur.com/t070Q5s.png" alt=""></li></ul><h3 id="模块10：删除卷影副本"><a href="#模块10：删除卷影副本" class="headerlink" title="模块10：删除卷影副本"></a>模块10：删除卷影副本</h3><ul><li>利用shellExecute函数执行cmd，参数是<code>/c vssadmin delete shadows /all /quiet</code>，删除卷影副本，目的是不让管理员恢复数据。<br>  <img src="https://i.imgur.com/ZJpP1Fo.png" alt=""><br>  <img src="https://i.imgur.com/BT6ynew.png" alt=""></li></ul><h1 id="五：技术总结"><a href="#五：技术总结" class="headerlink" title="五：技术总结"></a>五：技术总结</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GandCrab病毒主要采用到的技术有，shellcode藏匿，利用shellcode的短小的特点，触发shellcode到内存，减少了被杀毒软件查杀的风险。经过第一层加密后，病毒释放了一个恶意代码文件(PE1.exe)，该文件采用的是反射式dll注入技术，该技术不想传统的dll注入需要在文件系统中产生文件，所要执行的dll全在内存中，这是第二层保护手段。经过两次dump后，可以得到本次病毒的主体文件，建立了管道，实现子进程和父进程之间的通信。</p><h2 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;需要细细的看，参考自：<a href="https://zhuanlan.zhihu.com/p/28788521" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/28788521</a></p><h2 id="反射式dll注入"><a href="#反射式dll注入" class="headerlink" title="反射式dll注入"></a>反射式dll注入</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;传统的dll注入，是在文件系统中存放一个dll模块，然后进程利用LoadLibrary和CreateRemoteThread这两个API函数装载模块到内存空间，实现注入。而杀软在布置Hook的时候，重点钩取的就是这两种API函数。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;反射式dll注入不需要dll文件落地，减少被查杀的风险。首先将需要注入的dll写入进程内存，然后为该dll添加一个导出函数，利用这个导出函数让其自动的装载dll。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;主要有两个方向的问题：第一个如何将dll写入内存(注射器的实现),第二个如果调用自身(ReflectiveLoader的实现)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;参考自：<a href="http://www.freebuf.com/articles/system/151161.html" target="_blank" rel="external">http://www.freebuf.com/articles/system/151161.html</a></p><h3 id="注射器的实现"><a href="#注射器的实现" class="headerlink" title="注射器的实现"></a>注射器的实现</h3><ul><li>1.将待注入DLL读入自身内存(利用解密磁盘上加密的文件、网络传输等方式避免文件落地)</li><li>2.利用VirtualAlloc和WriteProcessMemory在目标进程中写入待注入的DLL文件</li><li>3.利用CreateRemoteThread等函数启动位于目标进程中的ReflectiveLoader</li></ul><h3 id="ReflectiveLoader的实现"><a href="#ReflectiveLoader的实现" class="headerlink" title="ReflectiveLoader的实现"></a>ReflectiveLoader的实现</h3><ul><li>1.定位DLL文件在内存中的基址</li><li>2.获取所需的系统API</li><li>3.分配一片用来装载DLL的空间</li><li>4.复制PE文件头和各个节</li><li>5.处理DLL的引入表,修复重定位表</li><li>6.调用DLL入口点</li></ul><h2 id="管道通信"><a href="#管道通信" class="headerlink" title="管道通信"></a>管道通信</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;管道是一种用于在进程间共享数据的机制，其实质是一段共享内存，病毒利用了管道进行父子进程的通信，这样子进程就可以直接影响父进程内存。为实现父子进程间通信，需要对子进程的管道进行重定向：创建子进程函数 CreateProcess中有一个参数STARUIINFO，默认情况下子进程的输入输出管道是标准输入输出流，可以通过下面的方法实现管道重定向：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">STARTUPINFO si;</div><div class="line">si.hStdInput   = hPipeInputRead;   <span class="regexp">//</span>输入由标准输入 -&gt; 从管道中读取</div><div class="line">si.hStdOutput  = hPipeOutputWrite; <span class="regexp">//</span>输出由标准输出 -&gt; 输出到管道</div></pre></td></tr></table></figure></p><p>摘录自<a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=712552&amp;extra=page%3D1%26filter%3Dtypeid%26typeid%3D62" target="_blank" rel="external">https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=712552&amp;extra=page%3D1%26filter%3Dtypeid%26typeid%3D62</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;呼，历时4天半，终于完成了对GandCrab病毒的分析，这个病毒是在52破解ScareCrowL前辈的帖子上参考借鉴而来，漫漫病毒分析之路，任重且道远，还好，我们拥有巨人的肩膀，让我们看的更远更多。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;首先讲一下，为什么分析这个病毒，在四叶草公司实习，几天下来，有点厌倦分析病毒这件事了，哇，想到以后还要干好多年，心态炸了。公司峰哥给我了两个样本，说现在流行勒索和挖矿病毒，客户也中过，叫我去试试分析。然后就有了这篇病毒分析报告。顿时，分析出来有不一样的收获，这是传统病毒不一样的。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;一月份，GandCrab勒索软件首次亮相，这是一种着名的恶意软件，分布在黑暗网络上，可能源于俄罗斯，主要针对斯堪的纳维亚和英语国家。……（码字太麻烦了，这里有一份关于GandCrab简介，了解一下：&lt;a href=&quot;http://baijiahao.baidu.com/s?id=1599794170709869995&amp;amp;wfr=spider&amp;amp;for=pc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://baijiahao.baidu.com/s?id=1599794170709869995&amp;amp;wfr=spider&amp;amp;for=pc&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;IDA产生的分析数据库(IDA 6.8)：&lt;a href=&quot;https://pan.baidu.com/s/156A8SyhBVMjAKcjlf5SN4Q&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://pan.baidu.com/s/156A8SyhBVMjAKcjlf5SN4Q&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;一：目录&quot;&gt;&lt;a href=&quot;#一：目录&quot; class=&quot;headerlink&quot; title=&quot;一：目录&quot;&gt;&lt;/a&gt;一：目录&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;1.目录&lt;/li&gt;
&lt;li&gt;2.样本信息&lt;/li&gt;
&lt;li&gt;3.行为分析&lt;/li&gt;
&lt;li&gt;4.样本分析&lt;/li&gt;
&lt;li&gt;5.技术总结
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
</feed>
