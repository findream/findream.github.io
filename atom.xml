<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>findream&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-02T06:25:40.122Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>findream</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>西电CTF(moectf)</title>
    <link href="http://yoursite.com/2018/08/02/%E8%A5%BF%E7%94%B5CTF(moectf)/"/>
    <id>http://yoursite.com/2018/08/02/西电CTF(moectf)/</id>
    <published>2018-08-02T06:02:11.000Z</published>
    <updated>2018-08-02T06:25:40.122Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Re题"><a href="#Re题" class="headerlink" title="Re题"></a>Re题</h1><h2 id="RE1"><a href="#RE1" class="headerlink" title="RE1"></a>RE1</h2><ul><li>签个到，分析一下流程，然后查一下字符，</li><li>得到flag:<code>moectf{Qidao_by_fa1con}</code><br>   <img src="https://i.imgur.com/hUxBv9r.png" alt=""></li></ul><h2 id="RE2"><a href="#RE2" class="headerlink" title="RE2:"></a>RE2:</h2><ul><li><p>流程如下：程序经过将input和特定值1xor之后20位后，将22位数据与特定值2进行比较。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">printf(<span class="string">"Please enter the flag:"</span>);</div><div class="line">fgets(&amp;Buf, <span class="number">29</span>, __iob);</div><div class="line">for ( i = <span class="number">0</span>; i &lt;= <span class="number">19</span>; ++i )</div><div class="line">  v27[i - <span class="number">48</span>] ^= v27[i - <span class="number">80</span>];                 <span class="comment">// string_hex^input</span></div><div class="line">for ( i = <span class="number">0</span>; i &lt;= <span class="number">21</span> &amp;&amp; v27[i - <span class="number">48</span>] == v27[i - <span class="number">112</span>]; ++i )</div><div class="line">  ;                                           <span class="comment">// 75 5A 70 55 41 73 2C 49 46 75 39 65 3E 4F 25 73 60  </span></div><div class="line">                                              <span class="comment">// 66 38 5A 21 7D                                   </span></div><div class="line">if ( i == <span class="number">22</span> )</div><div class="line">  printf(<span class="string">"conglution!"</span>);</div></pre></td></tr></table></figure></li><li><p>利用OD调试一下，发现特定值1为<code>0x75,0x5A,0x70,0x55,0x41,0x73,0x2C,0x49,0x46,0x75,0x39,0x65,0x3E,0x4F,0x25,0x73,0x60,0x66,0x38,0x5A,0x21,0x7D</code><br>   <img src="https://i.imgur.com/XIxCTDE.png" alt=""></p></li><li><p>特定值2为<code>0x18,0x35,0x15,0x36,0x35,0x15,0x57,0x20,0x15,0x2A,0x4F,0x20,0x4C,0x36,0x7A,0x36,0x20,0x15,0x41,0x7B</code><br>  <img src="https://i.imgur.com/QIUrnjT.png" alt=""></p></li><li><p>写出脚本</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">int main(void)</div><div class="line">&#123;</div><div class="line">int num1[<span class="number">22</span>]=&#123;<span class="number">0x75</span>,<span class="number">0x5A</span>,<span class="number">0x70</span>,<span class="number">0x55</span>,<span class="number">0x41</span>,<span class="number">0x73</span>,<span class="number">0x2C</span>,<span class="number">0x49</span>,<span class="number">0x46</span>,<span class="number">0x75</span>,<span class="number">0x39</span>,<span class="number">0x65</span>,<span class="number">0x3E</span>,<span class="number">0x4F</span>,<span class="number">0x25</span>,<span class="number">0x73</span>,<span class="number">0x60</span>,<span class="number">0x66</span>,<span class="number">0x38</span>,<span class="number">0x5A</span>,<span class="number">0x21</span>,<span class="number">0x7D</span>&#125;;</div><div class="line">int num2[<span class="number">20</span>]=&#123;<span class="number">0x18</span>,<span class="number">0x35</span>,<span class="number">0x15</span>,<span class="number">0x36</span>,<span class="number">0x35</span>,<span class="number">0x15</span>,<span class="number">0x57</span>,<span class="number">0x20</span>,<span class="number">0x15</span>,<span class="number">0x2A</span>,<span class="number">0x4F</span>,<span class="number">0x20</span>,<span class="number">0x4C</span>,<span class="number">0x36</span>,<span class="number">0x7A</span>,<span class="number">0x36</span>,<span class="number">0x20</span>,<span class="number">0x15</span>,<span class="number">0x41</span>,<span class="number">0x7B</span>&#125;;</div><div class="line">for(int i=<span class="number">0</span>;i&lt;=<span class="number">19</span>;i++)</div><div class="line">num1[i]=num1[i]^num2[i];</div><div class="line">for(int i=<span class="number">0</span>;i&lt;=<span class="number">21</span>;i++)</div><div class="line">printf(<span class="string">"%c"</span>,num1[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>flag:<code>moectf{iS_vEry_E@sy!!}</code></p></li></ul><h1 id="py逆向"><a href="#py逆向" class="headerlink" title="py逆向"></a>py逆向</h1><ul><li><p>利用网上的反编译工具，反编译如下：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># visit http://tool.lu/pyc/ for more information</span></div><div class="line">import base64</div><div class="line">r = <span class="built_in">open</span>(<span class="string">'flag'</span>, <span class="string">'r'</span>)   <span class="comment"># 输入</span></div><div class="line">rflag = <span class="string">'bX;oY4Tpe4D8Q2;VRW:&#123;U2;IQIP8fR?@'</span></div><div class="line">key = base64.b64encode(r.<span class="built_in">read</span>())   <span class="comment">#base64编码：Ylg7b1k0VHBlNEQ4UTI7VlJXOntVMjtJUUlQOGZSP0A=</span></div><div class="line">flag = <span class="string">''</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="built_in">len</span>(key) / <span class="number">4</span>):     <span class="comment">#取4分之1的长度</span></div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):            <span class="comment"># 0-3</span></div><div class="line">        flag += chr(ord(key[i * <span class="number">4</span> + j]) + j)   <span class="comment">#ord(key[i * 4 + j])这一步注意的是变化的是下标。0,1,3,4(i*4+0)5,6,7,8...</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> rflag == flag:  <span class="comment"># bX;oY4Tpe4D8Q2;VRW:&#123;U2;IQIP8fR?@  比较</span></div><div class="line">    print <span class="string">'You are right.'</span></div></pre></td></tr></table></figure></li><li><p>得知流程如下：先将input过一遍base64，然后进行位置数值运算，主要在原基础上+4的模，这个长度为0-3。然后按照位置写入flag，最后和特定字符比较。逆向过程如下：<br>  <img src="https://i.imgur.com/EUtQHP3.png" alt=""></p></li><li>flag:<code>moectf{pyC_RE_1S_E@sy}</code></li></ul><h1 id="你玩过2048么"><a href="#你玩过2048么" class="headerlink" title="你玩过2048么"></a>你玩过2048么</h1><ul><li>第一回答一下：没玩过</li><li>分析一下哈，查找一下字符串，有重点字符串<br>   <img src="https://i.imgur.com/JIQSol1.png" alt=""></li><li>交叉引用一下，找到几处重点区域：<br>   <img src="https://i.imgur.com/evV9K9k.png" alt=""><br>   <img src="https://i.imgur.com/1u0OHif.png" alt=""></li><li>我们分析如下：程序没有输入(利用awsd控制方向)，还有使用了rand伪随机数函数，我们可以判断出，可以使用爆破程序的方式得到flag。</li><li>利用OD，在需要跳转的地方改为jmp，不需要跳转的地方改为nop，修补程序，运行，登上1mins，既可以了。</li><li>flag:<code>moectf{Would_u_Like_Cola?}</code><br>  <img src="https://i.imgur.com/RYgcCmw.png" alt=""></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Re题&quot;&gt;&lt;a href=&quot;#Re题&quot; class=&quot;headerlink&quot; title=&quot;Re题&quot;&gt;&lt;/a&gt;Re题&lt;/h1&gt;&lt;h2 id=&quot;RE1&quot;&gt;&lt;a href=&quot;#RE1&quot; class=&quot;headerlink&quot; title=&quot;RE1&quot;&gt;&lt;/a&gt;RE1&lt;/h
      
    
    </summary>
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>北邮自招CTF-Re</title>
    <link href="http://yoursite.com/2018/08/01/%E5%8C%97%E9%82%AE%E8%87%AA%E6%8B%9BCTF/"/>
    <id>http://yoursite.com/2018/08/01/北邮自招CTF/</id>
    <published>2018-08-01T06:02:11.000Z</published>
    <updated>2018-08-02T01:25:26.965Z</updated>
    
    <content type="html"><![CDATA[<h2 id="kaisa"><a href="#kaisa" class="headerlink" title="kaisa"></a>kaisa</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;听名字就是知道是一个恺撒密码。</p><ul><li>查壳，检查地址随机化。</li><li>直接F5，发现是个恺撒密码<br>   <img src="https://i.imgur.com/fT6R93g.png" alt=""></li><li>如果是个恺撒的话，肯定存在一个原始数据，经过恺撒变换的。string找一下。<pre><code>![](https://i.imgur.com/ODIW2RZ.png)</code></pre></li><li>双击，查看具体是啥数据，注意前面的m不要漏了<pre><code>![](https://i.imgur.com/yUHWdz5.png)</code></pre></li><li>这就结束了，放到解密网站上跑一下就好了<br>   <img src="https://i.imgur.com/t8zVv47.png" alt=""><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">  Output(aInputYourFlag_);</div><div class="line">  <span class="built_in">scanf</span>(aS, flag);</div><div class="line">  Length = <span class="built_in">strlen</span>(flag);</div><div class="line">  v4 = <span class="number">0</span>;</div><div class="line">  <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)Length &gt; <span class="number">0</span> )</div><div class="line">  &#123;</div><div class="line">    v5 = byte_408030;</div><div class="line">    <span class="keyword">do</span></div><div class="line">    &#123;</div><div class="line">      v6 = flag[v4];</div><div class="line">      <span class="keyword">if</span> ( v6 &lt; <span class="string">'a'</span> || v6 &gt; <span class="string">'z'</span> )</div><div class="line">      &#123;</div><div class="line">        <span class="keyword">if</span> ( v6 &gt;= <span class="string">'A'</span> &amp;&amp; v6 &lt;= <span class="string">'Z'</span> )</div><div class="line">          v6 = (<span class="keyword">unsigned</span> __int16)((<span class="keyword">unsigned</span> __int8)(v6 + v5 - <span class="string">'A'</span>) % <span class="number">26</span>) + <span class="string">'A'</span>;<span class="comment">// 大写字母</span></div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span></div><div class="line">      &#123;</div><div class="line">        v6 = (<span class="keyword">unsigned</span> __int16)((<span class="keyword">unsigned</span> __int8)(v6 + v5 - <span class="string">'a'</span>) % <span class="number">26</span>) + <span class="string">'a'</span>;<span class="comment">// 小写字母</span></div><div class="line">      &#125;</div><div class="line">      flag[v4++] = v6;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> ( v4 &lt; (<span class="keyword">signed</span> <span class="keyword">int</span>)Length );          <span class="comment">// 恺撒密码</span></div><div class="line">  &#125;</div><div class="line">  v7 = <span class="number">0</span>;</div><div class="line">  <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)Length &lt;= <span class="number">0</span> )</div><div class="line">  &#123;</div><div class="line">LABEL_13:</div><div class="line">    Output(aFlagIsYourInpu);                    <span class="comment">// 输出</span></div></pre></td></tr></table></figure></li></ul><h2 id="simple"><a href="#simple" class="headerlink" title="simple"></a>simple</h2><ul><li>查壳，检查地址随机化。</li><li><p>直接F5。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"> Output((<span class="keyword">int</span>)aPlzGiveMeYourF, v10);            <span class="comment">// plz give me your flag</span></div><div class="line">  scanf(aS, &amp;<span class="keyword">input</span>);</div><div class="line">  length = strlen(&amp;<span class="keyword">input</span>) + <span class="number">1</span>;</div><div class="line">  <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)(length - <span class="number">1</span>) &gt; <span class="number">31</span> )</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)(length - <span class="number">1</span>) &lt;= <span class="number">40</span> )</div><div class="line">    &#123;</div><div class="line">      Output((<span class="keyword">int</span>)aOkYouCanContin, v3);         <span class="comment">// ok,you can continue!</span></div><div class="line">      v6 = <span class="number">0</span>;</div><div class="line">      v14 = <span class="number">0</span>;</div><div class="line">      <span class="keyword">if</span> ( <span class="keyword">input</span> )</div><div class="line">      &#123;</div><div class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</div><div class="line">        &#123;</div><div class="line">          v7 = byte_408054[v6];</div><div class="line">          v8 = byte_408030[v6] ^ (<span class="number">16</span> * *(&amp;<span class="keyword">input</span> + v6) | ((<span class="keyword">unsigned</span> <span class="number">__</span>int8)*(&amp;<span class="keyword">input</span> + v6) &gt;&gt; <span class="number">4</span>));<span class="comment">// 运算式</span></div><div class="line">          *(&amp;<span class="keyword">input</span> + v6) = v8;</div><div class="line">          <span class="keyword">if</span> ( v8 != v7 )</div><div class="line">  <span class="keyword">break</span>;</div><div class="line">          v9 = v13[v6++];</div><div class="line">          <span class="keyword">if</span> ( !v9 )                            <span class="comment">// v9==0</span></div><div class="line">            goto LABEL_10;</div><div class="line">        &#125;</div><div class="line">        Output((<span class="keyword">int</span>)aNononoYourInpu, v11);      <span class="comment">// nonono, your input is not flag!</span></div><div class="line">LABEL_10:</div><div class="line">        <span class="keyword">if</span> ( v6 == <span class="number">32</span> )                         <span class="comment">// 长度为32</span></div><div class="line">          Output((<span class="keyword">int</span>)aGoodYouVeGotTh, v11);    <span class="comment">// 'good! you',27h,'ve got the flag~~~</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>得到运行流程是：初始化了byte_408054[v6]和byte_408030[v6]，使得byte_408030[v6]经过<code>byte_408030[v6] ^ (16 * *(&amp;input + v6) | ((unsigned __int8)*(&amp;input + v6) &gt;&gt; 4))</code>加密后和byte_408054[v6]每一位比较。相同即可！其他的都是障眼法。但是长度取32位即可！</p></li><li><p>利用z3写出脚本，[划重点，z3相当于一个计算器，如果可以使我们的思维不再逆向化]</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"># -*- coding: UTF-<span class="number">8</span> -*-</div><div class="line">from z3 import *</div><div class="line"></div><div class="line">v6 = [<span class="number">0x4f</span>,<span class="number">0x3b</span>,<span class="number">0x23</span>,<span class="number">0x11</span>,<span class="number">0xe1</span>,<span class="number">0x1f</span>,<span class="number">0xfe</span>,<span class="number">0xb3</span>,<span class="number">0x4b</span>,<span class="number">0xdd</span>,<span class="number">0x75</span>,<span class="number">0xfe</span>,<span class="number">0x47</span>,<span class="number">0xec</span>,<span class="number">0xf2</span>,<span class="number">0x43</span>,<span class="number">0xdc</span>,<span class="number">0x38</span>,<span class="number">0xd4</span>,<span class="number">0x64</span>,<span class="number">0xde</span>,<span class="number">0x45</span>,<span class="number">0xbd</span>,<span class="number">0x01</span>,<span class="number">0x1b</span>,<span class="number">0x04</span>,<span class="number">0xb9</span>,<span class="number">0x89</span>,<span class="number">0x7d</span>,<span class="number">0xb6</span>,<span class="number">0x4e</span>,<span class="number">0xe2</span>]</div><div class="line"></div><div class="line">v7 = [<span class="number">0x6b</span>,<span class="number">0x6e</span>,<span class="number">0x26</span>,<span class="number">0x54</span>,<span class="number">0x56</span>,<span class="number">0x4b</span>,<span class="number">0xe8</span>,<span class="number">0x80</span>,<span class="number">0xdc</span>,<span class="number">0x28</span>,<span class="number">0x46</span>,<span class="number">0x18</span>,<span class="number">0x71</span>,<span class="number">0xcb</span>,<span class="number">0x65</span>,<span class="number">0x44</span>,<span class="number">0x9b</span>,<span class="number">0x2b</span>,<span class="number">0x22</span>,<span class="number">0x82</span>,<span class="number">0x2b</span>,<span class="number">0x56</span>,<span class="number">0x8e</span>,<span class="number">0xe7</span>,<span class="number">0x69</span>,<span class="number">0x41</span>,<span class="number">0x4c</span>,<span class="number">0x1f</span>,<span class="number">0x3a</span>,<span class="number">0x45</span>,<span class="number">0x5c</span>,<span class="number">0x35</span>]</div><div class="line"></div><div class="line">v9 = [BitVec(<span class="string">"v9%d"</span>%i,<span class="number">16</span>) for i <span class="keyword">in</span> range(<span class="number">32</span>)]</div><div class="line"></div><div class="line">#print v9</div><div class="line">S = Solver()</div><div class="line"></div><div class="line">for i <span class="keyword">in</span> range(<span class="number">32</span>):</div><div class="line">    S.add(v9[i] &gt; <span class="number">32</span>)    #<span class="number">20</span>开始</div><div class="line">    S.add(v9[i] &lt; <span class="number">128</span>)   #小于<span class="number">128</span></div><div class="line">    S.add((v7[i]^(((<span class="number">16</span>*(v9[i]))|(v9[i]&gt;&gt;<span class="number">4</span>))<span class="subst">%256</span>)) == v6[i])  #暴力的大小是<span class="number">00</span>-FF(<span class="number">256</span>)之间</div><div class="line"></div><div class="line">if S.check() == sat:</div><div class="line">    m = S.model()</div><div class="line">    flag = <span class="string">''</span></div><div class="line"><span class="string">    for i in range(32):</span></div><div class="line"><span class="string">       flag += chr(m[v9[i]].as_long())</span></div><div class="line"><span class="string">    print flag</span></div></pre></td></tr></table></figure></li><li><p>同样的，你也可以暴力去跑出结果，这两种方式其实差不多，思路是：输入字符从00开始到FF，逐个带入运算表达式，满足条件，进行下一组测试，这道晚上32组测试，结束循环！<br>  <img src="https://i.imgur.com/vqTIiMX.png" alt=""></p></li></ul><h1 id="main"><a href="#main" class="headerlink" title="main"></a>main</h1><ul><li>这题不知道思路是什么，遇到一个问题IDA提示<code>sp-analysis failed</code>,解决方案如下：</li><li><p>找到esp不平衡的地方，在其上面一句，按下ALT+K修复栈指针。<br>   <img src="https://i.imgur.com/QkImnQf.png" alt=""></p></li><li><p>修改的内容是原来的偏移的相反数。</p><pre><code>![](https://i.imgur.com/blZDmWp.png)</code></pre></li><li><p>这样，修改后的ret的偏移为0，可以F5了<br>  <img src="https://i.imgur.com/0upNMwa.png" alt=""><br>  <img src="https://i.imgur.com/eDWqxjk.png" alt=""></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;kaisa&quot;&gt;&lt;a href=&quot;#kaisa&quot; class=&quot;headerlink&quot; title=&quot;kaisa&quot;&gt;&lt;/a&gt;kaisa&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;听名字就
      
    
    </summary>
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>病毒分析技术(12) ---GandCrab勒索病毒</title>
    <link href="http://yoursite.com/2018/07/31/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF(12)%20---GandCrab%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92/"/>
    <id>http://yoursite.com/2018/07/31/病毒分析技术(12) ---GandCrab勒索病毒/</id>
    <published>2018-07-31T03:02:11.000Z</published>
    <updated>2018-07-31T03:30:00.874Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;呼，历时4天半，终于完成了对GandCrab病毒的分析，这个病毒是在52破解ScareCrowL前辈的帖子上参考借鉴而来，漫漫病毒分析之路，任重且道远，还好，我们拥有巨人的肩膀，让我们看的更远更多。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先讲一下，为什么分析这个病毒，在四叶草公司实习，几天下来，有点厌倦分析病毒这件事了，哇，想到以后还要干好多年，心态炸了。公司峰哥给我了两个样本，说现在流行勒索和挖矿病毒，客户也中过，叫我去试试分析。然后就有了这篇病毒分析报告。顿时，分析出来有不一样的收获，这是传统病毒不一样的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一月份，GandCrab勒索软件首次亮相，这是一种着名的恶意软件，分布在黑暗网络上，可能源于俄罗斯，主要针对斯堪的纳维亚和英语国家。……（码字太麻烦了，这里有一份关于GandCrab简介，了解一下：<a href="http://baijiahao.baidu.com/s?id=1599794170709869995&amp;wfr=spider&amp;for=pc" target="_blank" rel="external">http://baijiahao.baidu.com/s?id=1599794170709869995&amp;wfr=spider&amp;for=pc</a>）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IDA产生的分析数据库(IDA 6.8)：<a href="https://pan.baidu.com/s/156A8SyhBVMjAKcjlf5SN4Q" target="_blank" rel="external">https://pan.baidu.com/s/156A8SyhBVMjAKcjlf5SN4Q</a></p><h1 id="一：目录"><a href="#一：目录" class="headerlink" title="一：目录"></a>一：目录</h1><ul><li>1.目录</li><li>2.样本信息</li><li>3.行为分析</li><li>4.样本分析</li><li>5.技术总结<a id="more"></a></li></ul><h1 id="二：样本信息"><a href="#二：样本信息" class="headerlink" title="二：样本信息"></a>二：样本信息</h1><ul><li>样本名称：hmieuy.exe</li><li>样本md5：f42774332fb637650ff0e524ce1b1685</li><li>是否加壳：无壳</li><li>编译语言：Microsoft Visual C++ v.10 - 2010 ( E8 ) </li><li>样本来源：<a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=712552&amp;extra=page%3D1%26filter%3Dtypeid%26typeid%3D62" target="_blank" rel="external">https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=712552&amp;extra=page%3D1%26filter%3Dtypeid%26typeid%3D62</a></li></ul><h1 id="三：行为分析"><a href="#三：行为分析" class="headerlink" title="三：行为分析"></a>三：行为分析</h1><ul><li>这个样本的主要作用就是从资源段中检索数据，然后把其加载到内存，经过解密，然后调用解密好的shellcode。</li><li>shellcode主要是调用LoadLibrary和GetProcAddress。获取所需要函数的地址，以便后期的生成新的病毒文件</li><li>重新开辟内存空间，解密新的PE文件，并把它映射入内存，复制文件头和各个区表。</li><li>修复IAT，这样就形成了新的病毒文件，命名为PE1.exe</li><li>PE1.exe采用dll反射注入技术，利用ReflectiveLoader要完成的任务是对自身的装载(这一切都是在内存中发生)</li><li>调用dll文件的入口点</li><li>核心程序的行为<ul><li>获取系统的DNS网域，本地用户名，键盘区域，CPU架构，CPU信息，磁盘驱动器</li><li>连接病毒服务器</li><li>判断病毒进程在系统中是否互斥，如果存在多个相同病毒进程，终止进程。</li><li>检查杀毒软件驱动，如果没有，则复制自身，修改注册表自启动</li><li>寻找并终止指定的进程，因为这些进程可能会影响到对文件的加密</li><li>利用机器数据生成加密赎金ID</li><li>启用微软加密服务</li><li>对磁盘文件除了必要文件必要路径下进行加密</li><li>检查进程安全令牌</li><li>删除卷影副本，避免管理员利用副本进行恢复。</li><li>执行指定的shell操作。<br><img src="https://i.imgur.com/eC9uxdq.png" alt=""></li></ul></li></ul><h1 id="四：样本分析"><a href="#四：样本分析" class="headerlink" title="四：样本分析"></a>四：样本分析</h1><h2 id="原始样本-hmieuy-exe"><a href="#原始样本-hmieuy-exe" class="headerlink" title="原始样本(hmieuy.exe)"></a>原始样本(hmieuy.exe)</h2><ul><li>通读代码，发现EnumResourceNamesA API函数，函数目的是枚举指定的二进制资源，我们可以猜测程序功能是，枚举资源文件，然后映射如内存，经过解密，形成shellcode，然后执行shellcode。<br>  <img src="https://i.imgur.com/PvZwDtY.png" alt=""><br>  <img src="https://i.imgur.com/vezYlfn.png" alt=""></li><li>修改内存保护设置，映射文件到内存，然后解密shellcode并且执行shellcode。<br>  <img src="https://i.imgur.com/mkzAExc.png" alt=""><br>  <img src="https://i.imgur.com/VA8bmL2.png" alt=""></li><li>这是第一层保护</li></ul><h2 id="shellcode-内存中dump而来"><a href="#shellcode-内存中dump而来" class="headerlink" title="shellcode(内存中dump而来)"></a>shellcode(内存中dump而来)</h2><ul><li>利用PEB，获取Kernel32.dll的基地址。<br>  <img src="https://i.imgur.com/nbKHSec.png" alt=""></li><li><p>获取LoadLibrary和GetProcAddress的地址，以便在函数中调用其他函数。这个是使用shellcode最先做的两件事情。</p></li><li><p>再次申请空间，加载解密后续的病毒代码，首先加载文件头，然后遍历节区，<br>  <img src="https://i.imgur.com/l3j6zFP.png" alt=""></p></li><li><p>修改IAT<br>  <img src="https://i.imgur.com/yfKHcwj.png" alt=""></p></li></ul><h2 id="PE1-exe（内存中dump而来）"><a href="#PE1-exe（内存中dump而来）" class="headerlink" title="PE1.exe（内存中dump而来）"></a>PE1.exe（内存中dump而来）</h2><ul><li>观察tmain函数，发现函数流程就是经过三个验证，最后执行sub_11A8.而这个函数是反射式dll注入的主要的函数。<br>  <img src="https://i.imgur.com/n7OGNno.png" alt=""></li><li>调用了函数sub_获取的机器信息和dll导出函数ReflectiveLoader<br>  <img src="https://i.imgur.com/6q0zV9i.png" alt=""><br>  <img src="https://i.imgur.com/Ou7Qzm6.png" alt=""></li><li>修改内存保护设置<br>  <img src="https://i.imgur.com/KGj9daA.png" alt=""></li><li>调用函数ReflectiveLoader，反射式dll注入自身[这是病毒保护自我的重点，了解反射式dll注入的流程]<br>  <img src="https://i.imgur.com/GI8yT8C.png" alt=""><ul><li>1.需要获取被加载到内存dll的基地址，连自己在内存的哪里都不知道，还玩的屁啊<br>  <img src="https://i.imgur.com/f2qlQfB.png" alt=""></li><li>2.利用模块和函数的Hash来获取主要函数的地址。<br>  <img src="https://i.imgur.com/wPYdpd4.png" alt=""><br>  <img src="https://i.imgur.com/ROWnZY4.png" alt=""><br>  <img src="https://i.imgur.com/BqblovG.png" alt=""></li><li>3.分配内存区域，存放dll代码(之前应该已经注入好了)<br>  <img src="https://i.imgur.com/qxZnVxF.png" alt=""></li><li>4.修复，获取IAT<br>  <img src="https://i.imgur.com/mtQK1oz.png" alt=""><br>  <img src="https://i.imgur.com/yMfYKjW.png" alt=""></li><li>5.修复重定位表<br>  <img src="https://i.imgur.com/BvmmJBq.png" alt=""></li><li>6.得到OEP，跳转到dll文件的OEP地址。<br>  <img src="https://i.imgur.com/uJsA6PC.png" alt=""><br>  <img src="https://i.imgur.com/0kvbmST.png" alt=""></li></ul></li></ul><h2 id="PE2-dll-内存中dump而来"><a href="#PE2-dll-内存中dump而来" class="headerlink" title="PE2.dll (内存中dump而来)"></a>PE2.dll (内存中dump而来)</h2><h3 id="整体分析"><a href="#整体分析" class="headerlink" title="整体分析"></a>整体分析</h3><ul><li>病毒发作的前期：<br>  <img src="https://i.imgur.com/OOQMD70.png" alt=""></li><li>病毒发作的中期：<br>  <img src="https://i.imgur.com/afPz1LZ.png" alt=""></li><li>病毒发作的晚期：<br>  <img src="https://i.imgur.com/TETqvdw.png" alt=""></li></ul><h3 id="模块1：收集机器信息，链接url读取文件，生成互斥体"><a href="#模块1：收集机器信息，链接url读取文件，生成互斥体" class="headerlink" title="模块1：收集机器信息，链接url读取文件，生成互斥体"></a>模块1：收集机器信息，链接url读取文件，生成互斥体</h3><ul><li>调用GetInforAndOpenUrl(10007580)获取系统信息，检测进程中是否存在指定给的杀毒软件，然后连接指定的url读取文件<ul><li>系统的DNS网域，</li><li>本地用户名，</li><li>键盘区域，但是病毒并不感染俄罗斯用户<br><img src="https://i.imgur.com/kdfqpjg.png" alt=""></li><li>CPU架构，</li><li>CPU信息，</li><li>磁盘驱动器<br><img src="https://i.imgur.com/68pEhmT.png" alt=""><br><img src="https://i.imgur.com/kAADsGT.png" alt=""></li><li>检测进程中是否存在指定给的杀毒软件<br><img src="https://i.imgur.com/Zk6b7Gd.png" alt=""></li></ul></li><li>连接到指定的URL，并且读取文件<br>  <img src="https://i.imgur.com/opIpqJT.png" alt=""><ul><li>打开Http请求，读取网络文件至缓冲区<br><img src="https://i.imgur.com/ehPElVU.png" alt=""></li></ul></li><li>以自身的硬件信息，生成ranson-id，并由此创建互斥体。<br>  <img src="https://i.imgur.com/qZcvZsM.png" alt=""></li></ul><h3 id="模块2：检测杀软驱动"><a href="#模块2：检测杀软驱动" class="headerlink" title="模块2：检测杀软驱动"></a>模块2：检测杀软驱动</h3><ul><li>检查是否有卡巴斯基和诺顿等杀软的驱动，先检查是否存在卡巴斯基的驱动，如果存在，XXX，如果不存在，在检查其他杀软的驱动，如果都不存在，那就将自身复制，同时写入注册表自启动项。<br>  <img src="https://i.imgur.com/zxUWYA9.png" alt=""><br>  <img src="https://i.imgur.com/MRuX5Qo.png" alt=""><ul><li>将病毒释放到系统目录下。<br><img src="https://i.imgur.com/GEft18W.png" alt=""><br><img src="https://i.imgur.com/0jkOjsc.png" alt=""></li><li>将释放的文件写入注册表Runonce中，以实现病毒的自启。<br><img src="https://i.imgur.com/d2J5sx1.png" alt=""><br><img src="https://i.imgur.com/RrkcJrA.png" alt=""></li></ul></li></ul><h3 id="模块3：关闭相关进程"><a href="#模块3：关闭相关进程" class="headerlink" title="模块3：关闭相关进程"></a>模块3：关闭相关进程</h3><ul><li>由于在进程文件加密的时候，不允许进程占用，所以需要终止某些特定的进程。<br>  <img src="https://i.imgur.com/e2s1k5a.png" alt=""><br>  <img src="https://i.imgur.com/FIvNDBH.png" alt=""></li></ul><h3 id="模块4：利用机器数据生成RansomID"><a href="#模块4：利用机器数据生成RansomID" class="headerlink" title="模块4：利用机器数据生成RansomID"></a>模块4：利用机器数据生成RansomID</h3><ul><li>产生了支付赎金的赎金ID，这个是由的pc_group和机器识别码生成的，<br>   <img src="https://i.imgur.com/Z6mfW5R.png" alt=""><br>   <img src="https://i.imgur.com/KBg0LHc.png" alt=""></li><li>同时为了受害者方便交付赎金，提供了安装洋葱浏览器的教程，卧槽真的贴心。<br>  <img src="https://i.imgur.com/5XAHwt6.png" alt=""></li></ul><h3 id="模块5：启用微软的CSP加密服务"><a href="#模块5：启用微软的CSP加密服务" class="headerlink" title="模块5：启用微软的CSP加密服务"></a>模块5：启用微软的CSP加密服务</h3><ul><li>利用CryptAcquireContextW创建CSP密码容器句柄</li><li>利用 CryptGenKey产生随机秘钥<ul><li>生成密钥有两种方式，CryptGenKey（生成随机密钥）和CryptImportKey（导入密钥），病毒使用了CryptGenKey方式。另：Microsoft Base Cryptographic Provider v1.0：密钥长度为512位。Microsoft Enhanced Cryptographic Provider v1.0：密钥长度为1024位</li></ul></li><li>加密</li><li>销毁容器<br>  <img src="https://i.imgur.com/DsGbt7D.png" alt=""></li></ul><h3 id="模块6：发送Base加密后的公秘钥"><a href="#模块6：发送Base加密后的公秘钥" class="headerlink" title="模块6：发送Base加密后的公秘钥"></a>模块6：发送Base加密后的公秘钥</h3><ul><li>产生特征的编码字符<br>   <img src="https://i.imgur.com/dHAI6aq.png" alt=""><br>   <img src="https://i.imgur.com/wBqkB1a.png" alt=""></li><li>将RSA生成的秘钥和公钥利用CryptBinaryToStringA函数Base64加密，以便后期网路传输。<br>   <img src="https://i.imgur.com/r3cUppG.png" alt=""><br>   <img src="https://i.imgur.com/EnkzDN8.png" alt=""></li><li>检索系统信息，然后再进行Base64编码。<br>   <img src="https://i.imgur.com/QQH8O1N.png" alt=""></li><li>将获取的机器信息的Base64编码连接到秘钥的后面<br>   <img src="https://i.imgur.com/QkwfWEK.png" alt=""></li><li>读取之前释放到Hacky目录下的病毒，可以是利用后续的函数进行父子进程共享该段数据。<br>   <img src="https://i.imgur.com/yVfAJo8.png" alt=""></li><li>建立管道通信，解析域名，判断网络连接是否正常<br>   <img src="https://i.imgur.com/RqupYhR.png" alt=""></li></ul><h4 id="模块7：建立管道通信"><a href="#模块7：建立管道通信" class="headerlink" title="模块7：建立管道通信"></a>模块7：建立管道通信</h4><ul><li>首先将三个域名传入。<ul><li>malwarehunterteam.bit</li><li>politiaromana.bit</li><li>gdcb.bit<br><img src="https://i.imgur.com/ItxAF0B.png" alt=""></li></ul></li><li>创建管道连接，管道的作用是实现进程之间的消息交互<br>  <img src="https://i.imgur.com/RtZbJku.png" alt=""></li><li>利用管道的通信机制，创建一个子进程，命令行参数是<code>nslookup %s ns1.virmach.ru</code>,目的是解析之前穿入的三个域名。读取文件，判断是否联网，如果没有联网，readfile的buf存在error信息，程序进程死循环<br>  <img src="https://i.imgur.com/J9VA1ME.png" alt=""><br>  <img src="https://i.imgur.com/L5Iyfk2.png" alt=""><br>  <img src="https://i.imgur.com/0fVO0Ez.png" alt=""></li><li>管道输入的一般新步骤：<br>  <img src="https://i.imgur.com/WULxnv0.png" alt=""></li><li>修补可执行文件，我们将一些关键A24FF4等跳转jmp或者nop掉即可实现。</li></ul><h3 id="模块8：文件加密部分"><a href="#模块8：文件加密部分" class="headerlink" title="模块8：文件加密部分"></a>模块8：文件加密部分</h3><ul><li>病毒首先需要获取机器的磁盘驱动器。除了CD-ROM其他的驱动器都被感染，对于搜索到的每个驱动器，释放一个线程，进行加密。加快加密的速度。<br>  <img src="https://i.imgur.com/wb6XSnA.png" alt=""></li><li>病毒不会感染特殊目录和特殊格式的文件<br>  <img src="https://i.imgur.com/FIIqbOy.png" alt=""><br>  <img src="https://i.imgur.com/nZOfPMo.png" alt=""></li><li>然后在驱动器中遍历，如果是文档则递归调用原函数，负责调用加密函数。<br>  <img src="https://i.imgur.com/cjUyEjo.png" alt=""><br>  <img src="https://i.imgur.com/6AUZn7Q.png" alt=""></li><li>管道通信</li></ul><h3 id="模块9：安全令牌检测"><a href="#模块9：安全令牌检测" class="headerlink" title="模块9：安全令牌检测"></a>模块9：安全令牌检测</h3><ul><li>检测进程的安全令牌<br>   <img src="https://i.imgur.com/t070Q5s.png" alt=""></li></ul><h3 id="模块10：删除卷影副本"><a href="#模块10：删除卷影副本" class="headerlink" title="模块10：删除卷影副本"></a>模块10：删除卷影副本</h3><ul><li>利用shellExecute函数执行cmd，参数是<code>/c vssadmin delete shadows /all /quiet</code>，删除卷影副本，目的是不让管理员恢复数据。<br>  <img src="https://i.imgur.com/ZJpP1Fo.png" alt=""><br>  <img src="https://i.imgur.com/BT6ynew.png" alt=""></li></ul><h1 id="五：技术总结"><a href="#五：技术总结" class="headerlink" title="五：技术总结"></a>五：技术总结</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GandCrab病毒主要采用到的技术有，shellcode藏匿，利用shellcode的短小的特点，触发shellcode到内存，减少了被杀毒软件查杀的风险。经过第一层加密后，病毒释放了一个恶意代码文件(PE1.exe)，该文件采用的是反射式dll注入技术，该技术不想传统的dll注入需要在文件系统中产生文件，所要执行的dll全在内存中，这是第二层保护手段。经过两次dump后，可以得到本次病毒的主体文件，建立了管道，实现子进程和父进程之间的通信。</p><h2 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;需要细细的看，参考自：<a href="https://zhuanlan.zhihu.com/p/28788521" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/28788521</a></p><h2 id="反射式dll注入"><a href="#反射式dll注入" class="headerlink" title="反射式dll注入"></a>反射式dll注入</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;传统的dll注入，是在文件系统中存放一个dll模块，然后进程利用LoadLibrary和CreateRemoteThread这两个API函数装载模块到内存空间，实现注入。而杀软在布置Hook的时候，重点钩取的就是这两种API函数。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;反射式dll注入不需要dll文件落地，减少被查杀的风险。首先将需要注入的dll写入进程内存，然后为该dll添加一个导出函数，利用这个导出函数让其自动的装载dll。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;主要有两个方向的问题：第一个如何将dll写入内存(注射器的实现),第二个如果调用自身(ReflectiveLoader的实现)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;参考自：<a href="http://www.freebuf.com/articles/system/151161.html" target="_blank" rel="external">http://www.freebuf.com/articles/system/151161.html</a></p><h3 id="注射器的实现"><a href="#注射器的实现" class="headerlink" title="注射器的实现"></a>注射器的实现</h3><ul><li>1.将待注入DLL读入自身内存(利用解密磁盘上加密的文件、网络传输等方式避免文件落地)</li><li>2.利用VirtualAlloc和WriteProcessMemory在目标进程中写入待注入的DLL文件</li><li>3.利用CreateRemoteThread等函数启动位于目标进程中的ReflectiveLoader</li></ul><h3 id="ReflectiveLoader的实现"><a href="#ReflectiveLoader的实现" class="headerlink" title="ReflectiveLoader的实现"></a>ReflectiveLoader的实现</h3><ul><li>1.定位DLL文件在内存中的基址</li><li>2.获取所需的系统API</li><li>3.分配一片用来装载DLL的空间</li><li>4.复制PE文件头和各个节</li><li>5.处理DLL的引入表,修复重定位表</li><li>6.调用DLL入口点</li></ul><h2 id="管道通信"><a href="#管道通信" class="headerlink" title="管道通信"></a>管道通信</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;管道是一种用于在进程间共享数据的机制，其实质是一段共享内存，病毒利用了管道进行父子进程的通信，这样子进程就可以直接影响父进程内存。为实现父子进程间通信，需要对子进程的管道进行重定向：创建子进程函数 CreateProcess中有一个参数STARUIINFO，默认情况下子进程的输入输出管道是标准输入输出流，可以通过下面的方法实现管道重定向：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">STARTUPINFO si;</div><div class="line">si.hStdInput   = hPipeInputRead;   <span class="regexp">//</span>输入由标准输入 -&gt; 从管道中读取</div><div class="line">si.hStdOutput  = hPipeOutputWrite; <span class="regexp">//</span>输出由标准输出 -&gt; 输出到管道</div></pre></td></tr></table></figure></p><p>摘录自<a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=712552&amp;extra=page%3D1%26filter%3Dtypeid%26typeid%3D62" target="_blank" rel="external">https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=712552&amp;extra=page%3D1%26filter%3Dtypeid%26typeid%3D62</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;呼，历时4天半，终于完成了对GandCrab病毒的分析，这个病毒是在52破解ScareCrowL前辈的帖子上参考借鉴而来，漫漫病毒分析之路，任重且道远，还好，我们拥有巨人的肩膀，让我们看的更远更多。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;首先讲一下，为什么分析这个病毒，在四叶草公司实习，几天下来，有点厌倦分析病毒这件事了，哇，想到以后还要干好多年，心态炸了。公司峰哥给我了两个样本，说现在流行勒索和挖矿病毒，客户也中过，叫我去试试分析。然后就有了这篇病毒分析报告。顿时，分析出来有不一样的收获，这是传统病毒不一样的。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;一月份，GandCrab勒索软件首次亮相，这是一种着名的恶意软件，分布在黑暗网络上，可能源于俄罗斯，主要针对斯堪的纳维亚和英语国家。……（码字太麻烦了，这里有一份关于GandCrab简介，了解一下：&lt;a href=&quot;http://baijiahao.baidu.com/s?id=1599794170709869995&amp;amp;wfr=spider&amp;amp;for=pc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://baijiahao.baidu.com/s?id=1599794170709869995&amp;amp;wfr=spider&amp;amp;for=pc&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;IDA产生的分析数据库(IDA 6.8)：&lt;a href=&quot;https://pan.baidu.com/s/156A8SyhBVMjAKcjlf5SN4Q&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://pan.baidu.com/s/156A8SyhBVMjAKcjlf5SN4Q&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;一：目录&quot;&gt;&lt;a href=&quot;#一：目录&quot; class=&quot;headerlink&quot; title=&quot;一：目录&quot;&gt;&lt;/a&gt;一：目录&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;1.目录&lt;/li&gt;
&lt;li&gt;2.样本信息&lt;/li&gt;
&lt;li&gt;3.行为分析&lt;/li&gt;
&lt;li&gt;4.样本分析&lt;/li&gt;
&lt;li&gt;5.技术总结
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>巅峰极客CTF(成都)</title>
    <link href="http://yoursite.com/2018/07/28/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2CTF/"/>
    <id>http://yoursite.com/2018/07/28/巅峰极客CTF/</id>
    <published>2018-07-28T06:02:11.000Z</published>
    <updated>2018-07-31T03:25:52.989Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前记："><a href="#前记：" class="headerlink" title="前记："></a>前记：</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;21号，陪朋友参加了巅峰极客的CTF线上赛，也只是签了个到，其实题目并不是很难。所以这次的比赛我们打的并不是很好，这次写一下关于这次CTF的逆向和杂项的wp，参考的是<a href="https://www.colabug.com/3667674.html" target="_blank" rel="external">https://www.colabug.com/3667674.html</a><br><a id="more"></a></p><h2 id="Re题"><a href="#Re题" class="headerlink" title="Re题"></a>Re题</h2><h3 id="第一题：Base-N"><a href="#第一题：Base-N" class="headerlink" title="第一题：Base-N"></a>第一题：Base-N</h3><ul><li>第一步：查壳分析没有壳，IDA直接定位到main函数</li><li>程序流程如下：<ul><li>根据IDA显示的pdb的信息，发现这是一个利用Base32加密的程序<br><img src="https://i.imgur.com/w0ZGp6u.png" alt=""></li><li>首先使用cin输入flag，然后获取长度，长度大于10成立</li><li>接着，调用00401100函数，这个函数主要是对输入的input进行字符变换(在这次调用是这样的)。<br><img src="https://i.imgur.com/jaOeqqB.png" alt=""></li><li>如果输入的字符和经过change函数变换后的字符串相同的话，则报错。而且这不是主要的函数<br><img src="https://i.imgur.com/R55X6gC.png" alt=""></li><li>但是这个CM的主要的两个函数是sub_4012C0和sub_401310，我们提前知道这是一个Base32的加密方法，必然有一个是构造Table的函数，一个是进行Base32加密的函数。在和特定的字符串比较得到Success。<br><img src="https://i.imgur.com/PvMrcpF.png" alt=""></li><li>现在存在两个问题，第一个是构造的Table是什么？第二个是加密函数确定是Base32么(确定是Base32，我只是想分析一下这个函数)。</li><li>在sub_4012C0中发现有一个全局变量，这个全局变量有可能是Table，因为Table的数据是不容易被修改的，所以我们可以使用olldbg动态dump出Table(通过查看全局变量的值)，也可以使用IDA分析Table的构造流程。我们跟踪od，得到Table是<code>NoPqRsTuVwXyZaBcDeFgHiJkLm567234</code><br><img src="https://i.imgur.com/emd7mjo.png" alt=""></li><li>写下来是sub_401310，进入里面发现是末尾，程序给不足位数自动添加4个=，我们知道，base64是补齐2个=，base32是补齐4个=。<br><img src="https://i.imgur.com/tWF3yvO.png" alt=""></li><li>由于base32的加密Table已经和原来的Base32函数不同，所以我们在网上找一个解密函数，然后修改里面的Table。解得flag为Y@u_Kn@W<em>b@s332</em>@Nd_r0t13<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div></pre></td><td class="code"><pre><div class="line">from __future__ import print_function</div><div class="line">#! /usr/bin/env <span class="keyword">python</span></div><div class="line"></div><div class="line"><span class="string">""</span><span class="string">"RFC 3548: Base16, Base32, Base64 Data Encodings"</span><span class="string">""</span></div><div class="line"></div><div class="line"># Modified <span class="number">04</span>-Oct-<span class="number">1995</span> by Jack Jansen <span class="keyword">to</span> use binascii module</div><div class="line"># Modified <span class="number">30</span>-Dec-<span class="number">2003</span> by Barry Warsaw <span class="keyword">to</span> <span class="built_in">add</span> full RFC <span class="number">3548</span> support</div><div class="line"></div><div class="line">import re</div><div class="line">import struct</div><div class="line">import binascii</div><div class="line"></div><div class="line">__all__ = [</div><div class="line">    # Legacy interface exports traditional RFC <span class="number">1521</span> Base64 encodings</div><div class="line">    <span class="string">'encode'</span>, <span class="string">'decode'</span>, <span class="string">'encodestring'</span>, <span class="string">'decodestring'</span>,</div><div class="line">    # Generalized interface <span class="keyword">for</span> other encodings</div><div class="line">    <span class="string">'b64encode'</span>, <span class="string">'b64decode'</span>, <span class="string">'b32encode'</span>, <span class="string">'b32decode'</span>,</div><div class="line">    <span class="string">'b16encode'</span>, <span class="string">'b16decode'</span>,</div><div class="line">    # Standard Base64 encoding</div><div class="line">    <span class="string">'standard_b64encode'</span>, <span class="string">'standard_b64decode'</span>,</div><div class="line">    # Some common Base64 alternatives.  As referenced by RFC <span class="number">3458</span>, see thread</div><div class="line">    # starting <span class="keyword">a</span><span class="variable">t:</span></div><div class="line">    #</div><div class="line">    # http://zgp.org/pipermail/p2p-hackers/<span class="number">2001</span>-September/<span class="number">000316</span>.html</div><div class="line">    <span class="string">'urlsafe_b64encode'</span>, <span class="string">'urlsafe_b64decode'</span>,</div><div class="line">]</div><div class="line"></div><div class="line">_translation = [chr(_x) <span class="keyword">for</span> _x in <span class="built_in">range</span>(<span class="number">256</span>)]</div><div class="line">EMPTYSTRING = <span class="string">''</span></div><div class="line"></div><div class="line"></div><div class="line">def _translate(s, altchars):</div><div class="line">    translation = _translation[:]</div><div class="line">    <span class="keyword">for</span> <span class="keyword">k</span>, v in altchars.<span class="built_in">items</span>():</div><div class="line">        translation[ord(<span class="keyword">k</span>)] = v</div><div class="line">    <span class="keyword">return</span> s.translate(<span class="string">''</span>.<span class="keyword">join</span>(translation))</div><div class="line"></div><div class="line"></div><div class="line">str = <span class="string">"NoPqRsTuVwXyZaBcDeFgHiJkLm567234"</span>    //Table</div><div class="line">_b32alphabet = &#123;i:str[i] <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="number">32</span>)&#125;</div><div class="line"></div><div class="line">_b32tab = _b32alphabet.<span class="built_in">items</span>()</div><div class="line">_b32tab.<span class="keyword">sort</span>()</div><div class="line">_b32tab = [v <span class="keyword">for</span> <span class="keyword">k</span>, v in _b32tab]</div><div class="line">_b32rev = dict([(v, (<span class="keyword">k</span>)) <span class="keyword">for</span> <span class="keyword">k</span>, v in _b32alphabet.<span class="built_in">items</span>()])</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">def b32decode(s, casefold=False, map01=None):</div><div class="line">    <span class="string">""</span><span class="comment">"Decode a Base32 encoded string.</span></div><div class="line"></div><div class="line">    s <span class="keyword">is</span> the <span class="built_in">string</span> <span class="keyword">to</span> decode.  Optional casefold <span class="keyword">is</span> <span class="keyword">a</span> flag specifying whether</div><div class="line">    <span class="keyword">a</span> lowercase alphabet <span class="keyword">is</span> acceptable <span class="keyword">as</span> <span class="built_in">input</span>.  For security purposes, the</div><div class="line">    default <span class="keyword">is</span> False.</div><div class="line"></div><div class="line">    RFC <span class="number">3548</span> allows <span class="keyword">for</span> optional mapping of the digit <span class="number">0</span> (zero) <span class="keyword">to</span> the letter O</div><div class="line">    (oh), <span class="built_in">and</span> <span class="keyword">for</span> optional mapping of the digit <span class="number">1</span> (one) <span class="keyword">to</span> either the letter I</div><div class="line">    (eye) <span class="built_in">or</span> letter L (<span class="keyword">el</span>).  The optional <span class="keyword">argument</span> map01 when not None,</div><div class="line">    specifies which letter the digit <span class="number">1</span> should <span class="keyword">be</span> mapped <span class="keyword">to</span> (when map01 <span class="keyword">is</span> not</div><div class="line">    None, the digit <span class="number">0</span> <span class="keyword">is</span> always mapped <span class="keyword">to</span> the letter O).  For security</div><div class="line">    purposes the default <span class="keyword">is</span> None, <span class="keyword">so</span> that <span class="number">0</span> <span class="built_in">and</span> <span class="number">1</span> are not allowed in the</div><div class="line">    <span class="built_in">input</span>.</div><div class="line"></div><div class="line">    The decoded <span class="built_in">string</span> <span class="keyword">is</span> returned.  A TypeError <span class="keyword">is</span> raised <span class="keyword">if</span> s were</div><div class="line">    incorrectly padded <span class="built_in">or</span> <span class="keyword">if</span> there are non-alphabet characters present in the</div><div class="line">    <span class="built_in">string</span>.</div><div class="line">    <span class="string">""</span><span class="comment">"</span></div><div class="line">    quanta, leftover = divmod(<span class="built_in">len</span>(s), <span class="number">8</span>)</div><div class="line">    <span class="keyword">if</span> leftover:</div><div class="line">        raise TypeError(<span class="string">'Incorrect padding'</span>)</div><div class="line">    # Handle section <span class="number">2.4</span> zero <span class="built_in">and</span> one mapping.  The flag map01 will <span class="keyword">be</span> either</div><div class="line">    # False, <span class="built_in">or</span> the character <span class="keyword">to</span> <span class="keyword">map</span> the digit <span class="number">1</span> (one) <span class="keyword">to</span>.  It should <span class="keyword">be</span></div><div class="line">    # either L (<span class="keyword">el</span>) <span class="built_in">or</span> I (eye).</div><div class="line">    <span class="keyword">if</span> map01:</div><div class="line">        s = _translate(s, &#123;<span class="string">'0'</span>: <span class="string">'O'</span>, <span class="string">'1'</span>: map01&#125;)</div><div class="line">    <span class="keyword">if</span> casefold:</div><div class="line">        s = s.upper()</div><div class="line">    # Strip off pad characters from the <span class="keyword">right</span>.  We need <span class="keyword">to</span> <span class="built_in">count</span> the pad</div><div class="line">    # characters because this will tell us how many null bytes <span class="keyword">to</span> <span class="built_in">remove</span> from</div><div class="line">    # the end of the decoded <span class="built_in">string</span>.</div><div class="line">    padchars = <span class="number">0</span></div><div class="line">    mo = re.<span class="built_in">search</span>(<span class="string">'(?P&lt;pad&gt;[=]*)$'</span>, s)</div><div class="line">    <span class="keyword">if</span> mo:</div><div class="line">        padchars = <span class="built_in">len</span>(mo.group(<span class="string">'pad'</span>))</div><div class="line">        <span class="keyword">if</span> padchars &gt; <span class="number">0</span>:</div><div class="line">            s = s[:-padchars]</div><div class="line">    # Now decode the full quanta</div><div class="line">    parts = []</div><div class="line">    acc = <span class="number">0</span></div><div class="line">    shift = <span class="number">35</span></div><div class="line">    <span class="keyword">for</span> <span class="keyword">c</span> in <span class="variable">s:</span></div><div class="line">        val = _b32rev.<span class="built_in">get</span>(<span class="keyword">c</span>)</div><div class="line">        <span class="keyword">if</span> val <span class="keyword">is</span> None:</div><div class="line">            raise TypeError(<span class="string">'Non-base32 digit found'</span>)</div><div class="line">        acc += _b32rev[<span class="keyword">c</span>] &lt;&lt; shift</div><div class="line">        shift -= <span class="number">5</span></div><div class="line">        <span class="keyword">if</span> shift &lt; <span class="number">0</span>:</div><div class="line">            parts.<span class="keyword">append</span>(binascii.unhexlify(<span class="string">'%010x'</span> % acc))</div><div class="line">            acc = <span class="number">0</span></div><div class="line">            shift = <span class="number">35</span></div><div class="line">    # Process the <span class="keyword">last</span>, partial quanta</div><div class="line">    <span class="keyword">last</span> = binascii.unhexlify(<span class="string">'%010x'</span> % acc)</div><div class="line">    <span class="keyword">if</span> padchars == <span class="number">0</span>:</div><div class="line">        <span class="keyword">last</span> = <span class="string">''</span>  # No characters</div><div class="line">    elif padchars == <span class="number">1</span>:</div><div class="line">        <span class="keyword">last</span> = <span class="keyword">last</span>[:-<span class="number">1</span>]</div><div class="line">    elif padchars == <span class="number">3</span>:</div><div class="line">        <span class="keyword">last</span> = <span class="keyword">last</span>[:-<span class="number">2</span>]</div><div class="line">    elif padchars == <span class="number">4</span>:</div><div class="line">        <span class="keyword">last</span> = <span class="keyword">last</span>[:-<span class="number">3</span>]</div><div class="line">    elif padchars == <span class="number">6</span>:</div><div class="line">        <span class="keyword">last</span> = <span class="keyword">last</span>[:-<span class="number">4</span>]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        raise TypeError(<span class="string">'Incorrect padding'</span>)</div><div class="line">    parts.<span class="keyword">append</span>(<span class="keyword">last</span>)</div><div class="line">    <span class="keyword">return</span> EMPTYSTRING.<span class="keyword">join</span>(parts)</div><div class="line"></div><div class="line"># RFC <span class="number">3548</span>, Base <span class="number">16</span> Alphabet specifies uppercase, but hexlify() returns</div><div class="line"># lowercase.  The RFC also recommends against accepting <span class="built_in">input</span> case</div><div class="line"></div><div class="line">r = <span class="string">"weNTDk5LZsNRHk6cVogqTZmFy2NRP7X4ZHLTBZwg"</span>    //Codestring</div><div class="line">r = b32decode(r)</div><div class="line"><span class="keyword">print</span>(r)</div><div class="line"><span class="keyword">for</span> i in r:</div><div class="line">    v = ord(i)-ord(<span class="string">'a'</span>)</div><div class="line">    <span class="keyword">if</span>(v&gt;=<span class="number">0</span> <span class="built_in">and</span> v&lt;<span class="number">26</span>):</div><div class="line">        <span class="keyword">k</span> = v+ord(<span class="string">'T'</span>)</div><div class="line">        <span class="keyword">while</span>(<span class="keyword">k</span>&lt;=ord(<span class="string">'a'</span>)):</div><div class="line">            <span class="keyword">k</span> += <span class="number">26</span></div><div class="line">        <span class="keyword">print</span>(chr(<span class="keyword">k</span>), end=<span class="string">''</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        v = ord(i) - ord(<span class="string">'A'</span>)</div><div class="line">        <span class="keyword">if</span> (v &gt;= <span class="number">0</span> <span class="built_in">and</span> v &lt; <span class="number">26</span>):</div><div class="line">            <span class="keyword">k</span> = (v + ord(<span class="string">'4'</span>))</div><div class="line">            <span class="keyword">while</span>(<span class="keyword">k</span>&lt;=ord(<span class="string">'A'</span>)):</div><div class="line">                <span class="keyword">k</span> += <span class="number">26</span></div><div class="line">            <span class="keyword">print</span>(chr(<span class="keyword">k</span>), end=<span class="string">''</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span>(i, end=<span class="string">''</span>)</div></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Input-your-luncky-number-string-这道题没看懂"><a href="#Input-your-luncky-number-string-这道题没看懂" class="headerlink" title="Input your luncky number_string[这道题没看懂]"></a>Input your luncky number_string[这道题没看懂]</h3><ul><li>main函数中通过cin接收输入，下面做了一大堆操作，但是通过对input变量的跟踪，可以发现都没有什么卵用，与输入无关，因此我们根本不需要去读，反正都是正向操作。<br>  <img src="https://i.imgur.com/dHcngJw.png" alt=""></li><li><p>只有箭头所指的部分才需要关注</p></li><li><p>于是查看sub_401100</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">v3 = _mm_cvtsi32_si128(<span class="name">input</span>)<span class="comment">;</span></div><div class="line">v4 = _mm_unpacklo_epi8(<span class="name">v3</span>, v3)<span class="comment">;</span></div><div class="line">v5 = _mm_shuffle_epi32(<span class="name">_mm_unpacklo_epi16</span>(<span class="name">v4</span>, v4), <span class="number">0</span>)<span class="comment">;</span></div></pre></td></tr></table></figure></li><li><p>最开头这三个处理非常丑，要不挨个去查手册，要不就直接动调观察汇编指令是三条</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">punpcklbw</span> <span class="built_in">xmm0</span>, <span class="built_in">xmm0</span></div><div class="line"><span class="keyword">punpcklwd</span> <span class="built_in">xmm0</span>, <span class="built_in">xmm0</span></div><div class="line"><span class="keyword">pshufd</span> <span class="built_in">xmm1</span>, <span class="built_in">xmm0</span>, <span class="number">0</span></div></pre></td></tr></table></figure></li><li><p>全部是交叉赋值的，分别将1字节的input变为2字节、4字节、16字节<br>  <img src="https://i.imgur.com/7agv0Sb.png" alt=""></p></li><li><p>（试了OD和IDA都看不到XMM寄存器的值，最后用x32dbg才成功跟踪到）<br>下面两段循环实际上都是逐字节异或<br>因为第一段以XMM寄存器来操作，单位必须是16个字节，对于零头就无能为力了，于是使用第二段循环来逐字节操作<br>不知道是出题人故意设置的干扰还是编译器为了加速而优化出来的23333<br>  <img src="https://i.imgur.com/6tS3yIa.png" alt=""></p></li><li><p>那么下一个问题就是key啦,回头看参数a2对应的值，是0x401000+v6处的代码,观察加密后的HEX<br>  <img src="https://i.imgur.com/YJy1RKP.png" alt=""></p></li><li><p>（动调可知起始字节在0x89之后）</p></li></ul><p>这里有大量的连续0x5A出现，在PE文件中通常会有大量的0x00作为填充，这里由于加密字节数太少所以没有用到上述的论据<br>不过连续三个0x5A通常一般是0x00000001之类的值加密得到的，因此还是只得一试的<br>之后还有0x7E、0x1E的出现频率比较高，但不连续，如果0x5A失败的话也可以试一试~</p><ul><li><p>（实在不行也可以手动爆破，好几个交流的朋友都是一个一个试的，甚至还有一个小可爱是从255倒着试的23333333333333333333333333）</p></li><li><p>0x5A对应十进制的90，即NOP，这个数字还是比较有意义的233<br>输入以后便回显了flag（cin接受的是int类型，因此直接输入数字即可，而不用chr）</p></li><li><p>我们继续解密查看一下代码<br>解密IDC脚本<code>auto i;for(i=0;i&lt;0x61;i++){PatchByte(0x401013+i, Byte(0x401013+i)^90);}</code><br>  <img src="https://i.imgur.com/5qOg23U.png" alt=""></p></li><li>还是挺简单的，后面字节直接拷贝，前4个字节异或解密覆盖上去就完了.</li></ul><h2 id="MISC题"><a href="#MISC题" class="headerlink" title="MISC题"></a>MISC题</h2><h3 id="Loli"><a href="#Loli" class="headerlink" title="Loli"></a>Loli</h3><ul><li><p>根据tip，0xff，我们猜测将图片xor一个0xff，所以编写以下脚本（脑洞真的大，但是当时我想到了）</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line">def xor():</div><div class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'./1.png'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f, <span class="built_in">open</span>(<span class="string">'xor.png'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> wf:</div><div class="line">        <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">in</span> f.<span class="built_in">read</span>():</div><div class="line">            wf.<span class="built_in">write</span>(chr(ord(<span class="keyword">each</span>) ^ <span class="number">0xff</span>))</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    xor()</div></pre></td></tr></table></figure></li><li><p>生成一个文件，利用Hex工具打开，拖到结尾，我们可以看出：末尾有个字符串<code>black and white</code>,以及还有png格式的末尾标志符<code>IEND</code>。我们猜测文件中存在一个png文件，我们使用<code>binwalk</code>命令无法打开。</p><p>  <img src="https://i.imgur.com/l1ioDby.png" alt=""><br>  <img src="https://i.imgur.com/1tn51UW.png" alt=""></p></li><li><p>所以，我们只能使用<code>foremost命令</code>得到一副黑白图，观察png文件，可以看到色块分为11列，每列隔行的色块永远是黑色，这说明应该横向读取图片，而列中的横长条由8个小色块组成，显然其代表的是一个字节的数据。(原谅我真的没看出来)，编写如下代码:</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> matplotlib.<span class="built_in">image</span> as mpimg</div><div class="line"></div><div class="line">res_str = []</div><div class="line">res = []</div><div class="line"></div><div class="line"></div><div class="line">def readpng():</div><div class="line">    png = mpimg.imread(<span class="string">'./out.png'</span>)</div><div class="line">    yy, xx, depth = png.<span class="built_in">shape</span></div><div class="line">    <span class="keyword">for</span> y in range(yy):</div><div class="line">        <span class="keyword">if</span> y % <span class="number">2</span> == <span class="number">0</span>:</div><div class="line">            <span class="keyword">for</span> x in range(<span class="number">1</span>, xx - <span class="number">1</span>, <span class="number">9</span>):</div><div class="line">                _str = <span class="string">"0b"</span> + <span class="built_in">str</span>(<span class="built_in">int</span>(png[y][x][<span class="number">0</span>])) + <span class="built_in">str</span>(<span class="built_in">int</span>(png[y][x + <span class="number">1</span>][<span class="number">0</span>])) + <span class="built_in">str</span>(<span class="built_in">int</span>(png[y][x + <span class="number">2</span>][<span class="number">0</span>])) + <span class="built_in">str</span>(<span class="built_in">int</span>(png[y][x + <span class="number">3</span>][<span class="number">0</span>])) + <span class="built_in">str</span>(<span class="built_in">int</span>(png[y][x + <span class="number">4</span>][<span class="number">0</span>])) + <span class="built_in">str</span>(<span class="built_in">int</span>(png[y][x + <span class="number">5</span>][<span class="number">0</span>])) + <span class="built_in">str</span>(<span class="built_in">int</span>(png[y][x + <span class="number">6</span>][<span class="number">0</span>])) + <span class="built_in">str</span>(<span class="built_in">int</span>(png[y][x + <span class="number">7</span>][<span class="number">0</span>]))</div><div class="line">                res_str.<span class="built_in">append</span>(_str)</div><div class="line">                res.<span class="built_in">append</span>(bin2hex(_str))</div><div class="line">    <span class="built_in">print</span> res_str</div><div class="line">    with <span class="built_in">open</span>(<span class="string">'res.bin'</span>, <span class="string">'wb'</span>) as f:</div><div class="line">        <span class="keyword">for</span> each in res:</div><div class="line">            f.write(chr(each))</div><div class="line"></div><div class="line"></div><div class="line">def bin2hex(_bin=<span class="string">"0b101"</span>):</div><div class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(_bin, <span class="number">2</span>) ^ <span class="number">0xFF</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    readpng()</div></pre></td></tr></table></figure></li><li><p>得到res.bin文件，cat该文件得到flag。</p></li></ul><h3 id="Warmup"><a href="#Warmup" class="headerlink" title="Warmup"></a>Warmup</h3><ul><li><p>这是一道LSB隐写，这是很容易想到的，利用Stego打开，分别取红黄蓝的第最低一位。</p><p>  <img src="https://i.imgur.com/DABzKSS.png" alt=""><br>  <img src="https://i.imgur.com/qpJV1NW.png" alt=""><br>  <img src="https://i.imgur.com/yboezSH.png" alt=""></p></li><li>这是0OK!和BF编码，在线解码就行了<a href="https://www.splitbrain.org/services/ook" target="_blank" rel="external">https://www.splitbrain.org/services/ook</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前记：&quot;&gt;&lt;a href=&quot;#前记：&quot; class=&quot;headerlink&quot; title=&quot;前记：&quot;&gt;&lt;/a&gt;前记：&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;21号，陪朋友参加了巅峰极客的CTF线上赛，也只是签了个到，其实题目并不是很难。所以这次的比赛我们打的并不是很好，这次写一下关于这次CTF的逆向和杂项的wp，参考的是&lt;a href=&quot;https://www.colabug.com/3667674.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.colabug.com/3667674.html&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>windbg学习笔记(5) --内核调试常用命令</title>
    <link href="http://yoursite.com/2018/07/25/windbg%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(5)--%E5%86%85%E6%A0%B8%E8%B0%83%E8%AF%95%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/07/25/windbg学习笔记(5)--内核调试基本命令/</id>
    <published>2018-07-25T06:02:11.000Z</published>
    <updated>2018-07-26T00:48:29.317Z</updated>
    
    <content type="html"><![CDATA[<ul><li><strong>vertarget</strong>:用于显示被调试计算机的基本的信息。<br>  <img src="https://i.imgur.com/xSqp2aV.png" alt=""></li><li><strong>dg</strong>：用于显示段选择子的信息<br>  <img src="https://i.imgur.com/wMSKxGr.png" alt=""><ul><li>有dg的输出结果可以看到，cs段的范围是0x00000000-0xffffffff</li></ul></li><li><strong>!cpuinfo</strong>:显示CPU的信息<br>  <img src="https://i.imgur.com/NXzeSxq.png" alt=""><a id="more"></a></li><li>!pcr:显示处理器控制域，也就是KPCR块结构，每一个KPCR结构对应一个KPCR结构。</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">kd&gt; !pcr</div><div class="line">KPCR <span class="keyword">for</span> Processor <span class="number">0</span> at ffdff000:</div><div class="line">    Major <span class="number">1</span> Minor <span class="number">1</span></div><div class="line">NtTib<span class="selector-class">.ExceptionList</span>: <span class="number">8054</span>a4b0</div><div class="line">    NtTib<span class="selector-class">.StackBase</span>: <span class="number">8054</span>acf0</div><div class="line">   NtTib<span class="selector-class">.StackLimit</span>: <span class="number">80547</span>f00</div><div class="line"> NtTib<span class="selector-class">.SubSystemTib</span>: <span class="number">00000000</span></div><div class="line">      NtTib<span class="selector-class">.Version</span>: <span class="number">00000000</span></div><div class="line">  NtTib<span class="selector-class">.UserPointer</span>: <span class="number">00000000</span></div><div class="line">      NtTib<span class="selector-class">.SelfTib</span>: <span class="number">00000000</span></div><div class="line"></div><div class="line">            SelfPcr: ffdff000   <span class="comment">//PCR地址</span></div><div class="line">               Prcb: ffdff120</div><div class="line">               Irql: <span class="number">00000000</span></div><div class="line">                IRR: <span class="number">00000000</span></div><div class="line">                IDR: ffffffff</div><div class="line">      InterruptMode: <span class="number">00000000</span></div><div class="line">                IDT: <span class="number">8003</span>f400    <span class="comment">//IDT</span></div><div class="line">                GDT: <span class="number">8003</span>f000</div><div class="line">                TSS: <span class="number">80042000</span>    <span class="comment">//TSS</span></div><div class="line"></div><div class="line">      CurrentThread: <span class="number">80553740</span></div><div class="line">         NextThread: <span class="number">00000000</span></div><div class="line">         IdleThread: <span class="number">80553740</span></div><div class="line"></div><div class="line">          DpcQueue:</div></pre></td></tr></table></figure><ul><li>输出结果包括：SEH链表，IDT 中断，TSS表。有了PCR地址，我们可以使用dt命令<code>dt _KPCR XXXXXXX</code>来查看KPCR结构，或者使用<code>?? @$pcr</code>来查看。<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">kd&gt; ?? @$pcr</div><div class="line">struct _KPCR * 0xffdff000</div><div class="line">   +0x000 NtTib            : _NT_TIB</div><div class="line">   +<span class="number">0x01c</span> <span class="string">SelfPcr          :</span> <span class="number">0xffdff000</span> _KPCR</div><div class="line">   +<span class="number">0x020</span> <span class="string">Prcb             :</span> <span class="number">0xffdff120</span> _KPRCB</div><div class="line">   +<span class="number">0x024</span> <span class="string">Irql             :</span> <span class="number">0</span> <span class="string">''</span></div><div class="line">   +<span class="number">0x028</span> <span class="string">IRR              :</span> <span class="number">0</span></div><div class="line">   +<span class="number">0x02c</span> <span class="string">IrrActive        :</span> <span class="number">0</span></div><div class="line">   +<span class="number">0x030</span> <span class="string">IDR              :</span> <span class="number">0xffffffff</span></div><div class="line">   +<span class="number">0x034</span> <span class="string">KdVersionBlock   :</span> <span class="number">0x80546ab8</span> </div><div class="line">   +<span class="number">0x038</span> <span class="string">IDT              :</span> <span class="number">0x8003f400</span> _KIDTENTRY</div><div class="line">   +<span class="number">0x03c</span> <span class="string">GDT              :</span> <span class="number">0x8003f000</span> _KGDTENTRY</div><div class="line">   +<span class="number">0x040</span> <span class="string">TSS              :</span> <span class="number">0x80042000</span> _KTSS</div><div class="line">   +<span class="number">0x044</span> <span class="string">MajorVersion     :</span> <span class="number">1</span></div><div class="line">   +<span class="number">0x046</span> <span class="string">MinorVersion     :</span> <span class="number">1</span></div><div class="line">   +<span class="number">0x048</span> <span class="string">SetMember        :</span> <span class="number">1</span></div><div class="line">   +<span class="number">0x04c</span> <span class="string">StallScaleFactor :</span> <span class="number">0xa98</span></div><div class="line">   +<span class="number">0x050</span> <span class="string">DebugActive      :</span> <span class="number">0</span> <span class="string">''</span></div><div class="line">   +<span class="number">0x051</span> <span class="string">Number           :</span> <span class="number">0</span> <span class="string">''</span></div><div class="line">   +<span class="number">0x052</span> <span class="string">Spare0           :</span> <span class="number">0</span> <span class="string">''</span></div><div class="line">   +<span class="number">0x053</span> <span class="string">SecondLevelCacheAssociativity :</span> <span class="number">0</span> <span class="string">''</span></div><div class="line">   +<span class="number">0x054</span> <span class="string">VdmAlert         :</span> <span class="number">0</span></div><div class="line">   +<span class="number">0x058</span> <span class="string">KernelReserved   :</span> [<span class="number">14</span>] <span class="number">0</span></div><div class="line">   +<span class="number">0x090</span> <span class="string">SecondLevelCacheSize :</span> <span class="number">0</span></div><div class="line">   +<span class="number">0x094</span> <span class="string">HalReserved      :</span> [<span class="number">16</span>] <span class="number">0</span></div><div class="line">   +<span class="number">0x0d4</span> <span class="string">InterruptMode    :</span> <span class="number">0</span></div><div class="line">   +<span class="number">0x0d8</span> <span class="string">Spare1           :</span> <span class="number">0</span> <span class="string">''</span></div><div class="line">   +<span class="number">0x0dc</span> <span class="string">KernelReserved2  :</span> [<span class="number">17</span>] <span class="number">0</span></div><div class="line">   +<span class="number">0x120</span> <span class="string">PrcbData         :</span> _KPRCB</div></pre></td></tr></table></figure></li></ul><ul><li><p><strong>!prcb：</strong>当前线程、Idle 线程等重要信息</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">kd&gt; !prcb</div><div class="line">PRCB <span class="keyword">for</span> Processor <span class="number">0</span> <span class="built_in">at</span> ffdff120:</div><div class="line">Threads--  Current <span class="number">80553740</span> Next <span class="number">00000000</span> Idle <span class="number">80553740</span></div><div class="line">Number <span class="number">0</span> SetMember <span class="number">00000001</span></div><div class="line">Interrupt Count -- <span class="number">00004be9</span>   //中断个数</div><div class="line">Times -- Dpc    <span class="number">00000019</span> Interrupt <span class="number">00000083</span> </div><div class="line">         Kernel <span class="number">000028b9</span> User      <span class="number">000000ab</span></div></pre></td></tr></table></figure><ul><li>KPCR和KPRCB:KPRCR在KPCR的后面，位于KPCR的第0x120偏移处。利用<code>?? @$PCR</code>得到KPCR的起始地址是0xffdff000，加上0x120号偏移，0xffdff120，就是上面得到的KPCB的起始地址。</li></ul></li><li><p>!IDT:显示的是当前中断向量表的信息(不指定终端号，则显示全部的中断向量表)</p></li><li><p>!IDT -a：显示所有的中断向量表</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">kd&gt; <span class="title">!idt</span></div><div class="line"></div><div class="line">Dumping IDT:</div><div class="line"></div><div class="line"><span class="number">37</span>:<span class="number">806</span>d<span class="number">2728</span> hal<span class="title">!PicSpuriousService37</span></div><div class="line"><span class="number">3</span>d:<span class="number">806</span>d<span class="number">3</span>b<span class="number">70</span> hal<span class="title">!HalpApcInterrupt</span></div><div class="line"><span class="number">41</span>:<span class="number">806</span>d<span class="number">39</span><span class="keyword">cc</span> hal<span class="title">!HalpDispatchInterrupt</span></div><div class="line"><span class="number">50</span>:<span class="number">806</span>d<span class="number">2800</span> hal<span class="title">!HalpApicRebootService</span></div><div class="line"><span class="number">62</span>:<span class="number">8</span>a<span class="number">297</span>cdc atapi<span class="title">!IdePortInterrupt</span> (KINTERRUPT <span class="number">8</span>a<span class="number">297</span>ca<span class="number">0</span>)</div><div class="line"><span class="number">63</span>:<span class="number">89</span>dc<span class="number">7</span>dd<span class="number">4</span> USBPORT<span class="title">!USBPORT_InterruptService</span> (KINTERRUPT <span class="number">89</span>dc<span class="number">7</span>d<span class="number">98</span>)</div><div class="line"><span class="number">73</span>:<span class="number">89</span>dfbb<span class="number">3</span><span class="keyword">c</span> SCSIPORT<span class="title">!ScsiPortInterrupt</span> (KINTERRUPT <span class="number">89</span>dfbb<span class="number">00</span>)</div><div class="line">         USBPORT<span class="title">!USBPORT_InterruptService</span> (KINTERRUPT <span class="number">8</span>a<span class="number">2533</span>f<span class="number">0</span>)</div><div class="line"><span class="number">82</span>:<span class="number">8</span>a<span class="number">2972</span>fc atapi<span class="title">!IdePortInterrupt</span> (KINTERRUPT <span class="number">8</span>a<span class="number">2972</span><span class="keyword">c</span><span class="number">0</span>)</div><div class="line"><span class="number">83</span>:<span class="number">8</span>a<span class="number">24</span>a<span class="number">89</span><span class="keyword">c</span> *** ERROR: Symbol file could not be found.  Defaulted <span class="keyword">to</span> export symbols for vmci.sys - </div><div class="line">vmci<span class="title">!DllUnload</span>+<span class="number">0x7D6</span> (KINTERRUPT <span class="number">8</span>a<span class="number">24</span>a<span class="number">860</span>)</div><div class="line">         portcls<span class="title">!CKsShellRequestor</span>::`scalar deleting destructor'+<span class="number">0x26</span> (KINTERRUPT <span class="number">89</span>a<span class="number">2</span>d<span class="number">470</span>)</div><div class="line"><span class="number">93</span>:<span class="number">8</span>a<span class="number">1</span>a<span class="number">57e4</span> <span class="keyword">i8042</span>prt<span class="title">!I8042KeyboardInterruptService</span> (KINTERRUPT <span class="number">8</span>a<span class="number">1</span>a<span class="number">57</span>a<span class="number">8</span>)</div><div class="line">a<span class="number">3</span>:<span class="number">8</span>a<span class="number">1</span>f<span class="number">7314</span> <span class="keyword">i8042</span>prt<span class="title">!I8042MouseInterruptService</span> (KINTERRUPT <span class="number">8</span>a<span class="number">1</span>f<span class="number">72</span>d<span class="number">8</span>)</div><div class="line">b<span class="number">1</span>:<span class="number">8</span>a<span class="number">2</span>aa<span class="number">85</span><span class="keyword">c</span> ACPI<span class="title">!ACPIInterruptServiceRoutine</span> (KINTERRUPT <span class="number">8</span>a<span class="number">2</span>aa<span class="number">820</span>)</div><div class="line">b<span class="number">4</span>:<span class="number">89e25</span>cd<span class="number">4</span> NDIS<span class="title">!ndisMIsr</span> (KINTERRUPT <span class="number">89e25</span><span class="keyword">c</span><span class="number">98</span>)</div><div class="line"><span class="keyword">c</span><span class="number">1</span>:<span class="number">806</span>d<span class="number">2984</span> hal<span class="title">!HalpBroadcastCallService</span></div><div class="line">d<span class="number">1</span>:<span class="number">806</span>d<span class="number">1</span>d<span class="number">34</span> hal<span class="title">!HalpClockInterrupt</span></div><div class="line">e<span class="number">1</span>:<span class="number">806</span>d<span class="number">2</span>f<span class="number">0</span><span class="keyword">c</span> hal<span class="title">!HalpIpiHandler</span></div><div class="line">e<span class="number">3</span>:<span class="number">806</span>d<span class="number">2</span><span class="keyword">c</span><span class="number">70</span> hal<span class="title">!HalpLocalApicErrorService</span></div><div class="line">fd:<span class="number">806</span>d<span class="number">3464</span> hal<span class="title">!HalpProfileInterrupt</span></div></pre></td></tr></table></figure></li><li><p>!irql:中断的时候，显示终端响应级别</p></li><li><p>!running(-it):显示正在运行的线程，如果是蓝屏文件可以确定是那个线程造成的蓝屏。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">kd&gt; !running -it</div><div class="line"></div><div class="line">System Processors 1 (affinity mask)</div><div class="line">  Idle Processors 1</div><div class="line">All processors idle.</div><div class="line"></div><div class="line">     Prcb      Current   Next    </div><div class="line">  0  ffdff120  80553740            <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></div><div class="line"></div><div class="line">ChildEBP RetAddr  </div><div class="line">8054abac 8054209d nt!RtlpBreakWithStatusInstruction</div><div class="line">8054abac baa0a162 nt!KeUpdateSystemTime+0x165</div><div class="line">8054ac50 80542af0 intelppm!AcpiC1Idle+0x12</div><div class="line">8054ac54 00000000 nt!KiIdleLoop+0x10</div></pre></td></tr></table></figure></li><li><p><strong>!gflag</strong>：用于查看，设置系统的全局标志。</p></li><li><p><strong>!process</strong>:显示进程信息。</p><ul><li>!process 0 0:显示当前进程的基本信息(第一个0表示的是当前进程列表，第二个0表示的是显示基本信息)<br><img src="https://i.imgur.com/WGbBowU.png" alt=""></li><li>!process xxxxxxxx 0   xxxx可以是EPROCESS，也可以是进程ID，0表示显示基本信息(否则是完整信息)，<br><img src="https://i.imgur.com/rdVhnBp.png" alt=""><br><img src="https://i.imgur.com/6l8kCG9.png" alt=""></li><li>!process 0 0 xxx.exe：按照映像名称查找指定的进程信息。<br><img src="https://i.imgur.com/XaRrjdE.png" alt=""></li><li>!process -1 0:显示当前进程的基本信息<br><img src="https://i.imgur.com/SJ6s4yV.png" alt=""></li><li>!process xxxxxxx 2:显示指定进程的基本信息，线程列表和每个线程的等待状态。<br><img src="https://i.imgur.com/2ow0TWu.png" alt=""></li></ul></li><li><p><strong>.process：</strong>切换进程上下文,例如需要显示内存的内容，就需要切换到内存后，然后在显示内存。</p><ul><li><p>.prcess /p/r xxxxx</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">kd&gt; db <span class="number">1000000</span> L160    <span class="comment">//显示内存</span></div><div class="line"><span class="number">01000000</span>  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????</div><div class="line"><span class="number">01000010</span>  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????</div><div class="line"><span class="number">01000020</span>  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????</div><div class="line"><span class="number">01000030</span>  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????</div><div class="line"><span class="number">01000040</span>  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????</div><div class="line"><span class="number">01000050</span>  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????</div><div class="line"><span class="number">01000060</span>  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????</div><div class="line"><span class="number">01000070</span>  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????</div><div class="line"><span class="number">01000080</span>  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????</div><div class="line"><span class="number">01000090</span>  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????</div><div class="line"><span class="number">010000</span>a0  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????</div><div class="line"><span class="number">010000</span>b0  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????</div><div class="line">kd&gt; !process <span class="number">0</span> <span class="number">0</span> explorer.exe     <span class="comment">//寻找explorer.exe的EPROCESS</span></div><div class="line">PROCESS <span class="number">8</span>a1ba5a8  SessionId: <span class="number">0</span>  Cid: <span class="number">0538</span>    Peb: <span class="number">7</span>ffdd000  ParentCid: <span class="number">0524</span></div><div class="line">    DirBase: <span class="number">136001</span>c0  ObjectTable: e191d458  HandleCount: <span class="number">498.</span></div><div class="line">    Image: explorer.exe</div><div class="line"></div><div class="line">kd&gt; .process /r /p <span class="number">8</span>a1ba5a8     <span class="comment">//切换进程</span></div><div class="line">Implicit process is now <span class="number">8</span>a1ba5a8</div><div class="line">.cache forcedecodeuser done</div><div class="line">Loading User Symbols</div><div class="line">...................................................................................</div><div class="line">kd&gt; db <span class="number">1000000</span> L160          <span class="comment">//显示内存</span></div><div class="line"><span class="number">01000000</span>  <span class="number">4</span>d <span class="number">5</span>a <span class="number">90</span> <span class="number">00</span> <span class="number">03</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span><span class="number">-04</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> ff ff <span class="number">00</span> <span class="number">00</span>  MZ..............</div><div class="line"><span class="number">01000010</span>  b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span><span class="number">-40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  ........@.......</div><div class="line"><span class="number">01000020</span>  <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span><span class="number">-00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  ................</div><div class="line"><span class="number">01000030</span>  <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span><span class="number">-00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> d8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  ................</div><div class="line"><span class="number">01000040</span>  <span class="number">0</span>e <span class="number">1</span>f ba <span class="number">0</span>e <span class="number">00</span> b4 <span class="number">09</span> cd<span class="number">-21</span> b8 <span class="number">01</span> <span class="number">4</span>c cd <span class="number">21</span> <span class="number">54</span> <span class="number">68</span>  ........!..L.!Th</div><div class="line"><span class="number">01000050</span>  <span class="number">69</span> <span class="number">73</span> <span class="number">20</span> <span class="number">70</span> <span class="number">72</span> <span class="number">6</span>f <span class="number">67</span> <span class="number">72</span><span class="number">-61</span> <span class="number">6</span>d <span class="number">20</span> <span class="number">63</span> <span class="number">61</span> <span class="number">6</span>e <span class="number">6</span>e <span class="number">6</span>f  is program canno</div><div class="line"><span class="number">01000060</span>  <span class="number">74</span> <span class="number">20</span> <span class="number">62</span> <span class="number">65</span> <span class="number">20</span> <span class="number">72</span> <span class="number">75</span> <span class="number">6e-20</span> <span class="number">69</span> <span class="number">6</span>e <span class="number">20</span> <span class="number">44</span> <span class="number">4</span>f <span class="number">53</span> <span class="number">20</span>  t be run <span class="keyword">in</span> DOS </div><div class="line"><span class="number">01000070</span>  <span class="number">6</span>d <span class="number">6</span>f <span class="number">64</span> <span class="number">65</span> <span class="number">2</span>e <span class="number">0</span>d <span class="number">0</span>d <span class="number">0</span>a<span class="number">-24</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  mode....$.......</div><div class="line"><span class="number">01000080</span>  <span class="number">97</span> a6 b0 <span class="number">91</span> d3 c7 de c2-d3 c7 de c2 d3 c7 de c2  ................</div><div class="line"><span class="number">01000090</span>  <span class="number">10</span> c8 d1 c2 d7 c7 de c2-d3 c7 df c2 <span class="number">48</span> c5 de c2  ............H...</div><div class="line"><span class="number">010000</span>a0  <span class="number">10</span> c8 <span class="number">83</span> c2 c8 c7 de c2<span class="number">-10</span> c8 <span class="number">80</span> c2 d2 c7 de c2  ................</div><div class="line"><span class="number">010000</span>b0  <span class="number">10</span> c8 be c2 fa c7 de c2<span class="number">-10</span> c8 <span class="number">81</span> c2 ce c7 de c2  ................</div><div class="line"><span class="number">010000</span>c0  <span class="number">10</span> c8 <span class="number">84</span> c2 d2 c7 de c2<span class="number">-52</span> <span class="number">69</span> <span class="number">63</span> <span class="number">68</span> d3 c7 de c2  ........Rich....</div><div class="line"><span class="number">010000</span>d0  <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span><span class="number">-50</span> <span class="number">45</span> <span class="number">00</span> <span class="number">00</span> <span class="number">4</span>c <span class="number">01</span> <span class="number">04</span> <span class="number">00</span>  ........PE..L...</div></pre></td></tr></table></figure><ul><li>.process /i xxxxxxx:让操作系统实际切换进程上下文，在切换完成后，需要输入g命令，是的切换执行。<figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">kd&gt; .process /i <span class="number">8a0f24b0</span></div><div class="line">You need to continue execution (press 'g' &lt;enter&gt;) for the context</div><div class="line">to be switched. When the debugger breaks in again, you will be in</div><div class="line">the new process context.</div><div class="line">kd&gt; g</div><div class="line">Break instruction exception - code <span class="number">80000003</span> (first chance)</div><div class="line">nt!RtlpBreakWithStatusInstruction:</div><div class="line"><span class="number">80528</span>bdc cc              int     <span class="number">3</span></div><div class="line">kd&gt; dd <span class="number">1000000</span> L600</div><div class="line"><span class="number">01000000</span>  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></div><div class="line"><span class="number">01000010</span>  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></div><div class="line"><span class="number">01000020</span>  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></div><div class="line"><span class="number">01000030</span>  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></div><div class="line"><span class="number">01000040</span>  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></div><div class="line"><span class="number">01000050</span>  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></div><div class="line"><span class="number">01000060</span>  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></div><div class="line"><span class="number">01000070</span>  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></div><div class="line"><span class="number">01000080</span>  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></div><div class="line"><span class="number">01000090</span>  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></div><div class="line"><span class="number">010000a0</span>  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></div><div class="line">``` </div><div class="line">   * !dml_proc:显示粗略的进程列表</div></pre></td></tr></table></figure></li></ul></li></ul></li></ul><p>kd&gt; !dml_proc<br>Address  PID  Image file name<br>8a32c830 4    System<br>8a154270 228  smss.exe<br>8a147da0 258  csrss.exe<br>8a1d2a80 270  winlogon.exe<br>8a11cda0 29c  services.exe<br>89f0c4e0 2a8  lsass.exe<br>8a1a4020 340  vmacthlp.exe<br>8a24cda0 34c  svchost.exe<br>8a24c500 394  svchost.exe<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="bullet">* </span>!thread tid:显示线程的信息（不加参数，或者指定为-1表示当前线程）</div></pre></td></tr></table></figure></p><p>kd&gt; !thread<br>THREAD 8a32a3c8  Cid 0004.0038  Teb: 00000000 Win32Thread: 00000000 RUNNING on processor 0<br>Not impersonating<br>DeviceMap                 e1fe9718<br>Owning Process            8a0f24b0       Image:         abexcm2-voiees.exe<br>Wait Start TickCount      30346          Ticks: 0<br>Context Switch Count      6586<br>UserTime                  00:00:00.000<br>KernelTime                00:00:00.453<br>Start Address nt!ExpWorkerThread (0x80535b02)<br>Stack Init bad04000 Current bad03d1c Base bad04000 Limit bad01000 Call 0<br>Priority 12 BasePriority 12 PriorityDecrement 0 DecrementCount 0<br>ChildEBP RetAddr  Args to Child<br>bad03d20 80662097 00000007 8055c040 8055c0fc nt!RtlpBreakWithStatusInstruction (FPO: [1,0,0])<br>bad03d74 80535c02 00000000 00000000 8a32a3c8 nt!ExpDebuggerWorker+0x91 (FPO: [Non-Fpo])<br>bad03dac 805c7160 00000000 00000000 00000000 nt!ExpWorkerThread+0x100 (FPO: [Non-Fpo])<br>bad03ddc 80542dd2 80535b02 00000001 00000000 nt!PspSystemThreadStartup+0x34 (FPO: [Non-Fpo])<br>00000000 00000000 00000000 00000000 00000000 nt!KiThreadStartup+0x16<br>```</p><ul><li>-t:显示指定线程的信息<code>!thread -t TID</code><ul><li>.thread (/p/r)tid:切换线程上下文</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;vertarget&lt;/strong&gt;:用于显示被调试计算机的基本的信息。&lt;br&gt;  &lt;img src=&quot;https://i.imgur.com/xSqp2aV.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dg&lt;/strong&gt;：用于显示段选择子的信息&lt;br&gt;  &lt;img src=&quot;https://i.imgur.com/wMSKxGr.png&quot; alt=&quot;&quot;&gt;&lt;ul&gt;
&lt;li&gt;有dg的输出结果可以看到，cs段的范围是0x00000000-0xffffffff&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;!cpuinfo&lt;/strong&gt;:显示CPU的信息&lt;br&gt;  &lt;img src=&quot;https://i.imgur.com/NXzeSxq.png&quot; alt=&quot;&quot;&gt;
    
    </summary>
    
      <category term="windows 内核" scheme="http://yoursite.com/categories/windows-%E5%86%85%E6%A0%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>病毒分析技术(11) ---文件下载者病毒变种</title>
    <link href="http://yoursite.com/2018/07/25/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF(11)---%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E8%80%85%E5%8F%98%E7%A7%8D1/"/>
    <id>http://yoursite.com/2018/07/25/病毒分析技术(11)---文件下载者变种1/</id>
    <published>2018-07-25T06:02:11.000Z</published>
    <updated>2018-07-31T03:27:31.834Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-目录："><a href="#一-目录：" class="headerlink" title="一 目录："></a>一 目录：</h1><ul><li>1.目录</li><li>2.样本信息</li><li>3.行为分析</li><li>4.样本分析</li><li>5.技术上的总结<a id="more"></a></li></ul><h1 id="二-样本信息"><a href="#二-样本信息" class="headerlink" title="二 样本信息"></a>二 样本信息</h1><ul><li>样本名称：3601.exe</li><li>样本md5：b5752252b34a8af470db1830cc48504d</li><li>是否加壳：UPX</li><li>编译语言：Microsoft Visual C++ 6.0</li><li>样本来源：52破解</li></ul><h1 id="三-行为分析"><a href="#三-行为分析" class="headerlink" title="三 行为分析"></a>三 行为分析</h1><ul><li>第一步：首先程序利用WSAStartup函数进行联网初始化，</li><li>第二歩：接着在注册表Services下写入键值，主要是判断此病毒之前是否已经被感染，如果没有感染执行第三步，如果被感染了，则执行第四步</li><li>第三步：然后分别创建了四个线程，分别执行不同的操作(这一部分和病毒分析技术(8)完全一致，不做分析)。</li><li>第四步：接下来，利用StartServiceCtrlDispatcherA函数，是的第三步的函数连接到服务管理器，目的就是使病毒程序持久执行。</li><li>第五步：创建服务实现自启动，删除程序，并设置进程和线程优先级，设置优先级全部是最基本优先级，目的是避免过分占用资源，达到隐藏的目的</li></ul><h1 id="四-样本分析"><a href="#四-样本分析" class="headerlink" title="四 样本分析"></a>四 样本分析</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;程序利用WSAStartup进行联网的初始化工作。</p><h2 id="sub-405A52分析"><a href="#sub-405A52分析" class="headerlink" title="sub_405A52分析"></a>sub_405A52分析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;程序复制硬编码而成的注册表子键，然后连接后续的子键名称<br>    <img src="https://i.imgur.com/qpvcxS2.png" alt=""><br>    <img src="https://i.imgur.com/Z33Nyry.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用RegOpenKeyEx打开注册表键值<br>    <img src="https://i.imgur.com/lIcSMDu.png" alt=""></p><h2 id="sub-405B6E分析"><a href="#sub-405B6E分析" class="headerlink" title="sub_405B6E分析"></a>sub_405B6E分析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;病毒分别获取了windows目录和程序自身目录，然后比较各自前15个字节是否相同，如果不相同的话，则复制一份以时间为随机数(小写字母)的名称的相同文件到windows目录下。<br>     <img src="https://i.imgur.com/dss63zy.png" alt=""><br>     <img src="https://i.imgur.com/Xi6XX4Q.png" alt=""><br>     <img src="https://i.imgur.com/3u1optJ.png" alt=""><br>     <img src="https://i.imgur.com/CEzOVT3.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以刚刚复制到windows目录的文件为路径创建一个服务Ghijkl Nopqrstu Wxy<br>     <img src="https://i.imgur.com/7O3t1ja.png" alt=""><br>     <img src="https://i.imgur.com/ToDcYaE.png" alt=""><br>     <img src="https://i.imgur.com/cUm2FbM.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;初始化函数基本配置，然后启动服务。<br>     <img src="https://i.imgur.com/GNfMTc5.png" alt=""><br>     <img src="https://i.imgur.com/qwfpN1g.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;写入注册表Services，填写服务描述。<br>    <img src="https://i.imgur.com/OJYd6pA.png" alt=""><br>    <img src="https://i.imgur.com/P95a1Xt.png" alt=""><br>    <img src="https://i.imgur.com/1nGJt8g.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;调用sub_40355B()删除样本文件，设置基础进程优先级。</p><h3 id="sub-40355B分析"><a href="#sub-40355B分析" class="headerlink" title="sub_40355B分析"></a>sub_40355B分析</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;删除文件，但是不显示信息<br>     <img src="https://i.imgur.com/kw827x1.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;设置进线程优先级<br>    <img src="https://i.imgur.com/KWJUvqX.png" alt=""></p><h2 id="sub-40561A分析"><a href="#sub-40561A分析" class="headerlink" title="sub_40561A分析"></a>sub_40561A分析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;程序首先加载hr3.dll这个恶意的dll文件，然后分别创建个线程，依次执行这四个线程。具体分析如下。</p><ul><li>设置serviceStatus状态<br>  <img src="https://i.imgur.com/FLYazwS.png" alt=""></li><li>更新资源</li><li>加载hra33.dll这个动态链接库文件</li><li>创建名为Ghijkl Nopqrstu Wxy的互斥体</li><li>创建三个线程<br>  <img src="https://i.imgur.com/Kj8IAzt.png" alt=""></li></ul><h2 id="UpdateSource"><a href="#UpdateSource" class="headerlink" title="UpdateSource"></a>UpdateSource</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个函数主要是用于更新资源的，但是由于注册表Services.Net CLR不存在导致函数提前退出。<br>    <img src="https://i.imgur.com/PvxVeFO.png" alt=""></p><ul><li>根据Service注册表下Net CLR文件，创建新文件<br>  <img src="https://i.imgur.com/eO39k7g.png" alt=""></li><li>然后利用跟新资源的方式让其像一个可执行文件<br>  <img src="https://i.imgur.com/A91JbCZ.png" alt=""></li></ul><h2 id="Thread-1"><a href="#Thread-1" class="headerlink" title="Thread_1"></a>Thread_1</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用od跟入Thread_1函数。</p><ul><li>获取本地主机的名称和地址<br>  <img src="https://i.imgur.com/4QH59S2.png" alt=""></li><li>获取本地网关<br>  <img src="https://i.imgur.com/uJrXKab.png" alt=""><br>  <img src="https://i.imgur.com/2JGKjbK.png" alt=""></li><li>这里有个病毒作者的错误，本来他想的是如果主机用户是管理员则执行这个判断，但是他直接引用的是字符串，造成判断无效，所有用户都成立<br>  <img src="https://i.imgur.com/7VJTb4v.png" alt=""></li><li>利用上面得到的本地网关地址，和用户名及密码作为参数传入CreateFileAndExecuteFun(emmmm不像是真的)。<br>  <img src="https://i.imgur.com/dk8oKbI.png" alt=""></li></ul><h3 id="CreateFileAndExecuteFun"><a href="#CreateFileAndExecuteFun" class="headerlink" title="CreateFileAndExecuteFun"></a>CreateFileAndExecuteFun</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;程序先与远程主机利用ipc$漏洞创建一个共享的命名管道，用IPC$,连接者甚至可以与目标主机建立一个空的连接而无需用户名与密码(当然,对方机器必须开了ipc$共享,否则你是连接不上的)，而利用这个空的连接，连接者还可以得到目标主机上的用户列表(不过负责的管理员会禁止导出用户列表的)。还可以访问共享资源,并使用一些字典工具，进行密码探测，以至于获得更高的权限。然后黑客从服务端可以利用nc等软件向主机发送一个shell。</p><ul><li>创建映射方式，以便后期的文件操作，通过WNetAddConnection2A API将共享目录映射为本地磁盘，之后即可按本地文件形式访问文件，最后断开连接。[参考：<a href="http://blog.sina.com.cn/s/blog_672355630102vnwa.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_672355630102vnwa.html</a>]<br>  <img src="https://i.imgur.com/QtFlY04.png" alt=""></li><li>把本地文件复制到共享文件的C-E盘<br>   <img src="https://i.imgur.com/8jUIjNa.png" alt=""></li></ul><h2 id="Thread-2"><a href="#Thread-2" class="headerlink" title="Thread_2"></a>Thread_2</h2><ul><li>获取本地时间和20130221进行比较，如果大于则创建Thread3这个线程执行，<br>  <img src="https://i.imgur.com/SisWINB.png" alt=""><br>  <img src="https://i.imgur.com/UFTq1t2.png" alt=""></li></ul><h2 id="Thread-3"><a href="#Thread-3" class="headerlink" title="Thread_3"></a>Thread_3</h2><ul><li>判断链接192.168.1.107是否正常<br>  <img src="https://i.imgur.com/2pjgCY0.png" alt=""></li><li>利用switch 通过接收不同的指令，来决定执行的操作，如下图<br>  <img src="https://i.imgur.com/PaexMGd.png" alt=""><ul><li>16号：<br><img src="https://i.imgur.com/y4CgGAP.png" alt=""></li><li>18号：<br><img src="https://i.imgur.com/Sm9E6nA.png" alt=""></li><li>20号：<br><img src="https://i.imgur.com/UQHocaf.png" alt=""></li><li>6号：<br><img src="https://i.imgur.com/J1PSmYE.png" alt=""></li><li>2号：<br><img src="https://i.imgur.com/4o89JYA.png" alt=""></li><li>3号：<br><img src="https://i.imgur.com/2Gjuiwp.png" alt=""></li><li>4号：<br><img src="https://i.imgur.com/viggCZX.png" alt=""><h3 id="IsConnectFun"><a href="#IsConnectFun" class="headerlink" title="IsConnectFun()"></a>IsConnectFun()</h3></li></ul></li><li>解Base编码得到IP地址：192.168.1.107:83<br>  <img src="https://i.imgur.com/S6nBGNh.png" alt=""></li></ul><h3 id="GetInformationFun"><a href="#GetInformationFun" class="headerlink" title="GetInformationFun"></a>GetInformationFun</h3><ul><li>识别出当前系统版本信息<br>  <img src="https://i.imgur.com/UITUJTP.png" alt=""></li><li>读取注册表，查看CPU的频率<br>  <img src="https://i.imgur.com/eALSKAq.png" alt=""><br>  <img src="https://i.imgur.com/aw2pDqE.png" alt=""><br>  <img src="https://i.imgur.com/ddttIFX.png" alt=""></li><li>调用 GlobalMemoryStatusEx获取内存信息，<br>  <img src="https://i.imgur.com/UdVhHfo.png" alt=""></li><li>查看网络适配器情况<br>  <img src="https://i.imgur.com/CCkwTgW.png" alt=""></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-目录：&quot;&gt;&lt;a href=&quot;#一-目录：&quot; class=&quot;headerlink&quot; title=&quot;一 目录：&quot;&gt;&lt;/a&gt;一 目录：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;1.目录&lt;/li&gt;
&lt;li&gt;2.样本信息&lt;/li&gt;
&lt;li&gt;3.行为分析&lt;/li&gt;
&lt;li&gt;4.样本分析&lt;/li&gt;
&lt;li&gt;5.技术上的总结
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>病毒分析技术(10) ---MRB文件修改病毒</title>
    <link href="http://yoursite.com/2018/07/23/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF(10)--MBR%E4%BF%AE%E6%94%B9%E7%97%85%E6%AF%92/"/>
    <id>http://yoursite.com/2018/07/23/病毒分析技术(10)--MBR修改病毒/</id>
    <published>2018-07-23T02:02:11.000Z</published>
    <updated>2018-07-23T09:08:17.589Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-目录："><a href="#一-目录：" class="headerlink" title="一 目录："></a>一 目录：</h1><ul><li>1.目录</li><li>2.样本信息</li><li>3.行为分析</li><li>4.样本分析</li><li>5.技术上的总结<a id="more"></a></li></ul><h1 id="样本分析"><a href="#样本分析" class="headerlink" title="样本分析"></a>样本分析</h1><ul><li>样本名称：mbr.exe</li><li>样本md5：955b66c722ca993dd11fbe56bbf92525</li><li>是否加壳：无壳</li><li>编译语言：Microsoft Visual C++ 6.0</li><li>样本来源：52破解</li></ul><h1 id="行为分析"><a href="#行为分析" class="headerlink" title="行为分析"></a>行为分析</h1><ul><li>1.首先病毒将自身权限提升到Sedebugprivile权限，这样做的原因是为了使得<strong>进程获得写相关的访问权限以打开其他进程</strong></li><li>2.在磁盘主引导扇区创建并写入文件，已达到修改MRB的效果</li></ul><h1 id="样本分析-1"><a href="#样本分析-1" class="headerlink" title="样本分析"></a>样本分析</h1><h2 id="提升进程权限"><a href="#提升进程权限" class="headerlink" title="提升进程权限"></a>提升进程权限</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;要对任意一个进程进行写入相关的访问权的OpenProcess操作则需要将自身的权限提升至SedebugPrivile权限。<br>     <img src="https://i.imgur.com/jPtSkhj.png" alt=""></p><ul><li>修改特权<br>  <img src="https://i.imgur.com/sQcuIu0.png" alt=""></li></ul><h2 id="修改MBR"><a href="#修改MBR" class="headerlink" title="修改MBR"></a>修改MBR</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;主引导记录（MBR，Main Boot Record）是位于磁盘最前边的一段引导（Loader）代码。它负责磁盘操作系统(DOS)对磁盘进行读写时分区合法性的判别、分区引导信息的定位，它由磁盘操作系统(DOS)在对硬盘进行初始化时产生的。</p><ul><li>MBR的结构示意图<br>  <img src="https://i.imgur.com/42BjNab.png" alt=""></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;修改MBR的过程<br>    <img src="https://i.imgur.com/B39LqvA.png" alt=""></p><ul><li>程序先将特定的内容复制到缓冲区</li><li>接着打开本台设备的主硬盘<br>  <img src="https://i.imgur.com/4DzYyYg.png" alt=""></li><li>然后锁定设备，避免其他程序访问该设备<br>  <img src="https://i.imgur.com/T4faiBf.png" alt=""></li><li>写入数据到刚刚在MBR中创建的文件<br>  <img src="https://i.imgur.com/aEDuwFC.png" alt=""></li><li>解除锁定，允许其他进程写入设备<br>  <img src="https://i.imgur.com/mYNE29p.png" alt=""></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用winhex查看一下MBR的情况，和运行结果<br>    <img src="https://i.imgur.com/8mGFVKH.png" alt=""><br>    <img src="https://i.imgur.com/XfLTLWf.png" alt=""><br>    <img src="https://i.imgur.com/bCZnTCF.png" alt=""></p><h1 id="技术总结"><a href="#技术总结" class="headerlink" title="技术总结"></a>技术总结</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个病毒主要用了两个技术，第一个是提升进程权限，第二个就是修改MRB</p><h2 id="提升权限"><a href="#提升权限" class="headerlink" title="提升权限"></a>提升权限</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果我们需要使得我们新打开的进程具有读取权限，那么我们需要将父进程的权限提升至Sedebugprivile。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;与提升SedebugPrivile权限相关的函数主要有三个OpenProcessToken、LookupPrivilegevalue、AdjustTokenPrivileges。OpenprocessToken用于获取进程的安全令牌，LookupPrivilegevalue用于检索指定的权限令牌。最后AdjustTokenPrivileges用于设置进程的安全令牌。</p><h2 id="修改MRB"><a href="#修改MRB" class="headerlink" title="修改MRB"></a>修改MRB</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过创建\\.\PHYSICALDRIVE0文件去写入磁盘主引导扇区，在写入之前由于windows是多线程并发操作的，需要做到在进行写入的时候保证其他线程无法访问该区域，可以去设备进行上锁，当写入结束后，需要解除锁定状态。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-目录：&quot;&gt;&lt;a href=&quot;#一-目录：&quot; class=&quot;headerlink&quot; title=&quot;一 目录：&quot;&gt;&lt;/a&gt;一 目录：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;1.目录&lt;/li&gt;
&lt;li&gt;2.样本信息&lt;/li&gt;
&lt;li&gt;3.行为分析&lt;/li&gt;
&lt;li&gt;4.样本分析&lt;/li&gt;
&lt;li&gt;5.技术上的总结
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>windbg学习笔记 (4)</title>
    <link href="http://yoursite.com/2018/07/22/windbg%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(4)/"/>
    <id>http://yoursite.com/2018/07/22/windbg学习笔记(4)/</id>
    <published>2018-07-22T06:02:11.000Z</published>
    <updated>2018-07-24T08:46:39.301Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一部分-调试目标程序的函数"><a href="#第一部分-调试目标程序的函数" class="headerlink" title="第一部分 调试目标程序的函数"></a>第一部分 调试目标程序的函数</h1><h2 id="call命令的原理"><a href="#call命令的原理" class="headerlink" title=".call命令的原理"></a>.call命令的原理</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们使用.call调试被调试程序的函数。利用.call元命令可以不需要使函数运行到函数调用处，而是类似于进行一次虚拟调用。具体原理如下：</p><ul><li>windbg在栈上创建一小段代码，这段代码用于被调用函数的父函数，函数返回到这段代码，然后中断。</li><li>在栈上创建一个新的关于被调用函数的栈帧，用于模拟被调用函数</li><li>修改寄存器，使程序指向模拟被调用的函数的起始地址，保证恢复程序运行就能执行这个函数<a id="more"></a></li></ul><h2 id="限制条件"><a href="#限制条件" class="headerlink" title="限制条件"></a>限制条件</h2><ul><li>只能支持调试用户态程序时使用</li><li>被调用函数的私有符号<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">0:000&gt;x degee!wprint*</div><div class="line">04113f6 degee!<span class="attribute">wprintf</span>=&lt;no<span class="built_in"> type </span>information&gt;</div></pre></td></tr></table></figure></li></ul><h1 id="控制进程和线程"><a href="#控制进程和线程" class="headerlink" title="控制进程和线程"></a>控制进程和线程</h1><h2 id="对线程的控制"><a href="#对线程的控制" class="headerlink" title="对线程的控制"></a>对线程的控制</h2><ul><li><p>~：查看当前调试对象的所有线程</p><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">0</span>:<span class="number">000</span>&gt; ~</div><div class="line">.  <span class="number">0</span>  <span class="attribute">Id</span>: <span class="number">220.2</span>ebc <span class="attribute">Suspend</span>: <span class="number">1</span> <span class="attribute">Teb</span>: <span class="number">0119</span>d000 Unfrozen</div><div class="line">   <span class="number">1</span>  <span class="attribute">Id</span>: <span class="number">220.684</span> <span class="attribute">Suspend</span>: <span class="number">1</span> <span class="attribute">Teb</span>: <span class="number">011</span>a0000 Unfrozen</div><div class="line">   <span class="number">2</span>  <span class="attribute">Id</span>: <span class="number">220.27</span>f8 <span class="attribute">Suspend</span>: <span class="number">1</span> <span class="attribute">Teb</span>: <span class="number">011</span>a3000 Unfrozen</div><div class="line">   <span class="number">3</span>  <span class="attribute">Id</span>: <span class="number">220.2</span>d90 <span class="attribute">Suspend</span>: <span class="number">1</span> <span class="attribute">Teb</span>: <span class="number">011</span>a6000 Unfrozen</div></pre></td></tr></table></figure></li><li><p>~ ThreadId:查看特定的线程信息<br>   <img src="https://i.imgur.com/aIovBr8.png" alt=""></p></li><li><p>~ ThreadId n：增加指定线程的挂起计数(调用SuspendThread)</p><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">0</span>:<span class="number">000</span>&gt; ~<span class="number">1</span></div><div class="line">   <span class="number">1</span>  <span class="attribute">Id</span>: <span class="number">220.684</span> <span class="attribute">Suspend</span>: <span class="number">1</span> <span class="attribute">Teb</span>: <span class="number">011</span>a0000 Unfrozen</div><div class="line">      <span class="attribute">Start</span>: ntdll!TppWorkerThread (<span class="number">76</span>ee38a0) </div><div class="line">      <span class="attribute">Priority</span>: <span class="number">0</span>  Priority <span class="attribute">class</span>: <span class="number">32</span>  <span class="attribute">Affinity</span>: f</div><div class="line"><span class="number">0</span>:<span class="number">000</span>&gt; ~<span class="number">1</span> n </div><div class="line"><span class="number">0</span>:<span class="number">000</span>&gt; ~</div><div class="line">.  <span class="number">0</span>  <span class="attribute">Id</span>: <span class="number">220.2</span>ebc <span class="attribute">Suspend</span>: <span class="number">1</span> <span class="attribute">Teb</span>: <span class="number">0119</span>d000 Unfrozen</div><div class="line">   <span class="number">1</span>  <span class="attribute">Id</span>: <span class="number">220.684</span> <span class="attribute">Suspend</span>: <span class="number">2</span> <span class="attribute">Teb</span>: <span class="number">011</span>a0000 Unfrozen</div><div class="line">   <span class="number">2</span>  <span class="attribute">Id</span>: <span class="number">220.27</span>f8 <span class="attribute">Suspend</span>: <span class="number">1</span> <span class="attribute">Teb</span>: <span class="number">011</span>a3000 Unfrozen</div><div class="line">   <span class="number">3</span>  <span class="attribute">Id</span>: <span class="number">220.2</span>d90 <span class="attribute">Suspend</span>: <span class="number">1</span> <span class="attribute">Teb</span>: <span class="number">011</span>a6000 Unfrozen</div></pre></td></tr></table></figure></li><li><p>~ ThreadId m：减少指定线程的挂起计数(调用ResumeThread)</p><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">0</span>:<span class="number">000</span>&gt; ~<span class="number">1</span> m</div><div class="line"><span class="number">0</span>:<span class="number">000</span>&gt; ~</div><div class="line">.  <span class="number">0</span>  <span class="attribute">Id</span>: <span class="number">220.2</span>ebc <span class="attribute">Suspend</span>: <span class="number">1</span> <span class="attribute">Teb</span>: <span class="number">0119</span>d000 Unfrozen</div><div class="line">   <span class="number">1</span>  <span class="attribute">Id</span>: <span class="number">220.684</span> <span class="attribute">Suspend</span>: <span class="number">1</span> <span class="attribute">Teb</span>: <span class="number">011</span>a0000 Unfrozen</div><div class="line">   <span class="number">2</span>  <span class="attribute">Id</span>: <span class="number">220.27</span>f8 <span class="attribute">Suspend</span>: <span class="number">1</span> <span class="attribute">Teb</span>: <span class="number">011</span>a3000 Unfrozen</div><div class="line">   <span class="number">3</span>  <span class="attribute">Id</span>: <span class="number">220.2</span>d90 <span class="attribute">Suspend</span>: <span class="number">1</span> <span class="attribute">Teb</span>: <span class="number">011</span>a6000 Unfrozen</div></pre></td></tr></table></figure></li><li><p>~ ThreadId f:冻结特定线程</p></li><li>~ ThreadId g：恢复执行特定线程</li><li>~ ThreadId s：切换到特定线程</li></ul><h2 id="对进程的控制"><a href="#对进程的控制" class="headerlink" title="对进程的控制"></a>对进程的控制</h2><ul><li>使用<strong>|命令</strong>实现对进程的控制。操作和线程一致。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一部分-调试目标程序的函数&quot;&gt;&lt;a href=&quot;#第一部分-调试目标程序的函数&quot; class=&quot;headerlink&quot; title=&quot;第一部分 调试目标程序的函数&quot;&gt;&lt;/a&gt;第一部分 调试目标程序的函数&lt;/h1&gt;&lt;h2 id=&quot;call命令的原理&quot;&gt;&lt;a href=&quot;#call命令的原理&quot; class=&quot;headerlink&quot; title=&quot;.call命令的原理&quot;&gt;&lt;/a&gt;.call命令的原理&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;我们使用.call调试被调试程序的函数。利用.call元命令可以不需要使函数运行到函数调用处，而是类似于进行一次虚拟调用。具体原理如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;windbg在栈上创建一小段代码，这段代码用于被调用函数的父函数，函数返回到这段代码，然后中断。&lt;/li&gt;
&lt;li&gt;在栈上创建一个新的关于被调用函数的栈帧，用于模拟被调用函数&lt;/li&gt;
&lt;li&gt;修改寄存器，使程序指向模拟被调用的函数的起始地址，保证恢复程序运行就能执行这个函数
    
    </summary>
    
      <category term="windows 内核" scheme="http://yoursite.com/categories/windows-%E5%86%85%E6%A0%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>windbg学习笔记（3）</title>
    <link href="http://yoursite.com/2018/07/19/windbg%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(3)/"/>
    <id>http://yoursite.com/2018/07/19/windbg学习笔记(3)/</id>
    <published>2018-07-19T07:02:11.000Z</published>
    <updated>2018-07-22T08:57:36.244Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一部分-事件处理"><a href="#第一部分-事件处理" class="headerlink" title="第一部分 事件处理"></a>第一部分 事件处理</h1><h2 id="调试事件与异常"><a href="#调试事件与异常" class="headerlink" title="调试事件与异常"></a>调试事件与异常</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;windows定义了九种调试事件，其中异常是其中的一种调试事件(EXCEPTION_DEBUG_EVENT)。异常也存在包括win32异常，调试器异常，编译器异常(VC异常)，托管异常(.net异常)，其他异常(主动调用RaiseException抛出异常)。<br><a id="more"></a></p><h2 id="二次机会"><a href="#二次机会" class="headerlink" title="二次机会"></a>二次机会</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于每个异常，windows异常处理模块给与两次处理异常的机会，<strong>也就是说程序拥有两次处理机会，</strong>处理后调试器会向系统返回一直处理结果。如果最后一次无法处理完异常，windows本身会调用默认的异常处理(用户态下抛出默认提示框，内核下蓝屏)。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于第一次处理异常机会，调试器一般会放弃处理，让系统继续分发，交给自身的异常处理程序处理，对于第二次处理机会，调试器一般会断在产生异常的地方。(与原文表述不同)</p><h2 id="GH和GN命令"><a href="#GH和GN命令" class="headerlink" title="GH和GN命令"></a>GH和GN命令</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在调试器中断异常后，可以使用G命令(go)恢复程序运行，我们可以指定程序关于异常处理的结果，也就是如果GH(go handle)表示此异常得到处理，如果是GN(go not handle)表示异常为处理.</p><h1 id="第二部分-控制调试目标"><a href="#第二部分-控制调试目标" class="headerlink" title="第二部分 控制调试目标"></a>第二部分 控制调试目标</h1><h2 id="初始断点"><a href="#初始断点" class="headerlink" title="初始断点"></a>初始断点</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;windows进程加载器在完成了进程在用户态下最基本的初始化后，系统的进程初始化函数主动触发中断指令（int 3），这种断点称之为<strong>初始断点</strong>。<br>    <img src="https://i.imgur.com/xq7KW1V.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们使用kn命令来查看调用栈的情况，可以看到这个断点是调试器创建的。<br>    <img src="https://i.imgur.com/iMygNk2.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在调试选项的时候加入-g选项，以忽略初始断点，也就是不在将程序中断给用户。如果需要分析程序的入口函数，初始断点是非常有效的。</p><h2 id="单步执行"><a href="#单步执行" class="headerlink" title="单步执行"></a>单步执行</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;windbg提供两种单步执行的模式，一种是源码级单步和汇编级单步。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;和ollydbg一样，windbg也提供两种单步的方式，一种是单步步入，另外一种是单步步入。区别和ollydbg是一致的。前者windbg称为单步(step)，后者称之为跟踪(trace)。</p><ul><li>p：单步步入(进入函数)<br>  <img src="https://i.imgur.com/snBzvbi.png" alt=""></li><li>t：单步步过(不进入函数，只是执行完毕）<br>  <img src="https://i.imgur.com/tlmSTkN.png" alt=""></li><li>完整用法：p|t [r：是否显示寄存器信息] [=startaddress] [count] [“command”]</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关于步入操作，在CPU上都是通过置标志寄存器TF位来实现的，每当执行完一条程序(执行完TF为0)，置TF位为1，在下条指令执行前检查TF情况，以此判断是否需要单步。</p><h2 id="单步执行到指定位置"><a href="#单步执行到指定位置" class="headerlink" title="单步执行到指定位置"></a>单步执行到指定位置</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>pa或者ta</strong>用来执行到指定代码。</p><ul><li>完整用法：pa|ta [r] [=startaddress] [endaddress]<br>  <img src="https://i.imgur.com/voVX6Ut.png" alt=""></li></ul><h2 id="执行到下一个函数调用"><a href="#执行到下一个函数调用" class="headerlink" title="执行到下一个函数调用"></a>执行到下一个函数调用</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>pc或者tc命令</strong>用来执行到下一个函数调用，count指定执行的函数的个数，这也就是为什么可以选择pc或者tc的原因(如果只是在下一个函数调用前中断，t命令或者p命令是相同的功能)。而count数可以指定执行的函数个数，这就可以判断在count个函数调用前的count个函数的执行方式。</p><ul><li>完整用法：pc|tc [r] [=startaddress] [count]<br>  <img src="https://i.imgur.com/NSAlWWv.png" alt=""></li></ul><h2 id="单步执行到下一个分支"><a href="#单步执行到下一个分支" class="headerlink" title="单步执行到下一个分支"></a>单步执行到下一个分支</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>tb命令</strong>是单步执行到下一个分支,但是对于x86的机器只能用于内核调试，对于x64的可以用于内核和用户调试。</p><ul><li>完整命令：tb [r] [=startaddress] [count]<ul><li>x86无法使用用户调试<br><img src="https://i.imgur.com/XPdCGi3.png" alt=""></li><li>x64可以使用<br><img src="https://i.imgur.com/FXiZyt1.png" alt=""></li></ul></li></ul><h2 id="继续运行"><a href="#继续运行" class="headerlink" title="继续运行"></a>继续运行</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>g命令</strong>是最常用的恢复运行的命令。其中a是硬件断点，不含a为软件断点。如果没有任何参数则执行到已存在断点处。</p><ul><li>g[a] [=startaddress] [Breakaddress] [“breakcommand”]</li><li>gh：处理异常</li><li>gn：报告未处理异常</li><li>gu：返回上一个函数<br>  <img src="https://i.imgur.com/57u8vYS.png" alt=""></li><li>gc：使用条件断点</li></ul><h2 id="跟踪监视"><a href="#跟踪监视" class="headerlink" title="跟踪监视"></a>跟踪监视</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跟踪是调试器的灵魂，<strong>wt命令</strong>是windbg跟踪的命令</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;总结如下：<br>    <img src="https://i.imgur.com/iwJQhhq.png" alt=""></p><h1 id="第三部分-使用断点"><a href="#第三部分-使用断点" class="headerlink" title="第三部分 使用断点"></a>第三部分 使用断点</h1><h2 id="软件断点"><a href="#软件断点" class="headerlink" title="软件断点"></a>软件断点</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;windbg一共有三种设置软件断点的命令：<strong>bp，bm，bu</strong>，最常见的就是bp命令</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>bp命令</strong>的格式如下：</p><ul><li>bp [ID] [Options] [Address[Passes]] [“Command”]<ul><li>ID:设置断点号，没有什么重要作用</li><li>Options：选项<ul><li>/1:一次性断点，用完就从断点表中删去</li><li>/p或者/t:只在当前进程或者线程中才触发此断点</li><li>/c或者/C：中断给用户最大调用深度或者最小调用深度！！</li></ul></li><li>Address：断点地址//可以是内存地址，也可以是符号函数地址(printf)</li><li>Passes：限制中断次数，如果Passes==0，则放行程序，不中断！<br><img src="https://i.imgur.com/BFIfI2o.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>bu命令：</strong>设置延迟断点，也就是说windbg可以允许当程序模块没有加载，便可以提前设置断点，当模块加载执行的时候，断在目标断点处。</li></ul></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>bm命令：</strong>批量设置断点，通常是设置模糊匹配断点或者成员函数断点，把MyClass 所有的成员函数都下断点： bu MyApp!MyClass::<em> ，或者把所有以CreateWindow开头的函数都下断点： bu user32!CreateWindow</em> 。但是在设置批量断点的时候，调试器需要确认匹配的符号是代码还是数据，也就是说bm命令执行的前提是需要知道一个符号的类型。这就可能造成以下的问题。<br>    <img src="https://i.imgur.com/f6PjmmK.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;此问题的<strong>最佳解决方案</strong>是：首先设置一个空的符号目录(.sympath .)，然后.reload,然后执行bm命令。<br>    <img src="https://i.imgur.com/XdiwG7f.png" alt=""></p><h2 id="硬件断点"><a href="#硬件断点" class="headerlink" title="硬件断点"></a>硬件断点</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>ba命令</strong>用于设置硬件断点。</p><ul><li>ba Access Size [ID] [Options] [Address[Passes]] [“Command”]<ul><li>Access：表示设置硬件断点的类型<ul><li>e：表示对指令进行读写时，触发断点，和软件中断类型，只是不修改指令</li><li>w：对指定地址进行写入操作触发断点</li><li>r：对指定地址进行读取操作触发断点</li><li>i：对指定的地址执行IO操作触发断点<br><img src="https://i.imgur.com/Dtwfc9f.png" alt=""></li></ul></li></ul></li></ul><h2 id="条件断点"><a href="#条件断点" class="headerlink" title="条件断点"></a>条件断点</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;条件断点利用之前的断点命令加上调价判断合并而来，语法如下：</p><ul><li>bp|bm|ba|bu address “.if(Condition){Command}.else{gc}”<br>  <img src="https://i.imgur.com/ZrYiG3g.png" alt=""></li></ul><h2 id="地址表达式"><a href="#地址表达式" class="headerlink" title="地址表达式"></a>地址表达式</h2><ul><li>模块名!函数符号：dbgee!WinMain</li><li>内存地址：00401000:</li><li>源代码调试：<code>module!SourceCodeFile:Line</code></li><li>C++类方法：Class::ClassMethod</li></ul><h2 id="针对线程设置断点"><a href="#针对线程设置断点" class="headerlink" title="针对线程设置断点"></a>针对线程设置断点</h2><ul><li>~ThreadId bp|bm|ba</li></ul><h2 id="管理断点"><a href="#管理断点" class="headerlink" title="管理断点"></a>管理断点</h2><ul><li>bl：列举所有断点</li><li>bc: 删除断点</li><li>bd：禁止断点</li><li>be：启用断点</li></ul><h1 id="第四部分-观察栈"><a href="#第四部分-观察栈" class="headerlink" title="第四部分 观察栈"></a>第四部分 观察栈</h1><h2 id="显示栈回溯"><a href="#显示栈回溯" class="headerlink" title="显示栈回溯"></a>显示栈回溯</h2><ul><li><strong>k命令</strong>：基本的栈回溯<ul><li>显示结果的第二列是：是函数的返回地址，这是在父函数中的指令地址(也就是说调用栈上面函数的指令的下一条指令)。<br><img src="https://i.imgur.com/kuaFEce.png" alt=""></li></ul></li><li><strong>kb命令：</strong>显示存放在栈上面的前三个参数<ul><li>需要注意的是这三个参数不一定是函数的参数，只是存放在栈上面三个值。</li><li>kb命令仅仅显示三个参数，而且顺序固定 ebp+8，ebp+c ebp+10，如果需要查看第四个，可以使用dd ebp+14。<br><img src="https://i.imgur.com/EM5w2Ww.png" alt=""></li></ul></li><li><strong>kp命令</strong>：显示堆栈函数原型<ul><li>前提条件是：需要得到程序的私有符号，如果没有调试对象的私有符号，windbg不显示参数。<br><img src="https://i.imgur.com/Ug5rUYz.png" alt=""></li></ul></li><li><strong>kv命令</strong>：显示栈指针省略(FPO)和函数调用约定<ul><li>和kb前面保持一致，增加了上述的新内容<br><img src="https://i.imgur.com/DEcHzCP.png" alt=""></li></ul></li><li>kn：显示序号</li></ul><h2 id="观察栈变量"><a href="#观察栈变量" class="headerlink" title="观察栈变量"></a>观察栈变量</h2><ul><li><strong>dv命令：</strong>观察栈变量：dv /i/t/V<ul><li>前提：拥有私有符号可以有效使用。<br><img src="https://i.imgur.com/67nJFsJ.png" alt=""><br><img src="https://i.imgur.com/ju9KaFZ.png" alt=""></li></ul></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;【重点】如果没有私有符号，可以有两种方法获取栈变量，第一种方法是直接观察内存窗口，以及使用内存显示页面，根据EBP的布局来显示数据。第二种方法是更具汇编指令提供的内存指令，获取对内存的引用。借此获取栈变量信息。</p><ul><li>.frame [栈帧号]：切换变量上下文</li><li>!for_each_local:循环遍历所有的变量</li><li>!for_each_frame:遍历所有栈帧</li></ul><h2 id="手工回溯栈"><a href="#手工回溯栈" class="headerlink" title="手工回溯栈"></a>手工回溯栈</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于一些原因，比如说溢出，异常，导致windbg对栈的判断是不准确的，所以此时不建议使用k命令来回溯栈，我们采用手工方式进行栈回溯。一般存在两种情况，第一种：EBP寄存器的数值是正确的，此时回溯栈相对容易，第二种：如果EBP的数值不可靠，我们使用!tab查看线程控制块和dds来分析栈。</p><h3 id="EBP和ESP可靠"><a href="#EBP和ESP可靠" class="headerlink" title="EBP和ESP可靠"></a>EBP和ESP可靠</h3><ul><li><p>第1步：确定当前函数名：<code>ln eip</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span>:<span class="number">000</span>&gt; ln eip</div><div class="line">(<span class="number">76f</span>5d470)   ntdll!LdrInitShimEngineDynamic+<span class="number">0x6af</span>   |  (<span class="number">76f</span>5ed00)   ntdll!NtCurrentTeb</div></pre></td></tr></table></figure></li><li><p>第2歩：如果ESP和EBP没有异常的情况下，<strong>EBP就是就是当前函数的ChildEbp（子帧栈的基址寄存器），EBP+4就是当前函数的返回地址(在父函数内部)。</strong>,</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span>:<span class="number">000</span>&gt; r ebp        <span class="comment">//ChildEBP</span></div><div class="line">ebp=<span class="number">0019f</span>a30</div><div class="line"><span class="number">0</span>:<span class="number">000</span>&gt; dd ebp+<span class="number">4</span> l1   <span class="comment">//函数返回地址</span></div><div class="line"><span class="number">0019f</span>a34  <span class="number">76f</span>58c37</div></pre></td></tr></table></figure><ul><li>第3步：得到一个函数信息：<code>0060fa30 76f58c37 ntdll!LdrInitShimEngineDynamic+0x6af</code></li><li><p>第4步：接下来利用第2步获得的返回地址，得到调用函数的函数名，<code>ln 76f58c37</code></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ln <span class="number">76</span>f58c37</div><div class="line">(<span class="number">76</span>f3a1a0)   ntdll!RtlCaptureStackContext+<span class="number">0x1ea97</span>   |  (<span class="number">76</span>f58f20)   ntdll!LdrAppxHandleIntegrityFailure</div></pre></td></tr></table></figure></li><li><p>第5步：根据<strong>当前的EBP在内存里面的数值</strong>就是父函数的EBP，EBP+4是函数的返回地址，使用<code>dd ebp</code>来获取父函数的ChildPEB，使用<code>dd xxxx+4</code>获取父函数的返回地址(在外公函数里面)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span>:<span class="number">000</span>&gt; dd <span class="number">0019f</span>c90 l1   <span class="comment">//这一步使用dd ebp是一样的，下一步却不行</span></div><div class="line"><span class="number">0019f</span>c90  <span class="number">0019f</span>cf0</div><div class="line"><span class="number">0</span>:<span class="number">000</span>&gt; dd <span class="number">0019f</span>cf0+<span class="number">4</span> l1  <span class="comment">//函数返回地址</span></div><div class="line"><span class="number">0019f</span>cf4  <span class="number">76f</span>137be</div></pre></td></tr></table></figure></li><li><p>第6步：利用返回地址得到外公函数符号</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span>:<span class="number">000</span>&gt; ln <span class="number">76f</span>137be</div><div class="line">(<span class="number">76f</span>13750)   ntdll!LdrInitializeThunk+<span class="number">0x6e</span>   |  (<span class="number">76f</span>13ca0)   ntdll!RtlCharToInteger</div></pre></td></tr></table></figure></li><li><p>第7步：重复4-6：直到堆栈数据为0，达到边界。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span>:<span class="number">000</span>&gt; dd <span class="number">0019f</span>d00 l1</div><div class="line"><span class="number">0019f</span>d00  <span class="number">0019f</span>d10</div><div class="line"><span class="number">0</span>:<span class="number">000</span>&gt; dd <span class="number">0019f</span>d14 l1</div><div class="line"><span class="number">0019f</span>d14  <span class="number">00000000</span></div></pre></td></tr></table></figure></li></ul><h2 id="EBP和ESP不可靠"><a href="#EBP和ESP不可靠" class="headerlink" title="EBP和ESP不可靠"></a>EBP和ESP不可靠</h2><ul><li><p>第1步：使用!tab获取线程栈空间数据</p><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">0</span>:<span class="number">000</span>&gt; !teb</div><div class="line">TEB at <span class="number">0033</span>a000</div><div class="line">    <span class="attribute">ExceptionList</span>:        <span class="number">0019</span>fa20  </div><div class="line">    <span class="attribute">StackBase</span>:            <span class="number">001</span>a0000    <span class="comment">//栈基址</span></div><div class="line">    <span class="attribute">StackLimit</span>:           <span class="number">0019</span>d000    <span class="comment">//栈顶</span></div><div class="line">    <span class="attribute">SubSystemTib</span>:         <span class="number">00000000</span>    </div><div class="line">    <span class="attribute">FiberData</span>:            <span class="number">00001</span>e00</div></pre></td></tr></table></figure></li><li><p>第2步：使用dds命令</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span>:<span class="number">000</span>&gt; dds esp     <span class="comment">//查看栈顶附近内存</span></div><div class="line"><span class="number">0019</span>fa04  f8f3a4be</div><div class="line"><span class="number">0019</span>fa08  <span class="number">76</span>eb69c4 ntdll!`string'</div><div class="line"><span class="number">0019</span>fa0c  <span class="number">00337000</span></div><div class="line"><span class="number">0019</span>fa10  <span class="number">00000010</span></div><div class="line"><span class="number">0019</span>fa14  00f3a496</div><div class="line"><span class="number">0019</span>fa18  <span class="number">0019</span>fa04</div><div class="line"><span class="number">0019</span>fa1c  76f001cf ntdll!LdrpPrepareModuleForExecution+0x61</div><div class="line"><span class="number">0019</span>fa20  <span class="number">0019</span>fc80</div><div class="line"><span class="number">0019</span>fa24  76f26b20 ntdll!_except_handler4</div><div class="line"><span class="number">0019</span>fa28  8e115e06</div><div class="line"><span class="number">0019</span>fa2c  <span class="number">00000000</span></div><div class="line"><span class="number">0019</span>fa30  <span class="number">0019</span>fc90</div><div class="line"><span class="number">0019</span>fa34  76f58c37 ntdll!LdrpInitializeProcess+0x1b42</div><div class="line"><span class="number">0019</span>fa38  f8f3a21e</div><div class="line"><span class="number">0019</span>fa3c  <span class="number">00000000</span></div><div class="line"><span class="number">0019</span>fa40  <span class="number">00000000</span></div><div class="line"><span class="number">0019</span>fa44  ffffffff</div><div class="line"><span class="number">0019</span>fa48  005c005a</div><div class="line"><span class="number">0019</span>fa4c  <span class="number">0257</span>1e7c</div><div class="line"><span class="number">0019</span>fa50  <span class="number">0019</span>fbb0</div><div class="line"><span class="number">0019</span>fa54  <span class="number">00000000</span></div><div class="line"><span class="number">0019</span>fa58  <span class="number">00000201</span></div><div class="line"><span class="number">0019</span>fa5c  <span class="number">00000000</span></div><div class="line"><span class="number">0019</span>fa60  <span class="number">0019</span>fbac</div><div class="line"><span class="number">0019</span>fa64  <span class="number">00000000</span></div><div class="line"><span class="number">0019</span>fa68  <span class="number">02573040</span></div><div class="line"><span class="number">0019</span>fa6c  76fc7ba0 ntdll!LdrpWorkQueue</div><div class="line"><span class="number">0019</span>fa70  76fc7ba0 ntdll!LdrpWorkQueue</div><div class="line"><span class="number">0019</span>fa74  <span class="number">00000000</span></div><div class="line"><span class="number">0019</span>fa78  <span class="number">025777</span>a0</div><div class="line"><span class="number">0019</span>fa7c  <span class="number">00000008</span></div><div class="line"><span class="number">0019</span>fa80  <span class="number">00000000</span></div><div class="line">0:000&gt; dds ebp     //查看栈低附近的内存</div><div class="line"><span class="number">0019</span>fa30  <span class="number">0019</span>fc90</div><div class="line"><span class="number">0019</span>fa34  76f58c37 ntdll!LdrpInitializeProcess+0x1b42</div><div class="line"><span class="number">0019</span>fa38  f8f3a21e</div><div class="line"><span class="number">0019</span>fa3c  <span class="number">00000000</span></div><div class="line"><span class="number">0019</span>fa40  <span class="number">00000000</span></div><div class="line"><span class="number">0019</span>fa44  ffffffff</div><div class="line"><span class="number">0019</span>fa48  005c005a</div><div class="line"><span class="number">0019</span>fa4c  <span class="number">0257</span>1e7c</div><div class="line"><span class="number">0019</span>fa50  <span class="number">0019</span>fbb0</div><div class="line"><span class="number">0019</span>fa54  <span class="number">00000000</span></div><div class="line"><span class="number">0019</span>fa58  <span class="number">00000201</span></div><div class="line"><span class="number">0019</span>fa5c  <span class="number">00000000</span></div><div class="line"><span class="number">0019</span>fa60  <span class="number">0019</span>fbac</div><div class="line"><span class="number">0019</span>fa64  <span class="number">00000000</span></div><div class="line"><span class="number">0019</span>fa68  <span class="number">02573040</span></div><div class="line"><span class="number">0019</span>fa6c  76fc7ba0 ntdll!LdrpWorkQueue</div><div class="line"><span class="number">0019</span>fa70  76fc7ba0 ntdll!LdrpWorkQueue</div><div class="line"><span class="number">0019</span>fa74  <span class="number">00000000</span></div><div class="line"><span class="number">0019</span>fa78  <span class="number">025777</span>a0</div><div class="line"><span class="number">0019</span>fa7c  <span class="number">00000008</span></div><div class="line"><span class="number">0019</span>fa80  <span class="number">00000000</span></div><div class="line"><span class="number">0019</span>fa84  <span class="number">00403000</span> base32+0x<span class="number">3000</span></div><div class="line"><span class="number">0019</span>fa88  <span class="number">00001000</span></div><div class="line"><span class="number">0019</span>fa8c  <span class="number">00000008</span></div><div class="line"><span class="number">0019</span>fa90  <span class="number">00000000</span></div><div class="line"><span class="number">0019</span>fa94  <span class="number">0040</span>3af4 base32+0x3af4</div><div class="line"><span class="number">0019</span>fa98  <span class="number">00000002</span></div><div class="line"><span class="number">0019</span>fa9c  <span class="number">00000000</span></div><div class="line"><span class="number">0019</span>faa0  <span class="number">00000000</span></div><div class="line"><span class="number">0019</span>faa4  <span class="number">00000000</span></div><div class="line"><span class="number">0019</span>faa8  <span class="number">00000000</span></div><div class="line"><span class="number">0019</span>faac  <span class="number">00000000</span></div></pre></td></tr></table></figure></li></ul><h1 id="第五部分-分析内存"><a href="#第五部分-分析内存" class="headerlink" title="第五部分 分析内存"></a>第五部分 分析内存</h1><h2 id="显示内存"><a href="#显示内存" class="headerlink" title="显示内存"></a>显示内存</h2><ul><li>d{a|b|c|d|D} [Options] [Range]</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;大括号里面代表的是显示类型。</p><ul><li><p>da:显示ASCII码,du:显示Unicode</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">0<span class="selector-pseudo">:000</span>&gt; <span class="selector-tag">da</span></div><div class="line">0019<span class="selector-tag">fc84</span>  " <span class="selector-tag">k</span><span class="selector-class">.v</span>..........."</div></pre></td></tr></table></figure></li><li><p>db：显示字节和ASCII  //最常用</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">0:000&gt; db</div><div class="line">0019fc94  da<span class="number"> 38 </span>f1<span class="number"> 76 </span>7e a2 f3 f8-24 fd<span class="number"> 19 </span>00<span class="number"> 00 </span>00 eb<span class="number"> 76 </span> .8.v~...$......v</div><div class="line">0019fca4 <span class="number"> 00 </span>70<span class="number"> 33 </span>00<span class="number"> 00 </span>00<span class="number"> 00 </span>00-aa<span class="number"> 24 </span>f0<span class="number"> 56 </span>00 b0 fc<span class="number"> 76 </span> .p3......$.V...v</div><div class="line">0019fcb4 <span class="number"> 00 </span>00<span class="number"> 03 </span>00<span class="number"> 28 </span>70<span class="number"> 33 </span>00-01<span class="number"> 00 </span>00<span class="number"> 00 </span>00<span class="number"> 00 </span>eb<span class="number"> 76 </span> ....(p3........v</div><div class="line">0019fcc4 <span class="number"> 00 </span>00<span class="number"> 00 </span>00<span class="number"> 24 </span>fd<span class="number"> 19 </span>00-00<span class="number"> 70 </span>33<span class="number"> 00 </span>00<span class="number"> 00 </span>00<span class="number"> 00 </span> ....$....p3.....</div><div class="line">0019fcd4 <span class="number"> 00 </span>a0<span class="number"> 33 </span>00<span class="number"> 98 </span>fc<span class="number"> 19 </span>00-00<span class="number"> 00 </span>00<span class="number"> 00 </span>ff ff ff ff  ..3.............</div><div class="line">0019fce4 <span class="number"> 20 </span>6b f2<span class="number"> 76 </span>8e a5<span class="number"> 10 </span>8e-00<span class="number"> 00 </span>00<span class="number"> 00 </span>00 fd<span class="number"> 19 </span>00   k.v............</div><div class="line">0019fcf4  be<span class="number"> 37 </span>f1<span class="number"> 76 </span>00<span class="number"> 00 </span>00 00-00<span class="number"> 00 </span>00<span class="number"> 00 </span>10 fd<span class="number"> 19 </span>00  .7.v............</div><div class="line">0019fd04  6c<span class="number"> 37 </span>f1<span class="number"> 76 </span>00<span class="number"> 00 </span>00 00-5e 1b<span class="number"> 59 </span>bb<span class="number"> 00 </span>00<span class="number"> 00 </span>00  l7.v....^.Y.....</div></pre></td></tr></table></figure></li><li><p>dc：显示dword和ASCII编码</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span>:<span class="number">000</span>&gt; dc</div><div class="line"><span class="number">0019</span>fd14  <span class="number">00000000</span> <span class="number">0019</span>fd24 <span class="number">76</span>eb0000 <span class="number">00000000</span>  ....$......v....</div><div class="line"><span class="number">0019</span>fd24  <span class="number">0001003</span>f <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>  ?...............</div><div class="line"><span class="number">0019</span>fd34  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">0000027</span>f  ................</div><div class="line"><span class="number">0019</span>fd44  <span class="number">00000000</span> <span class="number">0000</span>ffff <span class="number">00000000</span> <span class="number">00000000</span>  ................</div><div class="line"><span class="number">0019</span>fd54  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>  ................</div><div class="line"><span class="number">0019</span>fd64  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>  ................</div><div class="line"><span class="number">0019</span>fd74  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>  ................</div><div class="line"><span class="number">0019</span>fd84  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>  ................</div></pre></td></tr></table></figure></li><li><p>dd:显示dword</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span>:<span class="number">000</span>&gt; dd</div><div class="line"><span class="number">0019</span>fd94  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></div><div class="line"><span class="number">0019</span>fda4  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">0000002</span>b</div><div class="line"><span class="number">0019</span>fdb4  <span class="number">00000053</span> <span class="number">0000002</span>b <span class="number">0000002</span>b <span class="number">00000000</span></div><div class="line"><span class="number">0019</span>fdc4  <span class="number">00000000</span> <span class="number">00337000</span> <span class="number">00000000</span> <span class="number">00000000</span></div><div class="line"><span class="number">0019</span>fdd4  <span class="number">00401d</span>f<span class="number">5 00000000</span> <span class="number">76</span>f20d<span class="number">90 00000023</span></div><div class="line"><span class="number">0019</span>fde4  <span class="number">00000202</span> <span class="number">0019</span>fff0 <span class="number">0000002</span>b <span class="number">0000027</span>f</div><div class="line"><span class="number">0019</span>fdf4  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></div><div class="line"><span class="number">0019</span>fe04  <span class="number">00000000</span> <span class="number">00001f80</span> <span class="number">0000</span>ffff <span class="number">00000000</span></div></pre></td></tr></table></figure></li><li><p>dp:显示指针</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span>:<span class="number">000</span>&gt; dp</div><div class="line"><span class="number">0019</span>fe14  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></div><div class="line"><span class="number">0019</span>fe24  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></div><div class="line"><span class="number">0019</span>fe34  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></div><div class="line"><span class="number">0019</span>fe44  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></div><div class="line"><span class="number">0019</span>fe54  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></div><div class="line"><span class="number">0019</span>fe64  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></div><div class="line"><span class="number">0019</span>fe74  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></div><div class="line"><span class="number">0019</span>fe84  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></div></pre></td></tr></table></figure></li><li><p>ds：显示String类型，dS：显示Unicode_String类型<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Range:表示需要显示内存的范围</p></li><li><p>dd startaddress endaddress(两个内存地址)</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span>:<span class="number">000</span>&gt; dc <span class="number">0019</span>fd94 <span class="number">0019</span>fe04</div><div class="line"><span class="number">0019</span>fd94  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>  ................</div><div class="line"><span class="number">0019</span>fda4  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">0000002</span>b  ............+...</div><div class="line"><span class="number">0019</span>fdb4  <span class="number">00000053</span> <span class="number">0000002</span>b <span class="number">0000002</span>b <span class="number">00000000</span>  S...+...+.......</div><div class="line"><span class="number">0019</span>fdc4  <span class="number">00000000</span> <span class="number">00337000</span> <span class="number">00000000</span> <span class="number">00000000</span>  .....p3.........</div><div class="line"><span class="number">0019</span>fdd4  <span class="number">00401</span>df5 <span class="number">00000000</span> <span class="number">76</span>f20d90 <span class="number">00000023</span>  ..@........v#...</div><div class="line"><span class="number">0019</span>fde4  <span class="number">00000202</span> <span class="number">0019</span>fff0 <span class="number">0000002</span>b <span class="number">0000027</span>f  ........+.......</div><div class="line"><span class="number">0019</span>fdf4  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>  ................</div><div class="line"><span class="number">0019</span>fe04  <span class="number">00000000</span>                             ....</div></pre></td></tr></table></figure></li><li><p>dd startaddress L(内存对象个数16进制)</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span>:<span class="number">000</span>&gt; dc <span class="number">0019</span>fd94 L1D</div><div class="line"><span class="number">0019</span>fd94  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>  ................</div><div class="line"><span class="number">0019</span>fda4  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">0000002</span>b  ............+...</div><div class="line"><span class="number">0019</span>fdb4  <span class="number">00000053</span> <span class="number">0000002</span>b <span class="number">0000002</span>b <span class="number">00000000</span>  S...+...+.......</div><div class="line"><span class="number">0019</span>fdc4  <span class="number">00000000</span> <span class="number">00337000</span> <span class="number">00000000</span> <span class="number">00000000</span>  .....p3.........</div><div class="line"><span class="number">0019</span>fdd4  <span class="number">00401</span>df5 <span class="number">00000000</span> <span class="number">76</span>f20d90 <span class="number">00000023</span>  ..@........v#...</div><div class="line"><span class="number">0019</span>fde4  <span class="number">00000202</span> <span class="number">0019</span>fff0 <span class="number">0000002</span>b <span class="number">0000027</span>f  ........+.......</div><div class="line"><span class="number">0019</span>fdf4  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>  ................</div><div class="line"><span class="number">0019</span>fe04  <span class="number">00000000</span></div></pre></td></tr></table></figure></li><li><p>dd endaddress L-(内存对象个数16进制)</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span>:<span class="number">000</span>&gt; dc <span class="number">0019</span>fe04 L<span class="number">-1</span>D</div><div class="line"><span class="number">0019</span>fd90  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>  ................</div><div class="line"><span class="number">0019</span>fda0  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>  ................</div><div class="line"><span class="number">0019</span>fdb0  <span class="number">0000002</span>b <span class="number">00000053</span> <span class="number">0000002</span>b <span class="number">0000002</span>b  +...S...+...+...</div><div class="line"><span class="number">0019</span>fdc0  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00337000</span> <span class="number">00000000</span>  .........p3.....</div><div class="line"><span class="number">0019</span>fdd0  <span class="number">00000000</span> <span class="number">00401</span>df5 <span class="number">00000000</span> <span class="number">76</span>f20d90  ......@........v</div><div class="line"><span class="number">0019</span>fde0  <span class="number">00000023</span> <span class="number">00000202</span> <span class="number">0019</span>fff0 <span class="number">0000002</span>b  #...........+...</div><div class="line"><span class="number">0019</span>fdf0  <span class="number">0000027</span>f <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>  ................</div><div class="line"><span class="number">0019</span>fe00  <span class="number">00000000</span></div></pre></td></tr></table></figure></li></ul><h2 id="显示数据类型"><a href="#显示数据类型" class="headerlink" title="显示数据类型"></a>显示数据类型</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>dt命令</strong>常用与显示数据类型，其第一种方法是显示一个数据结构：dt module！Typename,选项-b：显示所有子类型，-r0，不显示子类型，-r1：显示一层子类型<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">0</span>:<span class="number">000</span>&gt; dt _UNICODE_STRING</div><div class="line">ntdll!_UNICODE_STRING</div><div class="line">   +<span class="number">0</span>x000 <span class="attribute">Length           </span>: Uint2B</div><div class="line">   +<span class="number">0</span>x002 <span class="attribute">MaximumLength    </span>: Uint2B</div><div class="line">   +<span class="number">0</span>x004 <span class="attribute">Buffer           </span>: Ptr32 Wchar</div></pre></td></tr></table></figure></p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span>:<span class="number">000</span>&gt; dt ntdll!*</div><div class="line">          ntdll!LIST_ENTRY64</div><div class="line">          ntdll!LIST_ENTRY64</div><div class="line">          ntdll!LIST_ENTRY32</div><div class="line">          ntdll!LIST_ENTRY32</div><div class="line">          ntdll!SE_WS_APPX_SIGNATURE_ORIGIN</div><div class="line">          ntdll!_PS_MITIGATION_OPTION</div><div class="line">          ntdll!_PS_MITIGATION_OPTIONS_MAP</div><div class="line">          ntdll!_PS_MITIGATION_OPTIONS_MAP</div><div class="line">          ntdll!_PS_MITIGATION_AUDIT_OPTIONS_MAP</div><div class="line">..........</div></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">0</span>:<span class="number">000</span>&gt; dt -b _TEB</div><div class="line">ntdll!_TEB</div><div class="line">      +<span class="number">0</span>x000 <span class="attribute">NtTib            </span>: _NT_TIB</div><div class="line">      +<span class="number">0</span>x000 <span class="attribute">ExceptionList    </span>: Ptr32 </div><div class="line">      +<span class="number">0</span>x004 <span class="attribute">StackBase        </span>: Ptr32 </div><div class="line">      +<span class="number">0</span>x008 <span class="attribute">StackLimit       </span>: Ptr32 </div><div class="line">      +<span class="number">0</span>x00c <span class="attribute">SubSystemTib     </span>: Ptr32 </div><div class="line">      +<span class="number">0</span>x010 <span class="attribute">FiberData        </span>: Ptr32 </div><div class="line">      +<span class="number">0</span>x010 <span class="attribute">Version          </span>: Uint4B</div><div class="line">      +<span class="number">0</span>x014 <span class="attribute">ArbitraryUserPointer </span>: Ptr32 </div><div class="line">      +<span class="number">0</span>x018 <span class="attribute">Self             </span>: Ptr32 </div><div class="line">      +<span class="number">0</span>x01c <span class="attribute">EnvironmentPointer </span>: Ptr32 </div><div class="line">      +<span class="number">0</span>x020 <span class="attribute">ClientId         </span>: _CLIENT_ID</div><div class="line">      +<span class="number">0</span>x000 <span class="attribute">UniqueProcess    </span>: Ptr32 </div><div class="line">      +<span class="number">0</span>x004 <span class="attribute">UniqueThread     </span>: Ptr32 </div><div class="line">      +<span class="number">0</span>x028 <span class="attribute">ActiveRpcHandle  </span>: Ptr32 </div><div class="line">      +<span class="number">0</span>x02c <span class="attribute">ThreadLocalStoragePointer </span>: Ptr32</div></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第二种方法是指定特定内存地址上的数据结构,其他和第一种用法一致.<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">0</span>:<span class="number">000</span>&gt; dt _PEB <span class="number">7</span>ffdd000</div><div class="line">ntdll!_PEB</div><div class="line">   +<span class="number">0</span>x000 <span class="attribute">InheritedAddressSpace </span>: ??</div><div class="line">   +<span class="number">0</span>x001 <span class="attribute">ReadImageFileExecOptions </span>: ??</div><div class="line">   +<span class="number">0</span>x002 <span class="attribute">BeingDebugged    </span>: ??</div><div class="line">   +<span class="number">0</span>x003 <span class="attribute">BitField         </span>: ??</div><div class="line">   +<span class="number">0</span>x003 <span class="attribute">ImageUsesLargePages </span>: ??</div><div class="line">   +<span class="number">0</span>x003 <span class="attribute">IsProtectedProcess </span>: ??</div><div class="line">   +<span class="number">0</span>x003 <span class="attribute">IsImageDynamicallyRelocated </span>: ??</div><div class="line">   +<span class="number">0</span>x003 <span class="attribute">SkipPatchingUser32Forwarders </span>: ??</div><div class="line">   +<span class="number">0</span>x003 <span class="attribute">IsPackagedProcess </span>: ??</div><div class="line">   +<span class="number">0</span>x003 <span class="attribute">IsAppContainer   </span>: ??</div><div class="line">   +<span class="number">0</span>x003 <span class="attribute">IsProtectedProcessLight </span>: ??</div><div class="line">   +<span class="number">0</span>x003 <span class="attribute">IsLongPathAwareProcess </span>: ??</div><div class="line">   +<span class="number">0</span>x004 <span class="attribute">Mutant           </span>: ????</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第三种方法是显示类型的实例，包括变量和函数。<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span>:<span class="number">000</span>&gt; dt g_szGobal</div><div class="line">Symbol g_szGobal <span class="keyword">not</span> found.</div></pre></td></tr></table></figure></p><h2 id="搜索内存"><a href="#搜索内存" class="headerlink" title="搜索内存"></a>搜索内存</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;windbg使用<strong>s命令</strong>搜索内存。一共三个试用方式。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第一种方法，搜索内存中指定的字符串。</p><ul><li>s [-Flags(b|w|d|q|a|u)] [Range] [Pattern]<pre><code>![](https://i.imgur.com/4VvAUdr.png)</code></pre></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第二种方法：在指定的内存空间中搜索与指定对象相同类型的对象。</p><ul><li>s [-v] Range ObjectAddress<figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span>:<span class="number">011</span>&gt; s -v <span class="number">0</span>x12fc30 L1000 <span class="number">0</span>x12fe4c   <span class="comment">//0x12fe4c是类的地址，</span></div><div class="line">*** ERROR: Symbol <span class="keyword">file</span> could <span class="keyword">not</span> be found.  Defaulted <span class="keyword">to</span> <span class="keyword">export</span> symbols <span class="keyword">for</span> IEXPLORE.EXE - </div><div class="line">*** ERROR: Symbol <span class="keyword">file</span> could <span class="keyword">not</span> be found.  Defaulted <span class="keyword">to</span> <span class="keyword">export</span> symbols <span class="keyword">for</span> odbc32.dll - </div><div class="line">*** ERROR: Module load completed but symbols could <span class="keyword">not</span> be loaded <span class="keyword">for</span> odbcint.dll</div><div class="line">*** ERROR: Symbol <span class="keyword">file</span> could <span class="keyword">not</span> be found.  Defaulted <span class="keyword">to</span> <span class="keyword">export</span> symbols <span class="keyword">for</span></div></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><h2 id="修改内存数据"><a href="#修改内存数据" class="headerlink" title="修改内存数据"></a>修改内存数据</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用e命令来修改内存数据，可以修改字符型，也可以修改数据类型。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;具体用法如下：a:b表示以0结尾的ASCII，za表示不是以0结尾的ASCII，<strong>zu或者au保证在末尾加0，而a或者u不会</strong>。u，zu同理。</p><ul><li>e{a|u|za|zu}address “String”<figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">0:000&gt; db</div><div class="line">76f5db9f  eb<span class="number"> 76 </span>c7<span class="number"> 44 </span>24<span class="number"> 68 </span>00 00-00<span class="number"> 01 </span>66<span class="number"> 89 </span>44<span class="number"> 24 </span>70<span class="number"> 85 </span> .v.D$h....f.D$p.</div><div class="line">76f5dbaf  f6<span class="number"> 74 </span>29 8b<span class="number"> 15 </span>30<span class="number"> 03 </span>fe-7f 8b c2 6a<span class="number"> 20 </span>83 e0 1f  .t)..0.....j ...</div><div class="line">76f5dbbf <span class="number"> 59 </span>2b c8 d3 ce<span class="number"> 33 </span>f2 89-37<span class="number"> 74 </span>07<span class="number"> 33 </span>f6 e9 1c<span class="number"> 01 </span> Y+...3..7t.3....</div><div class="line">76f5dbcf <span class="number"> 00 </span>00 be<span class="number"> 01 </span>00<span class="number"> 00 </span>c0 e9-12<span class="number"> 01 </span>00<span class="number"> 00 </span>8d<span class="number"> 54 </span>24<span class="number"> 10 </span> .............T$.</div><div class="line">76f5dbdf  8d 4c<span class="number"> 24 </span>68 e8 ed 5d f7-ff 8b f0<span class="number"> 85 </span>f6 0f<span class="number"> 88 </span>e8  .L$h..].........</div><div class="line">76f5dbef <span class="number"> 00 </span>00<span class="number"> 00 </span>8d<span class="number"> 44 </span>24<span class="number"> 18 </span>ba-01<span class="number"> 40 </span>00<span class="number"> 00 </span>50<span class="number"> 33 </span>c9 e8  ....D$...@..P3..</div><div class="line">76f5dbff <span class="number"> 59 </span>ae f8 ff 8d<span class="number"> 44 </span>24 0c-50 6a<span class="number"> 01 </span>6a<span class="number"> 00 </span>8d<span class="number"> 54 </span>24  Y....D$.Pj.j..T$</div><div class="line">76f5dc0f <span class="number"> 24 </span>8d 4c<span class="number"> 24 </span>74 e8 a3 d9-f9 ff<span class="number"> 80 </span>7c<span class="number"> 24 </span>64<span class="number"> 00 </span>8b  $.L$t......|$d..</div><div class="line">0:000&gt; ea 76f5db9f "strui"</div><div class="line">0:000&gt; db 76f5db9f</div><div class="line">76f5db9f <span class="number"> 73 </span>74<span class="number"> 72 </span>75<span class="number"> 69 </span>68<span class="number"> 00 </span>00-00<span class="number"> 01 </span>66<span class="number"> 89 </span>44<span class="number"> 24 </span>70<span class="number"> 85 </span> struih....f.D$p.</div><div class="line">76f5dbaf  f6<span class="number"> 74 </span>29 8b<span class="number"> 15 </span>30<span class="number"> 03 </span>fe-7f 8b c2 6a<span class="number"> 20 </span>83 e0 1f  .t)..0.....j ...</div><div class="line">76f5dbbf <span class="number"> 59 </span>2b c8 d3 ce<span class="number"> 33 </span>f2 89-37<span class="number"> 74 </span>07<span class="number"> 33 </span>f6 e9 1c<span class="number"> 01 </span> Y+...3..7t.3....</div><div class="line">76f5dbcf <span class="number"> 00 </span>00 be<span class="number"> 01 </span>00<span class="number"> 00 </span>c0 e9-12<span class="number"> 01 </span>00<span class="number"> 00 </span>8d<span class="number"> 54 </span>24<span class="number"> 10 </span> .............T$.</div><div class="line">76f5dbdf  8d 4c<span class="number"> 24 </span>68 e8 ed 5d f7-ff 8b f0<span class="number"> 85 </span>f6 0f<span class="number"> 88 </span>e8  .L$h..].........</div><div class="line">76f5dbef <span class="number"> 00 </span>00<span class="number"> 00 </span>8d<span class="number"> 44 </span>24<span class="number"> 18 </span>ba-01<span class="number"> 40 </span>00<span class="number"> 00 </span>50<span class="number"> 33 </span>c9 e8  ....D$...@..P3..</div><div class="line">76f5dbff <span class="number"> 59 </span>ae f8 ff 8d<span class="number"> 44 </span>24 0c-50 6a<span class="number"> 01 </span>6a<span class="number"> 00 </span>8d<span class="number"> 54 </span>24  Y....D$.Pj.j..T$</div><div class="line">76f5dc0f <span class="number"> 24 </span>8d 4c<span class="number"> 24 </span>74 e8 a3 d9-f9 ff<span class="number"> 80 </span>7c<span class="number"> 24 </span>64<span class="number"> 00 </span>8b  $.L$t......|$d..</div></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;也可以修改数值类型的内存</p><ul><li>e{b|d|D|q|w} address “Value”<figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">0:000&gt; ew 76f5dc1f<span class="number"> 41 </span>41<span class="number"> 41 </span>41 </div><div class="line">0:000&gt; db 76f5dc1f</div><div class="line">76f5dc1f <span class="number"> 41 </span>00<span class="number"> 41 </span>00<span class="number"> 41 </span>00<span class="number"> 41 </span>00-a5<span class="number"> 90 </span>f9 ff<span class="number"> 85 </span>f6<span class="number"> 79 </span>39  A.A.A.A.......y9</div><div class="line">76f5dc2f  a1<span class="number"> 90 </span>57 fc<span class="number"> 76 </span>a8<span class="number"> 03 </span>74-29<span class="number"> 56 </span>8d<span class="number"> 44 </span>24 6c<span class="number"> 50 </span>68  ..W.v..t)V.D$lPh</div><div class="line">76f5dc3f <span class="number"> 44 </span>f6 eb<span class="number"> 76 </span>6a<span class="number"> 00 </span>68 84-f6 eb<span class="number"> 76 </span>68 ee 0a<span class="number"> 00 </span>00  D..vj.h...vh....</div><div class="line">76f5dc4f <span class="number"> 68 </span>b0<span class="number"> 68 </span>eb<span class="number"> 76 </span>e8 f4 d1-ff ff<span class="number"> 83 </span>c4 1c a1<span class="number"> 90 </span>57  h.h.v..........W</div><div class="line">76f5dc5f  fc<span class="number"> 76 </span>a8<span class="number"> 10 </span>74<span class="number"> 75 </span>cc eb-72 8b<span class="number"> 44 </span>24 0c<span class="number"> 81 </span>48<span class="number"> 34 </span> .v..tu..r.D$..H4</div><div class="line">76f5dc6f <span class="number"> 00 </span>01<span class="number"> 00 </span>00 8b<span class="number"> 44 </span>24 0c-8b<span class="number"> 40 </span>18 a3 b8 7b fc<span class="number"> 76 </span> .....D$..@...&#123;.v</div><div class="line">76f5dc7f  e8<span class="number"> 71 </span>5a f7 ff 8b f0 85-f6<span class="number"> 79 </span>2a a1<span class="number"> 90 </span>57 fc<span class="number"> 76 </span> .qZ......y*..W.v</div><div class="line">76f5dc8f  a8<span class="number"> 03 </span>74 ce<span class="number"> 56 </span>68 6c f5-eb<span class="number"> 76 </span>6a<span class="number"> 00 </span>68<span class="number"> 84 </span>f6 eb  ..t.Vhl..vj.h...</div></pre></td></tr></table></figure></li></ul><h2 id="观察内存属性"><a href="#观察内存属性" class="headerlink" title="观察内存属性"></a>观察内存属性</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用拓展命令！address来观察内存属性,如果指定内存地址，显示指定内存地址所在的块的信息，如果不指定，则显示所有的内存块的信息。<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span>:<span class="number">000</span>&gt; !address <span class="number">76</span>f5dc1f</div><div class="line"> PEB <span class="number">00329000</span> in range <span class="number">00328000</span> <span class="number">00336000</span></div><div class="line"> TEB <span class="number">0032c000</span> in range <span class="number">00328000</span> <span class="number">00336000</span></div><div class="line"> TEB <span class="number">0032f000</span> in range <span class="number">00328000</span> <span class="number">00336000</span></div><div class="line"> TEB <span class="number">00332000</span> in range <span class="number">00328000</span> <span class="number">00336000</span></div><div class="line"> TEB <span class="number">00335000</span> in range <span class="number">00328000</span> <span class="number">00336000</span></div><div class="line"> ProcessParametrs <span class="number">025819d0</span> in range <span class="number">02580000</span> <span class="number">02586000</span></div><div class="line"> Environment <span class="number">02580b70</span> in range <span class="number">02580000</span> <span class="number">02586000</span></div><div class="line">    <span class="number">76</span>eb0000 : <span class="number">76</span>eb1000 - <span class="number">00114000</span></div><div class="line">                    Type     <span class="number">01000000</span> MEM_IMAGE</div><div class="line">                    Protect  <span class="number">00000020</span> PAGE_EXECUTE_READ</div><div class="line">                    State    <span class="number">00001000</span> MEM_COMMIT</div><div class="line">                    Usage    RegionUsageImage</div><div class="line">                    FullPath ntdll.dll</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!pte命令显示指定地址的页表表项和页目录表项。</p><h2 id="显示链表"><a href="#显示链表" class="headerlink" title="显示链表"></a>显示链表</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dt遍历链表(数据结构)和dl遍历链表(专门遍历链表)。<br><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span>:<span class="number">000</span>&gt; dt ntdll!*List*</div><div class="line">          ntdll!LIST_ENTRY64</div><div class="line">          ntdll!LIST_ENTRY64</div><div class="line">          ntdll!LIST_ENTRY32</div><div class="line">          ntdll!LIST_ENTRY32</div><div class="line">          ntdll!_LIST_ENTRY</div><div class="line">          ntdll!_LIST_ENTRY</div><div class="line">          ntdll!_LIST_ENTRY</div><div class="line">          ntdll!_SINGLE_LIST_ENTRY</div><div class="line">          ntdll!_SINGLE_LIST_ENTRY</div><div class="line">          ntdll!_PP_LOOKASIDE_LIST</div><div class="line">          ntdll!_SLIST_HEADER</div><div class="line">          ntdll!_SINGLE_LIST_ENTRY</div><div class="line">          ntdll!_SLIST_HEADER</div><div class="line">          ntdll!_LOOKASIDE_LIST_EX</div><div class="line">          ntdll!_LOOKASIDE_LIST_EX</div><div class="line">          ntdll!_NPAGED_LOOKASIDE_LI</div></pre></td></tr></table></figure></p><ul><li>dl[b] startaddress counter size</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>拓展命令!list</strong>也可以遍历链表，但是这个较为复杂不建议使用</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一部分-事件处理&quot;&gt;&lt;a href=&quot;#第一部分-事件处理&quot; class=&quot;headerlink&quot; title=&quot;第一部分 事件处理&quot;&gt;&lt;/a&gt;第一部分 事件处理&lt;/h1&gt;&lt;h2 id=&quot;调试事件与异常&quot;&gt;&lt;a href=&quot;#调试事件与异常&quot; class=&quot;headerlink&quot; title=&quot;调试事件与异常&quot;&gt;&lt;/a&gt;调试事件与异常&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;windows定义了九种调试事件，其中异常是其中的一种调试事件(EXCEPTION_DEBUG_EVENT)。异常也存在包括win32异常，调试器异常，编译器异常(VC异常)，托管异常(.net异常)，其他异常(主动调用RaiseException抛出异常)。&lt;br&gt;
    
    </summary>
    
      <category term="windows内核" scheme="http://yoursite.com/categories/windows%E5%86%85%E6%A0%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>windbg学习笔记（2）</title>
    <link href="http://yoursite.com/2018/07/17/windbg%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(2)/"/>
    <id>http://yoursite.com/2018/07/17/windbg学习笔记(2)/</id>
    <published>2018-07-17T07:02:11.000Z</published>
    <updated>2018-07-21T10:27:04.841Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一部分-windbg命令"><a href="#第一部分-windbg命令" class="headerlink" title="第一部分 windbg命令"></a>第一部分 windbg命令</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;windbg命令一共有三大类：标准命令(命令特别短，容易记忆)，元命令(也是windbg内置命令，一般用”.”表示，也成点命令)，拓展命令(利用windbg目录中的dll文件实现的，使用的时候需要加载需要使用的模块)。<br><a id="more"></a></p><h2 id="标准命令"><a href="#标准命令" class="headerlink" title="标准命令"></a>标准命令</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一共有大概15中标准命令：</p><ul><li>控制程序目标执行：<ul><li>g:恢复程序运行</li><li>t：跟踪步入(trace into)</li><li>o：跟踪步过(trace over)</li></ul></li><li>观察修改寄存器：r命令</li><li>内存数据：<ul><li>d：查看</li><li>e：编辑</li><li>s：搜索</li></ul></li><li>观察堆栈：k命令<ul><li>kd：显示所有栈情况</li><li>kp：显示调用栈</li><li>kb：显示前三个参数</li><li>kc：只显示调用栈的模块名和地址（不显示调用栈的地址）</li><li>kn：段函数加标号</li><li>Kv：显示FPO和调用约定</li></ul></li><li>断点相关：<ul><li>BP：设置软件断点</li><li>BA：设置硬件断点</li><li>BL：列举断点</li><li>BC：清除断点</li><li>BD：禁止断点</li><li>BE：重启断点</li></ul></li><li>显示控制线程：~命令</li><li>显示控制进程：|命令</li><li>显示表达式：？命令，显示C++表达式：？？命令</li><li>用于汇编：a命令，用户反汇编的u命令</li><li>显示段选择子：dg命令</li><li>检查符号命令：x命令，搜索符号：ln命令，显示模块命令：lm命令，ld：加载符号表</li><li>结束调试：q命令</li></ul><h2 id="源命令"><a href="#源命令" class="headerlink" title="源命令"></a>源命令</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;源命令一般以”.”开头，所以也称之为点命令。</p><ul><li>控制调试会话和调试目标：<ul><li>重新开始会话：.restart</li><li>放弃调试目标：.abandon</li><li>创建新进程进行调试：.create</li><li>附加进程进行调试：.attach</li><li>打开转储文件：.opendump</li><li>分离调试目标：.detach</li><li>杀死进程：.kill</li></ul></li><li>管理拓展命令模块：<ul><li>加载模块：.load</li><li>卸载模块：.unload和.unloadall</li><li>显示已经加载的模块：.clain</li></ul></li><li>显示转储调试目标：<ul><li>产生转储目标：.dump</li><li>将原始内存数据写入文件：.writemem</li><li>显示调试会话时间：.time</li><li>显示线程时间：.ttime</li><li>列举任务（进程）列表.tlist</li></ul></li></ul><h2 id="拓展命令"><a href="#拓展命令" class="headerlink" title="拓展命令"></a>拓展命令</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;拓展命令保存的windbg安装目录下的dll文件里面，具体使用是”![模块名称].[命令名称] [参数]”。一般使用.load命令需要写入模块的绝对路径，使用.loadby只需要写入模块名称即可！</p><h1 id="第二部分-命令提示符"><a href="#第二部分-命令提示符" class="headerlink" title="第二部分 命令提示符"></a>第二部分 命令提示符</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;命令提示符号是由一系列文字和大于号组成。他一般标识调试对象的状态或者调试环境的状态。</p><h2 id="调试状态"><a href="#调试状态" class="headerlink" title="调试状态"></a>调试状态</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般存在三个调试状态。繁忙，暂无调试对象和等待。<br>    <img src="https://i.imgur.com/14ktkii.png" alt=""><br>    <img src="https://i.imgur.com/ehKXMyu.png" alt=""><br>    <img src="https://i.imgur.com/fakV1jR.png" alt=""></p><h2 id="调试环境状态"><a href="#调试环境状态" class="headerlink" title="调试环境状态"></a>调试环境状态</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当调试器处于等待状态，则windbg显示的是调试环境状态。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如上图：第一个0代表的系统号，如果是0代表的是用户态调试，如果是1代表的是内核态调试</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第一个0表示的是进程号，是第0号进程。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第三个数字表示的是线程号。</p><h2 id="切换调试对象"><a href="#切换调试对象" class="headerlink" title="切换调试对象"></a>切换调试对象</h2><ul><li>切换系统号：||<system_index> s</system_index></li><li>切换进程号：|<process_index> s</process_index></li><li>切换线程号：~<thread_index> s<br>  <img src="https://i.imgur.com/9UBWdJV.png" alt=""></thread_index></li></ul><h1 id="第三部分-创建调试会话"><a href="#第三部分-创建调试会话" class="headerlink" title="第三部分 创建调试会话"></a>第三部分 创建调试会话</h1><h2 id="附加已运行进程"><a href="#附加已运行进程" class="headerlink" title="附加已运行进程"></a>附加已运行进程</h2><ul><li>file菜单—&gt;attach to a process</li><li>.attach (多个会话)</li></ul><h2 id="创建新进程"><a href="#创建新进程" class="headerlink" title="创建新进程"></a>创建新进程</h2><ul><li>file菜单</li><li>.create xxx.exe</li></ul><h2 id="本地内核调试"><a href="#本地内核调试" class="headerlink" title="本地内核调试"></a>本地内核调试</h2><ul><li>file菜单—&gt;kernel Debug</li><li>.attach -k</li></ul><h2 id="调试转储文件"><a href="#调试转储文件" class="headerlink" title="调试转储文件"></a>调试转储文件</h2><ul><li>file菜单—&gt;open Crash dump</li><li>.opendump</li></ul><h1 id="第四部分-理解上下文"><a href="#第四部分-理解上下文" class="headerlink" title="第四部分 理解上下文"></a>第四部分 理解上下文</h1><h2 id="会话上下文"><a href="#会话上下文" class="headerlink" title="会话上下文"></a>会话上下文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;无论用户采用的是本地登录还是远程登录，windows都会为其创建一个会话，这就意味着会话是与windows登录是相关的。<strong>会话上下文只有在内核调试才有作用</strong></p><ul><li><p>!session ：查看系统当前会话<br>  <img src="https://i.imgur.com/ZRY6LUQ.png" alt=""></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">kd&gt; !session </div><div class="line">Sessions on <span class="string">machine:</span> <span class="number">1</span>                    <span class="comment">//系统中有1个会话</span></div><div class="line">Valid <span class="string">Sessions:</span> <span class="number">0</span> <span class="number">1</span> <span class="number">3</span>                     <span class="comment">//有效的会话ID是0</span></div><div class="line">Current Session <span class="number">1</span>                         <span class="comment">//当前会话是1</span></div></pre></td></tr></table></figure></li><li><p>!session -s[会话ID]：修改当前会话</p><p>   <img src="https://i.imgur.com/sZ8bZej.png" alt=""></p></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;改变会话后，默认进程页随之改变成新会话中的进程，因此以前缓存的用户空间不在有效。目前会话上下文只有在内核调试时才有意义。</p><ul><li>!sprocess：查看当前会话内部的所有进程<br>   <img src="https://i.imgur.com/GvtTQuo.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;没有会话都有一个csrss.exe进程(会话管理器进程)，但是该进程不属于任何一个会话。</li></ul><h2 id="进程上下文"><a href="#进程上下文" class="headerlink" title="进程上下文"></a>进程上下文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们都知道一个32位的系统，进程空间为4GB，其中高2GB是系统区域，低2GB是用户区域，但是windows中，系统区域是共享的，但是用户区域是彼此独立的，也就是说，<strong>在内核调试的时候，需要切换进程上下文，但是在用户调试的时候，不需要切换进程上下文。</strong></p><ul><li>!process 0 0:列出所有进程的基本信息，主要是<strong>EPROCESS信息</strong>，这是切换进程上下文的重要信息。<br>  <img src="https://i.imgur.com/LeyExkU.png" alt=""></li><li>.process [EPROCESS]:切换进程上下文。<br>  <img src="https://i.imgur.com/56vzYoz.png" alt=""></li><li>.context：显示页目录基址<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所谓页目录基址，每个进程用户空间都是基于一个页目录基址的，同时也存在一个进程多个页目录基址，此时使用.process会更加有效！</li></ul><h2 id="寄存器上下文"><a href="#寄存器上下文" class="headerlink" title="寄存器上下文"></a>寄存器上下文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;寄存器存储的是当前线程的数据值，其他线程都存放在内存中，一般在线程切换(线程上下文)或者产生中断(或异常)(异常上下文)会使用寄存器上下文。</p><ul><li>!process [EPROCESS] ：查看进程所有线程信息<br>  <img src="https://i.imgur.com/V2ZAvqX.png" alt=""></li><li>.thread：查看当前线程(我感觉!thread比.thread显示的信息详细很多)<br>  <img src="https://i.imgur.com/JseZyB4.png" alt=""><br>  <img src="https://i.imgur.com/Bn6URkx.png" alt=""></li><li>.thread [THREAD]：修改线程上下文<br>  <img src="https://i.imgur.com/gbN3KAo.png" alt=""></li></ul><h2 id="局部上下文"><a href="#局部上下文" class="headerlink" title="局部上下文"></a>局部上下文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;函数的局部变量关系着函数执行的顺序和位置，<strong>在调试时，调试器默认显示的是当前函数所对应的局部上下文。</strong></p><ul><li>.frame：显示局部上下文，如下图：显示当前堆栈对于的函数为<strong>RtlpBreakWithStatusInstruction</strong><br>  <img src="https://i.imgur.com/H8bV8me.png" alt=""></li><li>kn：显示帧栈函数列表<br>  <img src="https://i.imgur.com/7gQzK9C.png" alt=""></li><li>.frame [栈函数编号]：切换局部上下文<br>  <img src="https://i.imgur.com/gOp09Pz.png" alt=""></li></ul><h1 id="第五部分-符号与模块"><a href="#第五部分-符号与模块" class="headerlink" title="第五部分 符号与模块"></a>第五部分 符号与模块</h1><h2 id="查看模块信息"><a href="#查看模块信息" class="headerlink" title="查看模块信息"></a>查看模块信息</h2><ul><li>lm :显示当前进程的模块信息<br>  <img src="https://i.imgur.com/3OJtGsP.png" alt=""><ul><li>v：显示详细信息</li><li>m：过滤指定模块名：lm m k*</li><li>o: 过滤已经加载过的模块<br><img src="https://i.imgur.com/yFIysir.png" alt=""></li></ul></li><li>!lmi:可以指定进程名，但是只显示一个模块<br>  <img src="https://i.imgur.com/K9Wbgmm.png" alt=""></li><li>符号类别<br>  <img src="https://i.imgur.com/5jsZPtd.png" alt=""></li></ul><h2 id="查看和分析符号"><a href="#查看和分析符号" class="headerlink" title="查看和分析符号"></a>查看和分析符号</h2><ul><li>x [选项] 模块名!符号名：查看符号信息(支持正则)<ul><li>/a /A: 按地址升序或者降序显示</li><li>/n /N：按名称—</li><li>/z /Z: 按大小</li><li>/t：显示数据类型</li><li>/v：显示符号的类型和大小</li><li>/p: 省略函数名和括号之间的空格，意义不是很大</li></ul></li></ul><h2 id="查看符号"><a href="#查看符号" class="headerlink" title="查看符号"></a>查看符号</h2><ul><li>ln [指定位置符号]：查看指定位置最近的符号<br>  <img src="https://i.imgur.com/SErTVJv.png" alt=""></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一部分-windbg命令&quot;&gt;&lt;a href=&quot;#第一部分-windbg命令&quot; class=&quot;headerlink&quot; title=&quot;第一部分 windbg命令&quot;&gt;&lt;/a&gt;第一部分 windbg命令&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;windbg命令一共有三大类：标准命令(命令特别短，容易记忆)，元命令(也是windbg内置命令，一般用”.”表示，也成点命令)，拓展命令(利用windbg目录中的dll文件实现的，使用的时候需要加载需要使用的模块)。&lt;br&gt;
    
    </summary>
    
      <category term="windows内核" scheme="http://yoursite.com/categories/windows%E5%86%85%E6%A0%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>常见的脱壳思路</title>
    <link href="http://yoursite.com/2018/07/15/%E5%B8%B8%E8%A7%81%E5%A3%B3%E7%9A%84%E8%84%B1%E5%A3%B3%E6%80%9D%E8%B7%AF/"/>
    <id>http://yoursite.com/2018/07/15/常见壳的脱壳思路/</id>
    <published>2018-07-15T06:02:11.000Z</published>
    <updated>2018-07-16T16:27:58.941Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;去年暑假，学习了如何脱壳，但是没有深入的了解这一块的知识，现在花费差不多三天的时间总结一下。<br><a id="more"></a></p><h1 id="UPX壳"><a href="#UPX壳" class="headerlink" title="UPX壳"></a>UPX壳</h1><h2 id="单步法"><a href="#单步法" class="headerlink" title="单步法"></a>单步法</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;程序流程不断向下，然后遇到POPAX，接着一个段间跳转后，直达EOP。</p><ul><li>不断向下寻找EOP<br>  <img src="https://i.imgur.com/F2qs8AH.png" alt=""></li><li>使用LoadPe转储文件<ul><li>1）右键修正镜像大小</li><li>2）完整转储文件</li></ul></li><li>利用导入表修复工具去修复导入表<ul><li>1）修改EOP</li><li>2）自动搜索</li><li>3）获取输入表</li><li>4）显示无效函数</li><li>5）修复转储文件<br><img src="https://i.imgur.com/TsxAAK0.png" alt=""></li></ul></li></ul><h2 id="ESP定律法"><a href="#ESP定律法" class="headerlink" title="ESP定律法"></a>ESP定律法</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;程序在运行真正代码前会解密已经压缩过的代码，解压程序将一些关键代码数据压栈，解压完成后，解压程序在将这些代码出栈。在压栈出栈处下硬件断点，如果执行，程序必定断在解压完成后的代码前。这就是ESP定律法，主要利用程序运行中，栈指针保持平衡。</p><ul><li>寻找使用ESP寄存器变化的代码，寻找ESP对应的内存地址，然后在地址上下硬件断点(dd,hr)。<br>  <img src="https://i.imgur.com/TFc7T9k.png" alt=""></li><li>f7跑起来，到达段间跳转<br>  <img src="https://i.imgur.com/fVBLYoo.png" alt=""></li><li>单步一下直达EOP</li><li>利用上一步脱壳的方法脱壳。</li></ul><h2 id="二次内存镜像法"><a href="#二次内存镜像法" class="headerlink" title="二次内存镜像法"></a>二次内存镜像法</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第一次将断点设置在代码段reloc资源节区是为了让加壳程序执行完解压过程，第二次将断点设置在代码段是为了寻找EOP。</p><ul><li>在代码段的资源节区设置在访问上设置中断(内存访问断点)<br>  <img src="https://i.imgur.com/MnuhKMh.png" alt=""></li><li>在代码段的text代码节区设置内存访问断点<br>  <img src="https://i.imgur.com/kxyT3Yi.png" alt=""></li><li>直达EOP<br>  <img src="https://i.imgur.com/c7q7czO.png" alt=""></li><li>脱壳</li></ul><h2 id="一步直达法"><a href="#一步直达法" class="headerlink" title="一步直达法"></a>一步直达法</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个方法适用于UPX和部分北斗的壳，这部分壳在压缩的时候，使用了POPAP和PUSHAP这两个指令。</p><h1 id="ASPACK壳"><a href="#ASPACK壳" class="headerlink" title="ASPACK壳"></a>ASPACK壳</h1><h2 id="单步法-1"><a href="#单步法-1" class="headerlink" title="单步法"></a>单步法</h2><h2 id="ESP定律法-1"><a href="#ESP定律法-1" class="headerlink" title="ESP定律法"></a>ESP定律法</h2><h2 id="二次内存镜像法-1"><a href="#二次内存镜像法-1" class="headerlink" title="二次内存镜像法"></a>二次内存镜像法</h2><h2 id="一步直达法-1"><a href="#一步直达法-1" class="headerlink" title="一步直达法"></a>一步直达法</h2><h2 id="模拟跟踪法"><a href="#模拟跟踪法" class="headerlink" title="模拟跟踪法"></a>模拟跟踪法</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;针对ASPACK壳</p><ul><li>寻找含有SFX节区的节区，记录其地址xxxxx</li><li>命令下输入tc eip&lt; xxxxxx<br>  <img src="https://i.imgur.com/XhtxvVD.png" alt=""></li></ul><h2 id="SFX法"><a href="#SFX法" class="headerlink" title="SFX法"></a>SFX法</h2><ul><li>设置调试器SFX选项，设置成第二项：块方式跟踪到真正入口点(也有可能是第三个选项)<br>  <img src="https://i.imgur.com/D4lMMts.png" alt=""></li></ul><h1 id="NSPACK"><a href="#NSPACK" class="headerlink" title="NSPACK"></a>NSPACK</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NSPACK又名北斗，是病毒木马经常使用的压缩壳，本身使用vc写的。跳入oep的特征是：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">popad</span></div><div class="line"><span class="keyword">popfd</span></div><div class="line"><span class="keyword">jmp</span> xxxxxxxxx</div></pre></td></tr></table></figure></p><h2 id="单步法-2"><a href="#单步法-2" class="headerlink" title="单步法"></a>单步法</h2><h2 id="ESP定律法-2"><a href="#ESP定律法-2" class="headerlink" title="ESP定律法"></a>ESP定律法</h2><h2 id="二次内存镜像法-2"><a href="#二次内存镜像法-2" class="headerlink" title="二次内存镜像法"></a>二次内存镜像法</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;注意，在使用这个方式的时候，由于NSPACK没有压缩资源，也就是没有资源节区，所以直接在text节区下断即可！</p><h2 id="一步直达法-2"><a href="#一步直达法-2" class="headerlink" title="一步直达法"></a>一步直达法</h2><h2 id="模拟跟踪法-1"><a href="#模拟跟踪法-1" class="headerlink" title="模拟跟踪法"></a>模拟跟踪法</h2><h2 id="SFX法-1"><a href="#SFX法-1" class="headerlink" title="SFX法"></a>SFX法</h2><h1 id="FSG壳"><a href="#FSG壳" class="headerlink" title="FSG壳"></a>FSG壳</h1><h2 id="单步法-3"><a href="#单步法-3" class="headerlink" title="单步法"></a>单步法</h2><h2 id="ESP定律法-3"><a href="#ESP定律法-3" class="headerlink" title="ESP定律法"></a>ESP定律法</h2><h2 id="适用于FSG的特殊方法"><a href="#适用于FSG的特殊方法" class="headerlink" title="适用于FSG的特殊方法"></a>适用于FSG的特殊方法</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;运行完popad后，寻找堆栈窗口第四个参数，那个就是oep。<br>    <img src="https://i.imgur.com/ZeoVgwB.png" alt=""><br>    <img src="https://i.imgur.com/eXhv9s1.png" alt=""></p><h2 id="修复FSG造成的导入表丢失问题"><a href="#修复FSG造成的导入表丢失问题" class="headerlink" title="修复FSG造成的导入表丢失问题"></a>修复FSG造成的导入表丢失问题</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在完成之前的修复后，发现还是无法运行程序，可以考虑修复导入表信息。</p><ul><li>寻找一个导入函数<br>  <img src="https://i.imgur.com/Idskw32.png" alt=""></li><li>前后都是空的，说明这是导入表信息</li><li>在IAT fix中修复，修改RVA和尺寸<br>  <img src="https://i.imgur.com/LivmMsk.png" alt=""></li></ul><h1 id="PECompact2-X"><a href="#PECompact2-X" class="headerlink" title="PECompact2.X"></a>PECompact2.X</h1><h2 id="单步法-4"><a href="#单步法-4" class="headerlink" title="单步法"></a>单步法</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个壳用了一个巧妙的方法，把它解压代码放入异常处理例程中了，我们直接跟入处理例程，程序会自动回到用户领空。</p><h2 id="ESP定律法-4"><a href="#ESP定律法-4" class="headerlink" title="ESP定律法"></a>ESP定律法</h2><h2 id="BP-VirtualFree法1"><a href="#BP-VirtualFree法1" class="headerlink" title="BP VirtualFree法1"></a>BP VirtualFree法1</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>这个方法利用了是解密解压缩过程中，需要对内存进行释放。在此下断的好处是能够在程序解压缩之后断下。</strong></p><ul><li>BP VirtualFree下断点</li><li>shift+f9，忽略异常运行(存在异常)</li><li>取消断点，返回到用户领空</li><li>搜索命令：<strong>push 8000</strong></li><li>F4运行到此处，单步即可</li></ul><h2 id="BP-VirtualFree法2"><a href="#BP-VirtualFree法2" class="headerlink" title="BP VirtualFree法2"></a>BP VirtualFree法2</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第一次做代码的恢复，第二次更想是IAT的导入。</p><ul><li>BP VirtualFree下断点</li><li>使用两次shift+F9<ul><li>第一次<br><img src="https://i.imgur.com/W3GxMh1.png" alt=""></li><li>第二次<br><img src="https://i.imgur.com/4PQhrw5.png" alt=""></li></ul></li><li>取消断点</li><li>返回用户空间</li><li>单步<br>  <img src="https://i.imgur.com/usTIm4Q.png" alt=""></li></ul><h2 id="bp-VirtualAlloc法1"><a href="#bp-VirtualAlloc法1" class="headerlink" title="bp VirtualAlloc法1"></a>bp VirtualAlloc法1</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在为解压出来的代码分配内存空间，所以可以对VirtualAlloc下断。</p><ul><li>bp VirtualAlloc</li><li>shift+F9</li><li>ALT+F9返回用户代码</li><li>单步</li></ul><h2 id="PECompact使用的特殊方法-1"><a href="#PECompact使用的特殊方法-1" class="headerlink" title="PECompact使用的特殊方法(1)"></a>PECompact使用的特殊方法(1)</h2><ul><li><p>看程序原始入口点</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">5.0040</span>A86D &gt;  B8 <span class="number">74</span>DE4500     mov eax,qqspirit<span class="number">.0045</span>DE74</div></pre></td></tr></table></figure></li><li><p>bp 45DE74 下断</p></li><li>单步<br>  <img src="https://i.imgur.com/a2asdBV.png" alt=""></li></ul><h2 id="最后一次异常法"><a href="#最后一次异常法" class="headerlink" title="最后一次异常法"></a>最后一次异常法</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;假设程序在第m次运行跑飞，我们查看第m-1次的堆栈情况。</p><ul><li>把所有忽略异常取消</li><li>shift+F9运行程序</li><li>取m-1次的堆栈里面的SE函数</li><li>在SE函数开始处下断。</li><li>单步</li></ul><h1 id="EZIP壳"><a href="#EZIP壳" class="headerlink" title="EZIP壳"></a>EZIP壳</h1><h2 id="单步法-5"><a href="#单步法-5" class="headerlink" title="单步法"></a>单步法</h2><h2 id="ESP定律法-5"><a href="#ESP定律法-5" class="headerlink" title="ESP定律法"></a>ESP定律法</h2><h2 id="修复文件"><a href="#修复文件" class="headerlink" title="修复文件"></a>修复文件</h2><ul><li>和上述一样操作</li><li>重新寻找新的RVA和大小<br>  <img src="https://i.imgur.com/l1Gplvs.png" alt=""></li><li>利用LoadPE进行PE合并</li></ul><h1 id="tElock-0-98b1壳"><a href="#tElock-0-98b1壳" class="headerlink" title="tElock 0.98b1壳"></a>tElock 0.98b1壳</h1><h2 id="最后一次异常法-1"><a href="#最后一次异常法-1" class="headerlink" title="最后一次异常法"></a>最后一次异常法</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;加壳程序通常在程序执行的开始部分采用SEH技术进行异常的处理<strong>为了获取程序控制权，</strong>而最后一次异常是为了将程序控制权交给程序本身，这就是最后一次异常法的基本原理。需要注意一下方面：</p><ul><li>除了关闭调试器的异常选项，还有关闭插件StrongOd的异常选项</li><li>如果在SE句柄函数下断后，一直断不了的话，可以使用SHIFT+F9断下。<br>  <img src="https://i.imgur.com/uuFUal4.png" alt=""></li></ul><h2 id="模拟跟踪法-2"><a href="#模拟跟踪法-2" class="headerlink" title="模拟跟踪法"></a>模拟跟踪法</h2><ul><li>利用最后一次异常法</li><li>使用模拟跟踪法<ul><li>内存中找SFX段，记录段地址xxxxx</li><li>输入tc eip&lt;xxxxx<br><img src="https://i.imgur.com/aWj4xB2.png" alt=""></li></ul></li></ul><h2 id="两次内存镜像法"><a href="#两次内存镜像法" class="headerlink" title="两次内存镜像法"></a>两次内存镜像法</h2><h1 id="exe32pack壳"><a href="#exe32pack壳" class="headerlink" title="exe32pack壳"></a>exe32pack壳</h1><h2 id="ESP定律法-6"><a href="#ESP定律法-6" class="headerlink" title="ESP定律法"></a>ESP定律法</h2><h1 id="WinUpack壳"><a href="#WinUpack壳" class="headerlink" title="WinUpack壳"></a>WinUpack壳</h1><h2 id="单步法-6"><a href="#单步法-6" class="headerlink" title="单步法"></a>单步法</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个壳有个特点：程序在完成代码的解压后，并不直接进入oep，而是执行完IAT的重构后，跳转到判断是否完成IAT重构的判断中，然后执行是否跳转OEP。<br>     <img src="https://i.imgur.com/RDlSEvO.png" alt=""><br>     <img src="https://i.imgur.com/djXvlo2.png" alt=""></p><ul><li>根据跳转的条件判断：eax==0的时候跳转成功。设置条件断点即可！！</li></ul><h1 id="常见语言的入口点"><a href="#常见语言的入口点" class="headerlink" title="常见语言的入口点"></a>常见语言的入口点</h1><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">常见语言的入口点：</div><div class="line"></div><div class="line">VB：</div><div class="line"></div><div class="line">004012D4 &gt;  <span class="number">68</span> <span class="number">54474000</span>     <span class="keyword">push</span> QQ个性网.<span class="number">00404754</span></div><div class="line">004012D9    E8 F0FFFFFF     <span class="keyword">call</span> &lt;<span class="keyword">jmp</span>.&amp;MSVBVM60.#<span class="number">100</span>&gt;</div><div class="line">004012DE    <span class="number">0000</span>            <span class="keyword">add</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">eax</span>],<span class="built_in">al</span></div><div class="line">004012E0    <span class="number">0000</span>            <span class="keyword">add</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">eax</span>],<span class="built_in">al</span></div><div class="line">004012E2    <span class="number">0000</span>            <span class="keyword">add</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">eax</span>],<span class="built_in">al</span></div><div class="line">004012E4    <span class="number">3000</span>            <span class="keyword">xor</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">eax</span>],<span class="built_in">al</span></div><div class="line">004012E6    <span class="number">0000</span>            <span class="keyword">add</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">eax</span>],<span class="built_in">al</span></div><div class="line">004012E8    <span class="number">48</span>              <span class="keyword">dec</span> <span class="built_in">eax</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="symbol">delphi:</span></div><div class="line"></div><div class="line">004A5C54 &gt;  <span class="number">55</span>              <span class="keyword">push</span> <span class="built_in">ebp</span></div><div class="line">004A5C55    8BEC            <span class="keyword">mov</span> <span class="built_in">ebp</span>,<span class="built_in">esp</span></div><div class="line">004A5C57    83C4 F0         <span class="keyword">add</span> <span class="built_in">esp</span>,-<span class="number">10</span></div><div class="line">004A5C5A    B8 EC594A00     <span class="keyword">mov</span> <span class="built_in">eax</span>,openpro.004A59EC</div><div class="line"></div><div class="line">BC++:</div><div class="line"></div><div class="line"><span class="number">00401678</span> &gt; /EB <span class="number">10</span>           <span class="keyword">jmp</span> short btengine.0040168A</div><div class="line">0040167A   |<span class="number">66</span>:623A         <span class="keyword">bound</span> <span class="built_in">di</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">edx</span>]</div><div class="line"><span class="number">0040167D</span>   |<span class="number">43</span>              <span class="keyword">inc</span> <span class="built_in">ebx</span></div><div class="line">0040167E   |2B2B            <span class="keyword">sub</span> <span class="built_in">ebp</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">ebx</span>]</div><div class="line"><span class="number">00401680</span>   |<span class="number">48</span>              <span class="keyword">dec</span> <span class="built_in">eax</span></div><div class="line"><span class="number">00401681</span>   |4F              <span class="keyword">dec</span> <span class="built_in">edi</span></div><div class="line"><span class="number">00401682</span>   |4F              <span class="keyword">dec</span> <span class="built_in">edi</span></div><div class="line"><span class="number">00401683</span>   |4B              <span class="keyword">dec</span> <span class="built_in">ebx</span></div><div class="line"><span class="number">00401684</span>   |<span class="number">90</span>              <span class="keyword">nop</span></div><div class="line"><span class="number">00401685</span>  -|E9 <span class="number">98005400</span>     <span class="keyword">jmp</span> <span class="number">00941722</span></div><div class="line">0040168A   \A1 8B005400     <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[54008B]</div><div class="line">0040168F    C1E0 <span class="number">02</span>         <span class="keyword">shl</span> <span class="built_in">eax</span>,<span class="number">2</span></div><div class="line"><span class="number">00401692</span>    A3 8F005400     <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[54008F],<span class="built_in">eax</span></div><div class="line"><span class="number">00401697</span>    <span class="number">52</span>              <span class="keyword">push</span> <span class="built_in">edx</span></div><div class="line"><span class="number">00401698</span>    6A <span class="number">00</span>           <span class="keyword">push</span> <span class="number">0</span></div><div class="line">0040169A    E8 99D01300     <span class="keyword">call</span> &lt;<span class="keyword">jmp</span>.&amp;KERNEL32.GetModuleHandleA&gt;</div><div class="line">0040169F    8BD0            <span class="keyword">mov</span> <span class="built_in">edx</span>,<span class="built_in">eax</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">VC++:</div><div class="line"></div><div class="line">0040A41E &gt;  <span class="number">55</span>              <span class="keyword">push</span> <span class="built_in">ebp</span></div><div class="line">0040A41F    8BEC            <span class="keyword">mov</span> <span class="built_in">ebp</span>,<span class="built_in">esp</span></div><div class="line">0040A421    6A FF           <span class="keyword">push</span> -<span class="number">1</span></div><div class="line">0040A423    <span class="number">68</span> C8CB4000     <span class="keyword">push</span> 跑跑排行.0040CBC8</div><div class="line">0040A428    <span class="number">68</span> A4A54000     <span class="keyword">push</span> &lt;<span class="keyword">jmp</span>.&amp;MSVCRT._except_handler3&gt;</div><div class="line">0040A42D    <span class="number">64</span>:A1 <span class="number">00000000</span>  <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">fs</span>:[<span class="number">0</span>]</div><div class="line">0040A433    <span class="number">50</span>              <span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line">0040A434    <span class="number">64</span>:<span class="number">8925</span> <span class="number">0000000</span>&gt;<span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">fs</span>:[<span class="number">0</span>],<span class="built_in">esp</span></div><div class="line">0040A43B    83EC <span class="number">68</span>         <span class="keyword">sub</span> <span class="built_in">esp</span>,<span class="number">68</span></div><div class="line">0040A43E    <span class="number">53</span>              <span class="keyword">push</span> <span class="built_in">ebx</span></div><div class="line">0040A43F    <span class="number">56</span>              <span class="keyword">push</span> <span class="built_in">esi</span></div><div class="line">0040A440    <span class="number">57</span>              <span class="keyword">push</span> <span class="built_in">edi</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">MASM(汇编):</div><div class="line"></div><div class="line">004035C9 &gt;  6A <span class="number">00</span>           <span class="keyword">push</span> <span class="number">0</span></div><div class="line">004035CB    E8 A20A0000     <span class="keyword">call</span> &lt;<span class="keyword">jmp</span>.&amp;kernel32.GetModuleHandleA&gt;</div><div class="line">004035D0    A3 5B704000     <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[40705B],<span class="built_in">eax</span></div><div class="line">004035D5    <span class="number">68</span> <span class="number">80000000</span>     <span class="keyword">push</span> <span class="number">80</span></div><div class="line">004035DA    <span class="number">68</span> 2C754000     <span class="keyword">push</span> <span class="number">11.</span>0040752C</div><div class="line">004035DF    FF35 5B704000   <span class="keyword">push</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[40705B]</div><div class="line">004035E5    E8 820A0000     <span class="keyword">call</span> &lt;<span class="keyword">jmp</span>.&amp;kernel32.GetModuleFileNameA&gt;</div><div class="line">004035EA    E8 <span class="number">87070000</span>     <span class="keyword">call</span> <span class="number">11.</span>00403D76</div><div class="line">004035EF    6A <span class="number">00</span>           <span class="keyword">push</span> <span class="number">0</span></div><div class="line">004035F1    <span class="number">68</span> 0B364000     <span class="keyword">push</span> <span class="number">11.</span>0040360B</div><div class="line">004035F6    6A <span class="number">00</span>           <span class="keyword">push</span> <span class="number">0</span></div><div class="line">004035F8    6A <span class="number">64</span>           <span class="keyword">push</span> <span class="number">64</span></div><div class="line">004035FA    FF35 5B704000   <span class="keyword">push</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[40705B]</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;去年暑假，学习了如何脱壳，但是没有深入的了解这一块的知识，现在花费差不多三天的时间总结一下。&lt;br&gt;
    
    </summary>
    
      <category term="windows PE" scheme="http://yoursite.com/categories/windows-PE/"/>
    
    
  </entry>
  
  <entry>
    <title>病毒分析技术(9) ---文件下载者病毒</title>
    <link href="http://yoursite.com/2018/07/08/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF(9)--%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E8%80%85/"/>
    <id>http://yoursite.com/2018/07/08/病毒分析技术(9)--文件下载者/</id>
    <published>2018-07-08T06:02:11.000Z</published>
    <updated>2018-07-08T11:09:48.515Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-目录："><a href="#一-目录：" class="headerlink" title="一 目录："></a>一 目录：</h1><ul><li>1.目录</li><li>2.样本信息</li><li>3.行为分析</li><li>4.样本分析</li><li>5.技术上的总结<a id="more"></a></li></ul><h1 id="二-样本分析"><a href="#二-样本分析" class="headerlink" title="二 样本分析"></a>二 样本分析</h1><ul><li>1.样本名称：sample.WSDump.exe</li><li>2.样本md5：25a1eb3d3f8767a86050d16c226f9912</li><li>3.是否加壳：UPX</li><li>4.编写语言：VC++6.0</li><li>5.样本来源：52pojie<a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=697680&amp;extra=page%3D2%26filter%3Dtypeid%26typeid%3D62" title="52pojie" target="_blank" rel="external">https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=697680&amp;extra=page%3D2%26filter%3Dtypeid%26typeid%3D62</a></li></ul><h1 id="三-行为分析"><a href="#三-行为分析" class="headerlink" title="三 行为分析"></a>三 行为分析</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;病毒首先创建互斥体121212，和判断自身文件是否存在，如果存在就启用网络套接字以便执行下一步操作。如果不存在则退出程序。<br>    <img src="https://i.imgur.com/Up7dPhZ.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在执行体函数中，程序首先初始化一些服务控制器的状态信息，然后创建”Net CLR”的互斥体，接着枚举二进制资源，加载hra33.dll这个dll文件，接下来分别创建三个线程，执行不同的操作。<br>    <img src="https://i.imgur.com/UfiDvfo.png" alt=""></p><h1 id="四-样本分析"><a href="#四-样本分析" class="headerlink" title="四 样本分析"></a>四 样本分析</h1><h2 id="ExecuteFun"><a href="#ExecuteFun" class="headerlink" title="ExecuteFun"></a>ExecuteFun</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个函数是程序的主要执行部分。</p><ul><li>设置serviceStatus状态<br>  <img src="https://i.imgur.com/FLYazwS.png" alt=""></li><li>更新资源</li><li>加载hra33.dll这个动态链接库文件</li><li>创建三个线程<br>  <img src="https://i.imgur.com/Kj8IAzt.png" alt=""></li></ul><h2 id="UpdateSource"><a href="#UpdateSource" class="headerlink" title="UpdateSource"></a>UpdateSource</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个函数主要是用于更新资源的，但是由于注册表Services.Net CLR不存在导致函数提前退出。<br>    <img src="https://i.imgur.com/PvxVeFO.png" alt=""></p><ul><li>根据Service注册表下Net CLR文件，创建新文件<br>  <img src="https://i.imgur.com/eO39k7g.png" alt=""></li><li>然后利用跟新资源的方式让其像一个可执行文件<br>  <img src="https://i.imgur.com/A91JbCZ.png" alt=""></li></ul><h2 id="Thread-1"><a href="#Thread-1" class="headerlink" title="Thread_1"></a>Thread_1</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用od跟入Thread_1函数。</p><ul><li>获取本地主机的名称和地址<br>  <img src="https://i.imgur.com/4QH59S2.png" alt=""></li><li>获取本地网关<br>  <img src="https://i.imgur.com/uJrXKab.png" alt=""><br>  <img src="https://i.imgur.com/2JGKjbK.png" alt=""></li><li>这里有个病毒作者的错误，本来他想的是如果主机用户是管理员则执行这个判断，但是他直接引用的是字符串，造成判断无效，所有用户都成立<br>  <img src="https://i.imgur.com/7VJTb4v.png" alt=""></li><li>利用上面得到的本地网关地址，和用户名及密码作为参数传入CreateFileAndExecuteFun(emmmm不像是真的)。<br>  <img src="https://i.imgur.com/dk8oKbI.png" alt=""></li></ul><h3 id="CreateFileAndExecuteFun"><a href="#CreateFileAndExecuteFun" class="headerlink" title="CreateFileAndExecuteFun"></a>CreateFileAndExecuteFun</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;程序先与远程主机利用ipc$漏洞创建一个共享的命名管道，用IPC$,连接者甚至可以与目标主机建立一个空的连接而无需用户名与密码(当然,对方机器必须开了ipc$共享,否则你是连接不上的)，而利用这个空的连接，连接者还可以得到目标主机上的用户列表(不过负责的管理员会禁止导出用户列表的)。还可以访问共享资源,并使用一些字典工具，进行密码探测，以至于获得更高的权限。然后黑客从服务端可以利用nc等软件向主机发送一个shell。</p><ul><li>创建映射方式，以便后期的文件操作，通过WNetAddConnection2A API将共享目录映射为本地磁盘，之后即可按本地文件形式访问文件，最后断开连接。[参考：<a href="http://blog.sina.com.cn/s/blog_672355630102vnwa.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_672355630102vnwa.html</a>]<br>  <img src="https://i.imgur.com/QtFlY04.png" alt=""></li><li>把本地文件复制到共享文件的C-E盘<br>   <img src="https://i.imgur.com/8jUIjNa.png" alt=""></li></ul><h2 id="Thread-2"><a href="#Thread-2" class="headerlink" title="Thread_2"></a>Thread_2</h2><ul><li>获取本地时间和20130221进行比较，如果大于则创建Thread3这个线程执行，<br>  <img src="https://i.imgur.com/SisWINB.png" alt=""><br>  <img src="https://i.imgur.com/UFTq1t2.png" alt=""></li></ul><h2 id="Thread-3"><a href="#Thread-3" class="headerlink" title="Thread_3"></a>Thread_3</h2><ul><li>判断链接192.168.1.107是否正常<br>  <img src="https://i.imgur.com/2pjgCY0.png" alt=""></li><li>利用switch 通过接收不同的指令，来决定执行的操作，如下图<br>  <img src="https://i.imgur.com/PaexMGd.png" alt=""><ul><li>16号：<br><img src="https://i.imgur.com/y4CgGAP.png" alt=""></li><li>18号：<br><img src="https://i.imgur.com/Sm9E6nA.png" alt=""></li><li>20号：<br><img src="https://i.imgur.com/UQHocaf.png" alt=""></li><li>6号：<br><img src="https://i.imgur.com/J1PSmYE.png" alt=""></li><li>2号：<br><img src="https://i.imgur.com/4o89JYA.png" alt=""></li><li>3号：<br><img src="https://i.imgur.com/2Gjuiwp.png" alt=""></li><li>4号：<br><img src="https://i.imgur.com/viggCZX.png" alt=""><h3 id="IsConnectFun"><a href="#IsConnectFun" class="headerlink" title="IsConnectFun()"></a>IsConnectFun()</h3></li></ul></li><li>解Base编码得到IP地址：192.168.1.107:83<br>  <img src="https://i.imgur.com/S6nBGNh.png" alt=""></li></ul><h3 id="GetInformationFun"><a href="#GetInformationFun" class="headerlink" title="GetInformationFun"></a>GetInformationFun</h3><ul><li>识别出当前系统版本信息<br>  <img src="https://i.imgur.com/UITUJTP.png" alt=""></li><li>读取注册表，查看CPU的频率<br>  <img src="https://i.imgur.com/eALSKAq.png" alt=""><br>  <img src="https://i.imgur.com/aw2pDqE.png" alt=""><br>  <img src="https://i.imgur.com/ddttIFX.png" alt=""></li><li>调用 GlobalMemoryStatusEx获取内存信息，<br>  <img src="https://i.imgur.com/UdVhHfo.png" alt=""></li><li>查看网络适配器情况<br>  <img src="https://i.imgur.com/CCkwTgW.png" alt=""></li></ul><h1 id="五-技术上的总结"><a href="#五-技术上的总结" class="headerlink" title="五 技术上的总结"></a>五 技术上的总结</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;调试程序比较难的地方在于跟入CreateThread创建的线程中，因为OD是单线程调试器，所以不会直接跟入创建的线程(子线程)中，我们采用Sleep函数来跟入线程函数中。</p><ul><li>找到线程所指向的函数，在函数开头下断</li><li><p>修改调用CreateThread函数下一条语句，写入如下部分</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">push</span> <span class="number">100000</span>  ;将Slepp的参数压入</div><div class="line"><span class="keyword">Call</span> Kernel32.<span class="built_in">Sleep</span></div></pre></td></tr></table></figure></li><li><p>f8执行，函数自动断在线程函数刚刚下断的地方。</p></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;参考自：<a href="https://blog.csdn.net/whatday/article/details/9059281" target="_blank" rel="external">https://blog.csdn.net/whatday/article/details/9059281</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关于ipc$的使用，参考自<a href="https://blog.csdn.net/smithjackhack/article/details/78559970" target="_blank" rel="external">https://blog.csdn.net/smithjackhack/article/details/78559970</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据文件：<a href="https://pan.baidu.com/s/1SObNJQLCFQ_FVAZFJ5QaSg" target="_blank" rel="external">https://pan.baidu.com/s/1SObNJQLCFQ_FVAZFJ5QaSg</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-目录：&quot;&gt;&lt;a href=&quot;#一-目录：&quot; class=&quot;headerlink&quot; title=&quot;一 目录：&quot;&gt;&lt;/a&gt;一 目录：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;1.目录&lt;/li&gt;
&lt;li&gt;2.样本信息&lt;/li&gt;
&lt;li&gt;3.行为分析&lt;/li&gt;
&lt;li&gt;4.样本分析&lt;/li&gt;
&lt;li&gt;5.技术上的总结
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux常见命令(8)进程管理</title>
    <link href="http://yoursite.com/2018/06/22/Linux%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4(8)%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2018/06/22/Linux常见命令(8)进程管理/</id>
    <published>2018-06-22T07:02:11.000Z</published>
    <updated>2018-07-10T02:11:52.868Z</updated>
    
    <content type="html"><![CDATA[<h1 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h1><a id="more"></a><h2 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h2><ul><li>ps：查看进程信息<ul><li>-le：查看系统内所有进程的详细信息(-l:显示详细信息，-e:显示所有进程)<br><img src="https://i.imgur.com/fMArD9p.png" alt=""></li><li>aux:查看系统内所有进程的详细信息<br><img src="https://i.imgur.com/nw0N6nW.png" alt=""></li><li>显示的内容介绍<br><img src="https://i.imgur.com/TfRz0CK.png" alt=""><br><img src="https://i.imgur.com/lrpYYuX.png" alt=""></li></ul></li><li>top：查看系统信息<ul><li>-d：指定刷新时间间隔</li><li>P：以CPU使用率排序(默认)</li><li>M：内存使用率</li><li>N：以PID排序<br><img src="https://i.imgur.com/vmkHY7T.png" alt=""><br><img src="https://i.imgur.com/0xRwOhM.png" alt=""><br><img src="https://i.imgur.com/noyZqLF.png" alt=""><br><img src="https://i.imgur.com/ol87Tg3.png" alt=""></li></ul></li><li>pstree：查看进程树<ul><li>-p：罗列进程树<br><img src="https://i.imgur.com/B17g579.png" alt=""><h2 id="杀死进程"><a href="#杀死进程" class="headerlink" title="杀死进程"></a>杀死进程</h2></li></ul></li><li>kill [信号] [PID]：杀死指定进程<br>  <img src="https://i.imgur.com/D5K7o8W.png" alt=""><ul><li>重启进程-1<br><img src="https://i.imgur.com/qIXs2a4.png" alt=""></li><li>正常结束-15</li><li>强制结束-9  </li></ul></li><li>killall [选项] [信号] [PID]：按照进程名杀死进程<br>  <img src="https://i.imgur.com/IE7XUzK.png" alt=""><br>  <img src="https://i.imgur.com/99l2LwH.png" alt=""></li><li>pkill [选项] [信号] [进程名]：按照进程名杀死进程<ul><li>-t 终端号：按照终端号剔除用户</li></ul></li><li>实例1：<ul><li>w：查看登录用户<br><img src="https://i.imgur.com/Z3YvsOk.png" alt=""></li><li>pkill -t [终端号]:剔除用户<br><img src="https://i.imgur.com/iVqIu6a.png" alt=""><h1 id="工作管理"><a href="#工作管理" class="headerlink" title="工作管理"></a>工作管理</h1></li></ul></li><li>jobs:查看后台命令<br>  <img src="https://i.imgur.com/HgQWJgN.png" alt=""></li><li>fg %工作号：将后台执行的命令恢复到前台<br>  <img src="https://i.imgur.com/TzCBD31.png" alt=""><br>  <img src="https://i.imgur.com/0sJgDGQ.png" alt=""></li><li>bg %工作号：将后台执行的命令恢复到后台<h1 id="系统资源查看"><a href="#系统资源查看" class="headerlink" title="系统资源查看"></a>系统资源查看</h1></li><li>vmstat[间隔] [次数] ：查看系统资源<br>  <img src="https://i.imgur.com/pFSGGZK.png" alt=""></li><li>dmesg：查看开机内核信息(查看软硬件信息)<br>  <img src="https://i.imgur.com/mMiooza.png" alt=""></li><li>free：查看内存使用状态<ul><li>k</li><li>m</li><li>g </li></ul></li><li>uptime：看时间</li><li>uname：查看系统内核信息<ul><li>-a：所有信息</li><li>-r：内核版本</li><li>-s：内核名称<br><img src="https://i.imgur.com/0upkqqI.png" alt=""></li></ul></li><li>file /bin/ls:判断操作系统位数(间接)<br>  <img src="https://i.imgur.com/YGNrOk6.png" alt=""></li><li>lsb_release -a:查看系统发行版本<br>  <img src="https://i.imgur.com/D8jJCIe.png" alt=""></li><li>lsof [选项]：列出进程使用或者打开的文件<ul><li>-c [字符串]：</li><li>-u [uid]:</li><li>-p [pid]:<br><img src="https://i.imgur.com/DAeJlxL.png" alt=""><h1 id="系统定时任务"><a href="#系统定时任务" class="headerlink" title="系统定时任务"></a>系统定时任务</h1></li></ul></li><li>crontab </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;进程管理&quot;&gt;&lt;a href=&quot;#进程管理&quot; class=&quot;headerlink&quot; title=&quot;进程管理&quot;&gt;&lt;/a&gt;进程管理&lt;/h1&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux常见命令(7)shell</title>
    <link href="http://yoursite.com/2018/06/10/Linux%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4(7)shell%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/06/10/Linux常见命令(7)shell编程/</id>
    <published>2018-06-10T07:02:11.000Z</published>
    <updated>2018-07-10T02:11:27.808Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-shell中的正则表达式"><a href="#1-shell中的正则表达式" class="headerlink" title="1 shell中的正则表达式"></a>1 shell中的正则表达式</h1><h1 id="2-字符截取命令"><a href="#2-字符截取命令" class="headerlink" title="2 字符截取命令"></a>2 字符截取命令</h1><a id="more"></a><h2 id="常见的字符串截取命令"><a href="#常见的字符串截取命令" class="headerlink" title="常见的字符串截取命令"></a>常见的字符串截取命令</h2><ul><li>grep：截取行</li><li>cut：截取列</li><li>printf</li><li>awk</li><li>sed</li></ul><h2 id="cut命令"><a href="#cut命令" class="headerlink" title="cut命令"></a>cut命令</h2><ul><li>cut [选项] [文件名]：用于提取指定列的信息<ul><li>-d:指定分割符(默认分隔符是tab)</li><li>-f：指定列号</li></ul></li><li>例子1：-f<br>  <img src="https://i.imgur.com/jQxcAHP.png" alt=""></li><li>例子2：-f -d<br>  <img src="https://i.imgur.com/28qDT9k.png" alt=""></li><li>例子3：为什么会产生这种情况呢？红线画出来的是因为分隔符是空格，默认的是tab<br>  <img src="https://i.imgur.com/cEjiJ4B.png" alt=""></li></ul><h2 id="printf命令"><a href="#printf命令" class="headerlink" title="printf命令"></a>printf命令</h2><ul><li>printf [输出类型/格式(转义符)] 内容<ul><li>%ns:输出n个字符串。默认数据类型</li><li>%ni：输出n个数，但是不进行ASCII转化</li><li>%n.mf:输出浮点数</li></ul></li><li>[建议]：最好应该像C语言一样，给数据类型加上双引号，尤其是在存在多个格式化输出的时候。</li><li>例子1：printf %s 12345<br>  <img src="https://i.imgur.com/OIRafQp.png" alt=""></li><li>例子2：printf %s %s %s \n 1 2 3<br>  <img src="https://i.imgur.com/uNaSyUx.png" alt=""></li></ul><h2 id="awk命令"><a href="#awk命令" class="headerlink" title="awk命令"></a>awk命令</h2><ul><li>awk [条件1] [‘{动作1}’] [条件2] [‘{动作2}’] [filename]</li><li>例子1：awk ‘{printf $1 “\t” $2 “\n”}’ TestAwk.txt<br>  <img src="https://i.imgur.com/urLV4Vp.png" alt=""></li><li>例子2：<br>  <img src="https://i.imgur.com/WrAuwiS.png" alt=""></li><li>例子3：BEGIN（大写）：用于提前输出 <ul><li>awk ‘BEGIN{print “TEST TEST\n”}{print $2 “\t” $3}’ TestAwk.txt<br><img src="https://i.imgur.com/OwW72HG.png" alt=""></li></ul></li><li>例子4：FS指定分隔符<ul><li>awk ‘BEGIN{FS=”:”}{print $1 “\t” $2}’ /etc/passwd<br><img src="https://i.imgur.com/VzdNYY5.png" alt=""></li></ul></li><li>例子5：END：所有动作执行完毕后，在执行END动作</li></ul><h2 id="sed命令"><a href="#sed命令" class="headerlink" title="sed命令"></a>sed命令</h2><ul><li>sed [选项] [‘动作’] filename<ul><li>选项-n:只将sed处理过的内容打印出来</li><li>选项-e:允许对结果执行多个sed动作</li><li>选项-i：将修改回写入文件。</li><li>动作’a \’：在当前行后添加一行<br><img src="https://i.imgur.com/dDHWMUi.png" alt=""></li><li>动作’i \’:在当前行插入一行或者多行<br><img src="https://i.imgur.com/lBriTb0.png" alt=""></li><li>动作’c \’:用c后面的字符串替换原来的行<br><img src="https://i.imgur.com/aK6dSpL.png" alt=""></li><li>动作d:删除指定行<br><img src="https://i.imgur.com/HCLWc8n.png" alt=""></li><li>动作p：输出指定行<br><img src="https://i.imgur.com/rw33CCn.png" alt=""><br><img src="https://i.imgur.com/L9ruq8C.png" alt=""></li><li>动作s:字符替换’行范围s/旧子串/新字串g’(不加行范围就是默认全局)<br><img src="https://i.imgur.com/lCCyaOa.png" alt=""></li></ul></li></ul><h1 id="3-字符处理命令"><a href="#3-字符处理命令" class="headerlink" title="3 字符处理命令"></a>3 字符处理命令</h1><h2 id="1-排序命令"><a href="#1-排序命令" class="headerlink" title="1 排序命令"></a>1 排序命令</h2><ul><li>sort [选项] filename<br>  <img src="https://i.imgur.com/Q0ocx9F.png" alt=""><ul><li>-f:忽略大小写<br><img src="https://i.imgur.com/sohnG65.png" alt=""></li><li>-n:按照数值型排序，默认使用的是字符串排序</li><li>-r:反向排序<br><img src="https://i.imgur.com/spocohO.png" alt=""></li><li>-t:指定分隔符，默认使用的是tab</li><li>-k [m,n]:指定字段范围。m-n列<br><img src="https://i.imgur.com/Jba3W5I.png" alt=""></li></ul></li></ul><h2 id="2-统计命令"><a href="#2-统计命令" class="headerlink" title="2 统计命令"></a>2 统计命令</h2><h3 id="wc命令统计"><a href="#wc命令统计" class="headerlink" title="wc命令统计"></a>wc命令统计</h3><ul><li>wc [选项] filename<br>  <img src="https://i.imgur.com/AcfN7sj.png" alt=""><ul><li>-l:统计行数<br><img src="https://i.imgur.com/upAiJJv.png" alt=""></li><li>-w:统计单词数<br><img src="https://i.imgur.com/hnhrT9l.png" alt=""></li><li>-m:统计字符数<br><img src="https://i.imgur.com/BgPnQGC.png" alt=""></li></ul></li></ul><h3 id="test命令"><a href="#test命令" class="headerlink" title="test命令"></a>test命令</h3><p>   test命令主要用于文件测试，字符串测试，数值测试</p><ul><li>test [选项] [项目]<ul><li>-e：文件或者目录是否存在</li><li>-f：文件是否存在</li><li>-d：目录是否存在</li><li>-w：写权限</li><li>-r：读权限</li><li>-x：执行权限</li><li>-nt</li><li>-ot</li><li>-ef </li><li>-eq：等于</li><li>-ne：不等于</li><li>-lt：小于</li><li>-le:小于等于</li><li>-gt：大于</li><li>-ge：大于等于</li><li>！：取反，[ ! -f /etc/passwd],主要中间要有间隔</li><li>-a：逻辑与，[-f /etc/passwd -a -d /etc]</li><li>-o：逻辑或，[-f /etc/passwd -o -d /etc]</li></ul></li></ul><h1 id="4-分支与循环"><a href="#4-分支与循环" class="headerlink" title="4 分支与循环"></a>4 分支与循环</h1><h2 id="1-if语句"><a href="#1-if语句" class="headerlink" title="1 if语句"></a>1 if语句</h2><ul><li><p>单if：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>[条件]</div><div class="line">   <span class="keyword">then</span></div><div class="line">      [执行体]</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure></li><li><p>双if</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>[条件]</div><div class="line">    <span class="keyword">then</span></div><div class="line">       [执行体]</div><div class="line">    <span class="keyword">else</span> </div><div class="line">       [执行体]</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure></li><li><p>例子：<br>  <img src="https://i.imgur.com/2pPiouT.png" alt=""></p></li><li>多if<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>[条件]</div><div class="line">   <span class="keyword">then</span></div><div class="line">      [执行体]</div><div class="line">   <span class="keyword">elif</span></div><div class="line">      [执行体]</div><div class="line">   <span class="keyword">else</span></div><div class="line">      [执行体]</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure></li></ul><h2 id="case语句"><a href="#case语句" class="headerlink" title="case语句"></a>case语句</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> $x <span class="keyword">in</span></div><div class="line">     分支<span class="number">1</span> )</div><div class="line">            [<span class="meta">执行体</span>]</div><div class="line">            ；；</div><div class="line">     分支<span class="number">2</span> ）</div><div class="line">            [<span class="meta">执行体</span>]</div><div class="line">            ；；</div><div class="line">     分支* )</div><div class="line">            [<span class="meta">执行体</span>]</div><div class="line">            ；；</div><div class="line">esac</div></pre></td></tr></table></figure><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><ul><li><p>No 1 </p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">for i in <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></div><div class="line">     do </div><div class="line">         [循环体]  # i依次遍历<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span></div><div class="line">     done</div></pre></td></tr></table></figure></li><li><p>例子1：<br>  <img src="https://i.imgur.com/SMbOcVN.png" alt=""></p></li><li><p>No 2：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>((<span class="built_in">i</span>=<span class="number">0</span>;<span class="built_in">i</span>&lt;<span class="number">100</span>;<span class="built_in">i</span>=<span class="built_in">i</span>+<span class="number">1</span>))</div><div class="line">   do </div><div class="line">      [循环体]</div><div class="line">   done</div></pre></td></tr></table></figure></li><li><p>例子2：<br>  <img src="https://i.imgur.com/YUwr4Bu.png" alt=""></p></li></ul><h2 id="while和until循环"><a href="#while和until循环" class="headerlink" title="while和until循环"></a>while和until循环</h2><ul><li><p>while循环：判断条件为真，循环执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span>[ 测试条件 ]</div><div class="line">    <span class="keyword">do</span> </div><div class="line">       [循环体]</div><div class="line">    <span class="keyword">done</span></div></pre></td></tr></table></figure></li><li><p>例子 1<br>  <img src="https://i.imgur.com/OZLpAgc.png" alt=""></p></li><li><p>until循环：判断条件为假，循环执行</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">until <span class="string">[ 测试条件 ]</span></div><div class="line">    do </div><div class="line">         <span class="string">[循环体]</span></div><div class="line">    done</div></pre></td></tr></table></figure></li><li><p>例子2<br>  <img src="https://i.imgur.com/FGskRVO.png" alt=""></p></li></ul><h2 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h2><ul><li>break[n]:n指的是跳出n层循环，默认是1</li><li>cntinue[n]:n指的是跳出n层循环，默认是1</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-shell中的正则表达式&quot;&gt;&lt;a href=&quot;#1-shell中的正则表达式&quot; class=&quot;headerlink&quot; title=&quot;1 shell中的正则表达式&quot;&gt;&lt;/a&gt;1 shell中的正则表达式&lt;/h1&gt;&lt;h1 id=&quot;2-字符截取命令&quot;&gt;&lt;a href=&quot;#2-字符截取命令&quot; class=&quot;headerlink&quot; title=&quot;2 字符截取命令&quot;&gt;&lt;/a&gt;2 字符截取命令&lt;/h1&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>注册表</title>
    <link href="http://yoursite.com/2018/06/04/%E3%80%8AWindows%20Internals%E3%80%8B%E7%AC%AC%E5%9B%9B%E7%AB%A0_%E6%B3%A8%E5%86%8C%E8%A1%A8/"/>
    <id>http://yoursite.com/2018/06/04/《Windows Internals》第四章_注册表/</id>
    <published>2018-06-04T07:02:11.000Z</published>
    <updated>2018-06-09T09:26:59.012Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注册表用法"><a href="#注册表用法" class="headerlink" title="注册表用法"></a>注册表用法</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;注册表的配置数据主要在四个时间点被修改。</p><ul><li>由于引导配置数据库(BCD)存在于注册表储巢中，所以在初始化引导过程中，引导加载器需要读入配置信息和引导设备驱动程序的列表。</li><li>在内核引导的过程中，内核要读取系统的相关设置信息(存放在注册表中)，这些信息包含了加载的驱动程序，系统组件，已经系统行为的配置。</li><li>在windows登录过程中，Explorer和windows组件读取用户配置信息。</li><li>应用程序启动过程中，读取系统全局配置信息。</li><li>其他时间：在调用API修改注册表的时候，注册表也提供异步回调机制，这是优先接收注册表变化的方法。<strong>系统不建议使用轮询的方法检测注册表的修改。</strong><a id="more"></a><h2 id="注册表的数据类型"><a href="#注册表的数据类型" class="headerlink" title="注册表的数据类型"></a>注册表的数据类型</h2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;注册表的结构类似于一个文件系统的结构。只不过注册表包含的是键和值，一般的我们把键看做目录，值看做文件。例如\trade\mark中，trade表示的是键，mark表示的是值。</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;注册表的值有多种数据类型，常见的数据类型是REG_DWORD(存储大部分的整形和布尔类型)，REG_BINARY(存储的是超过32位的整数类型，例如加密口令)，REG_SZ(存储的是字符串)。<strong>其中还有特殊的是REG_LINK，</strong>REG_LINK存储的是一个链接类型，标明这个数据类型可以让一个键指向另一个键。例如\ROOT1\LINK指向的是ROOT2\REGKEY，其中REGKEY存储的值是REGVALUE，则对于REGVALUE有两个路径可以访问：\ROOT1\LINK\REGVALUE或者\ROOT2\REGKEY\REGVALUE。<strong>windows中六个注册表根有三个是链接，他们指向的是三个非连接的跟腱中的子健。</strong></p><h2 id="注册表的逻辑结构"><a href="#注册表的逻辑结构" class="headerlink" title="注册表的逻辑结构"></a>注册表的逻辑结构</h2><h3 id="HKEY-CURRENT-USER"><a href="#HKEY-CURRENT-USER" class="headerlink" title="HKEY_CURRENT_USER:"></a>HKEY_CURRENT_USER:</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;存储和当前登录用户相关的数据(包含用户参数和软件配置信息)，指向当前登录用户的用户轮廓，位于磁盘下的\Users\用户名\Ntuser.dat文件中。是HKEY_USERS下对应的当前登录用户的子健。**当一个用户登录系统，首先会创建HKCU，然后把HKCU映射到HKEY_USERS/<currentuser>中<br>     <img src="https://i.imgur.com/Ej3n9P0.png" alt=""><br>     <img src="https://i.imgur.com/8yfnMK3.png" alt=""><br>     <img src="https://i.imgur.com/nUG2rw4.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下面是关于HKEY_CURRENT_USER的子健信息。<br>    <img src="https://i.imgur.com/4Ffc53E.png" alt=""></currentuser></p><h3 id="HKEY-USERS："><a href="#HKEY-USERS：" class="headerlink" title="HKEY_USERS："></a>HKEY_USERS：</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;包含所有已加载用户轮廓的子健，他不是一个链接。但是他包含了一个名为HKU.DEFAULTD的链接。当有新用户登录的时候，系统依赖Users\Default的轮廓为该用户创建一个新的轮廓。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;注册表HKLM\Software\Microsoft\Windows Nt\CurrentVersion\ProfileList\ProfilesDirectory中的ProfilesDirectory保存的是系统中存在的用户轮廓列表。每个轮廓存放在ProfileList键下面。<br>     <img src="https://i.imgur.com/FaGauvF.png" alt=""><br>     <img src="https://i.imgur.com/RwudfZI.png" alt=""><br>     <img src="https://i.imgur.com/qn84dGf.png" alt=""></p><h3 id="HKEY-CLASS-ROOT："><a href="#HKEY-CLASS-ROOT：" class="headerlink" title="HKEY_CLASS_ROOT："></a>HKEY_CLASS_ROOT：</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;包含的是文件关联和COM注册信息以及UAC虚拟化注册表根。<strong>其中HKCR下的根键保存的是文件拓展名关联，UAC虚拟化注册表位于VirtualStore键下面，其他键包含的是注册在系统中的COM对象的详细配置信息</strong><br>    <img src="https://i.imgur.com/zVBGxJo.png" alt=""><br>    <img src="https://i.imgur.com/5nvD88p.png" alt=""><br>    <img src="https://i.imgur.com/b6R9joX.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HKCR是由HKLM\SOFTWARE\Classes(系统全局)和HKEY_USERS\<sid>\SOFTWARE\Classes(用户)组合的视图。将用户注册表信息和系统全局注册表信息分开，保证了系统的安全性，避免非特权用户访问并修改系统全局信息。</sid></p><h3 id="HKEY-LOCAL-MACHINE"><a href="#HKEY-LOCAL-MACHINE" class="headerlink" title="HKEY_LOCAL_MACHINE:"></a>HKEY_LOCAL_MACHINE:</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;包含了机器的全局设置，包括了BCD00000000,COMPONENTS,HARDWARE,SAM,SECURITY,SOFTWARE,SYSTEM,该注册表不是一个链接。<br>    <img src="https://i.imgur.com/CdpuB0E.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HKLM\BCD0000000保存的是引导配置数据库，这是作为一个注册表储巢加载进来的。<br>     <img src="https://i.imgur.com/vullJ3m.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HKLM\CONPONENTS保存的是关于CBS(基于组件的服务)，当系统组件需要更新，安装或者卸载的时候，保存在这个键下的信息将要被用到。当然为了优化系统资源，CBS栈在服务一个请求的时候只是被动态的加载到系统。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\HKLM\HARDWARE维护了当前系统中的遗留硬件，以及一些硬件设备到其驱动程序的映射关系描述信息。<br>     <img src="https://i.imgur.com/GOH6nDp.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HKLM\SAM存放的是用户账户和组的信息，SAM的安全描述符一般被设置成管理员无法访问(system可以访问)<br>     <img src="https://i.imgur.com/cSYnQsX.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HKLM\SECURITY存放的是系统全局的安全设置和用户权限分配，HKLM\SAM是HKLM\SECURITY\SAM下的SERURITY子键，默认情况下无法查看HKLM\SECURITY和HKLM\SAM的内容<br>     <img src="https://i.imgur.com/jhyfMBE.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HKLM\OTFWARE存放是系统全局配置信息和第三方应用程序的全局设置。<br>     <img src="https://i.imgur.com/bZGzLA6.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HKLM\SYSTEM保存的是引导系统所需要的全局信息，例如下载的驱动程序或者启动的服务。这些信息对于系统的启动十分重要。<br>     <img src="https://i.imgur.com/VYoWIov.png" alt=""></p><h3 id="HKEY-CURRENT-CONFIG"><a href="#HKEY-CURRENT-CONFIG" class="headerlink" title="HKEY_CURRENT_CONFIG:"></a>HKEY_CURRENT_CONFIG:</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;保存的是当前的硬件配置信息，是HKLM\SYSTEM\CurrentControlSet\Hardware Profiles\Current下的子健，</p><h3 id="HKEY-PERFORMACHE-DATA"><a href="#HKEY-PERFORMACHE-DATA" class="headerlink" title="HKEY_PERFORMACHE_DATA:"></a>HKEY_PERFORMACHE_DATA:</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该项是一个性能计数器，不是一个链接。在注册表编辑器中无法找到，只有试用RegQueryValueEx函数去获取性能信息。<strong>性能信息并不是保存在注册表中，RegQueryValueEx函数只是利用该键获得从性能数据提供者那里提供的信息</strong></p><h2 id="事务性注册表"><a href="#事务性注册表" class="headerlink" title="事务性注册表"></a>事务性注册表</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>事务性注册表的封闭性：</strong>当使用RegCreateKeyTransacted以实物的方式创建一个注册表的时候，之后的所有操作必须是以事物方式运行，而且此过程是对事物外部不可见。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>事物的隔离性：</strong>事物是相互隔离的，在一个事物内部所做的修改，在该事物被提交之前，在该事物外部是不可见的。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>事物的低优先级：</strong>一个非事物任务的写会导致事物内部的写操作失败。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>提交生效：</strong>事物只有提交之后才会立即生效。</p><h2 id="注册表的内部机理"><a href="#注册表的内部机理" class="headerlink" title="注册表的内部机理"></a>注册表的内部机理</h2><h3 id="储巢"><a href="#储巢" class="headerlink" title="储巢"></a>储巢</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;注册表是一组称为储巢的独立文件，每一个储巢包含了一个注册表数，有一个键作为该树的根，子键或者值存储在根的下面，但是注册表编辑器所显示的根键和储巢里面的根键不是相互关联的。<strong>除了用户轮廓，其他轮廓路径都被编码进了配置管理器中，当加载储巢的时候，配置管理器会在HKLM\SYSTEM\CurrentControlSet\Control\Hivelist子键下记录每个储巢的路径。</strong>并将这些储巢链接起来，以便建立其注册表结构。<br>    <img src="https://i.imgur.com/qPYSrU9.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如下图是注册表路径和储巢路径对应图，其中有一项是易失储巢。标明这个储巢是易变的，并没有对应的文件，由操作系统在内存中加载并且管理。其中著名的例子就是HKLM\HARDWARE.这个储巢保存的系统物理设备和设备资源的信息。<strong>每次引导的时候会进行资源分配和硬件检测。</strong><br>    <img src="https://i.imgur.com/HvKm3TD.png" alt=""></p><h3 id="注册表符号链接"><a href="#注册表符号链接" class="headerlink" title="注册表符号链接"></a>注册表符号链接</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;注册表符号链接一个种使配置管理器将键与键链接起来的<strong>特殊键，</strong>符号链接在外部是利用CreateRegKey函数指定REG_GREATE_LINK标志创建起来的，</p><h3 id="储巢结构"><a href="#储巢结构" class="headerlink" title="储巢结构"></a>储巢结构</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先，我们从全局来把握一下注册表的储巢结构，在了解储巢结构之前，我们需要了解一下几个概念。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>块：</strong>配置管理器从逻辑上将一个储巢分成一些称为块的分配单元。每个块的大小是4096字节。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>基本块：</strong>一个储巢的第一个块称为基本块，基本块包含了有关该储巢的全局信息。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>巢室：</strong>一个巢室包含了所存储的注册表键的基本数据结构，之所以称为巢室，是因为巢室是存储注册表键的内容的容器。一个巢室包含了一个键，一个值，一个安全描述符，一列子键，一列子值。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>巢箱：</strong>新巢室正好拓展到下一个块或者页面的大小，说白了就是巢室的箱子(多个巢室组成了巢箱)。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>巢室索引：</strong> 详见巢室映射表<br>    <img src="https://i.imgur.com/9GzNlgc.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;巢室开始的四个字节表示的是该巢室数据类型。一共有五种巢室的基本数据类型：键巢室，值巢室，子键列表巢室，值列表巢室，安全描述符巢室。</p><ul><li>键巢室：包含了一个注册表键的巢室</li><li>值巢室：包含了一个键的值得巢室</li><li>子键列表巢室：包含了<strong>许多子键巢室的索引</strong>的巢室</li><li>值列表巢室：包含了<strong>许多值巢室的索引</strong>的巢室，是父键的所有值</li><li>安全描述符巢室：包含了一个安全描述符的巢室<br>   <img src="https://i.imgur.com/W352lyG.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>windows选择利用巢箱的结构来拓展巢室</strong>，当一个巢室要被添加到储巢的时候，系统创建一个巢箱来容纳巢室，这导致了系统分配和释放巢箱的频率比使用巢室要慢的多。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;配置管理器会将储巢整个读入，同时也会象磁盘碎片管理的方式，合并诸多空巢箱，当储巢尾部的巢箱变为空闲的时候才会缩短该储巢。</li></ul><h3 id="巢室映射表"><a href="#巢室映射表" class="headerlink" title="巢室映射表"></a>巢室映射表</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;注册表被映射如内存是不连续的，配置管理器采用的是和虚拟内存映射到物理内存地址的策略。<strong>和windows的分段内存管理机制一样</strong>，windows使用连续的内存代表一个巢箱，这样一个巢箱内部所有的巢室都出现在一个视图中。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;windows使用<strong>巢室索引</strong>来实现映射策略，巢室索引有三个域：目录索引，表索引，字节偏移。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;【重点】①windows将目录索引解释成一个巢室的映射表目录的索引，也就是说根据这个索引才能找到巢室映射目录表的地址。②巢室映射表目录有1024个，每个目录项指向的是一个映射表，利用第二个域–表索引，根据巢室映射表找到巢室所在巢箱的偏移，③根据第三个域找到巢室的偏移。</p><h3 id="注册表名字空间和操作"><a href="#注册表名字空间和操作" class="headerlink" title="注册表名字空间和操作"></a>注册表名字空间和操作</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>键对象：</strong>当打开或创建一个注册表键的时候，对象管理器会给应用程序分配一个句柄让程序通过此句柄引用该键。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>键控制块：</strong>每次打开注册表键的时候，配置管理器也会分配一个键控制块，用于保存键名称，巢室索引，和一个标志(表示键的句柄被关闭后，配置管理器是否应该删除该键句柄所引用的键巢室)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关系：键对象指向他对应的键控制块，如果两个应用程序打开一个注册表键的时候，会产生两个不同的键对象，这两个键对象指向同一个键控制块，(因为键控制块包含了键的名称等唯一信息)。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用键控制块的引用个数来决定是否删除该键控制块，如果引用计数为0的时候，说明这个键控制块不再被需要了。</p><h3 id="【实验】查看键控制块"><a href="#【实验】查看键控制块" class="headerlink" title="【实验】查看键控制块"></a>【实验】查看键控制块</h3><ul><li>!reg openkeys:查看系统中已经被分配的键控制块。<br>  <img src="https://i.imgur.com/QeXMV6u.png" alt=""></li><li>!reg findkcb:查看一个已经打开的kcb<br>  <img src="https://i.imgur.com/vH16dDH.png" alt=""></li><li>!reg kcb:查看具体的kcb内容<br>  <img src="https://i.imgur.com/Q9CaD3C.png" alt=""></li></ul><h3 id="稳定可靠的存储"><a href="#稳定可靠的存储" class="headerlink" title="稳定可靠的存储"></a>稳定可靠的存储</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用双日志方案，将脏数据累加写入同一个日志文件，如果不发生错误，只写入某一个文件。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于写脏数据到日志文件，使用了双序列号模式，延时写出器首先更新日志文件一个序列号，然后在写入脏数据，此时发生意外，系统在引导时，配置管理器肯定会注意到序列号不一致，触发储巢回滚。如果写入日志成功，在写另一个序列号。保证两个序列号一致。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;注册表用法&quot;&gt;&lt;a href=&quot;#注册表用法&quot; class=&quot;headerlink&quot; title=&quot;注册表用法&quot;&gt;&lt;/a&gt;注册表用法&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;注册表的配置数据主要在四个时间点被修改。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于引导配置数据库(BCD)存在于注册表储巢中，所以在初始化引导过程中，引导加载器需要读入配置信息和引导设备驱动程序的列表。&lt;/li&gt;
&lt;li&gt;在内核引导的过程中，内核要读取系统的相关设置信息(存放在注册表中)，这些信息包含了加载的驱动程序，系统组件，已经系统行为的配置。&lt;/li&gt;
&lt;li&gt;在windows登录过程中，Explorer和windows组件读取用户配置信息。&lt;/li&gt;
&lt;li&gt;应用程序启动过程中，读取系统全局配置信息。&lt;/li&gt;
&lt;li&gt;其他时间：在调用API修改注册表的时候，注册表也提供异步回调机制，这是优先接收注册表变化的方法。&lt;strong&gt;系统不建议使用轮询的方法检测注册表的修改。&lt;/strong&gt;
    
    </summary>
    
      <category term="windows系统" scheme="http://yoursite.com/categories/windows%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>GCTF解析</title>
    <link href="http://yoursite.com/2018/05/26/GCTF/"/>
    <id>http://yoursite.com/2018/05/26/GCTF/</id>
    <published>2018-05-26T06:02:11.000Z</published>
    <updated>2018-05-26T09:22:36.672Z</updated>
    
    <content type="html"><![CDATA[<h1 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h1><h2 id="Hackme"><a href="#Hackme" class="headerlink" title="Hackme"></a>Hackme</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这是一个ELF的逆向题，IDA打开，发现流程如下：输入字符串，然后经过一个函数的加密，利用这个函数返回出来的数值，对该数值以22取余数，得到索引，得到Hex数组里面的数据，然后经过第一个循环得到V16，再用V16和输入的字符串异或，然后把结果和Hex比较即可。<a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">__int64 __<span class="function">fastcall <span class="title">sub_400F8E</span><span class="params">(__int64 a1, __int64 a2)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  __int64 v2; <span class="comment">// rdx</span></div><div class="line">  __int64 v3; <span class="comment">// rcx</span></div><div class="line">  __int64 v4; <span class="comment">// r8</span></div><div class="line">  __int64 v5; <span class="comment">// r9</span></div><div class="line">  <span class="keyword">int</span> v6; <span class="comment">// eax</span></div><div class="line">  <span class="keyword">char</span> InputString[<span class="number">136</span>]; <span class="comment">// [rsp+10h] [rbp-B0h]</span></div><div class="line">  <span class="keyword">int</span> v9; <span class="comment">// [rsp+98h] [rbp-28h]</span></div><div class="line">  <span class="keyword">char</span> v10; <span class="comment">// [rsp+9Fh] [rbp-21h]</span></div><div class="line">  <span class="keyword">int</span> v11; <span class="comment">// [rsp+A0h] [rbp-20h]</span></div><div class="line">  <span class="keyword">unsigned</span> __int8 flag; <span class="comment">// [rsp+A6h] [rbp-1Ah]</span></div><div class="line">  <span class="keyword">char</span> Hex; <span class="comment">// [rsp+A7h] [rbp-19h]</span></div><div class="line">  <span class="keyword">int</span> v14; <span class="comment">// [rsp+A8h] [rbp-18h]</span></div><div class="line">  <span class="keyword">int</span> v15; <span class="comment">// [rsp+ACh] [rbp-14h]</span></div><div class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v16; <span class="comment">// [rsp+B0h] [rbp-10h]</span></div><div class="line">  <span class="keyword">int</span> v17; <span class="comment">// [rsp+B4h] [rbp-Ch]</span></div><div class="line">  _BOOL4 v18; <span class="comment">// [rsp+B8h] [rbp-8h]</span></div><div class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+BCh] [rbp-4h]</span></div><div class="line">  Printf((<span class="keyword">unsigned</span> __int64)<span class="string">"Give me the password: "</span>);</div><div class="line">  <span class="built_in">scanf</span>((__int64)<span class="string">"%s"</span>);</div><div class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; InputString[i]; ++i )</div><div class="line">    ;</div><div class="line">  v18 = i == <span class="number">22</span>;</div><div class="line">  v17 = <span class="number">10</span>;</div><div class="line">  <span class="keyword">do</span></div><div class="line">  &#123;</div><div class="line">    v6 = sub_406D90((__int64)<span class="string">"%s"</span>, (__int64)InputString, v2, v3, v4, v5);<span class="comment">// 固定数据</span></div><div class="line">    v3 = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(v6 % <span class="number">22</span>);               <span class="comment">// 对22取余</span></div><div class="line">    v14 = v6 % <span class="number">22</span>;                              <span class="comment">// 对22取余</span></div><div class="line">    v16 = <span class="number">0</span>;                                    <span class="comment">// 初始化为0</span></div><div class="line">    Hex = Hex_Arr[v6 % <span class="number">22</span>];                     <span class="comment">// 取16进制数组里面的值</span></div><div class="line">    flag = InputString[v6 % <span class="number">22</span>];</div><div class="line">    v11 = v6 % <span class="number">22</span> + <span class="number">1</span>;                          <span class="comment">// 对22取余后+1，作为循环控制条件</span></div><div class="line">    v15 = <span class="number">0</span>;                                    <span class="comment">// 从0开始计数</span></div><div class="line">    <span class="keyword">while</span> ( v15 &lt; v11 )                         <span class="comment">// 数值运算</span></div><div class="line">    &#123;</div><div class="line">      ++v15;</div><div class="line">      v16 = <span class="number">1828812941</span> * v16 + <span class="number">12345</span>;</div><div class="line">    &#125;</div><div class="line">    v2 = v16;                                   <span class="comment">// 运算结果交给V2</span></div><div class="line">    v10 = v16 ^ flag;</div><div class="line">    <span class="keyword">if</span> ( Hex != ((<span class="keyword">unsigned</span> __int8)v16 ^ flag) ) <span class="comment">// 运算十次，只要相等就行了</span></div><div class="line">      v18 = <span class="number">0</span>;                                  <span class="comment">// 关于写注册机：根据上面的flag，我们知道：只需要Hex==v16^flag就行，</span></div><div class="line">                                                <span class="comment">// 由于异或是可逆的，所以flag=v16^Hex</span></div><div class="line">    --v17;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">while</span> ( v17 );                                <span class="comment">// 十次循环</span></div><div class="line">  <span class="keyword">if</span> ( v18 )</div><div class="line">    v9 = Printf((<span class="keyword">unsigned</span> __int64)<span class="string">"Congras\n"</span>);</div><div class="line">  <span class="keyword">else</span></div><div class="line">    v9 = Printf((<span class="keyword">unsigned</span> __int64)<span class="string">"Oh no!\n"</span>);</div><div class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sub_406D90返回的结果却是很麻烦，可以推测他应该是一个固定的数据。我们数了一下，Hex_Arr数组的长度是22，然后又对22取余，我们可以推测出，这应该是一个长度转化的函数。写出注册机：<br><figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">char *Hex_Arr="<span class="tag">\<span class="name">x</span></span>5f<span class="tag">\<span class="name">xf</span></span>2<span class="tag">\<span class="name">x</span></span>5e<span class="tag">\<span class="name">x</span></span>8b<span class="tag">\<span class="name">x</span></span>4e<span class="tag">\<span class="name">x</span></span>0e<span class="tag">\<span class="name">xa</span></span>3<span class="tag">\<span class="name">xaa</span></span><span class="tag">\<span class="name">xc</span></span>7<span class="tag">\<span class="name">x</span></span>93<span class="tag">\<span class="name">x</span></span>81<span class="tag">\<span class="name">x</span></span>3d<span class="tag">\<span class="name">x</span></span>5f<span class="tag">\<span class="name">x</span></span>74<span class="tag">\<span class="name">xa</span></span>3<span class="tag">\<span class="name">x</span></span>09"</div><div class="line">        "<span class="tag">\<span class="name">x</span></span>91<span class="tag">\<span class="name">x</span></span>2b<span class="tag">\<span class="name">x</span></span>49<span class="tag">\<span class="name">x</span></span>28<span class="tag">\<span class="name">x</span></span>93<span class="tag">\<span class="name">x</span></span>67"; </div><div class="line">int main(int agrv,char* agrc[])</div><div class="line">&#123;</div><div class="line">int i;</div><div class="line">for(i=0;i&lt;22;i++)</div><div class="line">&#123;</div><div class="line">char Hex=Hex_Arr[i];</div><div class="line">int v11=i+1;</div><div class="line">int v15=0;</div><div class="line">int v16=0;</div><div class="line">char flag;</div><div class="line">while ( v15 &lt; v11 )                         // 数值运算</div><div class="line">    &#123;</div><div class="line">      ++v15;</div><div class="line">      v16 = 1828812941 * v16 + 12345;</div><div class="line">    &#125;</div><div class="line">flag=char(v16)^Hex</div><div class="line">    printf("<span class="comment">%c",);</span></div><div class="line">&#125;</div><div class="line">printf("<span class="tag">\<span class="name">n</span></span>");</div><div class="line">return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="test-pyc"><a href="#test-pyc" class="headerlink" title="test.pyc"></a>test.pyc</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;分别利用<a href="http://tools.bugscaner.com/decompyle/和https://tool.lu/pyc这两个网站对pyc文件进行反编译，得到如下效果。我们发现加密函数应该第二个代码块" target="_blank" rel="external">http://tools.bugscaner.com/decompyle/和https://tool.lu/pyc这两个网站对pyc文件进行反编译，得到如下效果。我们发现加密函数应该第二个代码块</a>,<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">str = <span class="string">'jYygTOy'</span> + <span class="string">'cmNycWNyYmM1Ujf'</span></div><div class="line"><span class="keyword">import</span> base64</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">flag1</span><span class="params">()</span>:</span></div><div class="line">    code = str[::<span class="number">-3</span>]</div><div class="line">    result = <span class="string">''</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> code:</div><div class="line">        ss = ord(i) - <span class="number">1</span></div><div class="line">        result += chr(ss)</div><div class="line">    <span class="keyword">print</span> result[::<span class="number">-1</span>]</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">flag2</span><span class="params">()</span>:</span></div><div class="line">    code = str[::<span class="number">-2</span>]</div><div class="line">    result = <span class="string">''</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> code:</div><div class="line">        ss = ord(i) - <span class="number">1</span></div><div class="line">        result += chr(ss)</div><div class="line">    <span class="keyword">print</span> result[::<span class="number">-2</span>]</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">flag3</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line">// WARNING: Decompyle incomplete</div><div class="line">flag1()</div></pre></td></tr></table></figure></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">flag3</span><span class="params">()</span></span><span class="symbol">:</span></div><div class="line">    code = str[<span class="symbol">:</span><span class="symbol">:-</span><span class="number">1</span>]     <span class="comment">#[开始：结束：步长],倒叙排序</span></div><div class="line">    result = <span class="string">''</span>          <span class="comment">#初始化result</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="symbol">code:</span></div><div class="line">        ss = ord(i) - <span class="number">1</span>   <span class="comment"># ASCII码-1</span></div><div class="line">        result += chr(ss)  <span class="comment">#转化为字符</span></div><div class="line">    print result[<span class="symbol">:</span><span class="symbol">:-</span><span class="number">3</span>]</div></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用另外一个编译器，得到一个字符串，结合上面的反汇编代码，发现，这是一个base64加密<br>    <img src="https://i.imgur.com/pFmT3Ws.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;得到流程是：一个字符串经过base64加密，然后逆序对每个字符串-1，输出。得到flag</p><h2 id="Debug-exe"><a href="#Debug-exe" class="headerlink" title="Debug.exe"></a>Debug.exe</h2><p><a href="https://findream.github.io/2017/11/22/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E4%BE%8B%E9%A2%98/" target="_blank" rel="external">https://findream.github.io/2017/11/22/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E4%BE%8B%E9%A2%98/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;逆向&quot;&gt;&lt;a href=&quot;#逆向&quot; class=&quot;headerlink&quot; title=&quot;逆向&quot;&gt;&lt;/a&gt;逆向&lt;/h1&gt;&lt;h2 id=&quot;Hackme&quot;&gt;&lt;a href=&quot;#Hackme&quot; class=&quot;headerlink&quot; title=&quot;Hackme&quot;&gt;&lt;/a&gt;Hackme&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这是一个ELF的逆向题，IDA打开，发现流程如下：输入字符串，然后经过一个函数的加密，利用这个函数返回出来的数值，对该数值以22取余数，得到索引，得到Hex数组里面的数据，然后经过第一个循环得到V16，再用V16和输入的字符串异或，然后把结果和Hex比较即可。
    
    </summary>
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux常见命令(6)shell</title>
    <link href="http://yoursite.com/2018/05/25/Linux%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4(6)shell%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/05/25/Linux常见命令(6)shell基础/</id>
    <published>2018-05-25T07:02:11.000Z</published>
    <updated>2018-06-21T08:48:51.563Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-shell概述"><a href="#1-shell概述" class="headerlink" title="1 shell概述"></a>1 shell概述</h1><ul><li>特点：<ul><li>1：解释型编程语言</li><li>2：可以直接调用系统命令<a id="more"></a></li></ul></li><li><p>类型：</p><ul><li>1：bshell：sh,Bash,等。Bash作为主流shell</li><li>2：cshell：cshell，tcshell</li></ul></li><li><p>/etc/shells可以看系统支持的shell类型<br>  <img src="https://i.imgur.com/1lj2vYb.png" alt=""></p></li><li><p>输入shell类型就可以编写shell。<br>  <img src="https://i.imgur.com/cGBda5s.png" alt=""></p></li></ul><h1 id="2-shell执行方式"><a href="#2-shell执行方式" class="headerlink" title="2 shell执行方式"></a>2 shell执行方式</h1><ul><li><p>echo [选项] [打印内容] ：打印输出</p><ul><li>-e:支持反斜线的转义字符。</li><li>打印内容有空格的话，需要加<strong>引号</strong>，如果含有！等特殊字符只能加<strong>单引号</strong></li><li>输出颜色：echo -e “\e[1;31m abcd \e[0”重点是：<strong>\e[1为开启颜色输出，\e[0为结束颜色输出</strong></li></ul></li><li><p>执行脚本的两种方法：</p><ul><li>1首先修改脚本权限chmod 755 xxx.sh,然后执行脚本./xxx.sh</li><li>2.bash xxx.sh<br><img src="https://i.imgur.com/ztVqwyN.png" alt=""></li></ul></li><li><p>windows-&gt;linux:使用dos2unix可以把11在windows下编写的shell移到linux造成的格式不匹配问题。</p></li></ul><h1 id="3-shell基本操作"><a href="#3-shell基本操作" class="headerlink" title="3 shell基本操作"></a>3 shell基本操作</h1><ul><li><p>history [参数]：显示历史命令</p><ul><li>-c：清空历史命令</li><li>-w：把缓存的历史命令写入文件</li><li>其配置文件是：/etc/profile</li></ul></li><li><p>alias 别名=”原命令”:设置别名</p><ul><li>alias：显示别名</li><li>优先级：1）路径 2）别名 3）bash命令 4)path环境变量定义的命令。</li><li>临时生效，如果需要永久生效，需要修改配置文件/root/.bashrc<br><img src="https://i.imgur.com/M39BZz1.png" alt=""></li></ul></li><li><p>unalias 别名：删除别名<br>  <img src="https://i.imgur.com/W4nNBW3.png" alt=""></p></li><li><p>快捷键<br>   <img src="https://i.imgur.com/5jIumqy.png" alt=""></p></li></ul><h1 id="4-重定向"><a href="#4-重定向" class="headerlink" title="4 重定向"></a>4 重定向</h1><h2 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h2><ul><li><blockquote><p> 标准输出到文件</p></blockquote></li><li><blockquote><blockquote><p>标准输出附加到文件</p></blockquote></blockquote></li><li>2&gt; 标准错误输出到文件</li><li>2&gt;&gt; 标准错误输出附加到文件</li><li>&amp;&gt; 同时把错误和正确输出覆盖保存到文件</li><li>&amp;&gt;&gt; 同时把错误和正确输出附加保存到文件</li><li><blockquote><p>success.txt 2&gt; error.txt</p></blockquote></li></ul><h1 id="5-多命令"><a href="#5-多命令" class="headerlink" title="5 多命令"></a>5 多命令</h1><ul><li>“；”分号：顺序执行</li><li>“&amp;&amp;”逻辑与：格式：命令1&amp;&amp;命令2：如果命令1执行成功，则执行命令2；如果命令1执行失败，则不执行命令2</li><li>“||”逻辑或：格式：命令1||命令2：如果命令1执行成功，则不执行命令2；如果命令1执行失败，则执行命令2</li><li>“|“管道符：命令1|命令2：命令1的执行结果作为命令2的输入。</li><li>实例：判断一个命令是否正确？<ul><li>命令 &amp;&amp; yes || no<br> <img src="https://i.imgur.com/YhVRnHH.png" alt=""></li></ul></li></ul><h1 id="6-输入重定向"><a href="#6-输入重定向" class="headerlink" title="6 输入重定向"></a>6 输入重定向</h1><ul><li><p>wc [选项] [文件]</p><ul><li>-d：字符数（统计回车符）</li><li>-w：单词数</li><li>-l：行数</li></ul></li><li><p>命令 &lt; 文件：将文件内容作为命令的输入</p></li><li>命令 &lt; 字符：两个相同字符之间。(说不清，你自己看例子吧)<br>  <img src="https://i.imgur.com/uWtGiE1.png" alt=""></li></ul><h1 id="7-通配符和其他特殊符号"><a href="#7-通配符和其他特殊符号" class="headerlink" title="7 通配符和其他特殊符号"></a>7 通配符和其他特殊符号</h1><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><ul><li>具体常见通配符如下：<br>  <img src="https://i.imgur.com/Fu1ldUl.png" alt=""></li></ul><h2 id="其他特殊符号"><a href="#其他特殊符号" class="headerlink" title="其他特殊符号"></a>其他特殊符号</h2><ul><li>‘’(单引号)：单引号里面所有的特殊字符都没有特殊含义，只是一个符号</li><li>“”(双引号)：双引号内部”$”，”`”(反引)，”\”（转移）以外，其他的特殊符号都不具备特殊含义</li><li>``(反引号)：优先执行系统命令，也就是反引号里面的命令<br>  <img src="https://i.imgur.com/5xPUfsZ.png" alt=""></li><li>$():同反引号</li><li>#：不是第一行，表示注释的意思，#! /bin/bash</li><li>$：用于调用变量</li><li>\：转义符，跟在\之后的特殊符号将失去特殊含义。变成普通符号。多层命令调用也是用<br>  <img src="https://i.imgur.com/XjS2dPS.png" alt=""></li></ul><h1 id="8-用户自定义变量"><a href="#8-用户自定义变量" class="headerlink" title="8 用户自定义变量"></a>8 用户自定义变量</h1><h2 id="bash的变量类型"><a href="#bash的变量类型" class="headerlink" title="bash的变量类型"></a>bash的变量类型</h2><ul><li>用户自定义的变量</li><li>环境变量</li><li>位置参数变量</li><li>预定义变量</li></ul><h2 id="用户自定义变量"><a href="#用户自定义变量" class="headerlink" title="用户自定义变量"></a>用户自定义变量</h2><ul><li>默认变量变量类型是字符串型。</li><li>利用引号把含有空格的值括起来。<ul><li>EX：name=”wang xing yu”<br><img src="https://i.imgur.com/6gDUSWi.png" alt=""></li></ul></li><li>变量值可以叠加，但是变量需要使”$“或者”${}“包含。<ul><li>EX:a=123,a=”$a”456,echo $a :值为123456<br><img src="https://i.imgur.com/jJXVBho.png" alt=""></li><li>EX:a=123,a=￥{a}456,echo $a :值为123456<br><img src="https://i.imgur.com/U4z2KVE.png" alt=""></li></ul></li><li>可以把命令的结果作为变量值赋给变量，则需要使用反引号或者”$()“包含命令</li><li>set命令：查看系统所有变量</li><li>unset name：删除变量</li></ul><h1 id="9-环境变量"><a href="#9-环境变量" class="headerlink" title="9 环境变量"></a>9 环境变量</h1><h2 id="环境变量概述"><a href="#环境变量概述" class="headerlink" title="环境变量概述"></a>环境变量概述</h2><ul><li>环境变量在当前shell以及其子shell中生效。如果修改配置文件，可以在所有shell中生效</li><li>这种变量中保存的是和操作系统环境相关的数据</li><li>名称不能修改，但是可以写值</li><li>可以添加新的环境变量</li></ul><h2 id="环境变量使用"><a href="#环境变量使用" class="headerlink" title="环境变量使用"></a>环境变量使用</h2><ul><li>export 变量名=变量值：设置新的环境变量<br>  <img src="https://i.imgur.com/pF5xAQr.png" alt=""></li><li>env：查看环境变量<br>  <img src="https://i.imgur.com/llDA7LP.png" alt=""></li><li>unset 变量名：删除环境变量<br>  <img src="https://i.imgur.com/UW15Dj8.png" alt=""></li></ul><h1 id="10-位置参数变量"><a href="#10-位置参数变量" class="headerlink" title="10 位置参数变量"></a>10 位置参数变量</h1><h2 id="位置参数变量概述"><a href="#位置参数变量概述" class="headerlink" title="位置参数变量概述"></a>位置参数变量概述</h2><ul><li>用于向脚本当中传递参数或者数据</li><li>变量名称不能自定义，变量作用固定</li><li>名称不能修改，但是可以写值</li></ul><h2 id="位置参数变量使用"><a href="#位置参数变量使用" class="headerlink" title="位置参数变量使用"></a>位置参数变量使用</h2><ul><li>$n(n为数字)表示运行时参数<ul><li>0：代表shell名称</li><li>1-9：代表1-9个运行参数</li><li>10个以上的参数要用括号括起来：${10}<br><img src="https://i.imgur.com/VvUbhq6.png" alt=""><br><img src="https://i.imgur.com/labnt9w.png" alt=""><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> $((<span class="variable">$1</span>+<span class="variable">$2</span>))</div></pre></td></tr></table></figure></li></ul></li></ul><h1 id="11-预定义变量"><a href="#11-预定义变量" class="headerlink" title="11 预定义变量"></a>11 预定义变量</h1><h2 id="预定义变量概述"><a href="#预定义变量概述" class="headerlink" title="预定义变量概述"></a>预定义变量概述</h2><ul><li>bash已经定义好了</li><li>和位置参数变量作用功能一样</li></ul><h2 id="预定义变量使用"><a href="#预定义变量使用" class="headerlink" title="预定义变量使用"></a>预定义变量使用</h2><ul><li>$*:把所有参数看做整体输出</li><li>$@:将所有参数分开输出</li><li>$#：返回参数的个数</li><li>$?:返回上一条指令是否成功<ul><li>成功：0</li><li>失败：错误代码</li></ul></li><li>$$:返回当前进程PID</li><li>$!:发挥后台进程PID(命令+&amp;：表示命令进入后台运行)</li><li>read命令：读取用户键盘输入<ul><li>-p:显示提示信息</li><li>-t：输入等待时间(秒)</li><li>-n：允许输入字符数，输入n个字符自动执行(不需要回车)</li><li>-s：隐藏输入<br><img src="https://i.imgur.com/IBRplfX.png" alt=""></li></ul></li></ul><h1 id="12-数值运算和运算符"><a href="#12-数值运算和运算符" class="headerlink" title="12 数值运算和运算符"></a>12 数值运算和运算符</h1><h2 id="数值运算"><a href="#数值运算" class="headerlink" title="数值运算"></a>数值运算</h2><h3 id="第1种方法：-或者"><a href="#第1种方法：-或者" class="headerlink" title="第1种方法：$(())或者$[ ]"></a>第1种方法：$(())或者$[ ]</h3><ul><li>$(( $a+$b ))</li><li>$[$a+$b]<br>  <img src="https://i.imgur.com/pIySbcK.png" alt=""></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-shell概述&quot;&gt;&lt;a href=&quot;#1-shell概述&quot; class=&quot;headerlink&quot; title=&quot;1 shell概述&quot;&gt;&lt;/a&gt;1 shell概述&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;特点：&lt;ul&gt;
&lt;li&gt;1：解释型编程语言&lt;/li&gt;
&lt;li&gt;2：可以直接调用系统命令
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>动态规划--编辑距离问题</title>
    <link href="http://yoursite.com/2018/05/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92_%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB/"/>
    <id>http://yoursite.com/2018/05/24/动态规划_编辑距离/</id>
    <published>2018-05-24T06:02:11.000Z</published>
    <updated>2018-05-24T11:42:21.509Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动态规划算法思想"><a href="#动态规划算法思想" class="headerlink" title="动态规划算法思想"></a>动态规划算法思想</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;问题的决策过程都是之前所有子问题的结合，也就是说每一步求解得问题都是后面阶段求解问题的子问题，每一步决策都将依赖于前面决策的结果。<br><a id="more"></a></p><h2 id="编辑路径问题"><a href="#编辑路径问题" class="headerlink" title="编辑路径问题"></a>编辑路径问题</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所谓编辑距离问题，是指一个字符串转化为另一个字符串最少的编辑次数，许可的编辑操作包括将一个字符替换成另一个字符，插入一个字符，删除一个字符。一般来说，编辑距离越小，两个串的相似度越大。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们先用BCD和ACDF举例子，我们利用二维数组来存储编辑字符串所需要的最短的步数，如图，我们先初始化这个二维数组，如图所示：<br>    <img src="https://i.imgur.com/GSJa6Bj.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;已知，看行坐标，第一个字符是A，再看列坐标，第一个字符是B，两个不相等，我们记做1，表示从A–&gt;B,最小需要一步操作(修改)。如图所示：<br>    <img src="https://i.imgur.com/KszA78b.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后A—&gt;BC，<strong>需要在上一步的基础上，</strong>加一个C，才能使得A—&gt;BC，这充分体现了动态规划的基本原则。然后A—&gt;BCD是同样的道理。<br>    <img src="https://i.imgur.com/oSg3Hy9.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接着是AC–&gt;B,AC–&gt;BC,AC–&gt;BCD,分别要求的最短路径是2.1.2<br>    <img src="https://i.imgur.com/6julLh7.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;同理：补全该图：红色区域是由之前的ACD—&gt;BCD的结果获得而来，因为ACD–&gt;BCD只需要1步，而ACDF—&gt;BCD只需要在去掉F即可。也就是在加一步。<br>      <img src="https://i.imgur.com/CQcUHwy.png" alt=""></p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个是问题的主要代码，首先初始化整个二维数组，然后再次遍历，找个里面三个操作（插入，删除，修改）里面的最好情况。AC–&gt;B,首先需要将A–&gt;B,然后需要删除C。我们可以得到公式：d[2] [1] =d[1] [1]+1，这里加1，是指在前一步的基础上<strong>再加一步</strong>删除。递推出来就是：d[i] [j] =d[i-1] [j]+1,同理插入：c = d[i] [j -1] + 1,如果是修改就看他是否相等了，相等不需要修改，不相等需要加1<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">CalcEditDistance</span><span class="params">(<span class="keyword">char</span> *StrA, <span class="keyword">char</span> *StrB, <span class="keyword">int</span> **d)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i,j; </div><div class="line"><span class="keyword">int</span> a,b,c,e;</div><div class="line"><span class="keyword">int</span> len1 = <span class="built_in">strlen</span>(StrA);</div><div class="line"><span class="keyword">int</span> len2 = <span class="built_in">strlen</span>(StrB);</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>;i &lt;= len1;i++)   <span class="comment">//初始化二维数组 </span></div><div class="line">d[i] = <span class="keyword">new</span> <span class="keyword">int</span>[len2 + <span class="number">1</span>];  </div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>;i &lt;= len1;i++)   <span class="comment">//初始化第一个字符串的标号 </span></div><div class="line">d[i][<span class="number">0</span>] = i;</div><div class="line"><span class="keyword">for</span> (j = <span class="number">0</span>;j &lt;= len2;j++)   <span class="comment">//初始化第一个字符串的标号 </span></div><div class="line">d[<span class="number">0</span>][j] = j;</div><div class="line"><span class="keyword">for</span> (i = <span class="number">1</span>;i &lt;= len1;i++)   <span class="comment">//循环确定每个规划中三种方法中的最优解。 </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span> (j = <span class="number">1</span>;j &lt;= len2;j++)</div><div class="line">&#123;</div><div class="line">a = StrA[i<span class="number">-1</span>] == StrB[j<span class="number">-1</span>] ? <span class="number">0</span> : <span class="number">1</span>;  <span class="comment">//如果两个字符串相等就是为0 </span></div><div class="line">b = d[i - <span class="number">1</span>][j] + <span class="number">1</span>; <span class="comment">//删除 </span></div><div class="line">c = d[i][j - <span class="number">1</span>] + <span class="number">1</span>; <span class="comment">// 插入 </span></div><div class="line">e = d[i - <span class="number">1</span>][j - <span class="number">1</span>] + a;<span class="comment">//修改 </span></div><div class="line">d[i][j] = FindTripleMin(b, c, e);  <span class="comment">//寻找b，c，e里面的最小值 </span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 返回编辑距离值 ...</span></div><div class="line"><span class="keyword">return</span> d[<span class="built_in">strlen</span>(StrA)][<span class="built_in">strlen</span>(StrB)];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后经过上面三个操作，<strong>注意：这三种操作不直接写入二维数组，</strong>需要一个找到他们直接值最小的，然后把最小的写入数组。这样保证了每次的编辑距离都是最小的。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> FindTripleMin(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)   <span class="comment">//为了保证每次操作次数都是三种情况中间最少的 </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> t = (a &lt; b) ? a : b;</div><div class="line"><span class="keyword">return</span> ((t &lt; c) ? t : c);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;动态规划算法思想&quot;&gt;&lt;a href=&quot;#动态规划算法思想&quot; class=&quot;headerlink&quot; title=&quot;动态规划算法思想&quot;&gt;&lt;/a&gt;动态规划算法思想&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;问题的决策过程都是之前所有子问题的结合，也就是说每一步求解得问题都是后面阶段求解问题的子问题，每一步决策都将依赖于前面决策的结果。&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>XCTF嘉年华资格赛</title>
    <link href="http://yoursite.com/2018/05/22/XCTF%E5%98%89%E5%B9%B4%E5%8D%8E%E6%AF%94%E8%B5%9B%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2018/05/22/XCTF嘉年华比赛试题/</id>
    <published>2018-05-21T16:02:11.000Z</published>
    <updated>2018-05-21T17:33:34.054Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>花了两天时间好好把XCTF嘉年华的比赛试题之逆向题好好做了一下，结合前几天练习的Re题来看，windows里面涉及到的加密函数非常的多，外部有时候也会加入常见壳，但是在比赛中不常出现，基本语言为VC，但是里面会出现多种反调试，加密算法应用广泛。但是linux下面的题目很少出现反调试，和加密函数，也没有向windows一样多种逆向技术结合，相对比较容易，下面讲解一下XCTF嘉年华的比赛逆向题(可能也有杂项题)</strong><br><a id="more"></a></p><h2 id="Re1"><a href="#Re1" class="headerlink" title="Re1"></a>Re1</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;发现这是一个elf的linux题目，直接利用IDA分析。可以知道：首先输入，然后通过atoi()将输入的字符串转化成int类型，**值得注意的是atoi函数只是转化“数字“和”±”,然后过判断，这里过判断非常简单，首先字符串长度为4，然后计算其十位百位和个位，基本的流程已经写好了。<br>    <img src="https://i.imgur.com/VJXdnXd.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下面是注册机的编写。值得注意的是这个里面可能会产生异常造成程序奔溃，可以选择排除逼近的方法排除这些数据，最终的数据是：9563<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">int main(void)</div><div class="line">&#123;</div><div class="line">int v5=<span class="number">0</span>,v6=<span class="number">0</span>;</div><div class="line">for(v5=<span class="number">1000</span>;v5&lt;=<span class="number">9999</span>;v5++)</div><div class="line">&#123;</div><div class="line">v6 = v5 % <span class="number">100</span> / <span class="number">10</span>;</div><div class="line">if(v5 % <span class="number">10</span> + v6 + v5 / <span class="number">1000</span> + v5 % <span class="number">1000</span> / <span class="number">100</span> != <span class="number">23</span></div><div class="line">   ||v6 / (v5 % <span class="number">10</span>) != <span class="number">2</span></div><div class="line">   ||v5 % <span class="number">1000</span> / <span class="number">100</span> - v6 != <span class="number">-1</span></div><div class="line">   ||v5 / <span class="number">1000</span> % v6 != <span class="number">3</span>)</div><div class="line">   continue;</div><div class="line">        else</div><div class="line">   printf(<span class="string">"%d<span class="subst">\n</span>"</span>,v5);</div><div class="line">&#125;</div><div class="line">return <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><pre><code>![](https://i.imgur.com/yaxHIkU.png)</code></pre><h2 id="Re2"><a href="#Re2" class="headerlink" title="Re2"></a>Re2</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这是一个比较麻烦的题目，乍一看，里面对于用户名和密码的加密很多，也很麻烦，我看了一下关于SuccessFun函数内部，发现这个函数直接输出flag，同时flag也没有和用户名或者密码有关，但是，里面有一个s数组处于未知状态，不能通过静态计算得出flag，然后我想是否可以把前面对于用户名和密码的求解函数dop掉，这样掉过程序的验证阶段，直接显示flag，但是我又错了。最后看了大佬的wp（<a href="http://blog.r4phael.cn/coding/xctf-carnival-wp），辛辛苦苦把这道题解决，从中也学会了很多东西。" target="_blank" rel="external">http://blog.r4phael.cn/coding/xctf-carnival-wp），辛辛苦苦把这道题解决，从中也学会了很多东西。</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先，我们可以看到sub_400C9A这个函数，函数从0到49循环，然后调用sub_400C41(i)，并以i为参数，这里产生和分析不符合的情况，可以是编译器优化造成的结果。<br>    <img src="https://i.imgur.com/11nQ75U.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后我们看看sub_400c41这个函数，通过思考，我们知道if条件的前面两个条件必定成立，后面两个式子成为if的关键，根据流程，我们可以知道字符长度为a1&gt;&gt;3不等于0，以及a1&gt;&gt;4==0.通过写注册机得知Username长度为8或者12<br>    <img src="https://i.imgur.com/c7DczlZ.png" alt=""><br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">int main(void)</div><div class="line">&#123;</div><div class="line">int <span class="built_in">a1</span>,result<span class="comment">;</span></div><div class="line">for(<span class="built_in">a1</span>=<span class="number">0</span><span class="comment">;a1&lt;49;a1++)</span></div><div class="line">&#123;</div><div class="line">result=<span class="built_in">a1</span>&gt;&gt;<span class="number">3</span><span class="comment">;</span></div><div class="line">if(<span class="number">4</span> * (<span class="built_in">a1</span> &gt;&gt; <span class="number">2</span>) != <span class="built_in">a1</span> <span class="title">||</span><span class="number">4</span> * (<span class="built_in">a1</span> &gt;&gt; <span class="number">4</span>) == <span class="built_in">a1</span> &gt;&gt; <span class="number">2</span><span class="title">||</span>!result <span class="title">||</span> <span class="built_in">a1</span> &gt;&gt; <span class="number">4</span>)</div><div class="line">continue<span class="comment">;</span></div><div class="line">else</div><div class="line">printf(<span class="string">"%d\n"</span>,<span class="built_in">a1</span>)<span class="comment">;</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接下来，我们看看GetUsernameVal函数，这个函数就是一个解三元一次方程组的函数，具体验证如下：<strong>首先</strong>，把函数分割Username，分成三份，分别是First，Second，Third，然后放到if里面去判断，难点在于如何去计算，考验心细的时候。<strong>接着</strong>，他把转化为hex16进制的字符，分别是First=6163，Second=796c，Third=636f，<strong>由于InterlCPU是小端序显示，也就是说如果实际传输为FEAB12的话，那么小端序显示为21BAEF。</strong>所以用户名是F636C6973616.小插曲，在计算除法的时候，数据太大了，网上计算器无法计算了，所以找一份大数除法代码。<br>    <img src="https://i.imgur.com/3NNqrgo.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbsp跟入ProUsernameVal函数，发现这是一个严重Username是否符合自定义原则的，函数将a1想做数组的基地址，i作为偏移地址，依次遍历判断Username的每位是否符合要求。应为之前正确求解了，这个函数不是很重要<br>    <img src="https://i.imgur.com/PSUY9c4.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbsp分析GetpasswdVal函数，<strong>函数先是</strong>验证了passwd的字符类型，如图passwd只能使大小写字母和数字，<strong>接着</strong>，函数用之前的Username做种子，产生为随机值，因为是以固定值做种子，所以产生的随机数也是固定的。然后将Passwd分为10份，分别通过十次和随机数的验证，每个验证过程都是一样的，我们写出前十次产生的随机数，然后带入计算得到Passwd。<br>    <img src="https://i.imgur.com/tPpXIDT.png" alt=""><br>    <img src="https://i.imgur.com/w9hj1a6.png" alt=""><br>    <img src="https://i.imgur.com/tX8QjyA.png" alt=""><br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> main()&#123;</div><div class="line"><span class="keyword">srand</span>(<span class="number">0x454D3E2E</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">printf</span>(<span class="string">"%0x\n"</span>,<span class="keyword">rand</span>());</div><div class="line">&#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbsp执行程序，输入Username和Passwd，经过等待得到flag，你也可以nop掉sleep函数，避免等待。得到flag是：<br>     <img src="https://i.imgur.com/TLQnlcK.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;花了两天时间好好把XCTF嘉年华的比赛试题之逆向题好好做了一下，结合前几天练习的Re题来看，windows里面涉及到的加密函数非常的多，外部有时候也会加入常见壳，但是在比赛中不常出现，基本语言为VC，但是里面会出现多种反调试，加密算法应用广泛。但是linux下面的题目很少出现反调试，和加密函数，也没有向windows一样多种逆向技术结合，相对比较容易，下面讲解一下XCTF嘉年华的比赛逆向题(可能也有杂项题)&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux常见命令(5)权限管理</title>
    <link href="http://yoursite.com/2018/05/20/Linux%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4(5)%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2018/05/20/Linux常见命令(5)权限管理/</id>
    <published>2018-05-20T07:02:11.000Z</published>
    <updated>2018-05-24T07:29:59.271Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一部分-ACL权限"><a href="#第一部分-ACL权限" class="headerlink" title="第一部分 ACL权限"></a>第一部分 ACL权限</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;忽略所有者，所有组，其他人三个用户类型，只需要把用户对文件的权限分配给用户。ACL权限需要文件所在分区是否支持ACL机制。利用<strong>dumpe2fs -h /dev/sda3</strong>这个命令即可查看。<br><a id="more"></a></p><ul><li>第一步：df -h :查看所有分区信息</li><li>第二歩：dumpe2fs -h /dev/xxx<br>  <img src="https://i.imgur.com/xXz86iD.png" alt=""></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;开启ACL</p><ul><li>临时开启ACL权限。mount -o remount,acl /<br>  <img src="https://i.imgur.com/cMxGQ1O.png" alt=""></li><li>永久开启ACL权限：修改/etc/fstab文件，然后重启<br>   <img src="https://i.imgur.com/UrVW9GN.png" alt=""></li></ul><h1 id="第二部分-ACL权限管理"><a href="#第二部分-ACL权限管理" class="headerlink" title="第二部分 ACL权限管理"></a>第二部分 ACL权限管理</h1><ul><li><p>getfacl [文件名]：获取文件ACL权限<br>  <img src="https://i.imgur.com/X11rr4S.png" alt=""></p></li><li><p>setfacl [选项] [u/g:username:权限] [文件名]：给用户/组设定ACL权限。</p><ul><li>-m:添加ACL权限</li><li>-x:删除指定给的ACL权限</li><li>-b：删除所有的ACL权限</li><li>-d：设置默认的ACL权限</li><li>-k：删除默认的ACL权限</li><li>-R：递归设定ACL权限</li></ul></li></ul><ul><li>实例：添加一个文件ACL权限<ul><li>首先创建3个用户test1,test2，st和一个组tgroup。<br><img src="https://i.imgur.com/CkqerBj.png" alt=""></li><li>将两个用户添加到tgroud组中。<br><img src="https://i.imgur.com/AsTl3ai.png" alt=""></li><li>修改文件的所有者和所属组<br><img src="https://i.imgur.com/WIXJEvL.png" alt=""></li><li>修改权限<br><img src="https://i.imgur.com/ia4oSEW.png" alt=""></li><li>设置ACL权限：setfacl -m u:st:rx /tmp/test<br><img src="https://i.imgur.com/Gl9v46W.png" alt=""><br><img src="https://i.imgur.com/5pT77Td.png" alt=""></li><li>通过getfacl命令查看ACL权限<br><img src="https://i.imgur.com/X11rr4S.png" alt=""></li></ul></li></ul><h1 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h1><h1 id="第四部分"><a href="#第四部分" class="headerlink" title="第四部分"></a>第四部分</h1><h1 id="第五部分-sudo权限"><a href="#第五部分-sudo权限" class="headerlink" title="第五部分 sudo权限"></a>第五部分 sudo权限</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visduo命令通过修改/etc/sudoers文件，对用户进行赋权操作。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以看到以下字段：%admin ALL=(ALL) ALL，其中admin代表的是用户名，第一个all代表的是本地linux的地址，第二个ALL是代表可使用的身份，<strong>这个字段可写，可不写，</strong>第三个ALL是授权命令（绝对地址），命令写的短，则使用范围越长，如：shutdown 表示可以执行shutdown所有的命令。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用sudo -l 查看超级用户给我赋予了的命令情况。<br>    <img src="https://i.imgur.com/MQ73Vwj.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是其他用户在执行的时候，必须要写绝对路径。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一部分-ACL权限&quot;&gt;&lt;a href=&quot;#第一部分-ACL权限&quot; class=&quot;headerlink&quot; title=&quot;第一部分 ACL权限&quot;&gt;&lt;/a&gt;第一部分 ACL权限&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;忽略所有者，所有组，其他人三个用户类型，只需要把用户对文件的权限分配给用户。ACL权限需要文件所在分区是否支持ACL机制。利用&lt;strong&gt;dumpe2fs -h /dev/sda3&lt;/strong&gt;这个命令即可查看。&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
  </entry>
  
</feed>
